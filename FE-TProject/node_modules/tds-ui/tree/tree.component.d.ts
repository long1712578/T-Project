import { Direction, Directionality } from '@angular/cdk/bidi';
import { BooleanInput } from '@angular/cdk/coercion';
import { CdkVirtualScrollViewport } from '@angular/cdk/scrolling';
import { AfterViewInit, ChangeDetectorRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChange, TemplateRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { Observable } from 'rxjs';
import { TDSConfigKey, TDSConfigService } from 'tds-ui/core/config';
import { TDSNoAnimationDirective } from 'tds-ui/core/no-animation';
import { TDSFormatBeforeDropEvent, TDSFormatEmitEvent, TDSTreeBase, TDSTreeBaseService, TDSTreeNode, TDSTreeNodeKey, TDSTreeNodeOptions } from 'tds-ui/core/tree';
import { TDSSafeAny } from 'tds-ui/shared/utility';
import { TDSTreeService } from './tree.service';
import * as i0 from "@angular/core";
export declare function TDSTreeServiceFactory(higherOrderService: TDSTreeBaseService, treeService: TDSTreeService): TDSTreeBaseService;
export declare class TDSTreeComponent extends TDSTreeBase implements OnInit, OnDestroy, ControlValueAccessor, OnChanges, AfterViewInit {
    tdsConfigService: TDSConfigService;
    private cdr;
    private directionality;
    noAnimation?: TDSNoAnimationDirective | undefined;
    readonly _tdsModuleName: TDSConfigKey;
    static ngAcceptInputType_showIcon: BooleanInput;
    static ngAcceptInputType_hideUnMatched: BooleanInput;
    static ngAcceptInputType_blockNode: BooleanInput;
    static ngAcceptInputType_expandAll: BooleanInput;
    static ngAcceptInputType_selectMode: BooleanInput;
    static ngAcceptInputType_checkStrictly: BooleanInput;
    static ngAcceptInputType_showExpand: BooleanInput;
    static ngAcceptInputType_showLine: BooleanInput;
    static ngAcceptInputType_checkable: BooleanInput;
    static ngAcceptInputType_asyncData: BooleanInput;
    static ngAcceptInputType_draggable: BooleanInput;
    static ngAcceptInputType_multiple: BooleanInput;
    showIcon: boolean;
    hideUnMatched: boolean;
    blockNode: boolean;
    expandAll: boolean;
    selectMode: boolean;
    checkStrictly: boolean;
    showExpand: boolean;
    showLine: boolean;
    checkable: boolean;
    asyncData: boolean;
    draggable: boolean;
    multiple: boolean;
    expandedIcon?: TemplateRef<{
        $implicit: TDSTreeNode;
        origin: TDSTreeNodeOptions;
    }>;
    virtualItemSize: number;
    virtualMaxBufferPx: number;
    virtualMinBufferPx: number;
    virtualHeight: string | null;
    treeTemplate?: TemplateRef<{
        $implicit: TDSTreeNode;
        origin: TDSTreeNodeOptions;
    }>;
    beforeDrop?: (confirm: TDSFormatBeforeDropEvent) => Observable<boolean>;
    data: TDSTreeNodeOptions[] | TDSTreeNode[];
    expandedKeys: TDSTreeNodeKey[];
    selectedKeys: TDSTreeNodeKey[];
    checkedKeys: TDSTreeNodeKey[];
    searchValue: string;
    searchFunc?: (node: TDSTreeNodeOptions) => boolean;
    tdsTreeTemplateChild: TemplateRef<{
        $implicit: TDSTreeNode;
        origin: TDSTreeNodeOptions;
    }>;
    cdkVirtualScrollViewport: CdkVirtualScrollViewport;
    flattenNodes: TDSTreeNode[];
    beforeInit: boolean;
    dir: Direction;
    readonly onExpandedKeysChange: EventEmitter<string[]>;
    readonly onSelectedKeysChange: EventEmitter<string[]>;
    readonly onCheckedKeysChange: EventEmitter<string[]>;
    readonly onSearchValueChange: EventEmitter<TDSFormatEmitEvent>;
    readonly onClick: EventEmitter<TDSFormatEmitEvent>;
    readonly onDblClick: EventEmitter<TDSFormatEmitEvent>;
    readonly onContextMenu: EventEmitter<TDSFormatEmitEvent>;
    readonly onCheckBoxChange: EventEmitter<TDSFormatEmitEvent>;
    readonly onExpandChange: EventEmitter<TDSFormatEmitEvent>;
    readonly onDragStart: EventEmitter<TDSFormatEmitEvent>;
    readonly onDragEnter: EventEmitter<TDSFormatEmitEvent>;
    readonly onDragOver: EventEmitter<TDSFormatEmitEvent>;
    readonly onDragLeave: EventEmitter<TDSFormatEmitEvent>;
    readonly onDrop: EventEmitter<TDSFormatEmitEvent>;
    readonly onDragEnd: EventEmitter<TDSFormatEmitEvent>;
    HIDDEN_STYLE: {
        width: number;
        height: number;
        display: string;
        overflow: string;
        opacity: number;
        border: number;
        padding: number;
        margin: number;
    };
    private destroy$;
    onChange: (value: TDSTreeNode[]) => void;
    onTouched: () => void;
    writeValue(value: TDSTreeNode[]): void;
    registerOnChange(fn: (_: TDSTreeNode[]) => void): void;
    registerOnTouched(fn: () => void): void;
    /**
     * Render all properties of nzTree
     *
     * @param changes: all changes from @Input
     */
    renderTreeProperties(changes: {
        [propertyName: string]: SimpleChange;
    }): void;
    trackByFlattenNode(_: number, node: TDSTreeNode): string;
    /**
     * data
     *
     * @param value
     */
    handleNzData(value: TDSSafeAny[]): void;
    handleFlattenNodes(data: TDSTreeNode[], expandKeys?: TDSTreeNodeKey[] | true): void;
    handleCheckedKeys(keys: TDSTreeNodeKey[] | null): void;
    handleExpandedKeys(keys?: TDSTreeNodeKey[] | true): void;
    handleSelectedKeys(keys: TDSTreeNodeKey[], isMulti: boolean): void;
    handleSearchValue(value: string, searchFunc?: (node: TDSTreeNodeOptions) => boolean): void;
    /**
     * Handle emit event
     *
     * @param event
     * handle each event
     */
    eventTriggerChanged(event: TDSFormatEmitEvent): void;
    /**
     * Click expand icon
     */
    renderTree(): void;
    constructor(tdsTreeService: TDSTreeBaseService, tdsConfigService: TDSConfigService, cdr: ChangeDetectorRef, directionality: Directionality, noAnimation?: TDSNoAnimationDirective | undefined);
    ngOnInit(): void;
    ngOnChanges(changes: {
        [propertyName: string]: SimpleChange;
    }): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<TDSTreeComponent, [null, null, null, { optional: true; }, { optional: true; host: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TDSTreeComponent, "tds-tree", ["tdsTree"], { "showIcon": "showIcon"; "hideUnMatched": "hideUnMatched"; "blockNode": "blockNode"; "expandAll": "expandAll"; "selectMode": "selectMode"; "checkStrictly": "checkStrictly"; "showExpand": "showExpand"; "showLine": "showLine"; "checkable": "checkable"; "asyncData": "asyncData"; "draggable": "draggable"; "multiple": "multiple"; "expandedIcon": "expandedIcon"; "virtualItemSize": "virtualItemSize"; "virtualMaxBufferPx": "virtualMaxBufferPx"; "virtualMinBufferPx": "virtualMinBufferPx"; "virtualHeight": "virtualHeight"; "treeTemplate": "treeTemplate"; "beforeDrop": "beforeDrop"; "data": "data"; "expandedKeys": "expandedKeys"; "selectedKeys": "selectedKeys"; "checkedKeys": "checkedKeys"; "searchValue": "searchValue"; "searchFunc": "searchFunc"; }, { "onExpandedKeysChange": "onExpandedKeysChange"; "onSelectedKeysChange": "onSelectedKeysChange"; "onCheckedKeysChange": "onCheckedKeysChange"; "onSearchValueChange": "onSearchValueChange"; "onClick": "onClick"; "onDblClick": "onDblClick"; "onContextMenu": "onContextMenu"; "onCheckBoxChange": "onCheckBoxChange"; "onExpandChange": "onExpandChange"; "onDragStart": "onDragStart"; "onDragEnter": "onDragEnter"; "onDragOver": "onDragOver"; "onDragLeave": "onDragLeave"; "onDrop": "onDrop"; "onDragEnd": "onDragEnd"; }, ["tdsTreeTemplateChild"], never>;
}
//# sourceMappingURL=tree.component.d.ts.map