import { BooleanInput } from '@angular/cdk/coercion';
import { ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy, OnInit, Renderer2, SimpleChange, TemplateRef } from '@angular/core';
import { Observable, Subject } from 'rxjs';
import { TDSNoAnimationDirective } from 'tds-ui/core/no-animation';
import { TDSFormatBeforeDropEvent, TDSFormatEmitEvent, TDSTreeBaseService, TDSTreeNode, TDSTreeNodeOptions } from 'tds-ui/core/tree';
import * as i0 from "@angular/core";
export declare class TDSTreeNodeBuiltinComponent implements OnInit, OnChanges, OnDestroy {
    tdsTreeService: TDSTreeBaseService;
    private ngZone;
    private renderer;
    private elementRef;
    private cdr;
    tdsnoAnimation?: TDSNoAnimationDirective | undefined;
    static ngAcceptInputType_showLine: BooleanInput;
    static ngAcceptInputType_showExpand: BooleanInput;
    static ngAcceptInputType_checkable: BooleanInput;
    static ngAcceptInputType_asyncData: BooleanInput;
    static ngAcceptInputType_hideUnMatched: BooleanInput;
    static ngAcceptInputType_noAnimation: BooleanInput;
    static ngAcceptInputType_selectMode: BooleanInput;
    static ngAcceptInputType_showIcon: BooleanInput;
    /**
     * for global property
     */
    icon: string;
    title: string;
    isLoading: boolean;
    isSelected: boolean;
    isDisabled: boolean;
    isMatched: boolean;
    isExpanded: boolean;
    isLeaf: boolean;
    isChecked?: boolean;
    isHalfChecked?: boolean;
    isDisableCheckbox?: boolean;
    isSelectable?: boolean;
    canHide?: boolean;
    isStart: boolean[];
    isEnd: boolean[];
    treeNode: TDSTreeNode;
    showLine?: boolean;
    showExpand?: boolean;
    checkable?: boolean;
    asyncData?: boolean;
    hideUnMatched: boolean;
    noAnimation: boolean;
    selectMode: boolean;
    showIcon: boolean;
    expandedIcon?: TemplateRef<{
        $implicit: TDSTreeNode;
        origin: TDSTreeNodeOptions;
    }>;
    treeTemplate: TemplateRef<{
        $implicit: TDSTreeNode;
        origin: TDSTreeNodeOptions;
    }> | null;
    beforeDrop?: (confirm: TDSFormatBeforeDropEvent) => Observable<boolean>;
    searchValue: string;
    draggable: boolean;
    readonly onClick: EventEmitter<TDSFormatEmitEvent>;
    readonly onDblClick: EventEmitter<TDSFormatEmitEvent>;
    readonly onContextMenu: EventEmitter<TDSFormatEmitEvent>;
    readonly onCheckBoxChange: EventEmitter<TDSFormatEmitEvent>;
    readonly onExpandChange: EventEmitter<TDSFormatEmitEvent>;
    readonly onDragStart: EventEmitter<TDSFormatEmitEvent>;
    readonly onDragEnter: EventEmitter<TDSFormatEmitEvent>;
    readonly onDragOver: EventEmitter<TDSFormatEmitEvent>;
    readonly onDragLeave: EventEmitter<TDSFormatEmitEvent>;
    readonly onDrop: EventEmitter<TDSFormatEmitEvent>;
    readonly tdsOnDragEnd: EventEmitter<TDSFormatEmitEvent>;
    /**
     * drag var
     */
    destroy$: Subject<void>;
    dragPos: number;
    dragPosClass: {
        [key: string]: string;
    };
    showIndicator: boolean;
    /**
     * default set
     */
    get displayStyle(): string;
    get isSwitcherOpen(): boolean;
    get isSwitcherClose(): boolean;
    onMousedown(event: MouseEvent): void;
    /**
     * collapse node
     *
     * @param event
     */
    clickExpand(event: MouseEvent): void;
    clickSelect(event: MouseEvent): void;
    dblClick(event: MouseEvent): void;
    contextMenu(event: MouseEvent): void;
    /**
     * check node
     *
     * @param event
     */
    clickCheckBox(event: MouseEvent): void;
    clearDragClass(): void;
    /**
     * drag event
     *
     * @param e
     */
    handleDragStart(e: DragEvent): void;
    handleDragEnter(e: DragEvent): void;
    handleDragOver(e: DragEvent): void;
    handleDragLeave(e: DragEvent): void;
    handleDragDrop(e: DragEvent): void;
    handleDragEnd(e: DragEvent): void;
    /**
     * Listening to dragging events.
     */
    handDragEvent(): void;
    markForCheck(): void;
    constructor(tdsTreeService: TDSTreeBaseService, ngZone: NgZone, renderer: Renderer2, elementRef: ElementRef, cdr: ChangeDetectorRef, tdsnoAnimation?: TDSNoAnimationDirective | undefined);
    ngOnInit(): void;
    ngOnChanges(changes: {
        [propertyName: string]: SimpleChange;
    }): void;
    ngOnDestroy(): void;
    private renderIndicator;
    static ɵfac: i0.ɵɵFactoryDeclaration<TDSTreeNodeBuiltinComponent, [null, null, null, null, null, { optional: true; host: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TDSTreeNodeBuiltinComponent, "tds-tree-node[builtin]", ["tdsTreeBuiltinNode"], { "icon": "icon"; "title": "title"; "isLoading": "isLoading"; "isSelected": "isSelected"; "isDisabled": "isDisabled"; "isMatched": "isMatched"; "isExpanded": "isExpanded"; "isLeaf": "isLeaf"; "isChecked": "isChecked"; "isHalfChecked": "isHalfChecked"; "isDisableCheckbox": "isDisableCheckbox"; "isSelectable": "isSelectable"; "canHide": "canHide"; "isStart": "isStart"; "isEnd": "isEnd"; "treeNode": "treeNode"; "showLine": "showLine"; "showExpand": "showExpand"; "checkable": "checkable"; "asyncData": "asyncData"; "hideUnMatched": "hideUnMatched"; "noAnimation": "noAnimation"; "selectMode": "selectMode"; "showIcon": "showIcon"; "expandedIcon": "expandedIcon"; "treeTemplate": "treeTemplate"; "beforeDrop": "beforeDrop"; "searchValue": "searchValue"; "draggable": "draggable"; }, { "onClick": "onClick"; "onDblClick": "onDblClick"; "onContextMenu": "onContextMenu"; "onCheckBoxChange": "onCheckBoxChange"; "onExpandChange": "onExpandChange"; "onDragStart": "onDragStart"; "onDragEnter": "onDragEnter"; "onDragOver": "onDragOver"; "onDragLeave": "onDragLeave"; "onDrop": "onDrop"; "tdsOnDragEnd": "tdsOnDragEnd"; }, never, never>;
}
//# sourceMappingURL=tree-node.component.d.ts.map