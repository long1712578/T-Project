import { BooleanInput } from '@angular/cdk/coercion';
import { ChangeDetectorRef, DebugElement, ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges, TemplateRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { Observable } from 'rxjs';
import { DateHelperService, TDSI18nService } from 'tds-ui/i18n';
import { TimeHolder } from './time-holder';
import * as i0 from "@angular/core";
export declare type TDSTimePickerUnit = 'hour' | 'minute' | 'second' | '12-hour';
export declare class TDSTimePickerPanelComponent implements ControlValueAccessor, OnInit, OnDestroy, OnChanges {
    private cdr;
    dateHelper: DateHelperService;
    private elementRef;
    protected i18n: TDSI18nService;
    static ngAcceptInputType_use12Hours: BooleanInput;
    private _hourStep;
    private _minuteStep;
    private _secondStep;
    private unsubscribe$;
    private onChange?;
    private onTouch?;
    private _format;
    private _disabledHours?;
    private _disabledMinutes?;
    private _disabledSeconds?;
    private _allowEmpty;
    private _strAM;
    private _strPM;
    time: TimeHolder;
    hourEnabled: boolean;
    minuteEnabled: boolean;
    secondEnabled: boolean;
    firstScrolled: boolean;
    enabledColumns: number;
    hourRange: ReadonlyArray<{
        index: number;
        disabled: boolean;
    }>;
    minuteRange: ReadonlyArray<{
        index: number;
        disabled: boolean;
    }>;
    secondRange: ReadonlyArray<{
        index: number;
        disabled: boolean;
    }>;
    use12HoursRange: ReadonlyArray<{
        index: number;
        value: string;
    }>;
    select12HoursRange: Array<{
        hour: number;
        minute: number;
        second: number;
        label: string;
        disabled: boolean;
    }>;
    select12HoursRangeDefault: Array<{
        index: number;
        value: string;
    }>;
    i18nTime$: Observable<string | undefined>;
    hourListElement?: DebugElement;
    minuteListElement?: DebugElement;
    secondListElement?: DebugElement;
    use12HoursListElement?: DebugElement;
    inDatePicker: boolean;
    addOn?: TemplateRef<void>;
    hideDisabledOptions: boolean;
    clearText?: string;
    nowText?: string;
    okText?: string;
    placeHolder?: string | null;
    use12Hours: boolean;
    defaultOpenValue?: Date;
    readonly closePanel: EventEmitter<void>;
    set allowEmpty(value: boolean);
    get allowEmpty(): boolean;
    set disabledHours(value: undefined | (() => number[]));
    get disabledHours(): undefined | (() => number[]);
    set disabledMinutes(value: undefined | ((hour: number) => number[]));
    get disabledMinutes(): undefined | ((hour: number) => number[]);
    set disabledSeconds(value: undefined | ((hour: number, minute: number) => number[]));
    get disabledSeconds(): undefined | ((hour: number, minute: number) => number[]);
    set format(value: string);
    get format(): string;
    set hourStep(value: number);
    get hourStep(): number;
    set minuteStep(value: number);
    get minuteStep(): number;
    set secondStep(value: number);
    get secondStep(): number;
    trackByFn(index: number): number;
    buildHours(): void;
    buildMinutes(): void;
    buildSeconds(): void;
    build12Hours(): void;
    buildSelect12Hours(): void;
    buildTimes(): void;
    scrollToTime(delay?: number): void;
    selectHour(hour: {
        index: number;
        disabled: boolean;
    }): void;
    selectMinute(minute: {
        index: number;
        disabled: boolean;
    }): void;
    selectSecond(second: {
        index: number;
        disabled: boolean;
    }): void;
    select12Hours(value: {
        index: number;
        value: string;
    }): void;
    selectCutom12Hours(data: {
        hour: number;
        minute: number;
        second: number;
        label: string;
        disabled: boolean;
    }, str: {
        index: number;
        value: string;
    }): void;
    scrollToSelected(instance: HTMLElement, index: number, duration: number | undefined, unit: TDSTimePickerUnit): void;
    translateIndex(index: number, unit: TDSTimePickerUnit): number;
    scrollTo(element: HTMLElement, to: number, duration: number): void;
    calcIndex(array: number[] | undefined, index: number): number;
    protected changed(): void;
    protected touched(): void;
    timeDisabled(value: Date): boolean;
    onClickNow(): void;
    onClickOk(): void;
    isSelectedHour(hour: {
        index: number;
        disabled: boolean;
    }): boolean;
    isSelectedMinute(minute: {
        index: number;
        disabled: boolean;
    }): boolean;
    isSelectedSecond(second: {
        index: number;
        disabled: boolean;
    }): boolean;
    isSelected12Hours(value: {
        index: number;
        value: string;
    }): boolean;
    constructor(cdr: ChangeDetectorRef, dateHelper: DateHelperService, elementRef: ElementRef, i18n: TDSI18nService);
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    writeValue(value: Date): void;
    registerOnChange(fn: (value: Date) => void): void;
    registerOnTouched(fn: () => void): void;
    /**
     * Prevent input losing focus when click panel
     * @param event
     */
    onMousedown(event: MouseEvent): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<TDSTimePickerPanelComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TDSTimePickerPanelComponent, "tds-time-picker-panel", ["tdsTimePickerPanel"], { "inDatePicker": "inDatePicker"; "addOn": "addOn"; "hideDisabledOptions": "hideDisabledOptions"; "clearText": "clearText"; "nowText": "nowText"; "okText": "okText"; "placeHolder": "placeHolder"; "use12Hours": "use12Hours"; "defaultOpenValue": "defaultOpenValue"; "allowEmpty": "allowEmpty"; "disabledHours": "disabledHours"; "disabledMinutes": "disabledMinutes"; "disabledSeconds": "disabledSeconds"; "format": "format"; "hourStep": "hourStep"; "minuteStep": "minuteStep"; "secondStep": "secondStep"; }, { "closePanel": "closePanel"; }, never, never>;
}
//# sourceMappingURL=time-picker-panel.component.d.ts.map