import { Direction, Directionality } from '@angular/cdk/bidi';
import { BooleanInput } from '@angular/cdk/coercion';
import { CdkOverlayOrigin, ConnectionPositionPair } from '@angular/cdk/overlay';
import { Platform } from '@angular/cdk/platform';
import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, Renderer2, SimpleChanges, TemplateRef } from '@angular/core';
import { ControlValueAccessor, NgControl } from '@angular/forms';
import { Observable, Subject } from 'rxjs';
import { ButtonSize } from "tds-ui/core/config";
import { TDSFormField, TDSFormFieldControl } from 'tds-ui/form-field';
import { DateHelperService, TDSI18nService } from 'tds-ui/i18n';
import * as i0 from "@angular/core";
export declare class TDSTimePickerComponent implements TDSFormFieldControl<any>, ControlValueAccessor, OnInit, AfterViewInit, OnChanges, OnDestroy {
    protected i18n: TDSI18nService;
    private element;
    private renderer;
    private cdr;
    private dateHelper;
    private platform;
    private elementRef;
    private directionality;
    _formField: TDSFormField;
    ngControl: NgControl;
    static ngAcceptInputType_use12Hours: BooleanInput;
    static ngAcceptInputType_hideDisabledOptions: BooleanInput;
    static ngAcceptInputType_allowEmpty: BooleanInput;
    static ngAcceptInputType_disabled: BooleanInput;
    static ngAcceptInputType_autoFocus: BooleanInput;
    private _onChange?;
    private _onTouched?;
    private destroy$;
    isInit: boolean;
    focused: boolean;
    inputValue: string;
    value: Date | null;
    preValue: Date | null;
    origin: CdkOverlayOrigin;
    inputSize?: number;
    i18nPlaceHolder$: Observable<string | undefined>;
    overlayPositions: ConnectionPositionPair[];
    dir: Direction;
    parentIsFormField: boolean;
    inputRef: ElementRef<HTMLInputElement>;
    tdsId: string | null;
    get size(): ButtonSize;
    set size(value: ButtonSize);
    private _size;
    hourStep: number;
    minuteStep: number;
    secondStep: number;
    clearText: string;
    nowText: string;
    okText: string;
    popupClassName: string;
    placeholder: string;
    addOn?: TemplateRef<void>;
    defaultOpenValue?: Date;
    disabledHours?: () => number[];
    disabledMinutes?: (hour: number) => number[];
    disabledSeconds?: (hour: number, minute: number) => number[];
    format: string;
    isOpen: boolean;
    use12Hours: boolean;
    suffixIcon: string | TemplateRef<any>;
    readonly openChange: EventEmitter<boolean>;
    hideDisabledOptions: boolean;
    allowEmpty: boolean;
    disabled: boolean;
    autoFocus: boolean;
    backdrop: boolean;
    id: string | null;
    stateChanges: Subject<void>;
    get empty(): boolean;
    get required(): boolean;
    set required(value: boolean);
    private _required;
    emitValue(value: Date | null): void;
    setValue(value: Date | null, syncPreValue?: boolean): void;
    setInputValue(value: Date | null): void;
    open(): void;
    close(): void;
    updateAutoFocus(): void;
    onClickClearBtn(event: MouseEvent): void;
    onClickOutside(event: MouseEvent): void;
    onFocus(value: boolean): void;
    focus(): void;
    blur(): void;
    onKeyupEsc(): void;
    onKeyupEnter(): void;
    onInputChange(str: string): void;
    onPanelValueChange(value: Date): void;
    setCurrentValueAndClose(): void;
    constructor(i18n: TDSI18nService, element: ElementRef, renderer: Renderer2, cdr: ChangeDetectorRef, dateHelper: DateHelperService, platform: Platform, elementRef: ElementRef, directionality: Directionality, _formField: TDSFormField, ngControl: NgControl);
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    parseTimeString(str: string): void;
    ngAfterViewInit(): void;
    writeValue(time: Date | null | undefined): void;
    registerOnChange(fn: (time: Date | null) => void): void;
    registerOnTouched(fn: () => void): void;
    setDisabledState(isDisabled: boolean): void;
    get errorState(): boolean;
    setDescribedByIds(ids: string[]): void;
    onContainerClick(e: MouseEvent): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<TDSTimePickerComponent, [null, null, null, null, null, null, null, { optional: true; }, { optional: true; host: true; }, { optional: true; self: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TDSTimePickerComponent, "tds-time-picker", ["tdsTimePicker"], { "tdsId": "tdsId"; "size": "size"; "hourStep": "hourStep"; "minuteStep": "minuteStep"; "secondStep": "secondStep"; "clearText": "clearText"; "nowText": "nowText"; "okText": "okText"; "popupClassName": "popupClassName"; "placeholder": "placeholder"; "addOn": "addOn"; "defaultOpenValue": "defaultOpenValue"; "disabledHours": "disabledHours"; "disabledMinutes": "disabledMinutes"; "disabledSeconds": "disabledSeconds"; "format": "format"; "isOpen": "isOpen"; "use12Hours": "use12Hours"; "suffixIcon": "suffixIcon"; "hideDisabledOptions": "hideDisabledOptions"; "allowEmpty": "allowEmpty"; "disabled": "disabled"; "autoFocus": "autoFocus"; "backdrop": "backdrop"; "id": "id"; "required": "required"; }, { "openChange": "openChange"; }, never, never>;
}
//# sourceMappingURL=time-picker.component.d.ts.map