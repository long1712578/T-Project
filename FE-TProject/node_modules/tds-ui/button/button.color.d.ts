import { ButtonSize } from 'tds-ui/core/config';
import { Constructor, HasElementRef, TDSThemePalette } from 'tds-ui/shared/common';
/**
 * List of classes to add to MatButton instances based on host attributes to
 * style as different variants.
 */
export declare const BUTTON_HOST_ATTRIBUTES: string[];
/** List of classes to add to buttons instances based on host attribute selector. */
export declare const HOST_SELECTOR_TMT_CLASS_PAIR: {
    selector: ButtonType;
    tmtClasses: string[];
}[];
export declare type ButtonType = 'tds-button' | 'tds-flat-button' | 'tds-button-icon' | undefined;
export interface CanButtonColor {
    buttonType: ButtonType;
    defaultButtonType: ButtonType | undefined;
    /** Theme color palette for the component. */
    color: TDSThemePalette;
    /** Default color to fall back to if no value is set. */
    defaultColor: TDSThemePalette | undefined;
}
/** @docs-private */
export declare type CanButtonColorCtor = Constructor<CanButtonColor>;
/** Mixin to augment a directive with a `color` property. */
export declare function mixinButtonColor<T extends Constructor<HasElementRef>>(base: T, defaultColor?: TDSThemePalette, defaultButtonType?: ButtonType): CanButtonColorCtor & T;
export interface CanButtonSize {
    /** size for the component. */
    size: ButtonSize;
    /** Default size to fall back to if no value is set. */
    defaultSize: ButtonSize | undefined;
}
export declare type CanButtonSizeCtor = Constructor<CanButtonSize>;
export declare function mixinButtonSize<T extends Constructor<HasElementRef>>(base: T, defaultSize?: ButtonSize): CanButtonSizeCtor & T;
//# sourceMappingURL=button.color.d.ts.map