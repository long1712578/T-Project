import { FocusMonitor } from '@angular/cdk/a11y';
import { Direction, Directionality } from '@angular/cdk/bidi';
import { BooleanInput } from '@angular/cdk/coercion';
import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';
import { Subject } from 'rxjs';
import { ButtonSize } from "tds-ui/core/config";
import { TDSFormField, TDSFormFieldControl } from 'tds-ui/form-field';
import { OnChangeType, OnTouchedType } from 'tds-ui/shared/utility';
import * as i0 from "@angular/core";
export declare class TDSInputNumberComponent implements ControlValueAccessor, TDSFormFieldControl<any>, AfterViewInit, OnChanges, OnInit, OnDestroy {
    private ngZone;
    private elementRef;
    private cdr;
    private focusMonitor;
    private directionality;
    _formField: TDSFormField;
    _parentForm: NgForm;
    _parentFormGroup: FormGroupDirective;
    ngControl: NgControl;
    static ngAcceptInputType_disabled: BooleanInput;
    static ngAcceptInputType_autoFocus: BooleanInput;
    private autoStepTimer?;
    private parsedValue?;
    value: number | null;
    private destroy$;
    stateChanges: Subject<void>;
    parentIsFormField: boolean;
    displayValue?: string | number;
    isFocused: boolean;
    disabledUp: boolean;
    disabledDown: boolean;
    dir: Direction;
    onChange: OnChangeType;
    onTouched: OnTouchedType;
    readonly tdsBlur: EventEmitter<any>;
    readonly tdsFocus: EventEmitter<any>;
    inputElement: ElementRef<HTMLInputElement>;
    min: number;
    max: number;
    parser: (value: string) => string;
    precision?: number;
    precisionMode: 'cut' | 'toFixed' | ((value: number | string, precision?: number) => number);
    placeholder: string;
    step: number;
    inputMode: string;
    id: string | null;
    disabled: boolean;
    autoFocus: boolean;
    formatter: (value: number) => string | number;
    private _size;
    get size(): ButtonSize;
    set size(value: ButtonSize);
    errorState: boolean;
    updateErrorState(): void;
    private _isErrorState;
    get focused(): boolean;
    get empty(): boolean;
    get required(): boolean;
    set required(value: boolean);
    private _required;
    hiddenIcon: boolean;
    /**
     *
     */
    autoFormat: boolean;
    setDescribedByIds(ids: string[]): void;
    onContainerClick(e: MouseEvent): void;
    onModelChange(value: string): void;
    getCurrentValidValue(value: string | number): number;
    isNotCompleteNumber(num: string | number): boolean;
    getValidValue(value?: string | number): string | number | undefined;
    toNumber(num: string | number): number;
    getRatio(e: KeyboardEvent): number;
    down(e: MouseEvent | KeyboardEvent, ratio?: number): void;
    up(e: MouseEvent | KeyboardEvent, ratio?: number): void;
    getPrecision(value: number): number;
    getMaxPrecision(currentValue: string | number, ratio: number): number;
    getPrecisionFactor(currentValue: string | number, ratio: number): number;
    upStep(val: string | number, rat: number): number;
    downStep(val: string | number, rat: number): number;
    onStep<T extends keyof TDSInputNumberComponent>(type: T, e: MouseEvent | KeyboardEvent, ratio?: number): void;
    stop(): void;
    setValue(value: number): void;
    updateDisplayValue(value: number): void;
    writeValue(value: number): void;
    registerOnChange(fn: OnChangeType): void;
    registerOnTouched(fn: OnTouchedType): void;
    setDisabledState(disabled: boolean): void;
    focus(): void;
    blur(): void;
    constructor(ngZone: NgZone, elementRef: ElementRef, cdr: ChangeDetectorRef, focusMonitor: FocusMonitor, directionality: Directionality, _formField: TDSFormField, _parentForm: NgForm, _parentFormGroup: FormGroupDirective, ngControl: NgControl);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    ngDoCheck(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<TDSInputNumberComponent, [null, null, null, null, { optional: true; }, { optional: true; host: true; }, { optional: true; }, { optional: true; }, { optional: true; self: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TDSInputNumberComponent, "tds-input-number", ["tdsInputNumber"], { "min": "min"; "max": "max"; "parser": "parser"; "precision": "precision"; "precisionMode": "precisionMode"; "placeholder": "placeholder"; "step": "step"; "inputMode": "inputMode"; "id": "id"; "disabled": "disabled"; "autoFocus": "autoFocus"; "formatter": "formatter"; "size": "size"; "required": "required"; "hiddenIcon": "hiddenIcon"; "autoFormat": "autoFormat"; }, { "tdsBlur": "tdsBlur"; "tdsFocus": "tdsFocus"; }, never, never>;
}
//# sourceMappingURL=input-number.component.d.ts.map