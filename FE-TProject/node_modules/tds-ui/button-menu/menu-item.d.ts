/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { FocusableOption, FocusMonitor, FocusOrigin } from '@angular/cdk/a11y';
import { BooleanInput } from '@angular/cdk/coercion';
import { ElementRef, OnDestroy, AfterViewInit, OnChanges, SimpleChanges, ChangeDetectorRef } from '@angular/core';
import { Subject } from 'rxjs';
import { TDSButtonMenuPanel } from './menu-panel';
import { CanDisable, CanDisableCtor } from 'tds-ui/shared/common';
import { ButtonSize, NgClassInterface } from 'tds-ui/core/config';
import * as i0 from "@angular/core";
/** @docs-private */
declare class TDSButtonMenuItemBase {
}
declare const _TDSButtonMenuItemMixinBase: CanDisableCtor & typeof TDSButtonMenuItemBase;
/**
 * Single item inside of a `tbutton-menu`. Provides the menu item styling and accessibility treatment.
 */
export declare class TDSButtonMenuItem extends _TDSButtonMenuItemMixinBase implements FocusableOption, CanDisable, AfterViewInit, OnDestroy, OnChanges {
    private _cdr;
    private _elementRef;
    private _focusMonitor?;
    _parentMenu?: TDSButtonMenuPanel<TDSButtonMenuItem> | undefined;
    size: ButtonSize;
    /** ARIA role for the menu item. */
    role: 'menuitem' | 'menuitemradio' | 'menuitemcheckbox';
    /** Stream that emits when the menu item is hovered. */
    readonly _hovered: Subject<TDSButtonMenuItem>;
    /** Stream that emits when the menu item is focused. */
    readonly _focused: Subject<TDSButtonMenuItem>;
    /** Whether the menu item is highlighted. */
    _highlighted: boolean;
    /** Whether the menu item acts as a trigger for a sub-menu. */
    _triggersSubmenu: boolean;
    ngcls: NgClassInterface;
    constructor(_cdr: ChangeDetectorRef, _elementRef: ElementRef<HTMLElement>, _document?: any, _focusMonitor?: FocusMonitor | undefined, _parentMenu?: TDSButtonMenuPanel<TDSButtonMenuItem> | undefined);
    ngOnChanges(changes: SimpleChanges): void;
    /** Focuses the menu item. */
    focus(origin?: FocusOrigin, options?: FocusOptions): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    /** Used to set the `tabindex`. */
    _getTabIndex(): string;
    /** Returns the host DOM element. */
    _getHostElement(): HTMLElement;
    /** Prevents the default element actions if it is disabled. */
    _checkDisabled(event: Event): void;
    /** Emits to the hover stream. */
    _handleMouseEnter(): void;
    /** Gets the label to be used when determining whether the option should be focused. */
    getLabel(): string;
    private p_updateClsSize;
    static ngAcceptInputType_disabled: BooleanInput;
    static ngAcceptInputType_disableRipple: BooleanInput;
    static ɵfac: i0.ɵɵFactoryDeclaration<TDSButtonMenuItem, [null, null, null, null, { optional: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TDSButtonMenuItem, "[tds-button-menu-item]", ["TDSButtonMenuItem"], { "disabled": "disabled"; "disableRipple": "disableRipple"; "size": "size"; "role": "role"; }, {}, never, ["*"]>;
}
export {};
//# sourceMappingURL=menu-item.d.ts.map