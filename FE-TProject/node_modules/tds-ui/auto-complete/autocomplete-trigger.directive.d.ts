import { Overlay } from '@angular/cdk/overlay';
import { AfterViewInit, ElementRef, ExistingProvider, OnDestroy, ViewContainerRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { OnChangeType, OnTouchedType, TDSSafeAny } from 'tds-ui/shared/utility';
import { TDSFormField } from 'tds-ui/form-field';
import { TDSAutocompleteOptionComponent } from './autocomplete-option.component';
import { TDSAutocompleteComponent } from './autocomplete.component';
import * as i0 from "@angular/core";
export declare const TDS_AUTOCOMPLETE_VALUE_ACCESSOR: ExistingProvider;
export declare function getTDSAutocompleteMissingPanelError(): Error;
export declare class TDSAutocompleteTriggerDirective implements AfterViewInit, ControlValueAccessor, OnDestroy {
    private elementRef;
    private overlay;
    private viewContainerRef;
    _formField: TDSFormField;
    private document;
    /** Bind tdsAutocomplete component */
    tdsAutocomplete: TDSAutocompleteComponent;
    onChange: OnChangeType;
    onTouched: OnTouchedType;
    panelOpen: boolean;
    /** Current active option */
    get activeOption(): TDSAutocompleteOptionComponent | null;
    private destroy$;
    private overlayRef;
    private portal;
    private positionStrategy;
    private previousValue;
    private selectionChangeSubscription;
    private optionsChangeSubscription;
    private overlayOutsideClickSubscription;
    constructor(elementRef: ElementRef, overlay: Overlay, viewContainerRef: ViewContainerRef, _formField: TDSFormField, document: TDSSafeAny);
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    writeValue(value: TDSSafeAny): void;
    registerOnChange(fn: (value: {}) => {}): void;
    registerOnTouched(fn: () => {}): void;
    setDisabledState(isDisabled: boolean): void;
    openPanel(): void;
    closePanel(): void;
    handleKeydown(event: KeyboardEvent): void;
    handleInput(event: KeyboardEvent): void;
    handleFocus(): void;
    handleBlur(): void;
    /**
     * Subscription data source changes event
     */
    private subscribeOptionsChange;
    /**
     * Subscription option changes event and set the value
     */
    private subscribeSelectionChange;
    private subscribeOverlayOutsideClick;
    private attachOverlay;
    private updateStatus;
    private destroyPanel;
    private getOverlayConfig;
    private getConnectedElement;
    private getHostWidth;
    private getOverlayPosition;
    private resetActiveItem;
    private setValueAndClose;
    private setTriggerValue;
    private doBackfill;
    private canOpen;
    static ɵfac: i0.ɵɵFactoryDeclaration<TDSAutocompleteTriggerDirective, [null, null, null, { optional: true; host: true; }, { optional: true; }]>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<TDSAutocompleteTriggerDirective, "input[tdsAutocomplete], textarea[tdsAutocomplete]", ["tdsAutocompleteTrigger"], { "tdsAutocomplete": "tdsAutocomplete"; }, {}, never>;
}
//# sourceMappingURL=autocomplete-trigger.directive.d.ts.map