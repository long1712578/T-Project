import { AnimationEvent } from '@angular/animations';
import { Direction, Directionality } from '@angular/cdk/bidi';
import { BooleanInput } from '@angular/cdk/coercion';
import { AfterContentInit, AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnDestroy, OnInit, QueryList, TemplateRef } from '@angular/core';
import { Observable } from 'rxjs';
import { TDSNoAnimationDirective } from 'tds-ui/core/no-animation';
import { CompareWith } from 'tds-ui/core/util';
import { TDSSafeAny } from 'tds-ui/shared/utility';
import { TDSAutocompleteOptionComponent, TDSAutoOptionSelectionChange } from './autocomplete-option.component';
import * as i0 from "@angular/core";
export interface AutocompleteDataSourceItem {
    value: string;
    label: string;
}
export declare type AutocompleteDataSource = Array<AutocompleteDataSourceItem | string | number>;
export declare class TDSAutocompleteComponent implements AfterContentInit, AfterViewInit, OnDestroy, OnInit {
    private changeDetectorRef;
    private ngZone;
    private directionality;
    noAnimation?: TDSNoAnimationDirective | undefined;
    static ngAcceptInputType_defaultActiveFirstOption: BooleanInput;
    static ngAcceptInputType_backfill: BooleanInput;
    width?: number;
    overlayClassName: string;
    overlayStyle: {
        [key: string]: string;
    };
    defaultActiveFirstOption: boolean;
    backfill: boolean;
    compareWith: CompareWith;
    dataSource?: AutocompleteDataSource;
    autoClose: boolean;
    readonly selectionChange: EventEmitter<TDSAutocompleteOptionComponent>;
    showPanel: boolean;
    isOpen: boolean;
    activeItem: TDSAutocompleteOptionComponent | null;
    dir: Direction;
    private destroy$;
    animationStateChange: EventEmitter<AnimationEvent>;
    /**
     * Options accessor, its source may be content or dataSource
     */
    get options(): QueryList<TDSAutocompleteOptionComponent>;
    /** Provided by content */
    fromContentOptions: QueryList<TDSAutocompleteOptionComponent>;
    /** Provided by dataSource */
    fromDataSourceOptions: QueryList<TDSAutocompleteOptionComponent>;
    /** cdk-overlay */
    template?: TemplateRef<{}>;
    panel?: ElementRef;
    content?: ElementRef;
    private activeItemIndex;
    private selectionChangeSubscription;
    private optionMouseEnterSubscription;
    private dataSourceChangeSubscription;
    /** Options changes listener */
    readonly optionSelectionChanges: Observable<TDSAutoOptionSelectionChange>;
    readonly optionMouseEnter: Observable<TDSAutocompleteOptionComponent>;
    constructor(changeDetectorRef: ChangeDetectorRef, ngZone: NgZone, directionality: Directionality, noAnimation?: TDSNoAnimationDirective | undefined);
    ngOnInit(): void;
    onAnimationEvent(event: AnimationEvent): void;
    ngAfterContentInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    setVisibility(): void;
    setActiveItem(index: number): void;
    setNextItemActive(): void;
    setPreviousItemActive(): void;
    getOptionIndex(value: TDSSafeAny): number;
    getOption(value: TDSSafeAny): TDSAutocompleteOptionComponent | null;
    private optionsInit;
    /**
     * Clear the status of options
     */
    clearSelectedOptions(skip?: TDSAutocompleteOptionComponent | null, deselect?: boolean): void;
    private subscribeOptionChanges;
    static ɵfac: i0.ɵɵFactoryDeclaration<TDSAutocompleteComponent, [null, null, { optional: true; }, { optional: true; host: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TDSAutocompleteComponent, "tds-autocomplete", ["tdsAutocomplete"], { "width": "width"; "overlayClassName": "overlayClassName"; "overlayStyle": "overlayStyle"; "defaultActiveFirstOption": "defaultActiveFirstOption"; "backfill": "backfill"; "compareWith": "compareWith"; "dataSource": "dataSource"; "autoClose": "autoClose"; }, { "selectionChange": "selectionChange"; }, ["fromContentOptions"], ["*"]>;
}
//# sourceMappingURL=autocomplete.component.d.ts.map