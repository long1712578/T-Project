import { FocusMonitor } from '@angular/cdk/a11y';
import { Direction, Directionality } from '@angular/cdk/bidi';
import { BooleanInput } from '@angular/cdk/coercion';
import { AfterViewInit, ChangeDetectorRef, ElementRef, OnDestroy, OnInit } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { OnChangeType, OnTouchedType, TDSSafeAny } from 'tds-ui/shared/utility';
import { ButtonSize, NgClassInterface } from "tds-ui/core/config";
import { TDSRadioButtonDirective } from './radio-button.directive';
import { TDSRadioService } from './radio.service';
import * as i0 from "@angular/core";
export declare class TDSRadioComponent implements ControlValueAccessor, AfterViewInit, OnDestroy, OnInit {
    private elementRef;
    private cdr;
    private focusMonitor;
    private directionality;
    private tdsRadioService;
    private tdsRadioButtonDirective;
    static ngAcceptInputType_disabled: BooleanInput;
    static ngAcceptInputType_autoFocus: BooleanInput;
    private isNgModel;
    private destroy$;
    isChecked: boolean;
    name: string | null;
    isRadioButton: boolean;
    onChange: OnChangeType;
    onTouched: OnTouchedType;
    inputElement?: ElementRef;
    value: TDSSafeAny | null;
    disabled: boolean;
    autoFocus: boolean;
    size: ButtonSize;
    dir: Direction;
    contentClass: NgClassInterface;
    onHostClick(event: MouseEvent): void;
    focus(): void;
    blur(): void;
    constructor(elementRef: ElementRef, cdr: ChangeDetectorRef, focusMonitor: FocusMonitor, directionality: Directionality, tdsRadioService: TDSRadioService, tdsRadioButtonDirective: TDSRadioButtonDirective);
    setDisabledState(disabled: boolean): void;
    writeValue(value: boolean): void;
    registerOnChange(fn: OnChangeType): void;
    registerOnTouched(fn: OnTouchedType): void;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    get widthHeight(): number;
    buildNgClass(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<TDSRadioComponent, [null, null, null, { optional: true; }, { optional: true; }, { optional: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TDSRadioComponent, "[tds-radio],[tds-radio-button]", ["tdsRadio"], { "value": "value"; "disabled": "disabled"; "autoFocus": "autoFocus"; "size": "size"; }, {}, never, ["*"]>;
}
//# sourceMappingURL=radio.component.d.ts.map