import { ChangeDetectorRef, ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, Renderer2, SimpleChanges } from '@angular/core';
import { ButtonSize } from "tds-ui/core/config";
import { NgStyleInterface } from 'tds-ui/core/config';
import { TDSTagStatusType } from './types';
import * as i0 from "@angular/core";
export declare class TDSTagComponent implements OnChanges, OnDestroy, OnInit {
    private _cdr;
    private renderer;
    private elementRef;
    mode: 'default' | 'closeable' | 'checkable';
    type: 'default' | 'outline';
    status: TDSTagStatusType | string;
    tdsStyle?: NgStyleInterface;
    checked: boolean;
    size: ButtonSize;
    disabled: boolean;
    rounded: string | null;
    readonly close: EventEmitter<MouseEvent>;
    readonly checkedChange: EventEmitter<boolean>;
    cssClass: string;
    private destroy$;
    constructor(_cdr: ChangeDetectorRef, renderer: Renderer2, elementRef: ElementRef);
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    onClickClose(e: MouseEvent): void;
    updateCheckedStatus(): void;
    buildCss(): void;
    get getRounded(): string;
    private cssDefault;
    private cssOutline;
    private convertClass;
    private convertOutlineClass;
    static ɵfac: i0.ɵɵFactoryDeclaration<TDSTagComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TDSTagComponent, "tds-tag", ["tdsTag"], { "mode": "mode"; "type": "type"; "status": "status"; "tdsStyle": "tdsStyle"; "checked": "checked"; "size": "size"; "disabled": "disabled"; "rounded": "rounded"; }, { "close": "close"; "checkedChange": "checkedChange"; }, never, ["*"]>;
}
//# sourceMappingURL=tag.component.d.ts.map