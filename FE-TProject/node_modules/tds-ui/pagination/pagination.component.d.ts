import { Direction, Directionality } from '@angular/cdk/bidi';
import { BooleanInput, NumberInput } from '@angular/cdk/coercion';
import { ChangeDetectorRef, ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges, TemplateRef } from '@angular/core';
import { ButtonSize, TDSConfigKey, TDSConfigService } from "tds-ui/core/config";
import { TDSBreakpointService } from 'tds-ui/core/services';
import { TDSI18nService, TDSPaginationI18nInterface } from 'tds-ui/i18n';
import { PaginationItemRenderContext } from './pagination.types';
import * as i0 from "@angular/core";
export declare class TDSPaginationComponent implements OnInit, OnDestroy, OnChanges {
    private i18n;
    private cdr;
    private breakpointService;
    protected tdsConfigService: TDSConfigService;
    private directionality;
    private elementRef;
    readonly _tdsModuleName: TDSConfigKey;
    static ngAcceptInputType_disabled: BooleanInput;
    static ngAcceptInputType_showSizeChanger: BooleanInput;
    static ngAcceptInputType_hideOnSinglePage: BooleanInput;
    static ngAcceptInputType_showQuickJumper: BooleanInput;
    static ngAcceptInputType_simple: BooleanInput;
    static ngAcceptInputType_responsive: BooleanInput;
    static ngAcceptInputType_total: NumberInput;
    static ngAcceptInputType_pageIndex: NumberInput;
    static ngAcceptInputType_pageSize: NumberInput;
    readonly pageSizeChange: EventEmitter<number>;
    readonly pageIndexChange: EventEmitter<number>;
    showTotal: TemplateRef<{
        $implicit: number;
        range: [number, number];
    }> | null;
    itemRender: TemplateRef<PaginationItemRenderContext> | null;
    size: ButtonSize;
    pageSizeOptions: number[];
    showSizeChanger: boolean;
    showQuickJumper: boolean;
    simple: boolean;
    disabled: boolean;
    responsive: boolean;
    hideOnSinglePage: boolean;
    total: number;
    pageIndex: number;
    pageSize: number;
    showRefresh: boolean;
    bordered: boolean;
    readonly clickRefresh: EventEmitter<MouseEvent>;
    showPagination: boolean;
    locale: TDSPaginationI18nInterface;
    _size: ButtonSize;
    dir: Direction;
    private destroy$;
    private total$;
    validatePageIndex(value: number, lastIndex: number): number;
    onPageIndexChange(index: number): void;
    onPageSizeChange(size: number): void;
    onTotalChange(total: number): void;
    getLastIndex(total: number, pageSize: number): number;
    constructor(i18n: TDSI18nService, cdr: ChangeDetectorRef, breakpointService: TDSBreakpointService, tdsConfigService: TDSConfigService, directionality: Directionality, elementRef: ElementRef);
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    onClickRefresh(e: MouseEvent): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<TDSPaginationComponent, [null, null, null, null, { optional: true; }, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TDSPaginationComponent, "tds-pagination", ["tdsPagination"], { "showTotal": "showTotal"; "itemRender": "itemRender"; "size": "size"; "pageSizeOptions": "pageSizeOptions"; "showSizeChanger": "showSizeChanger"; "showQuickJumper": "showQuickJumper"; "simple": "simple"; "disabled": "disabled"; "responsive": "responsive"; "hideOnSinglePage": "hideOnSinglePage"; "total": "total"; "pageIndex": "pageIndex"; "pageSize": "pageSize"; "showRefresh": "showRefresh"; "bordered": "bordered"; }, { "pageSizeChange": "pageSizeChange"; "pageIndexChange": "pageIndexChange"; "clickRefresh": "clickRefresh"; }, never, never>;
}
//# sourceMappingURL=pagination.component.d.ts.map