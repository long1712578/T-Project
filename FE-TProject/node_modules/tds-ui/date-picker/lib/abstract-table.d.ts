import { EventEmitter, OnChanges, OnInit, SimpleChanges, TemplateRef } from '@angular/core';
import { CandyDate } from 'tds-ui/core/time';
import { isNonEmptyString, isTemplateRef } from 'tds-ui/core/util';
import { TDSCalendarI18nInterface } from 'tds-ui/i18n';
import { FunctionProp } from 'tds-ui/shared/utility';
import { DateBodyRow, DateCell } from './interface';
import * as i0 from "@angular/core";
export declare abstract class AbstractTable implements OnInit, OnChanges {
    isTemplateRef: typeof isTemplateRef;
    isNonEmptyString: typeof isNonEmptyString;
    headRow: DateCell[];
    bodyRows: DateBodyRow[];
    MAX_ROW: number;
    MAX_COL: number;
    prefixCls: string;
    value: CandyDate;
    locale: TDSCalendarI18nInterface;
    activeDate: CandyDate;
    showWeek: boolean;
    selectedValue: CandyDate[];
    hoverValue: CandyDate[];
    disabledDate?: (d: Date) => boolean;
    cellRender?: string | TemplateRef<Date> | FunctionProp<TemplateRef<Date> | string>;
    fullCellRender?: string | TemplateRef<Date> | FunctionProp<TemplateRef<Date> | string>;
    readonly valueChange: EventEmitter<CandyDate>;
    readonly cellHover: EventEmitter<CandyDate>;
    protected render(): void;
    trackByBodyRow(_index: number, item: DateBodyRow): any;
    trackByBodyColumn(_index: number, item: DateCell): any;
    hasRangeValue(): boolean;
    getClassMap(cell: DateCell): {
        [key: string]: boolean;
    };
    abstract makeHeadRow(): DateCell[];
    abstract makeBodyRows(): DateBodyRow[];
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    private isDateRealChange;
    private isSameDate;
    static ɵfac: i0.ɵɵFactoryDeclaration<AbstractTable, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<AbstractTable, never, never, { "prefixCls": "prefixCls"; "value": "value"; "locale": "locale"; "activeDate": "activeDate"; "showWeek": "showWeek"; "selectedValue": "selectedValue"; "hoverValue": "hoverValue"; "disabledDate": "disabledDate"; "cellRender": "cellRender"; "fullCellRender": "fullCellRender"; }, { "valueChange": "valueChange"; "cellHover": "cellHover"; }, never>;
}
//# sourceMappingURL=abstract-table.d.ts.map