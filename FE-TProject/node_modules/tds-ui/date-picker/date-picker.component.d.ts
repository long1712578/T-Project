import { AfterViewInit, ChangeDetectorRef, DoCheck, ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, QueryList, Renderer2, SimpleChanges, TemplateRef } from '@angular/core';
import { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';
import { Subject } from 'rxjs';
import { DatePickerService } from './date-picker.service';
import { DateRangePopupComponent } from './date-range-popup.component';
import { Direction, Directionality } from '@angular/cdk/bidi';
import { CdkConnectedOverlay, CdkOverlayOrigin, ConnectedOverlayPositionChange, ConnectionPositionPair, HorizontalConnectionPos, VerticalConnectionPos } from '@angular/cdk/overlay';
import { Platform } from '@angular/cdk/platform';
import { CompatibleDate, DisabledTimeFn, TDSDateMode, PresetRanges, RangePartType, SupportTimeOptions } from './standard-types';
import { BooleanInput } from '@angular/cdk/coercion';
import { ButtonSize, TDSConfigService } from "tds-ui/core/config";
import { TDSFormField, TDSFormFieldControl } from 'tds-ui/form-field';
import { FunctionProp, OnChangeType, OnTouchedType } from 'tds-ui/shared/utility';
import { DateHelperService, TDSDatePickerI18nInterface, TDSI18nService } from 'tds-ui/i18n';
import { CandyDate, CompatibleValue } from 'tds-ui/core/time';
import { TDSResizeObserver } from 'tds-ui/core/resize-observers';
import * as i0 from "@angular/core";
export declare type TDSDatePickerSizeType = 'large' | 'default' | 'small';
/**
 * The base picker for all common APIs
 */
export declare class TDSDatePickerComponent implements TDSFormFieldControl<any>, OnInit, OnChanges, OnDestroy, DoCheck, AfterViewInit, ControlValueAccessor {
    tdsConfigService: TDSConfigService;
    datePickerService: DatePickerService;
    protected i18n: TDSI18nService;
    protected cdr: ChangeDetectorRef;
    private renderer;
    private elementRef;
    private dateHelper;
    private resizeObserver;
    private platform;
    private directionality;
    _formField: TDSFormField;
    ngControl: NgControl;
    _parentForm: NgForm;
    _parentFormGroup: FormGroupDirective;
    static ngAcceptInputType_allowClear: BooleanInput;
    static ngAcceptInputType_autoFocus: BooleanInput;
    static ngAcceptInputType_disabled: BooleanInput;
    static ngAcceptInputType_borderless: BooleanInput;
    static ngAcceptInputType_inputReadOnly: BooleanInput;
    static ngAcceptInputType_inline: BooleanInput;
    static ngAcceptInputType_isOpen: BooleanInput;
    static ngAcceptInputType_showToday: BooleanInput;
    static ngAcceptInputType_showNow: BooleanInput;
    static ngAcceptInputType_mode: TDSDateMode | TDSDateMode[] | string | string[] | null | undefined;
    static ngAcceptInputType_showTime: BooleanInput | SupportTimeOptions | null | undefined;
    isRange: boolean;
    extraFooter?: TemplateRef<any> | string;
    dir: Direction;
    panelMode: TDSDateMode | TDSDateMode[];
    private destroyed$;
    private isCustomPlaceHolder;
    private isCustomFormat;
    private _showTime;
    allowClear: boolean;
    autoFocus: boolean;
    disabled: boolean;
    borderless: boolean;
    inputReadOnly: boolean;
    inline: boolean;
    isOpen?: boolean;
    disabledDate?: (d: Date) => boolean;
    locale: TDSDatePickerI18nInterface;
    placeholder: string | string[];
    popupStyle: object;
    dropdownClassName?: string;
    format: string;
    dateRender?: TemplateRef<any> | string | FunctionProp<TemplateRef<Date> | string>;
    disabledTime?: DisabledTimeFn;
    renderExtraFooter?: TemplateRef<any> | string | FunctionProp<TemplateRef<any> | string>;
    showToday: boolean;
    mode: TDSDateMode;
    showNow: boolean;
    ranges?: PresetRanges;
    defaultPickerValue: CompatibleDate | null;
    deparator?: string;
    suffixIcon: string | TemplateRef<any>;
    backdrop: boolean;
    id: string | null;
    tdsClass: string;
    get size(): ButtonSize;
    set size(value: ButtonSize);
    private _size;
    readonly panelChange: EventEmitter<string | string[] | TDSDateMode[]>;
    readonly calendarChange: EventEmitter<(Date | null)[]>;
    readonly ok: EventEmitter<CompatibleDate | null>;
    readonly openChange: EventEmitter<boolean>;
    get showTime(): SupportTimeOptions | boolean;
    set showTime(value: SupportTimeOptions | boolean);
    cdkConnectedOverlay?: CdkConnectedOverlay;
    panel: DateRangePopupComponent;
    separatorElement?: ElementRef;
    pickerInput?: ElementRef<HTMLInputElement>;
    rangePickerInputs?: QueryList<ElementRef<HTMLInputElement>>;
    stateChanges: Subject<void>;
    value: any;
    focused: boolean;
    get empty(): boolean;
    get required(): boolean;
    set required(value: boolean);
    private _required;
    parentIsFormField: boolean;
    origin: CdkOverlayOrigin;
    document: Document;
    inputSize: number;
    inputWidth?: number;
    private destroy$;
    prefixCls: string;
    inputValue: any;
    activeBarStyle: object;
    overlayOpen: boolean;
    overlayPositions: ConnectionPositionPair[];
    currentPositionX: HorizontalConnectionPos;
    currentPositionY: VerticalConnectionPos;
    currentPickerValue: CompatibleValue | null;
    tdsCssContainer: string;
    get realOpenState(): boolean;
    ngAfterViewInit(): void;
    updateInputWidthAndArrowLeft(): void;
    getInput(partType?: RangePartType): HTMLInputElement | undefined;
    focus(): void;
    onFocus(event: FocusEvent, partType?: RangePartType): void;
    onFocusout(event: FocusEvent): void;
    open(): void;
    close(): void;
    private p_Close;
    showClear(): boolean;
    checkAndClose(): void;
    onClickInputBox(event: MouseEvent): void;
    onOverlayKeydown(event: KeyboardEvent): void;
    onPositionChange(position: ConnectedOverlayPositionChange): void;
    onClickClear(event: MouseEvent): void;
    updateInputValue(): void;
    formatValue(value: CandyDate): string;
    onInputChange(value: string, isEnter?: boolean): void;
    onKeyupEnter(event: Event): void;
    private checkValidDate;
    getPlaceholder(partType?: RangePartType): string;
    isEmptyValue(value: CompatibleValue): boolean;
    isOpenHandledByUser(): boolean;
    constructor(tdsConfigService: TDSConfigService, datePickerService: DatePickerService, i18n: TDSI18nService, cdr: ChangeDetectorRef, renderer: Renderer2, elementRef: ElementRef, dateHelper: DateHelperService, resizeObserver: TDSResizeObserver, platform: Platform, doc: any, directionality: Directionality, _formField: TDSFormField, ngControl: NgControl, _parentForm: NgForm, _parentFormGroup: FormGroupDirective);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    setModeAndFormat(): void;
    /**
     * Triggered when overlayOpen changes (different with realOpenState)
     * @param open The overlayOpen in picker component
     */
    onOpenChange(open: boolean): void;
    onChangeFn: OnChangeType;
    onTouchedFn: OnTouchedType;
    writeValue(value: CompatibleDate): void;
    registerOnChange(fn: OnChangeType): void;
    registerOnTouched(fn: OnTouchedType): void;
    setDisabledState(isDisabled: boolean): void;
    private setLocale;
    private setDefaultPlaceHolder;
    private getPropertyOfLocale;
    private setValue;
    renderClass(value: boolean): void;
    onPanelModeChange(panelMode: TDSDateMode | TDSDateMode[]): void;
    _calendarChange(value: CompatibleValue): void;
    onResultOk(): void;
    onResultCancel(): void;
    ngDoCheck(): void;
    errorState: boolean;
    updateErrorState(): void;
    private _isErrorState;
    setDescribedByIds(ids: string[]): void;
    onContainerClick(e: MouseEvent): void;
    onClickOutside(e: MouseEvent): void;
    updateCssContainer(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<TDSDatePickerComponent, [null, null, null, null, null, null, null, null, null, null, { optional: true; }, { optional: true; host: true; }, { optional: true; self: true; }, { optional: true; }, { optional: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TDSDatePickerComponent, "tds-date-picker,tds-week-picker,tds-month-picker,tds-year-picker,tds-range-picker", ["tdsDatePicker"], { "allowClear": "allowClear"; "autoFocus": "autoFocus"; "disabled": "disabled"; "borderless": "borderless"; "inputReadOnly": "inputReadOnly"; "inline": "inline"; "isOpen": "isOpen"; "disabledDate": "disabledDate"; "locale": "locale"; "placeholder": "placeholder"; "popupStyle": "popupStyle"; "dropdownClassName": "dropdownClassName"; "format": "format"; "dateRender": "dateRender"; "disabledTime": "disabledTime"; "renderExtraFooter": "renderExtraFooter"; "showToday": "showToday"; "mode": "mode"; "showNow": "showNow"; "ranges": "ranges"; "defaultPickerValue": "defaultPickerValue"; "deparator": "deparator"; "suffixIcon": "suffixIcon"; "backdrop": "backdrop"; "id": "id"; "tdsClass": "tdsClass"; "size": "size"; "showTime": "showTime"; "required": "required"; }, { "panelChange": "panelChange"; "calendarChange": "calendarChange"; "ok": "ok"; "openChange": "openChange"; }, never, never>;
}
//# sourceMappingURL=date-picker.component.d.ts.map