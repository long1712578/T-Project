import { BooleanInput } from '@angular/cdk/coercion';
import { ChangeDetectorRef, EventEmitter, OnChanges, OnDestroy, SimpleChanges, TemplateRef, Type, ViewContainerRef } from '@angular/core';
import { Observable } from 'rxjs';
import { TDSModalLegacyAPI } from './modal-legacy-api';
import { TDSModalRef } from './modal-ref';
import { ModalButtonOptions, ModalTypes, OnClickCallback, StyleObjectLike, TDSModalSize } from './modal-types';
import { TDSModalService } from './modal.service';
import * as i0 from "@angular/core";
export declare class TDSModalComponent<T = any, R = any> implements OnChanges, TDSModalLegacyAPI<T, R>, OnDestroy {
    private cdr;
    private modal;
    private viewContainerRef;
    static ngAcceptInputType_mask: BooleanInput;
    static ngAcceptInputType_maskClosable: BooleanInput;
    static ngAcceptInputType_closeOnNavigation: BooleanInput;
    static ngAcceptInputType_visible: BooleanInput;
    static ngAcceptInputType_closable: BooleanInput;
    static ngAcceptInputType_okLoading: BooleanInput;
    static ngAcceptInputType_okDisabled: BooleanInput;
    static ngAcceptInputType_cancelDisabled: BooleanInput;
    static ngAcceptInputType_cancelLoading: BooleanInput;
    static ngAcceptInputType_keyboard: BooleanInput;
    static ngAcceptInputType_noAnimation: BooleanInput;
    static ngAcceptInputType_okDanger: BooleanInput;
    static ngAcceptInputType_centered: BooleanInput;
    mask?: boolean;
    autoClose?: boolean;
    closeOnNavigation?: boolean;
    visible: boolean;
    closable: boolean;
    okLoading: boolean;
    okDisabled: boolean;
    cancelDisabled: boolean;
    cancelLoading: boolean;
    keyboard: boolean;
    noAnimation: boolean;
    centered: boolean;
    size: TDSModalSize;
    content?: string | TemplateRef<{}> | Type<T>;
    componentParams?: T;
    footer?: string | TemplateRef<{}> | Array<ModalButtonOptions<T>> | null;
    zindex: number;
    wrapClassName?: string;
    className?: string;
    style?: object;
    title?: string | TemplateRef<{}>;
    closeIcon: string | TemplateRef<void>;
    maskStyle?: StyleObjectLike;
    bodyStyle?: StyleObjectLike;
    okText?: string | null;
    cancelText?: string | null;
    okType: "default" | "primary" | "dashed" | "danger" | "link" | "text" | null;
    okDanger: boolean;
    iconType: string;
    modalType: ModalTypes;
    autofocus: 'ok' | 'cancel' | 'auto' | null;
    readonly onOk: EventEmitter<T> | OnClickCallback<T> | any;
    readonly onCancel: EventEmitter<T> | OnClickCallback<T> | any;
    readonly onAfterOpen: EventEmitter<void>;
    readonly onAfterClose: EventEmitter<R>;
    readonly visibleChange: EventEmitter<boolean>;
    contentTemplateRef: TemplateRef<{}>;
    set modalTitle(value: TemplateRef<any>);
    contentFromContentChild: TemplateRef<any>;
    set modalFooter(value: TemplateRef<any>);
    get width(): number;
    private modalRef;
    private destroy$;
    get afterOpen(): Observable<void>;
    get afterClose(): Observable<R>;
    constructor(cdr: ChangeDetectorRef, modal: TDSModalService, viewContainerRef: ViewContainerRef);
    open(): void;
    close(result?: R): void;
    destroy(result?: R): void;
    triggerOk(): void;
    triggerCancel(): void;
    getContentComponent(): T | void;
    getElement(): HTMLElement | void;
    getModalRef(): TDSModalRef | null;
    private setTitleWithTemplate;
    private setFooterWithTemplate;
    private getConfig;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<TDSModalComponent<any, any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TDSModalComponent<any, any>, "tds-modal", ["tdsModal"], { "mask": "mask"; "autoClose": "autoClose"; "closeOnNavigation": "closeOnNavigation"; "visible": "visible"; "closable": "closable"; "okLoading": "okLoading"; "okDisabled": "okDisabled"; "cancelDisabled": "cancelDisabled"; "cancelLoading": "cancelLoading"; "keyboard": "keyboard"; "noAnimation": "noAnimation"; "centered": "centered"; "size": "size"; "content": "content"; "componentParams": "componentParams"; "footer": "footer"; "zindex": "zindex"; "wrapClassName": "wrapClassName"; "className": "className"; "style": "style"; "title": "title"; "closeIcon": "closeIcon"; "maskStyle": "maskStyle"; "bodyStyle": "bodyStyle"; "okText": "okText"; "cancelText": "cancelText"; "okType": "okType"; "okDanger": "okDanger"; "iconType": "iconType"; "modalType": "modalType"; "autofocus": "autofocus"; "onOk": "onOk"; "onCancel": "onCancel"; }, { "onOk": "onOk"; "onCancel": "onCancel"; "onAfterOpen": "onAfterOpen"; "onAfterClose": "onAfterClose"; "visibleChange": "visibleChange"; }, ["modalTitle", "contentFromContentChild", "modalFooter"], ["*"]>;
}
//# sourceMappingURL=modal.component.d.ts.map