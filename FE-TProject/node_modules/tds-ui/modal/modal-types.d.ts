import { Direction } from '@angular/cdk/bidi';
import { EventEmitter, TemplateRef, Type, ViewContainerRef } from '@angular/core';
import { ButtonSize } from 'tds-ui/core/config';
import { TDSButtonColor } from 'tds-ui/shared/common';
export declare type OnClickCallback<T> = (instance: T) => (false | void | {}) | Promise<false | void | {}>;
export declare type ModalTypes = 'default' | 'confirm';
export declare type ConfirmType = 'confirm' | 'info' | 'success' | 'error' | 'warning';
export declare type ConfirmViewType = "default" | "compact";
export declare type TDSModalSize = "sm" | "md" | "lg" | 'xl' | null;
export interface StyleObjectLike {
    [key: string]: string;
}
export declare const noopFun: () => undefined;
export declare class ModalOptions<T = any, R = any> {
    size?: TDSModalSize;
    centered?: boolean;
    closable?: boolean;
    okLoading?: boolean;
    okDisabled?: boolean;
    cancelDisabled?: boolean;
    cancelLoading?: boolean;
    noAnimation?: boolean;
    autofocus?: 'ok' | 'cancel' | 'auto' | null;
    mask?: boolean;
    autoClose?: boolean;
    keyboard?: boolean;
    zindex?: number;
    width?: number | string;
    closeIcon?: string | TemplateRef<void>;
    okType?: "default" | "primary" | "dashed" | "danger" | "link" | "text" | null;
    okDanger?: boolean;
    modalType?: ModalTypes;
    onCancel?: EventEmitter<T> | OnClickCallback<T>;
    onOk?: EventEmitter<T> | OnClickCallback<T>;
    componentParams?: Partial<T>;
    maskStyle?: StyleObjectLike;
    bodyStyle?: StyleObjectLike;
    wrapClassName?: string;
    className?: string;
    style?: object;
    title?: string | TemplateRef<{}>;
    footer?: string | TemplateRef<{}> | Array<ModalButtonOptions<T>> | null;
    cancelText?: string | null;
    okText?: string | null;
    content?: string | TemplateRef<any> | Type<T>;
    closeOnNavigation?: boolean;
    viewContainerRef?: ViewContainerRef;
    onAfterOpen?: EventEmitter<void>;
    onAfterClose?: EventEmitter<R>;
    iconType?: string;
    direction?: Direction;
    confirmType?: ConfirmType;
    confirmViewType?: ConfirmViewType;
    confirmIcon?: string;
}
export interface ModalButtonOptions<T = any> {
    label: string;
    color?: TDSButtonColor;
    size?: ButtonSize;
    autoLoading?: boolean;
    show?: boolean | ((this: ModalButtonOptions<T>, contentComponentInstance?: T) => boolean);
    loading?: boolean | ((this: ModalButtonOptions<T>, contentComponentInstance?: T) => boolean);
    disabled?: boolean | ((this: ModalButtonOptions<T>, contentComponentInstance?: T) => boolean);
    onClick?(this: ModalButtonOptions<T>, contentComponentInstance?: T): any | Promise<any>;
    [key: string]: any;
}
//# sourceMappingURL=modal-types.d.ts.map