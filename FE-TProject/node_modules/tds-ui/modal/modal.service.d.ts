import { Directionality } from '@angular/cdk/bidi';
import { Overlay } from '@angular/cdk/overlay';
import { Injector, OnDestroy } from '@angular/core';
import { Observable, Subject } from 'rxjs';
import { TDSModalRef } from './modal-ref';
import { ConfirmType, ModalOptions } from './modal-types';
import * as i0 from "@angular/core";
export declare class TDSModalService implements OnDestroy {
    private overlay;
    private injector;
    private parentModal;
    private directionality;
    private openModalsAtThisLevel;
    private readonly afterAllClosedAtThisLevel;
    get openModals(): TDSModalRef[];
    get _afterAllClosed(): Subject<void>;
    readonly afterAllClose: Observable<void>;
    constructor(overlay: Overlay, injector: Injector, parentModal: TDSModalService, directionality: Directionality);
    create<T, R = any>(config: ModalOptions<T, R>): TDSModalRef<T, R>;
    closeAll(): void;
    confirm<T>(options?: ModalOptions<T>, confirmType?: ConfirmType): TDSModalRef<T>;
    info<T>(options?: ModalOptions<T>): TDSModalRef<T>;
    success<T>(options?: ModalOptions<T>): TDSModalRef<T>;
    error<T>(options?: ModalOptions<T>): TDSModalRef<T>;
    warning<T>(options?: ModalOptions<T>): TDSModalRef<T>;
    private open;
    private removeOpenModal;
    private closeModals;
    private createOverlay;
    private attachModalContainer;
    private attachModalContent;
    private createInjector;
    private confirmFactory;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<TDSModalService, [null, null, { optional: true; skipSelf: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<TDSModalService>;
}
//# sourceMappingURL=modal.service.d.ts.map