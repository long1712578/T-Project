import { Direction, Directionality } from '@angular/cdk/bidi';
import { BooleanInput, NumberInput } from '@angular/cdk/coercion';
import { Platform } from '@angular/cdk/platform';
import { AfterContentInit, AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, QueryList, Renderer2, SimpleChanges, TemplateRef } from '@angular/core';
import { TDSSafeAny } from 'tds-ui/shared/utility';
import { TDSConfigKey, TDSConfigService } from 'tds-ui/core/config';
import { TDSDragService } from 'tds-ui/core/services';
import { TDSCarouselContentDirective } from './carousel-content.directive';
import { TDSCarouselBaseStrategy } from './strategies/base-strategy';
import { FromToInterface, TDSCarouselDotPosition, TDSCarouselEffects, TDSCarouselStrategyRegistryItem } from './typings';
import { TDSResizeService } from 'tds-ui/core/services';
import * as i0 from "@angular/core";
export declare class TDSCarouselComponent implements AfterContentInit, AfterViewInit, OnDestroy, OnChanges, OnInit {
    readonly tdsConfigService: TDSConfigService;
    private readonly renderer;
    private readonly cdr;
    private readonly platform;
    private readonly resizeService;
    private readonly tdsDragService;
    private directionality;
    private customStrategies;
    readonly _tdsModuleName: TDSConfigKey;
    static ngAcceptInputType_tdsEnableSwipe: BooleanInput;
    static ngAcceptInputType_tdsDots: BooleanInput;
    static ngAcceptInputType_tdsAutoPlay: BooleanInput;
    static ngAcceptInputType_tdsAutoPlaySpeed: NumberInput;
    static ngAcceptInputType_tdsTransitionSpeed: NumberInput;
    carouselContents: QueryList<TDSCarouselContentDirective>;
    slickList?: ElementRef;
    slickTrack?: ElementRef;
    tdsDotRender?: TemplateRef<{
        $implicit: number;
    }>;
    tdsEffect: TDSCarouselEffects;
    tdsEnableSwipe: boolean;
    tdsDots: boolean;
    tdsAutoPlay: boolean;
    tdsAutoPlaySpeed: number;
    tdsTransitionSpeed: number;
    /**
     * this property is passed directly to an TDSCarouselBaseStrategy
     */
    tdsStrategyOptions: TDSSafeAny;
    set tdsDotPosition(value: TDSCarouselDotPosition);
    get tdsDotPosition(): TDSCarouselDotPosition;
    private _dotPosition;
    readonly tdsBeforeChange: EventEmitter<FromToInterface>;
    readonly tdsAfterChange: EventEmitter<number>;
    activeIndex: number;
    el: HTMLElement;
    slickListEl: HTMLElement;
    slickTrackEl: HTMLElement;
    strategy?: TDSCarouselBaseStrategy;
    vertical: boolean;
    transitionInProgress: TDSSafeAny | null;
    dir: Direction;
    private destroy$;
    private gestureRect;
    private pointerDelta;
    private isTransiting;
    private isDragging;
    constructor(elementRef: ElementRef, tdsConfigService: TDSConfigService, renderer: Renderer2, cdr: ChangeDetectorRef, platform: Platform, resizeService: TDSResizeService, tdsDragService: TDSDragService, directionality: Directionality, customStrategies: TDSCarouselStrategyRegistryItem[]);
    ngOnInit(): void;
    ngAfterContentInit(): void;
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    onKeyDown(e: KeyboardEvent): void;
    onLiClick: (index: number) => void;
    next(): void;
    pre(): void;
    goTo(index: number): void;
    private switchStrategy;
    private scheduleNextTransition;
    private clearScheduledTransition;
    private markContentActive;
    /**
     * Drag carousel.
     */
    pointerDown: (event: TouchEvent | MouseEvent) => void;
    layout(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<TDSCarouselComponent, [null, null, null, null, null, null, null, { optional: true; }, { optional: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TDSCarouselComponent, "tds-carousel", ["tdsCarousel"], { "tdsDotRender": "tdsDotRender"; "tdsEffect": "tdsEffect"; "tdsEnableSwipe": "tdsEnableSwipe"; "tdsDots": "tdsDots"; "tdsAutoPlay": "tdsAutoPlay"; "tdsAutoPlaySpeed": "tdsAutoPlaySpeed"; "tdsTransitionSpeed": "tdsTransitionSpeed"; "tdsStrategyOptions": "tdsStrategyOptions"; "tdsDotPosition": "tdsDotPosition"; }, { "tdsBeforeChange": "tdsBeforeChange"; "tdsAfterChange": "tdsAfterChange"; }, ["carouselContents"], ["*"]>;
}
//# sourceMappingURL=carousel.component.d.ts.map