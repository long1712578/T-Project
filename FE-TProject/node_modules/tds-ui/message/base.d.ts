import { AnimationEvent } from '@angular/animations';
import { ComponentType, Overlay } from '@angular/cdk/overlay';
import { ChangeDetectorRef, EventEmitter, Injector, OnDestroy, OnInit } from '@angular/core';
import { Subject } from 'rxjs';
import { MessageConfig, TDSConfigService } from 'tds-ui/core/config';
import { TDSSingletonService } from 'tds-ui/core/services';
import { TDSMessageData, TDSMessageDataOptions } from './typings';
import * as i0 from "@angular/core";
export declare abstract class TDSMNService {
    protected tdsSingletonService: TDSSingletonService;
    protected overlay: Overlay;
    private injector;
    protected abstract componentPrefix: string;
    protected container?: TDSMNContainerComponent;
    zIndexMessage: string;
    constructor(tdsSingletonService: TDSSingletonService, overlay: Overlay, injector: Injector);
    remove(id?: string): void;
    protected getInstanceId(): string;
    protected withContainer<T extends TDSMNContainerComponent>(ctor: ComponentType<T>): T;
}
export declare abstract class TDSMNContainerComponent implements OnInit, OnDestroy {
    protected cdr: ChangeDetectorRef;
    protected tdsConfigService: TDSConfigService;
    config?: Required<MessageConfig>;
    instances: Array<Required<TDSMessageData>>;
    protected readonly destroy$: Subject<void>;
    constructor(cdr: ChangeDetectorRef, tdsConfigService: TDSConfigService);
    ngOnInit(): void;
    ngOnDestroy(): void;
    create(data: TDSMessageData): Required<TDSMessageData>;
    remove(id: string, userAction?: boolean): void;
    removeAll(): void;
    protected onCreate(instance: TDSMessageData): Required<TDSMessageData>;
    protected onRemove(instance: Required<TDSMessageData>, userAction: boolean): void;
    protected readyInstances(): void;
    protected abstract updateConfig(): void;
    protected abstract subscribeConfigChange(): void;
    protected mergeOptions(options?: TDSMessageDataOptions): TDSMessageDataOptions;
    static ɵfac: i0.ɵɵFactoryDeclaration<TDSMNContainerComponent, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<TDSMNContainerComponent, never, never, {}, {}, never>;
}
export declare abstract class TDSMNComponent implements OnInit, OnDestroy {
    protected cdr: ChangeDetectorRef;
    instance: Required<TDSMessageData>;
    index?: number;
    readonly destroyed: EventEmitter<{
        id: string;
        userAction: boolean;
    }>;
    readonly animationStateChanged: Subject<AnimationEvent>;
    protected options: Required<TDSMessageDataOptions>;
    protected autoClose?: boolean;
    protected closeTimer?: any;
    protected userAction: boolean;
    protected eraseTimer: any | null;
    protected eraseTimingStart?: number;
    protected eraseTTL: number;
    protected constructor(cdr: ChangeDetectorRef);
    ngOnInit(): void;
    ngOnDestroy(): void;
    onEnter(): void;
    onLeave(): void;
    protected destroy(userAction?: boolean): void;
    private initErase;
    private updateTTL;
    private startEraseTimeout;
    private clearEraseTimeout;
    static ɵfac: i0.ɵɵFactoryDeclaration<TDSMNComponent, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<TDSMNComponent, never, never, {}, {}, never>;
}
//# sourceMappingURL=base.d.ts.map