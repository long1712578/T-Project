import { NumberInput } from '@angular/cdk/coercion';
import { Platform } from '@angular/cdk/platform';
import { ChangeDetectorRef, ElementRef, EventEmitter, OnChanges } from '@angular/core';
import { NgClassInterface, NgStyleInterface, TDSConfigKey, TDSConfigService } from 'tds-ui/core/config';
import * as i0 from "@angular/core";
export declare class TDSAvatarComponent implements OnChanges {
    tdsConfigService: TDSConfigService;
    private elementRef;
    private cdr;
    private platform;
    static ngAcceptInputType_gap: NumberInput;
    readonly _tdsModuleName: TDSConfigKey;
    shape: 'square' | 'circle';
    size: 'md' | 'lg' | 'sm' | 'xl' | number;
    gap: number;
    isAvatar: boolean;
    text?: string;
    tdsSrc?: string;
    tdsSrcSet?: string;
    tdsSrcPlaceholder?: string;
    alt?: string;
    icon?: string;
    readonly error: EventEmitter<Event>;
    showPlaceholder: boolean;
    hasText: boolean;
    hasSrc: boolean;
    hasIcon: boolean;
    textStyles: NgStyleInterface;
    classMap: NgClassInterface;
    customSize: string | null;
    textEl?: ElementRef;
    private el;
    constructor(tdsConfigService: TDSConfigService, elementRef: ElementRef, cdr: ChangeDetectorRef, platform: Platform);
    get hasTdsSrc(): boolean;
    imgError($event: Event): void;
    ngOnChanges(): void;
    private calcStringSize;
    private notifyCalc;
    private setSizeStyle;
    buildClsCss(): void;
    get hasTdsSrcPlaceholder(): boolean;
    get element(): HTMLElement;
    static ɵfac: i0.ɵɵFactoryDeclaration<TDSAvatarComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TDSAvatarComponent, "tds-avatar", ["tdsAvatar"], { "shape": "shape"; "size": "size"; "gap": "gap"; "isAvatar": "isAvatar"; "text": "text"; "tdsSrc": "tdsSrc"; "tdsSrcSet": "tdsSrcSet"; "tdsSrcPlaceholder": "tdsSrcPlaceholder"; "alt": "alt"; "icon": "icon"; }, { "error": "error"; }, never, never>;
}
//# sourceMappingURL=avatar.component.d.ts.map