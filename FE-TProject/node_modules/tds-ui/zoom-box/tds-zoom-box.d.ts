import { ConnectionPositionPair } from '@angular/cdk/overlay';
import { ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, OnInit, Renderer2 } from '@angular/core';
import * as i0 from "@angular/core";
export interface zoomboxCoord {
    x: number;
    y: number;
}
export declare class TDSZoomBoxComponent implements OnInit, OnDestroy {
    private renderer;
    private cd;
    private static readonly validZoomModes;
    zoomContainer: ElementRef;
    imageThumbnail: ElementRef;
    fullSizeImage: ElementRef;
    zoomScroll: EventEmitter<number>;
    zoomPosition: EventEmitter<zoomboxCoord>;
    displayLen: string;
    displayOverlay: string;
    displayInPic: string;
    fullImageTop: number;
    fullImageLeft: number;
    magnifiedWidth: number;
    magnifiedHeight: number;
    lensTop: number;
    lensLeft: number;
    enableLens: boolean;
    thumbImage: string;
    fullImage: string;
    thumbWidth: number;
    thumbHeight: number;
    fullWidth: number;
    fullHeight: number;
    lensWidth: number;
    lensHeight: number;
    defaultLenWidth: number;
    defaultLenHeight: number;
    overlayTop: number;
    overlayLeft: number;
    overlayWidth: number;
    overlayHeight: number;
    overlayVisible: boolean;
    extendY: number;
    extendX: number;
    private zoomMode;
    private magnification;
    private enableScrollZoom;
    private scrollStepSize;
    circularLens: boolean;
    private baseRatio;
    private minZoomRatio;
    private maxZoomRatio;
    private xRatio;
    private yRatio;
    private offsetLeft;
    private offsetTop;
    private zoomingEnabled;
    private zoomFrozen;
    private isReady;
    private thumbImageLoaded;
    private fullImageLoaded;
    private latestMouseLeft;
    private latestMouseTop;
    private eventListeners;
    position: ConnectionPositionPair[];
    constructor(renderer: Renderer2, cd: ChangeDetectorRef);
    enableOverlay: boolean;
    set setExtendX(value: number);
    set setExtendY(value: number);
    set setThumbImage(thumbImage: string);
    set setFullImage(fullImage: string);
    set setZoomMode(zoomMode: string);
    set setMagnification(magnification: number);
    set setMinZoomRatio(minZoomRatio: number);
    set setMaxZoomRatio(maxZoomRatio: number);
    set setScrollStepSize(stepSize: number);
    set setEnableLens(enable: boolean);
    set setLensWidth(width: number);
    set setLensHeight(height: number);
    set setCircularLens(enable: boolean);
    set setEnableScrollZoom(enable: boolean);
    set setPositon(pos: string | string[]);
    ngOnInit(): void;
    ngOnDestroy(): void;
    setOverlayPositon(pos: string | string[]): void;
    onThumbImageLoaded(): void;
    onFullImageLoaded(): void;
    private setUpEventListeners;
    private checkImagesLoaded;
    /**
     * Zoom position setters
     */
    private setZoomPosition;
    /**
     * Mouse wheel event
     */
    private onMouseWheel;
    /**
     * Hover mode
     */
    private hoverMouseEnter;
    private hoverMouseLeave;
    private hoverMouseMove;
    /**
     * Toggle mode
     */
    private toggleClick;
    /**
     * Click mode
     */
    private clickStarter;
    private clickMouseLeave;
    private clickMouseMove;
    /**
     * Hover freeze mode
     */
    private hoverFreezeMouseEnter;
    private hoverFreezeMouseLeave;
    private hoverFreezeMouseMove;
    private hoverFreezeClick;
    /**
     * Private helper methods
     */
    private zoomOn;
    private zoomOff;
    private calculateZoomPosition;
    private calculateImageAndLensPosition;
    private calculateRatioAndOffset;
    private calculateRatio;
    static ɵfac: i0.ɵɵFactoryDeclaration<TDSZoomBoxComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TDSZoomBoxComponent, "tds-zoombox", ["TDSZoomBoxComponent"], { "enableOverlay": "enableOverlay"; "setExtendX": "extendX"; "setExtendY": "extendY"; "setThumbImage": "thumbImage"; "setFullImage": "fullImage"; "setZoomMode": "zoomMode"; "setMagnification": "magnification"; "setMinZoomRatio": "minZoomRatio"; "setMaxZoomRatio": "maxZoomRatio"; "setScrollStepSize": "scrollStepSize"; "setEnableLens": "enableLens"; "setLensWidth": "lensWidth"; "setLensHeight": "lensHeight"; "setCircularLens": "circularLens"; "setEnableScrollZoom": "enableScrollZoom"; "setPositon": "postion"; }, { "zoomScroll": "zoomScroll"; "zoomPosition": "zoomPosition"; }, never, never>;
}
//# sourceMappingURL=tds-zoom-box.d.ts.map