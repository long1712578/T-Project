import { TinyColor } from './tinycolor';
// Readability Functions
// ---------------------
// <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)
/**
 * AKA `contrast`
 *
 * Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)
 */
export function readability(color1, color2) {
    const c1 = new TinyColor(color1);
    const c2 = new TinyColor(color2);
    return ((Math.max(c1.getLuminance(), c2.getLuminance()) + 0.05) /
        (Math.min(c1.getLuminance(), c2.getLuminance()) + 0.05));
}
/**
 * Ensure that foreground and background color combinations meet WCAG2 guidelines.
 * The third argument is an object.
 *      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';
 *      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.
 * If the entire object is absent, isReadable defaults to {level:"AA",size:"small"}.
 *
 * Example
 * ```ts
 * new TinyColor().isReadable('#000', '#111') => false
 * new TinyColor().isReadable('#000', '#111', { level: 'AA', size: 'large' }) => false
 * ```
 */
export function isReadable(color1, color2, wcag2 = { level: 'AA', size: 'small' }) {
    const readabilityLevel = readability(color1, color2);
    switch ((wcag2.level ?? 'AA') + (wcag2.size ?? 'small')) {
        case 'AAsmall':
        case 'AAAlarge':
            return readabilityLevel >= 4.5;
        case 'AAlarge':
            return readabilityLevel >= 3;
        case 'AAAsmall':
            return readabilityLevel >= 7;
        default:
            return false;
    }
}
/**
 * Given a base color and a list of possible foreground or background
 * colors for that base, returns the most readable color.
 * Optionally returns Black or White if the most readable color is unreadable.
 *
 * @param baseColor - the base color.
 * @param colorList - array of colors to pick the most readable one from.
 * @param args - and object with extra arguments
 *
 * Example
 * ```ts
 * new TinyColor().mostReadable('#123', ['#124", "#125'], { includeFallbackColors: false }).toHexString(); // "#112255"
 * new TinyColor().mostReadable('#123', ['#124", "#125'],{ includeFallbackColors: true }).toHexString();  // "#ffffff"
 * new TinyColor().mostReadable('#a8015a', ["#faf3f3"], { includeFallbackColors:true, level: 'AAA', size: 'large' }).toHexString(); // "#faf3f3"
 * new TinyColor().mostReadable('#a8015a', ["#faf3f3"], { includeFallbackColors:true, level: 'AAA', size: 'small' }).toHexString(); // "#ffffff"
 * ```
 */
export function mostReadable(baseColor, colorList, args = { includeFallbackColors: false, level: 'AA', size: 'small' }) {
    let bestColor = null;
    let bestScore = 0;
    const { includeFallbackColors, level, size } = args;
    for (const color of colorList) {
        const score = readability(baseColor, color);
        if (score > bestScore) {
            bestScore = score;
            bestColor = new TinyColor(color);
        }
    }
    if (isReadable(baseColor, bestColor, { level, size }) || !includeFallbackColors) {
        return bestColor;
    }
    args.includeFallbackColors = false;
    return mostReadable(baseColor, ['#fff', '#000'], args);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVhZGFiaWxpdHkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy90ZHMtdWkvdGlueWNvbG9yL3JlYWRhYmlsaXR5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBYyxTQUFTLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFcEQsd0JBQXdCO0FBQ3hCLHdCQUF3QjtBQUN4QixxRkFBcUY7QUFFckY7Ozs7R0FJRztBQUNILE1BQU0sVUFBVSxXQUFXLENBQUMsTUFBa0IsRUFBRSxNQUFrQjtJQUNoRSxNQUFNLEVBQUUsR0FBRyxJQUFJLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNqQyxNQUFNLEVBQUUsR0FBRyxJQUFJLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNqQyxPQUFPLENBQ0wsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsRUFBRSxFQUFFLENBQUMsWUFBWSxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUM7UUFDdkQsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsRUFBRSxFQUFFLENBQUMsWUFBWSxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FDeEQsQ0FBQztBQUNKLENBQUM7QUFPRDs7Ozs7Ozs7Ozs7O0dBWUc7QUFDSCxNQUFNLFVBQVUsVUFBVSxDQUN4QixNQUFrQixFQUNsQixNQUFrQixFQUNsQixRQUFvQixFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRTtJQUVsRCxNQUFNLGdCQUFnQixHQUFHLFdBQVcsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDckQsUUFBUSxDQUFDLEtBQUssQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxJQUFJLE9BQU8sQ0FBQyxFQUFFO1FBQ3ZELEtBQUssU0FBUyxDQUFDO1FBQ2YsS0FBSyxVQUFVO1lBQ2IsT0FBTyxnQkFBZ0IsSUFBSSxHQUFHLENBQUM7UUFDakMsS0FBSyxTQUFTO1lBQ1osT0FBTyxnQkFBZ0IsSUFBSSxDQUFDLENBQUM7UUFDL0IsS0FBSyxVQUFVO1lBQ2IsT0FBTyxnQkFBZ0IsSUFBSSxDQUFDLENBQUM7UUFDL0I7WUFDRSxPQUFPLEtBQUssQ0FBQztLQUNoQjtBQUNILENBQUM7QUFNRDs7Ozs7Ozs7Ozs7Ozs7OztHQWdCRztBQUNILE1BQU0sVUFBVSxZQUFZLENBQzFCLFNBQXFCLEVBQ3JCLFNBQXVCLEVBQ3ZCLE9BQTJCLEVBQUUscUJBQXFCLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRTtJQUV2RixJQUFJLFNBQVMsR0FBcUIsSUFBSSxDQUFDO0lBQ3ZDLElBQUksU0FBUyxHQUFHLENBQUMsQ0FBQztJQUNsQixNQUFNLEVBQUUscUJBQXFCLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQztJQUVwRCxLQUFLLE1BQU0sS0FBSyxJQUFJLFNBQVMsRUFBRTtRQUM3QixNQUFNLEtBQUssR0FBRyxXQUFXLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQzVDLElBQUksS0FBSyxHQUFHLFNBQVMsRUFBRTtZQUNyQixTQUFTLEdBQUcsS0FBSyxDQUFDO1lBQ2xCLFNBQVMsR0FBRyxJQUFJLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNsQztLQUNGO0lBRUQsSUFBSSxVQUFVLENBQUMsU0FBUyxFQUFFLFNBQVUsRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMscUJBQXFCLEVBQUU7UUFDaEYsT0FBTyxTQUFTLENBQUM7S0FDbEI7SUFFRCxJQUFJLENBQUMscUJBQXFCLEdBQUcsS0FBSyxDQUFDO0lBQ25DLE9BQU8sWUFBWSxDQUFDLFNBQVMsRUFBRSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUN6RCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29sb3JJbnB1dCwgVGlueUNvbG9yIH0gZnJvbSAnLi90aW55Y29sb3InO1xyXG5cclxuLy8gUmVhZGFiaWxpdHkgRnVuY3Rpb25zXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyA8aHR0cDovL3d3dy53My5vcmcvVFIvMjAwOC9SRUMtV0NBRzIwLTIwMDgxMjExLyNjb250cmFzdC1yYXRpb2RlZiAoV0NBRyBWZXJzaW9uIDIpXHJcblxyXG4vKipcclxuICogQUtBIGBjb250cmFzdGBcclxuICpcclxuICogQW5hbHl6ZSB0aGUgMiBjb2xvcnMgYW5kIHJldHVybnMgdGhlIGNvbG9yIGNvbnRyYXN0IGRlZmluZWQgYnkgKFdDQUcgVmVyc2lvbiAyKVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHJlYWRhYmlsaXR5KGNvbG9yMTogQ29sb3JJbnB1dCwgY29sb3IyOiBDb2xvcklucHV0KTogbnVtYmVyIHtcclxuICBjb25zdCBjMSA9IG5ldyBUaW55Q29sb3IoY29sb3IxKTtcclxuICBjb25zdCBjMiA9IG5ldyBUaW55Q29sb3IoY29sb3IyKTtcclxuICByZXR1cm4gKFxyXG4gICAgKE1hdGgubWF4KGMxLmdldEx1bWluYW5jZSgpLCBjMi5nZXRMdW1pbmFuY2UoKSkgKyAwLjA1KSAvXHJcbiAgICAoTWF0aC5taW4oYzEuZ2V0THVtaW5hbmNlKCksIGMyLmdldEx1bWluYW5jZSgpKSArIDAuMDUpXHJcbiAgKTtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBXQ0FHMlBhcm1zIHtcclxuICBsZXZlbD86ICdBQScgfCAnQUFBJztcclxuICBzaXplPzogJ2xhcmdlJyB8ICdzbWFsbCc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBFbnN1cmUgdGhhdCBmb3JlZ3JvdW5kIGFuZCBiYWNrZ3JvdW5kIGNvbG9yIGNvbWJpbmF0aW9ucyBtZWV0IFdDQUcyIGd1aWRlbGluZXMuXHJcbiAqIFRoZSB0aGlyZCBhcmd1bWVudCBpcyBhbiBvYmplY3QuXHJcbiAqICAgICAgdGhlICdsZXZlbCcgcHJvcGVydHkgc3RhdGVzICdBQScgb3IgJ0FBQScgLSBpZiBtaXNzaW5nIG9yIGludmFsaWQsIGl0IGRlZmF1bHRzIHRvICdBQSc7XHJcbiAqICAgICAgdGhlICdzaXplJyBwcm9wZXJ0eSBzdGF0ZXMgJ2xhcmdlJyBvciAnc21hbGwnIC0gaWYgbWlzc2luZyBvciBpbnZhbGlkLCBpdCBkZWZhdWx0cyB0byAnc21hbGwnLlxyXG4gKiBJZiB0aGUgZW50aXJlIG9iamVjdCBpcyBhYnNlbnQsIGlzUmVhZGFibGUgZGVmYXVsdHMgdG8ge2xldmVsOlwiQUFcIixzaXplOlwic21hbGxcIn0uXHJcbiAqXHJcbiAqIEV4YW1wbGVcclxuICogYGBgdHNcclxuICogbmV3IFRpbnlDb2xvcigpLmlzUmVhZGFibGUoJyMwMDAnLCAnIzExMScpID0+IGZhbHNlXHJcbiAqIG5ldyBUaW55Q29sb3IoKS5pc1JlYWRhYmxlKCcjMDAwJywgJyMxMTEnLCB7IGxldmVsOiAnQUEnLCBzaXplOiAnbGFyZ2UnIH0pID0+IGZhbHNlXHJcbiAqIGBgYFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGlzUmVhZGFibGUoXHJcbiAgY29sb3IxOiBDb2xvcklucHV0LFxyXG4gIGNvbG9yMjogQ29sb3JJbnB1dCxcclxuICB3Y2FnMjogV0NBRzJQYXJtcyA9IHsgbGV2ZWw6ICdBQScsIHNpemU6ICdzbWFsbCcgfSxcclxuKTogYm9vbGVhbiB7XHJcbiAgY29uc3QgcmVhZGFiaWxpdHlMZXZlbCA9IHJlYWRhYmlsaXR5KGNvbG9yMSwgY29sb3IyKTtcclxuICBzd2l0Y2ggKCh3Y2FnMi5sZXZlbCA/PyAnQUEnKSArICh3Y2FnMi5zaXplID8/ICdzbWFsbCcpKSB7XHJcbiAgICBjYXNlICdBQXNtYWxsJzpcclxuICAgIGNhc2UgJ0FBQWxhcmdlJzpcclxuICAgICAgcmV0dXJuIHJlYWRhYmlsaXR5TGV2ZWwgPj0gNC41O1xyXG4gICAgY2FzZSAnQUFsYXJnZSc6XHJcbiAgICAgIHJldHVybiByZWFkYWJpbGl0eUxldmVsID49IDM7XHJcbiAgICBjYXNlICdBQUFzbWFsbCc6XHJcbiAgICAgIHJldHVybiByZWFkYWJpbGl0eUxldmVsID49IDc7XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFdDQUcyRmFsbGJhY2tQYXJtcyBleHRlbmRzIFdDQUcyUGFybXMge1xyXG4gIGluY2x1ZGVGYWxsYmFja0NvbG9ycz86IGJvb2xlYW47XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBHaXZlbiBhIGJhc2UgY29sb3IgYW5kIGEgbGlzdCBvZiBwb3NzaWJsZSBmb3JlZ3JvdW5kIG9yIGJhY2tncm91bmRcclxuICogY29sb3JzIGZvciB0aGF0IGJhc2UsIHJldHVybnMgdGhlIG1vc3QgcmVhZGFibGUgY29sb3IuXHJcbiAqIE9wdGlvbmFsbHkgcmV0dXJucyBCbGFjayBvciBXaGl0ZSBpZiB0aGUgbW9zdCByZWFkYWJsZSBjb2xvciBpcyB1bnJlYWRhYmxlLlxyXG4gKlxyXG4gKiBAcGFyYW0gYmFzZUNvbG9yIC0gdGhlIGJhc2UgY29sb3IuXHJcbiAqIEBwYXJhbSBjb2xvckxpc3QgLSBhcnJheSBvZiBjb2xvcnMgdG8gcGljayB0aGUgbW9zdCByZWFkYWJsZSBvbmUgZnJvbS5cclxuICogQHBhcmFtIGFyZ3MgLSBhbmQgb2JqZWN0IHdpdGggZXh0cmEgYXJndW1lbnRzXHJcbiAqXHJcbiAqIEV4YW1wbGVcclxuICogYGBgdHNcclxuICogbmV3IFRpbnlDb2xvcigpLm1vc3RSZWFkYWJsZSgnIzEyMycsIFsnIzEyNFwiLCBcIiMxMjUnXSwgeyBpbmNsdWRlRmFsbGJhY2tDb2xvcnM6IGZhbHNlIH0pLnRvSGV4U3RyaW5nKCk7IC8vIFwiIzExMjI1NVwiXHJcbiAqIG5ldyBUaW55Q29sb3IoKS5tb3N0UmVhZGFibGUoJyMxMjMnLCBbJyMxMjRcIiwgXCIjMTI1J10seyBpbmNsdWRlRmFsbGJhY2tDb2xvcnM6IHRydWUgfSkudG9IZXhTdHJpbmcoKTsgIC8vIFwiI2ZmZmZmZlwiXHJcbiAqIG5ldyBUaW55Q29sb3IoKS5tb3N0UmVhZGFibGUoJyNhODAxNWEnLCBbXCIjZmFmM2YzXCJdLCB7IGluY2x1ZGVGYWxsYmFja0NvbG9yczp0cnVlLCBsZXZlbDogJ0FBQScsIHNpemU6ICdsYXJnZScgfSkudG9IZXhTdHJpbmcoKTsgLy8gXCIjZmFmM2YzXCJcclxuICogbmV3IFRpbnlDb2xvcigpLm1vc3RSZWFkYWJsZSgnI2E4MDE1YScsIFtcIiNmYWYzZjNcIl0sIHsgaW5jbHVkZUZhbGxiYWNrQ29sb3JzOnRydWUsIGxldmVsOiAnQUFBJywgc2l6ZTogJ3NtYWxsJyB9KS50b0hleFN0cmluZygpOyAvLyBcIiNmZmZmZmZcIlxyXG4gKiBgYGBcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBtb3N0UmVhZGFibGUoXHJcbiAgYmFzZUNvbG9yOiBDb2xvcklucHV0LFxyXG4gIGNvbG9yTGlzdDogQ29sb3JJbnB1dFtdLFxyXG4gIGFyZ3M6IFdDQUcyRmFsbGJhY2tQYXJtcyA9IHsgaW5jbHVkZUZhbGxiYWNrQ29sb3JzOiBmYWxzZSwgbGV2ZWw6ICdBQScsIHNpemU6ICdzbWFsbCcgfSxcclxuKTogVGlueUNvbG9yIHwgbnVsbCB7XHJcbiAgbGV0IGJlc3RDb2xvcjogVGlueUNvbG9yIHwgbnVsbCA9IG51bGw7XHJcbiAgbGV0IGJlc3RTY29yZSA9IDA7XHJcbiAgY29uc3QgeyBpbmNsdWRlRmFsbGJhY2tDb2xvcnMsIGxldmVsLCBzaXplIH0gPSBhcmdzO1xyXG5cclxuICBmb3IgKGNvbnN0IGNvbG9yIG9mIGNvbG9yTGlzdCkge1xyXG4gICAgY29uc3Qgc2NvcmUgPSByZWFkYWJpbGl0eShiYXNlQ29sb3IsIGNvbG9yKTtcclxuICAgIGlmIChzY29yZSA+IGJlc3RTY29yZSkge1xyXG4gICAgICBiZXN0U2NvcmUgPSBzY29yZTtcclxuICAgICAgYmVzdENvbG9yID0gbmV3IFRpbnlDb2xvcihjb2xvcik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBpZiAoaXNSZWFkYWJsZShiYXNlQ29sb3IsIGJlc3RDb2xvciEsIHsgbGV2ZWwsIHNpemUgfSkgfHwgIWluY2x1ZGVGYWxsYmFja0NvbG9ycykge1xyXG4gICAgcmV0dXJuIGJlc3RDb2xvcjtcclxuICB9XHJcblxyXG4gIGFyZ3MuaW5jbHVkZUZhbGxiYWNrQ29sb3JzID0gZmFsc2U7XHJcbiAgcmV0dXJuIG1vc3RSZWFkYWJsZShiYXNlQ29sb3IsIFsnI2ZmZicsICcjMDAwJ10sIGFyZ3MpO1xyXG59XHJcbiJdfQ==