import { ChangeDetectionStrategy, Component, EventEmitter, Host, Optional, TemplateRef, ViewChild, ViewEncapsulation } from '@angular/core';
import { BehaviorSubject, Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { slideMotion } from 'tds-ui/core/animation';
import { TDSMenuService } from 'tds-ui/menu';
import * as i0 from "@angular/core";
import * as i1 from "tds-ui/menu";
import * as i2 from "@angular/cdk/bidi";
import * as i3 from "tds-ui/core/no-animation";
import * as i4 from "@angular/common";
function TDSDropdownMenuComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    const _r2 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 0);
    i0.ɵɵlistener("@slideMotion.done", function TDSDropdownMenuComponent_ng_template_0_Template_div_animation_slideMotion_done_0_listener($event) { i0.ɵɵrestoreView(_r2); const ctx_r1 = i0.ɵɵnextContext(); return ctx_r1.onAnimationEvent($event); })("mouseenter", function TDSDropdownMenuComponent_ng_template_0_Template_div_mouseenter_0_listener() { i0.ɵɵrestoreView(_r2); const ctx_r3 = i0.ɵɵnextContext(); return ctx_r3.setMouseState(true); })("mouseleave", function TDSDropdownMenuComponent_ng_template_0_Template_div_mouseleave_0_listener() { i0.ɵɵrestoreView(_r2); const ctx_r4 = i0.ɵɵnextContext(); return ctx_r4.setMouseState(false); });
    i0.ɵɵelementStart(1, "div", 1)(2, "div", 2);
    i0.ɵɵprojection(3);
    i0.ɵɵelementEnd()()();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵclassProp("tds-dropdown-rtl", ctx_r0.dir === "rtl");
    i0.ɵɵproperty("ngClass", ctx_r0.overlayClassName)("ngStyle", ctx_r0.overlayStyle)("@slideMotion", undefined);
} }
const _c0 = ["*"];
export class TDSDropdownMenuComponent {
    constructor(cdr, elementRef, renderer, viewContainerRef, tdsMenuService, directionality, noAnimation) {
        this.cdr = cdr;
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.viewContainerRef = viewContainerRef;
        this.tdsMenuService = tdsMenuService;
        this.directionality = directionality;
        this.noAnimation = noAnimation;
        this.mouseState$ = new BehaviorSubject(false);
        this.isChildSubMenuOpen$ = this.tdsMenuService.isChildSubMenuOpen$;
        this.descendantMenuItemClick$ = this.tdsMenuService.descendantMenuItemClick$;
        this.animationStateChange$ = new EventEmitter();
        this.overlayClassName = '';
        this.overlayStyle = {};
        this.dir = 'ltr';
        this.destroy$ = new Subject();
    }
    onAnimationEvent(event) {
        this.animationStateChange$.emit(event);
    }
    setMouseState(visible) {
        this.mouseState$.next(visible);
    }
    setValue(key, value) {
        this[key] = value;
        this.cdr.markForCheck();
    }
    ngOnInit() {
        this.directionality.change?.pipe(takeUntil(this.destroy$)).subscribe((direction) => {
            this.dir = direction;
            this.cdr.detectChanges();
        });
        this.dir = this.directionality.value;
    }
    ngAfterContentInit() {
        this.renderer.removeChild(this.renderer.parentNode(this.elementRef.nativeElement), this.elementRef.nativeElement);
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
}
TDSDropdownMenuComponent.ɵfac = function TDSDropdownMenuComponent_Factory(t) { return new (t || TDSDropdownMenuComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i1.TDSMenuService), i0.ɵɵdirectiveInject(i2.Directionality, 8), i0.ɵɵdirectiveInject(i3.TDSNoAnimationDirective, 9)); };
TDSDropdownMenuComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSDropdownMenuComponent, selectors: [["tds-dropdown-menu"]], viewQuery: function TDSDropdownMenuComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(TemplateRef, 7);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.templateRef = _t.first);
    } }, exportAs: ["tdsDropdownMenu"], features: [i0.ɵɵProvidersFeature([
            TDSMenuService,
            // /** menu is inside dropdown-menu component **/
            // {
            //   provide: TDSIsMenuInsideDropDownToken,
            //   useValue: true
            // }
        ])], ngContentSelectors: _c0, decls: 1, vars: 0, consts: [[1, "tds-dropdown", "min-w-full", "relative", 3, "ngClass", "ngStyle", "mouseenter", "mouseleave"], [1, "py-1", "w-full"], [1, "w-full", "bg-white", "dark:bg-d-neutral-3-300", "shadow-1-lg", "rounded", "py-1"]], template: function TDSDropdownMenuComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵtemplate(0, TDSDropdownMenuComponent_ng_template_0_Template, 4, 5, "ng-template");
    } }, directives: [i4.NgClass, i4.NgStyle], encapsulation: 2, data: { animation: [slideMotion] }, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSDropdownMenuComponent, [{
        type: Component,
        args: [{
                selector: `tds-dropdown-menu`,
                exportAs: `tdsDropdownMenu`,
                animations: [slideMotion],
                providers: [
                    TDSMenuService,
                    // /** menu is inside dropdown-menu component **/
                    // {
                    //   provide: TDSIsMenuInsideDropDownToken,
                    //   useValue: true
                    // }
                ],
                template: `
    <ng-template>
      <div 
        class="tds-dropdown   min-w-full relative"
        [class.tds-dropdown-rtl]="dir === 'rtl'"
        [ngClass]="overlayClassName"
        [ngStyle]="overlayStyle"
        @slideMotion
        (@slideMotion.done)="onAnimationEvent($event)"       
        (mouseenter)="setMouseState(true)"
        (mouseleave)="setMouseState(false)"
      >
      <div class="py-1 w-full" >
        <div class='w-full bg-white dark:bg-d-neutral-3-300  shadow-1-lg rounded py-1'>
          <ng-content></ng-content>
        </div>        
      </div>
        
      </div>
    </ng-template>
  `,
                preserveWhitespaces: false,
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
            }]
    }], function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i0.ViewContainerRef }, { type: i1.TDSMenuService }, { type: i2.Directionality, decorators: [{
                type: Optional
            }] }, { type: i3.TDSNoAnimationDirective, decorators: [{
                type: Host
            }, {
                type: Optional
            }] }]; }, { templateRef: [{
            type: ViewChild,
            args: [TemplateRef, { static: true }]
        }] }); })();
//# sourceMappingURL=data:application/json;base64,