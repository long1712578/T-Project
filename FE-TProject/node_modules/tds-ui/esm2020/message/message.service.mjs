import { Injectable } from '@angular/core';
import { TDSMNService } from './base';
import { TDSMessageContainerComponent } from './message-container.component';
import { TDSMessageServiceModule } from './message.service.module';
import * as i0 from "@angular/core";
import * as i1 from "tds-ui/core/services";
import * as i2 from "@angular/cdk/overlay";
export class TDSMessageService extends TDSMNService {
    constructor(tdsSingletonService, overlay, injector) {
        super(tdsSingletonService, overlay, injector);
        this.componentPrefix = 'message-';
    }
    success(content, options) {
        return this.createInstance({ type: 'success', content }, options);
    }
    error(content, options) {
        return this.createInstance({ type: 'error', content }, options);
    }
    info(content, options) {
        return this.createInstance({ type: 'info', content }, options);
    }
    warning(content, options) {
        return this.createInstance({ type: 'warning', content }, options);
    }
    loading(content, options) {
        return this.createInstance({ type: 'loading', content }, options);
    }
    create(type, content, options) {
        return this.createInstance({ type, content }, options);
    }
    createInstance(message, options) {
        this.container = this.withContainer(TDSMessageContainerComponent);
        return this.container.create({
            ...message,
            ...{
                createdAt: new Date(),
                messageId: this.getInstanceId(),
                options
            }
        });
    }
}
TDSMessageService.ɵfac = function TDSMessageService_Factory(t) { return new (t || TDSMessageService)(i0.ɵɵinject(i1.TDSSingletonService), i0.ɵɵinject(i2.Overlay), i0.ɵɵinject(i0.Injector)); };
TDSMessageService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: TDSMessageService, factory: TDSMessageService.ɵfac, providedIn: TDSMessageServiceModule });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSMessageService, [{
        type: Injectable,
        args: [{
                providedIn: TDSMessageServiceModule
            }]
    }], function () { return [{ type: i1.TDSSingletonService }, { type: i2.Overlay }, { type: i0.Injector }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvdGRzLXVpL21lc3NhZ2UvbWVzc2FnZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE9BQU8sRUFBRSxVQUFVLEVBQXlCLE1BQU0sZUFBZSxDQUFDO0FBR2xFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDdEMsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDN0UsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sMEJBQTBCLENBQUM7Ozs7QUFNbkUsTUFBTSxPQUFPLGlCQUFrQixTQUFRLFlBQVk7SUFJakQsWUFBWSxtQkFBd0MsRUFBRSxPQUFnQixFQUFFLFFBQWtCO1FBQ3hGLEtBQUssQ0FBQyxtQkFBbUIsRUFBRSxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFIdEMsb0JBQWUsR0FBRyxVQUFVLENBQUM7SUFJdkMsQ0FBQztJQUVELE9BQU8sQ0FBQyxPQUFtQyxFQUFFLE9BQStCO1FBQzFFLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDcEUsQ0FBQztJQUVELEtBQUssQ0FBQyxPQUFtQyxFQUFFLE9BQStCO1FBQ3hFLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDbEUsQ0FBQztJQUVELElBQUksQ0FBQyxPQUFtQyxFQUFFLE9BQStCO1FBQ3ZFLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDakUsQ0FBQztJQUVELE9BQU8sQ0FBQyxPQUFtQyxFQUFFLE9BQStCO1FBQzFFLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDcEUsQ0FBQztJQUVELE9BQU8sQ0FBQyxPQUFtQyxFQUFFLE9BQStCO1FBQzFFLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDcEUsQ0FBQztJQUVELE1BQU0sQ0FDSixJQUFtRSxFQUNuRSxPQUFtQyxFQUNuQyxPQUErQjtRQUUvQixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDekQsQ0FBQztJQUVPLGNBQWMsQ0FBQyxPQUF1QixFQUFFLE9BQStCO1FBQzdFLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO1FBRWxFLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUM7WUFDM0IsR0FBRyxPQUFPO1lBQ1YsR0FBRztnQkFDRCxTQUFTLEVBQUUsSUFBSSxJQUFJLEVBQUU7Z0JBQ3JCLFNBQVMsRUFBRSxJQUFJLENBQUMsYUFBYSxFQUFFO2dCQUMvQixPQUFPO2FBQ1I7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDOztrRkEvQ1UsaUJBQWlCO3VFQUFqQixpQkFBaUIsV0FBakIsaUJBQWlCLG1CQUZoQix1QkFBdUI7dUZBRXhCLGlCQUFpQjtjQUg3QixVQUFVO2VBQUM7Z0JBQ1YsVUFBVSxFQUFFLHVCQUF1QjthQUNwQyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5cclxuaW1wb3J0IHsgT3ZlcmxheSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9vdmVybGF5JztcclxuaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0b3IsIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFREU1NpbmdsZXRvblNlcnZpY2UgfSBmcm9tICd0ZHMtdWkvY29yZS9zZXJ2aWNlcyc7XHJcblxyXG5pbXBvcnQgeyBURFNNTlNlcnZpY2UgfSBmcm9tICcuL2Jhc2UnO1xyXG5pbXBvcnQgeyBURFNNZXNzYWdlQ29udGFpbmVyQ29tcG9uZW50IH0gZnJvbSAnLi9tZXNzYWdlLWNvbnRhaW5lci5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBURFNNZXNzYWdlU2VydmljZU1vZHVsZSB9IGZyb20gJy4vbWVzc2FnZS5zZXJ2aWNlLm1vZHVsZSc7XHJcbmltcG9ydCB7IFREU01lc3NhZ2VEYXRhLCBURFNNZXNzYWdlRGF0YU9wdGlvbnMsIFREU01lc3NhZ2VSZWYgfSBmcm9tICcuL3R5cGluZ3MnO1xyXG5cclxuQEluamVjdGFibGUoe1xyXG4gIHByb3ZpZGVkSW46IFREU01lc3NhZ2VTZXJ2aWNlTW9kdWxlXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBURFNNZXNzYWdlU2VydmljZSBleHRlbmRzIFREU01OU2VydmljZSB7XHJcbiAgcHJvdGVjdGVkIGNvbnRhaW5lcj86IFREU01lc3NhZ2VDb250YWluZXJDb21wb25lbnQ7XHJcbiAgcHJvdGVjdGVkIGNvbXBvbmVudFByZWZpeCA9ICdtZXNzYWdlLSc7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHRkc1NpbmdsZXRvblNlcnZpY2U6IFREU1NpbmdsZXRvblNlcnZpY2UsIG92ZXJsYXk6IE92ZXJsYXksIGluamVjdG9yOiBJbmplY3Rvcikge1xyXG4gICAgc3VwZXIodGRzU2luZ2xldG9uU2VydmljZSwgb3ZlcmxheSwgaW5qZWN0b3IpO1xyXG4gIH1cclxuXHJcbiAgc3VjY2Vzcyhjb250ZW50OiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjx2b2lkPiwgb3B0aW9ucz86IFREU01lc3NhZ2VEYXRhT3B0aW9ucyk6IFREU01lc3NhZ2VSZWYge1xyXG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlSW5zdGFuY2UoeyB0eXBlOiAnc3VjY2VzcycsIGNvbnRlbnQgfSwgb3B0aW9ucyk7XHJcbiAgfVxyXG5cclxuICBlcnJvcihjb250ZW50OiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjx2b2lkPiwgb3B0aW9ucz86IFREU01lc3NhZ2VEYXRhT3B0aW9ucyk6IFREU01lc3NhZ2VSZWYge1xyXG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlSW5zdGFuY2UoeyB0eXBlOiAnZXJyb3InLCBjb250ZW50IH0sIG9wdGlvbnMpO1xyXG4gIH1cclxuXHJcbiAgaW5mbyhjb250ZW50OiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjx2b2lkPiwgb3B0aW9ucz86IFREU01lc3NhZ2VEYXRhT3B0aW9ucyk6IFREU01lc3NhZ2VSZWYge1xyXG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlSW5zdGFuY2UoeyB0eXBlOiAnaW5mbycsIGNvbnRlbnQgfSwgb3B0aW9ucyk7XHJcbiAgfVxyXG5cclxuICB3YXJuaW5nKGNvbnRlbnQ6IHN0cmluZyB8IFRlbXBsYXRlUmVmPHZvaWQ+LCBvcHRpb25zPzogVERTTWVzc2FnZURhdGFPcHRpb25zKTogVERTTWVzc2FnZVJlZiB7XHJcbiAgICByZXR1cm4gdGhpcy5jcmVhdGVJbnN0YW5jZSh7IHR5cGU6ICd3YXJuaW5nJywgY29udGVudCB9LCBvcHRpb25zKTtcclxuICB9XHJcblxyXG4gIGxvYWRpbmcoY29udGVudDogc3RyaW5nIHwgVGVtcGxhdGVSZWY8dm9pZD4sIG9wdGlvbnM/OiBURFNNZXNzYWdlRGF0YU9wdGlvbnMpOiBURFNNZXNzYWdlUmVmIHtcclxuICAgIHJldHVybiB0aGlzLmNyZWF0ZUluc3RhbmNlKHsgdHlwZTogJ2xvYWRpbmcnLCBjb250ZW50IH0sIG9wdGlvbnMpO1xyXG4gIH1cclxuXHJcbiAgY3JlYXRlKFxyXG4gICAgdHlwZTogJ3N1Y2Nlc3MnIHwgJ2luZm8nIHwgJ3dhcm5pbmcnIHwgJ2Vycm9yJyB8ICdsb2FkaW5nJyB8IHN0cmluZyxcclxuICAgIGNvbnRlbnQ6IHN0cmluZyB8IFRlbXBsYXRlUmVmPHZvaWQ+LFxyXG4gICAgb3B0aW9ucz86IFREU01lc3NhZ2VEYXRhT3B0aW9uc1xyXG4gICk6IFREU01lc3NhZ2VSZWYge1xyXG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlSW5zdGFuY2UoeyB0eXBlLCBjb250ZW50IH0sIG9wdGlvbnMpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjcmVhdGVJbnN0YW5jZShtZXNzYWdlOiBURFNNZXNzYWdlRGF0YSwgb3B0aW9ucz86IFREU01lc3NhZ2VEYXRhT3B0aW9ucyk6IFREU01lc3NhZ2VSZWYge1xyXG4gICAgdGhpcy5jb250YWluZXIgPSB0aGlzLndpdGhDb250YWluZXIoVERTTWVzc2FnZUNvbnRhaW5lckNvbXBvbmVudCk7XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuY29udGFpbmVyLmNyZWF0ZSh7XHJcbiAgICAgIC4uLm1lc3NhZ2UsXHJcbiAgICAgIC4uLntcclxuICAgICAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKCksXHJcbiAgICAgICAgbWVzc2FnZUlkOiB0aGlzLmdldEluc3RhbmNlSWQoKSxcclxuICAgICAgICBvcHRpb25zXHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG4iXX0=