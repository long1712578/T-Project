import { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { TDSMNContainerComponent } from './base';
import { toCssPixel } from 'tds-ui/shared/utility';
import * as i0 from "@angular/core";
import * as i1 from "tds-ui/core/config";
import * as i2 from "@angular/common";
import * as i3 from "./message.component";
function TDSMessageContainerComponent_tds_message_2_Template(rf, ctx) { if (rf & 1) {
    const _r3 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "tds-message", 3);
    i0.ɵɵlistener("destroyed", function TDSMessageContainerComponent_tds_message_2_Template_tds_message_destroyed_0_listener($event) { i0.ɵɵrestoreView(_r3); const ctx_r2 = i0.ɵɵnextContext(); return ctx_r2.remove($event.id, $event.userAction); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const instance_r1 = ctx.$implicit;
    i0.ɵɵproperty("instance", instance_r1);
} }
const TDS_CONFIG_COMPONENT_NAME = 'message';
const TDS_MESSAGE_DEFAULT_CONFIG = {
    animate: true,
    duration: 3000,
    maxStack: 7,
    pauseOnHover: true,
    top: 24,
    direction: 'ltr'
};
export class TDSMessageContainerComponent extends TDSMNContainerComponent {
    constructor(cdr, tdsConfigService) {
        super(cdr, tdsConfigService);
        this.destroy$ = new Subject();
        this.dir = 'ltr';
        this.instances = [];
        const config = TDS_MESSAGE_DEFAULT_CONFIG;
        this.dir = config?.direction || 'ltr';
    }
    subscribeConfigChange() {
        this.tdsConfigService
            .getConfigChangeEventForComponent(TDS_CONFIG_COMPONENT_NAME)
            .pipe(takeUntil(this.destroy$))
            .subscribe(() => {
            this.updateConfig();
            const config = this.tdsConfigService.getConfigForComponent(TDS_CONFIG_COMPONENT_NAME);
            if (config) {
                const { direction } = config;
                this.dir = direction || this.dir;
            }
        });
    }
    updateConfig() {
        this.config = {
            ...TDS_MESSAGE_DEFAULT_CONFIG,
            ...this.config,
            ...this.tdsConfigService.getConfigForComponent(TDS_CONFIG_COMPONENT_NAME)
        };
        this.top = toCssPixel(this.config.top);
        this.cdr.markForCheck();
    }
}
TDSMessageContainerComponent.ɵfac = function TDSMessageContainerComponent_Factory(t) { return new (t || TDSMessageContainerComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.TDSConfigService)); };
TDSMessageContainerComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSMessageContainerComponent, selectors: [["tds-message-container"]], exportAs: ["tdsMessageContainer"], features: [i0.ɵɵInheritDefinitionFeature], decls: 3, vars: 5, consts: [[1, "tds-message", "pointer-events-none", "w-full", "left-0", "fixed"], [1, "w-full", "flex", "items-center", "flex-col"], [3, "instance", "destroyed", 4, "ngFor", "ngForOf"], [3, "instance", "destroyed"]], template: function TDSMessageContainerComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 0)(1, "div", 1);
        i0.ɵɵtemplate(2, TDSMessageContainerComponent_tds_message_2_Template, 1, 1, "tds-message", 2);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        i0.ɵɵstyleProp("top", ctx.top);
        i0.ɵɵclassProp("tds-message-rtl", ctx.dir === "rtl");
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngForOf", ctx.instances);
    } }, directives: [i2.NgForOf, i3.TDSMessageComponent], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSMessageContainerComponent, [{
        type: Component,
        args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                selector: 'tds-message-container',
                exportAs: 'tdsMessageContainer',
                preserveWhitespaces: false,
                template: `
    <div class="tds-message pointer-events-none w-full left-0 fixed "  [class.tds-message-rtl]="dir === 'rtl'" [style.top]="top">
      <div class="w-full flex items-center flex-col">
          <tds-message *ngFor="let instance of instances" [instance]="instance" (destroyed)="remove($event.id, $event.userAction)"></tds-message>
      </div>
    </div>
  `
            }]
    }], function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.TDSConfigService }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZS1jb250YWluZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvdGRzLXVpL21lc3NhZ2UvbWVzc2FnZS1jb250YWluZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSx1QkFBdUIsRUFBcUIsU0FBUyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXpHLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFHL0IsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzNDLE9BQU8sRUFBRyx1QkFBdUIsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUdsRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7Ozs7Ozs7SUFzQnpDLHNDQUF5SDtJQUFuRCxvTUFBYSwyQ0FBb0MsSUFBQztJQUFDLGlCQUFjOzs7SUFBdkYsc0NBQXFCOztBQXBCL0UsTUFBTSx5QkFBeUIsR0FBRyxTQUFTLENBQUM7QUFFNUMsTUFBTSwwQkFBMEIsR0FBNEI7SUFDMUQsT0FBTyxFQUFFLElBQUk7SUFDYixRQUFRLEVBQUUsSUFBSTtJQUNkLFFBQVEsRUFBRSxDQUFDO0lBQ1gsWUFBWSxFQUFFLElBQUk7SUFDbEIsR0FBRyxFQUFFLEVBQUU7SUFDUCxTQUFTLEVBQUUsS0FBSztDQUNqQixDQUFDO0FBZ0JGLE1BQU0sT0FBTyw0QkFBNkIsU0FBUSx1QkFBdUI7SUFNdkUsWUFBWSxHQUFzQixFQUFFLGdCQUFpQztRQUNuRSxLQUFLLENBQUMsR0FBRyxFQUFDLGdCQUFnQixDQUFDLENBQUM7UUFOckIsYUFBUSxHQUFHLElBQUksT0FBTyxFQUFRLENBQUM7UUFDeEMsUUFBRyxHQUFjLEtBQUssQ0FBQztRQUN2QixjQUFTLEdBQW9DLEVBQUUsQ0FBQztRQUs5QyxNQUFNLE1BQU0sR0FBRywwQkFBMEIsQ0FBQztRQUMxQyxJQUFJLENBQUMsR0FBRyxHQUFHLE1BQU0sRUFBRSxTQUFTLElBQUksS0FBSyxDQUFDO0lBQ3hDLENBQUM7SUFFUyxxQkFBcUI7UUFDN0IsSUFBSSxDQUFDLGdCQUFnQjthQUNsQixnQ0FBZ0MsQ0FBQyx5QkFBeUIsQ0FBQzthQUMzRCxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQzthQUM5QixTQUFTLENBQUMsR0FBRyxFQUFFO1lBQ2YsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1lBQ25CLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxxQkFBcUIsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO1lBQ3RGLElBQUksTUFBTSxFQUFFO2dCQUNWLE1BQU0sRUFBRSxTQUFTLEVBQUUsR0FBRyxNQUFNLENBQUM7Z0JBQzdCLElBQUksQ0FBQyxHQUFHLEdBQUcsU0FBUyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUM7YUFDbEM7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFUyxZQUFZO1FBQ3BCLElBQUksQ0FBQyxNQUFNLEdBQUc7WUFDWixHQUFHLDBCQUEwQjtZQUM3QixHQUFHLElBQUksQ0FBQyxNQUFNO1lBQ2QsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMscUJBQXFCLENBQUMseUJBQXlCLENBQUM7U0FDMUUsQ0FBQztRQUVGLElBQUksQ0FBQyxHQUFHLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDdkMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUMzQixDQUFDOzt3R0FuQ1UsNEJBQTRCOytFQUE1Qiw0QkFBNEI7UUFQckMsOEJBQTZILGFBQUE7UUFFdkgsNkZBQXVJO1FBQzNJLGlCQUFNLEVBQUE7O1FBSG1HLDhCQUFpQjtRQUF6RCxvREFBdUM7UUFFbEUsZUFBWTtRQUFaLHVDQUFZOzt1RkFLM0MsNEJBQTRCO2NBZHhDLFNBQVM7ZUFBQztnQkFDVCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtnQkFDL0MsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7Z0JBQ3JDLFFBQVEsRUFBRSx1QkFBdUI7Z0JBQ2pDLFFBQVEsRUFBRSxxQkFBcUI7Z0JBQy9CLG1CQUFtQixFQUFFLEtBQUs7Z0JBQzFCLFFBQVEsRUFBRTs7Ozs7O0dBTVQ7YUFDRiIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5cclxuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENoYW5nZURldGVjdG9yUmVmLCBDb21wb25lbnQsIFZpZXdFbmNhcHN1bGF0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XHJcblxyXG5pbXBvcnQgeyBEaXJlY3Rpb24gfSBmcm9tICdAYW5ndWxhci9jZGsvYmlkaSc7XHJcbmltcG9ydCB7IHRha2VVbnRpbCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgIFREU01OQ29udGFpbmVyQ29tcG9uZW50IH0gZnJvbSAnLi9iYXNlJztcclxuaW1wb3J0IHsgVERTTWVzc2FnZURhdGEgfSBmcm9tICcuL3R5cGluZ3MnO1xyXG5pbXBvcnQgeyBNZXNzYWdlQ29uZmlnLCBURFNDb25maWdTZXJ2aWNlIH0gZnJvbSAndGRzLXVpL2NvcmUvY29uZmlnJztcclxuaW1wb3J0IHsgdG9Dc3NQaXhlbCB9IGZyb20gJ3Rkcy11aS9zaGFyZWQvdXRpbGl0eSc7XHJcblxyXG5jb25zdCBURFNfQ09ORklHX0NPTVBPTkVOVF9OQU1FID0gJ21lc3NhZ2UnO1xyXG5cclxuY29uc3QgVERTX01FU1NBR0VfREVGQVVMVF9DT05GSUc6IFJlcXVpcmVkPE1lc3NhZ2VDb25maWc+ID0ge1xyXG4gIGFuaW1hdGU6IHRydWUsXHJcbiAgZHVyYXRpb246IDMwMDAsXHJcbiAgbWF4U3RhY2s6IDcsXHJcbiAgcGF1c2VPbkhvdmVyOiB0cnVlLFxyXG4gIHRvcDogMjQsXHJcbiAgZGlyZWN0aW9uOiAnbHRyJ1xyXG59O1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXHJcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcclxuICBzZWxlY3RvcjogJ3Rkcy1tZXNzYWdlLWNvbnRhaW5lcicsXHJcbiAgZXhwb3J0QXM6ICd0ZHNNZXNzYWdlQ29udGFpbmVyJyxcclxuICBwcmVzZXJ2ZVdoaXRlc3BhY2VzOiBmYWxzZSxcclxuICB0ZW1wbGF0ZTogYFxyXG4gICAgPGRpdiBjbGFzcz1cInRkcy1tZXNzYWdlIHBvaW50ZXItZXZlbnRzLW5vbmUgdy1mdWxsIGxlZnQtMCBmaXhlZCBcIiAgW2NsYXNzLnRkcy1tZXNzYWdlLXJ0bF09XCJkaXIgPT09ICdydGwnXCIgW3N0eWxlLnRvcF09XCJ0b3BcIj5cclxuICAgICAgPGRpdiBjbGFzcz1cInctZnVsbCBmbGV4IGl0ZW1zLWNlbnRlciBmbGV4LWNvbFwiPlxyXG4gICAgICAgICAgPHRkcy1tZXNzYWdlICpuZ0Zvcj1cImxldCBpbnN0YW5jZSBvZiBpbnN0YW5jZXNcIiBbaW5zdGFuY2VdPVwiaW5zdGFuY2VcIiAoZGVzdHJveWVkKT1cInJlbW92ZSgkZXZlbnQuaWQsICRldmVudC51c2VyQWN0aW9uKVwiPjwvdGRzLW1lc3NhZ2U+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbiAgYFxyXG59KVxyXG5leHBvcnQgY2xhc3MgVERTTWVzc2FnZUNvbnRhaW5lckNvbXBvbmVudCBleHRlbmRzIFREU01OQ29udGFpbmVyQ29tcG9uZW50IHtcclxuICByZWFkb25seSBkZXN0cm95JCA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XHJcbiAgZGlyOiBEaXJlY3Rpb24gPSAnbHRyJztcclxuICBpbnN0YW5jZXM6IEFycmF5PFJlcXVpcmVkPFREU01lc3NhZ2VEYXRhPj4gPSBbXTtcclxuICB0b3A/OiBzdHJpbmcgfCBudWxsO1xyXG5cclxuICBjb25zdHJ1Y3RvcihjZHI6IENoYW5nZURldGVjdG9yUmVmLCB0ZHNDb25maWdTZXJ2aWNlOlREU0NvbmZpZ1NlcnZpY2UpIHtcclxuICAgIHN1cGVyKGNkcix0ZHNDb25maWdTZXJ2aWNlKTtcclxuICAgIGNvbnN0IGNvbmZpZyA9IFREU19NRVNTQUdFX0RFRkFVTFRfQ09ORklHO1xyXG4gICAgdGhpcy5kaXIgPSBjb25maWc/LmRpcmVjdGlvbiB8fCAnbHRyJztcclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBzdWJzY3JpYmVDb25maWdDaGFuZ2UoKTogdm9pZCB7XHJcbiAgICB0aGlzLnRkc0NvbmZpZ1NlcnZpY2VcclxuICAgICAgLmdldENvbmZpZ0NoYW5nZUV2ZW50Rm9yQ29tcG9uZW50KFREU19DT05GSUdfQ09NUE9ORU5UX05BTUUpXHJcbiAgICAgIC5waXBlKHRha2VVbnRpbCh0aGlzLmRlc3Ryb3kkKSlcclxuICAgICAgLnN1YnNjcmliZSgoKSA9PiB7XHJcbiAgICAgICB0aGlzLnVwZGF0ZUNvbmZpZygpO1xyXG4gICAgICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMudGRzQ29uZmlnU2VydmljZS5nZXRDb25maWdGb3JDb21wb25lbnQoVERTX0NPTkZJR19DT01QT05FTlRfTkFNRSk7XHJcbiAgICAgICAgaWYgKGNvbmZpZykge1xyXG4gICAgICAgICAgY29uc3QgeyBkaXJlY3Rpb24gfSA9IGNvbmZpZztcclxuICAgICAgICAgIHRoaXMuZGlyID0gZGlyZWN0aW9uIHx8IHRoaXMuZGlyO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgdXBkYXRlQ29uZmlnKCk6IHZvaWQge1xyXG4gICAgdGhpcy5jb25maWcgPSB7XHJcbiAgICAgIC4uLlREU19NRVNTQUdFX0RFRkFVTFRfQ09ORklHLFxyXG4gICAgICAuLi50aGlzLmNvbmZpZyxcclxuICAgICAgLi4udGhpcy50ZHNDb25maWdTZXJ2aWNlLmdldENvbmZpZ0ZvckNvbXBvbmVudChURFNfQ09ORklHX0NPTVBPTkVOVF9OQU1FKVxyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLnRvcCA9IHRvQ3NzUGl4ZWwodGhpcy5jb25maWchLnRvcCk7XHJcbiAgICAgdGhpcy5jZHIubWFya0ZvckNoZWNrKCk7XHJcbiAgfVxyXG59XHJcbiJdfQ==