import { ChangeDetectionStrategy, Component, Input, ViewEncapsulation } from "@angular/core";
import * as i0 from "@angular/core";
import * as i1 from "tds-ui/core/outlet";
const _c0 = ["tds-button-close", ""];
function TDSButtonCloseComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelement(1, "i");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵclassMap(ctx_r0.iconTemplate);
} }
export class TDSButtonCloseComponent {
    constructor(cdr) {
        this.cdr = cdr;
        this.size = 'xl';
        this.iconTemplate = 'tdsi-close-fill';
        this.cssClass = '';
    }
    ngOnChanges(changes) {
        this.buildCss();
        this.cdr.markForCheck();
    }
    ngOnInit() {
        this.buildCss();
    }
    buildCss() {
        this.cssClass = `${this.getClassCssBySize(this.size)} ${this.defaultClassCss()} `;
    }
    getClassCssBySize(size) {
        let result = '';
        switch (size) {
            case "sm":
                result = 'p-0 h-4';
                break;
            case "md":
                result = 'p-0.5 h-5';
                break;
            case "lg":
                result = 'p-1 h-6';
                break;
            case "xl":
                result = 'p-1.5 h-7';
                break;
        }
        return result;
    }
    defaultClassCss() {
        let result = 'focus:outline-none box-border  whitespace-nowrap  border-0 text-base leading-4 relative text-neutral-1-500 dark:text-d-neutral-1-500 hover:bg-neutral-3-50 dark:hover:bg-d-neutral-3-300 hover:rounded-md inline-flex items-center justify-center';
        return result;
    }
}
TDSButtonCloseComponent.ɵfac = function TDSButtonCloseComponent_Factory(t) { return new (t || TDSButtonCloseComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
TDSButtonCloseComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSButtonCloseComponent, selectors: [["button", "tds-button-close", ""], ["a", "tds-button-close", ""]], hostVars: 4, hostBindings: function TDSButtonCloseComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵattribute("tabindex", ctx.disabled ? -1 : ctx.tabIndex === null ? null : ctx.tabIndex)("disabled", ctx.disabled || ctx.loading || null);
        i0.ɵɵclassMap(ctx.cssClass);
    } }, inputs: { size: "size", iconTemplate: "iconTemplate" }, exportAs: ["tdsButtonClose"], features: [i0.ɵɵNgOnChangesFeature], attrs: _c0, decls: 1, vars: 1, consts: [[4, "tdsStringTemplateOutlet"]], template: function TDSButtonCloseComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtemplate(0, TDSButtonCloseComponent_ng_container_0_Template, 2, 2, "ng-container", 0);
    } if (rf & 2) {
        i0.ɵɵproperty("tdsStringTemplateOutlet", ctx.iconTemplate);
    } }, directives: [i1.TDSStringTemplateOutletDirective], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSButtonCloseComponent, [{
        type: Component,
        args: [{
                selector: 'button[tds-button-close], a[tds-button-close]',
                exportAs: 'tdsButtonClose',
                preserveWhitespaces: false,
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                template: `
   <ng-container *tdsStringTemplateOutlet="iconTemplate"><i [class]="iconTemplate"></i></ng-container>  
    `,
                host: {
                    '[class]': 'cssClass',
                    '[attr.tabindex]': 'disabled ? -1 : (tabIndex === null ? null : tabIndex)',
                    '[attr.disabled]': 'disabled || loading || null',
                }
            }]
    }], function () { return [{ type: i0.ChangeDetectorRef }]; }, { size: [{
            type: Input
        }], iconTemplate: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV0dG9uLWNsb3NlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvdGRzLXVpL2J1dHRvbi9idXR0b24tY2xvc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLHVCQUF1QixFQUFxQixTQUFTLEVBQUUsS0FBSyxFQUFrRCxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7Ozs7SUFVN0osNkJBQXNEO0lBQUEsb0JBQThCO0lBQUEsMEJBQWU7OztJQUExQyxlQUFzQjtJQUF0QixrQ0FBc0I7O0FBUWxGLE1BQU0sT0FBTyx1QkFBdUI7SUFLaEMsWUFDVyxHQUFzQjtRQUF0QixRQUFHLEdBQUgsR0FBRyxDQUFtQjtRQUp4QixTQUFJLEdBQWUsSUFBSSxDQUFDO1FBQ3hCLGlCQUFZLEdBQXNDLGlCQUFpQixDQUFBO1FBQzVFLGFBQVEsR0FBVyxFQUFFLENBQUM7SUFHdEIsQ0FBQztJQUNELFdBQVcsQ0FBQyxPQUFzQjtRQUM5QixJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDaEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUM1QixDQUFDO0lBQ0QsUUFBUTtRQUNKLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNwQixDQUFDO0lBQ0QsUUFBUTtRQUNKLElBQUksQ0FBQyxRQUFRLEdBQUcsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxlQUFlLEVBQUUsR0FBRyxDQUFBO0lBQ3JGLENBQUM7SUFDTyxpQkFBaUIsQ0FBQyxJQUFnQjtRQUN0QyxJQUFJLE1BQU0sR0FBVyxFQUFFLENBQUM7UUFDeEIsUUFBUSxJQUFJLEVBQUU7WUFDVixLQUFLLElBQUk7Z0JBQ0wsTUFBTSxHQUFHLFNBQVMsQ0FBQztnQkFDbkIsTUFBTTtZQUNWLEtBQUssSUFBSTtnQkFDTCxNQUFNLEdBQUcsV0FBVyxDQUFDO2dCQUNyQixNQUFNO1lBQ1YsS0FBSyxJQUFJO2dCQUNMLE1BQU0sR0FBRyxTQUFTLENBQUM7Z0JBQ25CLE1BQU07WUFDVixLQUFLLElBQUk7Z0JBQ0wsTUFBTSxHQUFHLFdBQVcsQ0FBQztnQkFDckIsTUFBTTtTQUNiO1FBQ0QsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNPLGVBQWU7UUFDbkIsSUFBSSxNQUFNLEdBQUcsbVBBQW1QLENBQUM7UUFDalEsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQzs7OEZBdkNRLHVCQUF1QjswRUFBdkIsdUJBQXVCOzs7O1FBUmpDLDBGQUFtRzs7UUFBcEYsMERBQXFDOzt1RkFRMUMsdUJBQXVCO2NBZm5DLFNBQVM7ZUFBQztnQkFDUCxRQUFRLEVBQUUsK0NBQStDO2dCQUN6RCxRQUFRLEVBQUUsZ0JBQWdCO2dCQUMxQixtQkFBbUIsRUFBRSxLQUFLO2dCQUMxQixlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtnQkFDL0MsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7Z0JBQ3JDLFFBQVEsRUFBRTs7S0FFVDtnQkFDRCxJQUFJLEVBQUU7b0JBQ0YsU0FBUyxFQUFFLFVBQVU7b0JBQ3JCLGlCQUFpQixFQUFFLHVEQUF1RDtvQkFDMUUsaUJBQWlCLEVBQUUsNkJBQTZCO2lCQUNuRDthQUNKO29FQUdZLElBQUk7a0JBQVosS0FBSztZQUNHLFlBQVk7a0JBQXBCLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ2hhbmdlRGV0ZWN0b3JSZWYsIENvbXBvbmVudCwgSW5wdXQsIE9uQ2hhbmdlcywgIE9uSW5pdCwgU2ltcGxlQ2hhbmdlcywgVGVtcGxhdGVSZWYsIFZpZXdFbmNhcHN1bGF0aW9uIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHsgQnV0dG9uU2l6ZSB9IGZyb20gXCJ0ZHMtdWkvY29yZS9jb25maWdcIjtcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdidXR0b25bdGRzLWJ1dHRvbi1jbG9zZV0sIGFbdGRzLWJ1dHRvbi1jbG9zZV0nLFxyXG4gICAgZXhwb3J0QXM6ICd0ZHNCdXR0b25DbG9zZScsXHJcbiAgICBwcmVzZXJ2ZVdoaXRlc3BhY2VzOiBmYWxzZSxcclxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxyXG4gICAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcclxuICAgIHRlbXBsYXRlOiBgXHJcbiAgIDxuZy1jb250YWluZXIgKnRkc1N0cmluZ1RlbXBsYXRlT3V0bGV0PVwiaWNvblRlbXBsYXRlXCI+PGkgW2NsYXNzXT1cImljb25UZW1wbGF0ZVwiPjwvaT48L25nLWNvbnRhaW5lcj4gIFxyXG4gICAgYCxcclxuICAgIGhvc3Q6IHtcclxuICAgICAgICAnW2NsYXNzXSc6ICdjc3NDbGFzcycsXHJcbiAgICAgICAgJ1thdHRyLnRhYmluZGV4XSc6ICdkaXNhYmxlZCA/IC0xIDogKHRhYkluZGV4ID09PSBudWxsID8gbnVsbCA6IHRhYkluZGV4KScsXHJcbiAgICAgICAgJ1thdHRyLmRpc2FibGVkXSc6ICdkaXNhYmxlZCB8fCBsb2FkaW5nIHx8IG51bGwnLFxyXG4gICAgfVxyXG59KVxyXG5leHBvcnQgY2xhc3MgVERTQnV0dG9uQ2xvc2VDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMsIE9uSW5pdCB7XHJcblxyXG4gICAgQElucHV0KCkgc2l6ZTogQnV0dG9uU2l6ZSA9ICd4bCc7XHJcbiAgICBASW5wdXQoKSBpY29uVGVtcGxhdGU6IHN0cmluZyB8IFRlbXBsYXRlUmVmPHZvaWQ+IHwgbnVsbCA9ICd0ZHNpLWNsb3NlLWZpbGwnXHJcbiAgICBjc3NDbGFzczogc3RyaW5nID0gJyc7XHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwdWJsaWMgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZikge1xyXG4gICAgfVxyXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuYnVpbGRDc3MoKTtcclxuICAgICAgICB0aGlzLmNkci5tYXJrRm9yQ2hlY2soKTtcclxuICAgIH1cclxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuYnVpbGRDc3MoKTtcclxuICAgIH1cclxuICAgIGJ1aWxkQ3NzKCkge1xyXG4gICAgICAgIHRoaXMuY3NzQ2xhc3MgPSBgJHt0aGlzLmdldENsYXNzQ3NzQnlTaXplKHRoaXMuc2l6ZSl9ICR7dGhpcy5kZWZhdWx0Q2xhc3NDc3MoKX0gYFxyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBnZXRDbGFzc0Nzc0J5U2l6ZShzaXplOiBCdXR0b25TaXplKTogc3RyaW5nIHtcclxuICAgICAgICBsZXQgcmVzdWx0OiBzdHJpbmcgPSAnJztcclxuICAgICAgICBzd2l0Y2ggKHNpemUpIHtcclxuICAgICAgICAgICAgY2FzZSBcInNtXCI6XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSAncC0wIGgtNCc7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcIm1kXCI6XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSAncC0wLjUgaC01JztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwibGdcIjpcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9ICdwLTEgaC02JztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwieGxcIjpcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9ICdwLTEuNSBoLTcnO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIGRlZmF1bHRDbGFzc0NzcygpOiBzdHJpbmcge1xyXG4gICAgICAgIGxldCByZXN1bHQgPSAnZm9jdXM6b3V0bGluZS1ub25lIGJveC1ib3JkZXIgIHdoaXRlc3BhY2Utbm93cmFwICBib3JkZXItMCB0ZXh0LWJhc2UgbGVhZGluZy00IHJlbGF0aXZlIHRleHQtbmV1dHJhbC0xLTUwMCBkYXJrOnRleHQtZC1uZXV0cmFsLTEtNTAwIGhvdmVyOmJnLW5ldXRyYWwtMy01MCBkYXJrOmhvdmVyOmJnLWQtbmV1dHJhbC0zLTMwMCBob3Zlcjpyb3VuZGVkLW1kIGlubGluZS1mbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlcic7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxufSJdfQ==