import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, Host, Input, Optional, ViewEncapsulation } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { InputBoolean } from 'tds-ui/shared/utility';
import { WithConfig } from "tds-ui/core/config";
import { badgePresetColors } from './preset-colors';
import { zoomBadgeMotion } from 'tds-ui/core/animation';
import * as i0 from "@angular/core";
import * as i1 from "tds-ui/core/config";
import * as i2 from "@angular/cdk/bidi";
import * as i3 from "tds-ui/core/no-animation";
import * as i4 from "@angular/common";
import * as i5 from "tds-ui/core/outlet";
import * as i6 from "./badge-sup.component";
function TDSBadgeComponent_ng_container_1_span_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r3.text);
} }
function TDSBadgeComponent_ng_container_1_span_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 5);
    i0.ɵɵtemplate(1, TDSBadgeComponent_ng_container_1_span_2_ng_container_1_Template, 2, 1, "ng-container", 2);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("tdsStringTemplateOutlet", ctx_r2.text);
} }
const _c0 = function (a0, a1, a2) { return { "w-2 h-2": a0, "w-1.5 h-1.5": a1, "w-2.5 h-2.5": a2 }; };
function TDSBadgeComponent_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelement(1, "span", 3);
    i0.ɵɵtemplate(2, TDSBadgeComponent_ng_container_1_span_2_Template, 2, 1, "span", 4);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵclassMapInterpolate1("tds-badge-status-dot ", ctx_r0.colorStatus || ctx_r0.presetColor, " relative -top-px inline-block  align-middle rounded-full");
    i0.ɵɵstyleProp("background", !ctx_r0.presetColor && ctx_r0.color);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction3(8, _c0, ctx_r0.size == "md", ctx_r0.size == "sm", ctx_r0.size == "lg"))("ngStyle", ctx_r0.tdsStyle);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r0.text);
} }
function TDSBadgeComponent_ng_container_3_tds_badge_sup_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "tds-badge-sup", 7);
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext(2);
    i0.ɵɵclassMap(ctx_r4.tdsClass);
    i0.ɵɵproperty("offset", ctx_r4.offset)("title", ctx_r4.title)("tdsStyle", ctx_r4.tdsStyle)("dot", ctx_r4.dot)("size", ctx_r4.size)("overflowCount", ctx_r4.overflowCount)("disableAnimation", !!(ctx_r4.standalone || ctx_r4.status || ctx_r4.color || (ctx_r4.noAnimation == null ? null : ctx_r4.noAnimation.noAnimation)))("count", ctx_r4.count)("noAnimation", !!(ctx_r4.noAnimation == null ? null : ctx_r4.noAnimation.noAnimation))("standalone", ctx_r4.standalone)("placement", ctx_r4.placement);
} }
function TDSBadgeComponent_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtemplate(1, TDSBadgeComponent_ng_container_3_tds_badge_sup_1_Template, 1, 13, "tds-badge-sup", 6);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r1.showSup);
} }
const _c1 = ["*"];
const TDS_CONFIG_MODULE_NAME = 'badge';
export class TDSBadgeComponent {
    constructor(tdsConfigService, renderer, cdr, elementRef, directionality, noAnimation) {
        this.tdsConfigService = tdsConfigService;
        this.renderer = renderer;
        this.cdr = cdr;
        this.elementRef = elementRef;
        this.directionality = directionality;
        this.noAnimation = noAnimation;
        this._tdsModuleName = TDS_CONFIG_MODULE_NAME;
        this.showSup = false;
        this.presetColor = null;
        this.dir = 'ltr';
        this.destroy$ = new Subject();
        this.showZero = false;
        this.showDot = true;
        this.standalone = false;
        this.dot = false;
        this.overflowCount = 99;
        this.color = undefined;
        this.tdsStyle = null;
        this.text = null;
        this.tdsClass = "bg-primary-1 dark:bg-d-primary-1 text-white";
        /**
         * dùng cho status
         */
        this.size = 'md';
        this.placement = 'topRight';
        // TODO: move to host after View Engine deprecation
        this.elementRef.nativeElement.classList.add('tds-badge');
    }
    ngOnInit() {
        this.directionality.change?.pipe(takeUntil(this.destroy$)).subscribe((direction) => {
            this.dir = direction;
            this.prepareBadgeForRtl();
            this.cdr.detectChanges();
        });
        this.dir = this.directionality.value;
        this.prepareBadgeForRtl();
    }
    ngOnChanges(changes) {
        const { color, showDot, dot, count, showZero } = changes;
        if (color) {
            this.presetColor = this.color && badgePresetColors.indexOf(this.color) !== -1 ? this.color : null;
        }
        if (showDot || dot || count || showZero) {
            this.showSup = (this.showDot && this.dot) || this.count > 0 || (this.count <= 0 && this.showZero);
        }
    }
    prepareBadgeForRtl() {
        if (this.isRtlLayout) {
            this.renderer.addClass(this.elementRef.nativeElement, 'tds-badge-rtl');
        }
        else {
            this.renderer.removeClass(this.elementRef.nativeElement, 'tds-badge-rtl');
        }
    }
    get isRtlLayout() {
        return this.dir === 'rtl';
    }
    get colorStatus() {
        if (!!this.status) {
            return this.convertClass();
        }
        return null;
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    convertClass() {
        let result = null;
        switch (this.status) {
            case 'primary':
                result = 'bg-primary-1 dark:bg-d-primary-1';
                break;
            case 'secondary':
                result = 'bg-neutral-1-400 dark:bg-d-neutral-1-400';
                break;
            case 'success':
                result = 'bg-success-400 dark:bg-d-success-400';
                break;
            case 'info':
                result = 'bg-info-400 dark:bg-d-info-400';
                break;
            case 'warning':
                result = 'bg-warning-400 dark:bg-d-warning-400';
                break;
            case 'error':
                result = 'bg-error-400 dark:bg-d-error-400';
                break;
            default:
                result = this.status;
                break;
        }
        return result;
    }
}
TDSBadgeComponent.ɵfac = function TDSBadgeComponent_Factory(t) { return new (t || TDSBadgeComponent)(i0.ɵɵdirectiveInject(i1.TDSConfigService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i2.Directionality, 8), i0.ɵɵdirectiveInject(i3.TDSNoAnimationDirective, 9)); };
TDSBadgeComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSBadgeComponent, selectors: [["tds-badge"]], hostAttrs: [1, "box-border", "m-0", "p-0", "relative", "inline-block", "leading-none"], hostVars: 8, hostBindings: function TDSBadgeComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵclassProp("tds-badge-status", ctx.status)("tds-badge-not-a-wrapper", !!(ctx.standalone || ctx.status || ctx.color))("align-middle", !!(ctx.standalone || ctx.status || ctx.color) && !ctx.status)("align-baseline", ctx.status);
    } }, inputs: { showZero: "showZero", showDot: "showDot", standalone: "standalone", dot: "dot", overflowCount: "overflowCount", color: "color", tdsStyle: "tdsStyle", text: "text", title: "title", status: "status", count: "count", offset: "offset", tdsClass: "tdsClass", size: "size", placement: "placement" }, exportAs: ["tdsBadge"], features: [i0.ɵɵNgOnChangesFeature], ngContentSelectors: _c1, decls: 4, vars: 2, consts: [[1, "box-border", "m-0", "p-0", "relative", "inline-block", "leading-none"], [4, "ngIf"], [4, "tdsStringTemplateOutlet"], [3, "ngClass", "ngStyle"], ["class", "tds-badge-status-text ml-2", 4, "ngIf"], [1, "tds-badge-status-text", "ml-2"], [3, "offset", "title", "tdsStyle", "dot", "size", "overflowCount", "disableAnimation", "count", "noAnimation", "standalone", "class", "placement", 4, "ngIf"], [3, "offset", "title", "tdsStyle", "dot", "size", "overflowCount", "disableAnimation", "count", "noAnimation", "standalone", "placement"]], template: function TDSBadgeComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵelementStart(0, "div", 0);
        i0.ɵɵtemplate(1, TDSBadgeComponent_ng_container_1_Template, 3, 12, "ng-container", 1);
        i0.ɵɵprojection(2);
        i0.ɵɵtemplate(3, TDSBadgeComponent_ng_container_3_Template, 2, 1, "ng-container", 2);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", (ctx.status || ctx.color && !ctx.standalone) && !ctx.dot);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("tdsStringTemplateOutlet", ctx.count);
    } }, directives: [i4.NgIf, i4.NgClass, i4.NgStyle, i5.TDSStringTemplateOutletDirective, i6.TDSBadgeSupComponent, i3.TDSNoAnimationDirective], encapsulation: 2, data: { animation: [zoomBadgeMotion] }, changeDetection: 0 });
__decorate([
    InputBoolean()
], TDSBadgeComponent.prototype, "showZero", void 0);
__decorate([
    InputBoolean()
], TDSBadgeComponent.prototype, "showDot", void 0);
__decorate([
    InputBoolean()
], TDSBadgeComponent.prototype, "standalone", void 0);
__decorate([
    InputBoolean()
], TDSBadgeComponent.prototype, "dot", void 0);
__decorate([
    WithConfig()
], TDSBadgeComponent.prototype, "overflowCount", void 0);
__decorate([
    WithConfig()
], TDSBadgeComponent.prototype, "color", void 0);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSBadgeComponent, [{
        type: Component,
        args: [{
                selector: 'tds-badge',
                exportAs: 'tdsBadge',
                preserveWhitespaces: false,
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                animations: [zoomBadgeMotion],
                template: `
  <div class="box-border m-0 p-0 relative inline-block leading-none">
  <ng-container *ngIf="(status || (color && !standalone)) && !dot">
      <span
        class="tds-badge-status-dot {{ colorStatus || presetColor }} relative -top-px inline-block  align-middle rounded-full"
        [style.background]="!presetColor && color"
        [ngClass]="{'w-2 h-2':size =='md','w-1.5 h-1.5':size == 'sm','w-2.5 h-2.5':size =='lg'}"
        [ngStyle]="tdsStyle"
      ></span>
      <span class="tds-badge-status-text ml-2" *ngIf='text'>
        <ng-container *tdsStringTemplateOutlet="text">{{ text }}</ng-container>
      </span>
    </ng-container>
    <ng-content></ng-content>
    <ng-container *tdsStringTemplateOutlet="count">
      <tds-badge-sup
        *ngIf="showSup"
        [offset]="offset"
        [title]="title"
        [tdsStyle]="tdsStyle"
        [dot]="dot"
        [size]="size"
        [overflowCount]="overflowCount"
        [disableAnimation]="!!(standalone || status || color || noAnimation?.noAnimation)"
        [count]="count"
        [noAnimation]="!!noAnimation?.noAnimation"
        [standalone]="standalone"
        [class]="tdsClass"
        [placement]="placement"
      ></tds-badge-sup>
    </ng-container>
  </div>

    
    
  `,
                host: {
                    '[class.tds-badge-status]': 'status',
                    '[class.tds-badge-not-a-wrapper]': '!!(standalone || status || color)',
                    '[class.align-middle]': '!!(standalone || status || color) && !status',
                    '[class.align-baseline]': 'status',
                    'class': "box-border m-0 p-0 relative inline-block leading-none"
                }
            }]
    }], function () { return [{ type: i1.TDSConfigService }, { type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i2.Directionality, decorators: [{
                type: Optional
            }] }, { type: i3.TDSNoAnimationDirective, decorators: [{
                type: Host
            }, {
                type: Optional
            }] }]; }, { showZero: [{
            type: Input
        }], showDot: [{
            type: Input
        }], standalone: [{
            type: Input
        }], dot: [{
            type: Input
        }], overflowCount: [{
            type: Input
        }], color: [{
            type: Input
        }], tdsStyle: [{
            type: Input
        }], text: [{
            type: Input
        }], title: [{
            type: Input
        }], status: [{
            type: Input
        }], count: [{
            type: Input
        }], offset: [{
            type: Input
        }], tdsClass: [{
            type: Input
        }], size: [{
            type: Input
        }], placement: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;base64,