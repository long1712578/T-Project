import { ChangeDetectionStrategy, Component, Input, ViewEncapsulation } from '@angular/core';
import { zoomBadgeMotion } from 'tds-ui/core/animation';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "tds-ui/core/no-animation";
function TDSBadgeSupComponent_ng_container_0_span_1_ng_container_1_p_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "p", 6);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const p_r8 = ctx.$implicit;
    const i_r5 = i0.ɵɵnextContext(2).index;
    const ctx_r7 = i0.ɵɵnextContext(2);
    i0.ɵɵclassProp("current", p_r8 === ctx_r7.countArray[i_r5]);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" ", p_r8, " ");
} }
function TDSBadgeSupComponent_ng_container_0_span_1_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtemplate(1, TDSBadgeSupComponent_ng_container_0_span_1_ng_container_1_p_1_Template, 2, 3, "p", 5);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r6 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngForOf", ctx_r6.countSingleArray);
} }
function TDSBadgeSupComponent_ng_container_0_span_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 3);
    i0.ɵɵtemplate(1, TDSBadgeSupComponent_ng_container_0_span_1_ng_container_1_Template, 2, 1, "ng-container", 4);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const i_r5 = ctx.index;
    const ctx_r3 = i0.ɵɵnextContext(2);
    i0.ɵɵstyleProp("transform", "translateY(" + -ctx_r3.countArray[i_r5] * 100 + "%)");
    i0.ɵɵproperty("noAnimation", ctx_r3.noAnimation);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", !ctx_r3.dot && ctx_r3.countArray[i_r5] !== undefined);
} }
function TDSBadgeSupComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtemplate(1, TDSBadgeSupComponent_ng_container_0_span_1_Template, 2, 4, "span", 2);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngForOf", ctx_r0.maxNumberArray);
} }
function TDSBadgeSupComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0);
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵtextInterpolate1("", ctx_r2.overflowCount, "+");
} }
export class TDSBadgeSupComponent {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.tdsStyle = null;
        this.dot = false;
        this.overflowCount = 99;
        this.disableAnimation = false;
        this.noAnimation = false;
        this.standalone = false;
        this.size = 'md';
        this.placement = 'topRight';
        // @Input() tdsClass: string | null = null;
        this._cls = '';
        this.maxNumberArray = [];
        this.countArray = [];
        this._count = 0;
        this.countSingleArray = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
        // TODO: move to host after View Engine deprecation
        this.elementRef.nativeElement.classList.add('tds-scroll-number');
    }
    generateMaxNumberArray() {
        this.maxNumberArray = this.overflowCount.toString().split('');
    }
    ngOnInit() {
        this.generateMaxNumberArray();
        this.buildCls();
    }
    get cls() {
        return this._cls;
    }
    ngOnChanges(changes) {
        const { overflowCount, count, standalone, tdsStyle, tdsClass } = changes;
        if (count && typeof count.currentValue === 'number') {
            this._count = Math.max(0, count.currentValue);
            this.countArray = this._count
                .toString()
                .split('')
                .map(item => +item);
        }
        if (overflowCount) {
            this.generateMaxNumberArray();
        }
        // if (bgColor) {
        //   this.buildCls();
        // }
    }
    buildCls() {
        let placement = this.getPlacement();
        let str = "overflow-hidden  min-w-5 h-5 py-0 text-xs  text-center font-semibold whitespace-nowrap rounded-full  leading-5 ";
        if (!this.dot) {
            if (!this.standalone)
                this._cls = str + " absolute " + placement;
            else {
                this._cls = str + " relative block ";
            }
        }
        else {
            this._cls = "absolute z-auto overflow-hidden py-0  rounded-full ";
            switch (this.size) {
                case 'sm':
                    this._cls += 'h-1.5 w-1.5 ';
                    break;
                case 'md':
                    this._cls += 'h-2 w-2 ';
                    break;
                case 'lg':
                    this._cls += 'h-2.5 w-2.5 ';
                    break;
                default:
                    this._cls += 'h-2 w-2 ';
                    break;
            }
            this._cls += placement;
        }
        // if (this.tdsClass) {
        //   this._cls = this._cls + this.tdsClass;
        // }
    }
    get styleCss() {
        let style = null;
        if (!this.standalone) {
            switch (this.placement) {
                case 'topRight':
                    style = {
                        ['transform']: 'translate(50%,-50%)',
                        ['transform-origin']: '100% 0'
                    };
                    break;
                case 'topLeft':
                    style = {
                        ['transform']: 'translate(-50%,-50%)',
                        ['transform-origin']: '0 0'
                    };
                    break;
                case 'bottomLeft':
                    style = {
                        ['transform']: 'translate(-50%,50%)',
                        ['transform-origin']: '100% 0'
                    };
                    break;
                case 'bottomRight':
                    style = {
                        ['transform']: 'translate(50%,50%)',
                        ['transform-origin']: '0 100%'
                    };
                    break;
                default:
                    style = {
                        ['transform']: 'translate(-50%,50%)',
                        ['transform-origin']: '100% 0'
                    };
                    break;
            }
        }
        if (!!this.tdsStyle) {
            if (style != null)
                return Object.assign({}, style, this.tdsStyle);
            return this.tdsStyle;
        }
        return style;
    }
    getPlacement() {
        let result = "top-0 right-0";
        switch (this.placement) {
            case 'topRight':
                result = "top-0 right-0";
                break;
            case 'topLeft':
                result = "top-0 left-0";
                break;
            case 'bottomLeft':
                result = "bottom-0 left-0";
                break;
            case 'bottomRight':
                result = "bottom-0 right-0";
                break;
            default:
                result = "top-0 right-0";
                break;
        }
        return result;
    }
}
TDSBadgeSupComponent.ɵfac = function TDSBadgeSupComponent_Factory(t) { return new (t || TDSBadgeSupComponent)(i0.ɵɵdirectiveInject(i0.ElementRef)); };
TDSBadgeSupComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSBadgeSupComponent, selectors: [["tds-badge-sup"]], hostVars: 21, hostBindings: function TDSBadgeSupComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵattribute("title", ctx.title === null ? "" : ctx.title || ctx.count);
        i0.ɵɵsyntheticHostProperty("@.disabled", ctx.disableAnimation)("@zoomBadgeMotion", undefined);
        i0.ɵɵstyleMap(ctx.styleCss);
        i0.ɵɵclassMap(ctx.cls);
        i0.ɵɵstyleProp("right", ctx.offset && ctx.offset[0] ? -ctx.offset[0] : null, "px")("margin-top", ctx.offset && ctx.offset[1] ? ctx.offset[1] : null, "px");
        i0.ɵɵclassProp("tds-badge-count", !ctx.dot)("tds-badge-dot", ctx.dot)("tds-badge-multiple-words", ctx.countArray.length >= 2)("px-1", !ctx.dot && ctx.countArray.length < 2)("px-2", !ctx.dot && ctx.countArray.length >= 2);
    } }, inputs: { offset: "offset", title: "title", tdsStyle: "tdsStyle", dot: "dot", overflowCount: "overflowCount", disableAnimation: "disableAnimation", count: "count", noAnimation: "noAnimation", standalone: "standalone", size: "size", placement: "placement" }, exportAs: ["tdsBadgeSup"], features: [i0.ɵɵNgOnChangesFeature], decls: 3, vars: 2, consts: [[4, "ngIf", "ngIfElse"], ["overflowTemplate", ""], ["class", "tds-scroll-number-only relative inline-block h-5", "style", "transition: all .3s cubic-bezier(.645,.045,.355,1)", 3, "noAnimation", "transform", 4, "ngFor", "ngForOf"], [1, "tds-scroll-number-only", "relative", "inline-block", "h-5", 2, "transition", "all .3s cubic-bezier(.645,.045,.355,1)", 3, "noAnimation"], [4, "ngIf"], ["class", "tds-scroll-number-only-unit h-5 m-0 ", 3, "current", 4, "ngFor", "ngForOf"], [1, "tds-scroll-number-only-unit", "h-5", "m-0"]], template: function TDSBadgeSupComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtemplate(0, TDSBadgeSupComponent_ng_container_0_Template, 2, 1, "ng-container", 0);
        i0.ɵɵtemplate(1, TDSBadgeSupComponent_ng_template_1_Template, 1, 1, "ng-template", null, 1, i0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r1 = i0.ɵɵreference(2);
        i0.ɵɵproperty("ngIf", ctx._count <= ctx.overflowCount)("ngIfElse", _r1);
    } }, directives: [i1.NgIf, i1.NgForOf, i2.TDSNoAnimationDirective], encapsulation: 2, data: { animation: [zoomBadgeMotion] }, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSBadgeSupComponent, [{
        type: Component,
        args: [{
                selector: 'tds-badge-sup',
                exportAs: 'tdsBadgeSup',
                preserveWhitespaces: false,
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                animations: [zoomBadgeMotion],
                template: `
    <ng-container *ngIf="_count <= overflowCount; else overflowTemplate">
      <span
        [noAnimation]="noAnimation"
        *ngFor="let n of maxNumberArray; let i = index"
        class="tds-scroll-number-only relative inline-block h-5"
        [style.transform]="'translateY(' + -countArray[i] * 100 + '%)'"
        style="transition: all .3s cubic-bezier(.645,.045,.355,1)"
      >
        <ng-container *ngIf="!dot && countArray[i] !== undefined">
          <p
            *ngFor="let p of countSingleArray"
            class="tds-scroll-number-only-unit h-5 m-0 " 
            [class.current]="p === countArray[i]"
          >
            {{ p }}
          </p>
        </ng-container>
      </span>
    </ng-container>
    <ng-template #overflowTemplate>{{ overflowCount }}+</ng-template>
  `,
                host: {
                    '[@.disabled]': `disableAnimation`,
                    '[@zoomBadgeMotion]': '',
                    '[attr.title]': `title === null ? '' : title || count`,
                    '[style]': `styleCss`,
                    '[style.right.px]': `offset && offset[0] ? -offset[0] : null`,
                    '[style.margin-top.px]': `offset && offset[1] ? offset[1] : null`,
                    '[class.tds-badge-count]': `!dot`,
                    '[class.tds-badge-dot]': `dot`,
                    '[class.tds-badge-multiple-words]': `countArray.length >= 2`,
                    '[class.px-1.5]': `!dot && countArray.length < 2`,
                    '[class.px-2]': `!dot && countArray.length >= 2`,
                    '[class]': "cls"
                }
            }]
    }], function () { return [{ type: i0.ElementRef }]; }, { offset: [{
            type: Input
        }], title: [{
            type: Input
        }], tdsStyle: [{
            type: Input
        }], dot: [{
            type: Input
        }], overflowCount: [{
            type: Input
        }], disableAnimation: [{
            type: Input
        }], count: [{
            type: Input
        }], noAnimation: [{
            type: Input
        }], standalone: [{
            type: Input
        }], size: [{
            type: Input
        }], placement: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;base64,