import { ChangeDetectionStrategy, Component, Input, ViewEncapsulation } from '@angular/core';
import { badgePresetColors } from './preset-colors';
import * as i0 from "@angular/core";
import * as i1 from "tds-ui/core/outlet";
function TDSRibbonComponent_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r0.text);
} }
const _c0 = ["*"];
export class TDSRibbonComponent {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.placement = 'end';
        this.text = null;
        this.presetColor = null;
        // TODO: move to host after View Engine deprecation
        this.elementRef.nativeElement.classList.add('tds-ribbon-wrapper');
    }
    ngOnChanges(changes) {
        const { color } = changes;
        if (color) {
            this.presetColor = this.color && badgePresetColors.indexOf(this.color) !== -1 ? this.color : null;
        }
    }
}
TDSRibbonComponent.ɵfac = function TDSRibbonComponent_Factory(t) { return new (t || TDSRibbonComponent)(i0.ɵɵdirectiveInject(i0.ElementRef)); };
TDSRibbonComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSRibbonComponent, selectors: [["tds-ribbon"]], inputs: { color: "color", placement: "placement", text: "text" }, exportAs: ["tdsRibbon"], features: [i0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0, decls: 4, vars: 11, consts: [[1, "tds-ribbon"], [4, "tdsStringTemplateOutlet"], [1, "tds-ribbon-corner"]], template: function TDSRibbonComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵprojection(0);
        i0.ɵɵelementStart(1, "div", 0);
        i0.ɵɵtemplate(2, TDSRibbonComponent_ng_container_2_Template, 2, 1, "ng-container", 1);
        i0.ɵɵelement(3, "div", 2);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵadvance(1);
        i0.ɵɵclassMap(ctx.presetColor && "tds-ribbon-color-" + ctx.presetColor);
        i0.ɵɵstyleProp("background-color", !ctx.presetColor && ctx.color);
        i0.ɵɵclassProp("tds-ribbon-placement-end", ctx.placement === "end")("tds-ribbon-placement-start", ctx.placement === "start");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("tdsStringTemplateOutlet", ctx.text);
        i0.ɵɵadvance(1);
        i0.ɵɵstyleProp("color", !ctx.presetColor && ctx.color);
    } }, directives: [i1.TDSStringTemplateOutletDirective], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSRibbonComponent, [{
        type: Component,
        args: [{
                selector: 'tds-ribbon',
                exportAs: 'tdsRibbon',
                preserveWhitespaces: false,
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: `
    <ng-content></ng-content>
    <div
      class="tds-ribbon"
      [class]="presetColor && 'tds-ribbon-color-' + presetColor"
      [class.tds-ribbon-placement-end]="placement === 'end'"
      [class.tds-ribbon-placement-start]="placement === 'start'"
      [style.background-color]="!presetColor && color"
    >
      <ng-container *tdsStringTemplateOutlet="text">{{ text }}</ng-container>
      <div class="tds-ribbon-corner" [style.color]="!presetColor && color"></div>
    </div>
  `
            }]
    }], function () { return [{ type: i0.ElementRef }]; }, { color: [{
            type: Input
        }], placement: [{
            type: Input
        }], text: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmliYm9uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL3Rkcy11aS9iYWRnZXMvcmliYm9uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQ0wsdUJBQXVCLEVBQ3ZCLFNBQVMsRUFFVCxLQUFLLEVBSUwsaUJBQWlCLEVBQ2xCLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGlCQUFpQixDQUFDOzs7O0lBaUI5Qyw2QkFBOEM7SUFBQSxZQUFVO0lBQUEsMEJBQWU7OztJQUF6QixlQUFVO0lBQVYsaUNBQVU7OztBQUs5RCxNQUFNLE9BQU8sa0JBQWtCO0lBTTdCLFlBQW9CLFVBQXNCO1FBQXRCLGVBQVUsR0FBVixVQUFVLENBQVk7UUFKakMsY0FBUyxHQUFvQixLQUFLLENBQUM7UUFDbkMsU0FBSSxHQUFzQyxJQUFJLENBQUM7UUFDeEQsZ0JBQVcsR0FBa0IsSUFBSSxDQUFDO1FBR2hDLG1EQUFtRDtRQUNuRCxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLENBQUM7SUFDcEUsQ0FBQztJQUVELFdBQVcsQ0FBQyxPQUFzQjtRQUNoQyxNQUFNLEVBQUUsS0FBSyxFQUFFLEdBQUcsT0FBTyxDQUFDO1FBQzFCLElBQUksS0FBSyxFQUFFO1lBQ1QsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxJQUFJLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztTQUNuRztJQUNILENBQUM7O29GQWhCVSxrQkFBa0I7cUVBQWxCLGtCQUFrQjs7UUFiM0Isa0JBQXlCO1FBQ3pCLDhCQU1DO1FBQ0MscUZBQXVFO1FBQ3ZFLHlCQUEyRTtRQUM3RSxpQkFBTTs7UUFQSixlQUEwRDtRQUExRCx1RUFBMEQ7UUFHMUQsaUVBQWdEO1FBRmhELG1FQUFzRCx5REFBQTtRQUl2QyxlQUE2QjtRQUE3QixrREFBNkI7UUFDYixlQUFxQztRQUFyQyxzREFBcUM7O3VGQUk3RCxrQkFBa0I7Y0FwQjlCLFNBQVM7ZUFBQztnQkFDVCxRQUFRLEVBQUUsWUFBWTtnQkFDdEIsUUFBUSxFQUFFLFdBQVc7Z0JBQ3JCLG1CQUFtQixFQUFFLEtBQUs7Z0JBQzFCLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO2dCQUNyQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtnQkFDL0MsUUFBUSxFQUFFOzs7Ozs7Ozs7Ozs7R0FZVDthQUNGOzZEQUVVLEtBQUs7a0JBQWIsS0FBSztZQUNHLFNBQVM7a0JBQWpCLEtBQUs7WUFDRyxJQUFJO2tCQUFaLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuXHJcbmltcG9ydCB7XHJcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXHJcbiAgQ29tcG9uZW50LFxyXG4gIEVsZW1lbnRSZWYsXHJcbiAgSW5wdXQsXHJcbiAgT25DaGFuZ2VzLFxyXG4gIFNpbXBsZUNoYW5nZXMsXHJcbiAgVGVtcGxhdGVSZWYsXHJcbiAgVmlld0VuY2Fwc3VsYXRpb25cclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7IGJhZGdlUHJlc2V0Q29sb3JzIH0gZnJvbSAnLi9wcmVzZXQtY29sb3JzJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAndGRzLXJpYmJvbicsXHJcbiAgZXhwb3J0QXM6ICd0ZHNSaWJib24nLFxyXG4gIHByZXNlcnZlV2hpdGVzcGFjZXM6IGZhbHNlLFxyXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXHJcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXHJcbiAgdGVtcGxhdGU6IGBcclxuICAgIDxuZy1jb250ZW50PjwvbmctY29udGVudD5cclxuICAgIDxkaXZcclxuICAgICAgY2xhc3M9XCJ0ZHMtcmliYm9uXCJcclxuICAgICAgW2NsYXNzXT1cInByZXNldENvbG9yICYmICd0ZHMtcmliYm9uLWNvbG9yLScgKyBwcmVzZXRDb2xvclwiXHJcbiAgICAgIFtjbGFzcy50ZHMtcmliYm9uLXBsYWNlbWVudC1lbmRdPVwicGxhY2VtZW50ID09PSAnZW5kJ1wiXHJcbiAgICAgIFtjbGFzcy50ZHMtcmliYm9uLXBsYWNlbWVudC1zdGFydF09XCJwbGFjZW1lbnQgPT09ICdzdGFydCdcIlxyXG4gICAgICBbc3R5bGUuYmFja2dyb3VuZC1jb2xvcl09XCIhcHJlc2V0Q29sb3IgJiYgY29sb3JcIlxyXG4gICAgPlxyXG4gICAgICA8bmctY29udGFpbmVyICp0ZHNTdHJpbmdUZW1wbGF0ZU91dGxldD1cInRleHRcIj57eyB0ZXh0IH19PC9uZy1jb250YWluZXI+XHJcbiAgICAgIDxkaXYgY2xhc3M9XCJ0ZHMtcmliYm9uLWNvcm5lclwiIFtzdHlsZS5jb2xvcl09XCIhcHJlc2V0Q29sb3IgJiYgY29sb3JcIj48L2Rpdj5cclxuICAgIDwvZGl2PlxyXG4gIGBcclxufSlcclxuZXhwb3J0IGNsYXNzIFREU1JpYmJvbkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XHJcbiAgQElucHV0KCkgY29sb3I6IHN0cmluZyB8IHVuZGVmaW5lZDtcclxuICBASW5wdXQoKSBwbGFjZW1lbnQ6ICdzdGFydCcgfCAnZW5kJyA9ICdlbmQnO1xyXG4gIEBJbnB1dCgpIHRleHQ6IHN0cmluZyB8IFRlbXBsYXRlUmVmPHZvaWQ+IHwgbnVsbCA9IG51bGw7XHJcbiAgcHJlc2V0Q29sb3I6IHN0cmluZyB8IG51bGwgPSBudWxsO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYpIHtcclxuICAgIC8vIFRPRE86IG1vdmUgdG8gaG9zdCBhZnRlciBWaWV3IEVuZ2luZSBkZXByZWNhdGlvblxyXG4gICAgdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LmFkZCgndGRzLXJpYmJvbi13cmFwcGVyJyk7XHJcbiAgfVxyXG5cclxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XHJcbiAgICBjb25zdCB7IGNvbG9yIH0gPSBjaGFuZ2VzO1xyXG4gICAgaWYgKGNvbG9yKSB7XHJcbiAgICAgIHRoaXMucHJlc2V0Q29sb3IgPSB0aGlzLmNvbG9yICYmIGJhZGdlUHJlc2V0Q29sb3JzLmluZGV4T2YodGhpcy5jb2xvcikgIT09IC0xID8gdGhpcy5jb2xvciA6IG51bGw7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==