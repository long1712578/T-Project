import { __decorate } from "tslib";
import { Component, Input, Optional, ViewEncapsulation } from '@angular/core';
import { BehaviorSubject, ReplaySubject, Subject, timer } from 'rxjs';
import { debounce, distinctUntilChanged, startWith, switchMap, takeUntil } from 'rxjs/operators';
import { InputBoolean, InputNumber } from 'tds-ui/shared/utility';
import { WithConfig } from 'tds-ui/core/config';
import * as i0 from "@angular/core";
import * as i1 from "tds-ui/core/config";
import * as i2 from "@angular/cdk/bidi";
import * as i3 from "./progress-spinner.component";
import * as i4 from "@angular/common";
function TDSSpinComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "tds-spinner", 3);
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵproperty("color", ctx_r1.color);
} }
function TDSSpinComponent_div_2_ng_template_2_Template(rf, ctx) { }
function TDSSpinComponent_div_2_div_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 7);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r5.tip);
} }
function TDSSpinComponent_div_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div")(1, "div", 4);
    i0.ɵɵtemplate(2, TDSSpinComponent_div_2_ng_template_2_Template, 0, 0, "ng-template", 5);
    i0.ɵɵtemplate(3, TDSSpinComponent_div_2_div_3_Template, 2, 1, "div", 6);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    const _r0 = i0.ɵɵreference(1);
    i0.ɵɵadvance(1);
    i0.ɵɵclassProp("tds-spin-rtl", ctx_r2.dir === "rtl")("tds-spin-spinning", ctx_r2.isLoading)("opacity-100", ctx_r2.isLoading)("tds-spin-xl", ctx_r2.size === "xl")("tds-spin-sm", ctx_r2.size === "sm")("tds-spin-show-text", ctx_r2.tip);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r2.indicator || _r0);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r2.tip);
} }
const _c0 = function (a0) { return { "select-none opacity-50 overflow-hidden pointer-events-none clear-both": a0 }; };
function TDSSpinComponent_div_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 8);
    i0.ɵɵprojection(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵclassProp("tds-spin-blur", ctx_r3.isLoading);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(3, _c0, ctx_r3.isLoading));
} }
const _c1 = ["*"];
const TDS_CONFIG_MODULE_NAME = 'spin';
export class TDSSpinComponent {
    constructor(tdsConfigService, cdr, directionality) {
        this.tdsConfigService = tdsConfigService;
        this.cdr = cdr;
        this.directionality = directionality;
        this._tdsModuleName = TDS_CONFIG_MODULE_NAME;
        this.indicator = null;
        this.size = 'md';
        this.tip = null;
        this.delay = 0;
        this.simple = false;
        this.spinning = true;
        this.color = 'primary';
        this.destroy$ = new Subject();
        this.spinning$ = new BehaviorSubject(this.spinning);
        this.delay$ = new ReplaySubject(1);
        this.isLoading = false;
        this.dir = 'ltr';
    }
    ngOnInit() {
        const loading$ = this.delay$.pipe(startWith(this.delay), distinctUntilChanged(), switchMap(delay => {
            if (delay === 0) {
                return this.spinning$;
            }
            return this.spinning$.pipe(debounce(spinning => timer(spinning ? delay : 0)));
        }), takeUntil(this.destroy$));
        loading$.subscribe(loading => {
            this.isLoading = loading;
            this.cdr.markForCheck();
        });
        this.tdsConfigService
            .getConfigChangeEventForComponent(TDS_CONFIG_MODULE_NAME)
            .pipe(takeUntil(this.destroy$))
            .subscribe(() => this.cdr.markForCheck());
        this.directionality.change?.pipe(takeUntil(this.destroy$)).subscribe((direction) => {
            this.dir = direction;
            this.cdr.detectChanges();
        });
        this.dir = this.directionality.value;
    }
    ngOnChanges(changes) {
        const { spinning, delay } = changes;
        if (spinning) {
            this.spinning$.next(this.spinning);
        }
        if (delay) {
            this.delay$.next(this.delay);
        }
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
}
TDSSpinComponent.ɵfac = function TDSSpinComponent_Factory(t) { return new (t || TDSSpinComponent)(i0.ɵɵdirectiveInject(i1.TDSConfigService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.Directionality, 8)); };
TDSSpinComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSSpinComponent, selectors: [["tds-spin"]], hostVars: 4, hostBindings: function TDSSpinComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵclassProp("relative", !ctx.simple)("block", ctx.isLoading);
    } }, inputs: { indicator: "indicator", size: "size", tip: "tip", delay: "delay", simple: "simple", spinning: "spinning", color: "color" }, exportAs: ["tdsSpin"], features: [i0.ɵɵNgOnChangesFeature], ngContentSelectors: _c1, decls: 4, vars: 2, consts: [["defaultTemplate", ""], [4, "ngIf"], ["class", "tds-spin-container flex flex-col h-full w-full", 3, "tds-spin-blur", "ngClass", 4, "ngIf"], [1, "w-8", "h-8", 3, "color"], [1, "tds-spin", "absolute", "top-0", "left-0", "z-10", "w-full", "h-full", "box-border", "m-0", "p-0", "text-center", "flex", "flex-col", "items-center", "justify-center"], [3, "ngTemplateOutlet"], ["class", "tds-spin-text mt-2 text-caption-2 font-regular text-neutral-1-700", 4, "ngIf"], [1, "tds-spin-text", "mt-2", "text-caption-2", "font-regular", "text-neutral-1-700"], [1, "tds-spin-container", "flex", "flex-col", "h-full", "w-full", 3, "ngClass"]], template: function TDSSpinComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵtemplate(0, TDSSpinComponent_ng_template_0_Template, 1, 1, "ng-template", null, 0, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtemplate(2, TDSSpinComponent_div_2_Template, 4, 14, "div", 1);
        i0.ɵɵtemplate(3, TDSSpinComponent_div_3_Template, 2, 5, "div", 2);
    } if (rf & 2) {
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.isLoading);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx.simple);
    } }, directives: [i3.TDSProgressSpinnerComponent, i4.NgIf, i4.NgTemplateOutlet, i4.NgClass], encapsulation: 2 });
__decorate([
    WithConfig()
], TDSSpinComponent.prototype, "indicator", void 0);
__decorate([
    InputNumber()
], TDSSpinComponent.prototype, "delay", void 0);
__decorate([
    InputBoolean()
], TDSSpinComponent.prototype, "simple", void 0);
__decorate([
    InputBoolean()
], TDSSpinComponent.prototype, "spinning", void 0);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSSpinComponent, [{
        type: Component,
        args: [{
                selector: 'tds-spin',
                exportAs: 'tdsSpin',
                preserveWhitespaces: false,
                encapsulation: ViewEncapsulation.None,
                template: `
    <ng-template #defaultTemplate>
      <tds-spinner [color]="color" class="w-8 h-8"></tds-spinner>      
    </ng-template>
    <div *ngIf="isLoading">
      <div
        class="tds-spin absolute top-0 left-0 z-10  w-full h-full box-border m-0 p-0 text-center flex flex-col items-center justify-center"
        [class.tds-spin-rtl]="dir === 'rtl'"
        [class.tds-spin-spinning]="isLoading"
        [class.opacity-100]="isLoading"
        [class.tds-spin-xl]="size === 'xl'"
        [class.tds-spin-sm]="size === 'sm'"
        [class.tds-spin-show-text]="tip"
      >
        <ng-template [ngTemplateOutlet]="indicator || defaultTemplate"></ng-template>
        <div class="tds-spin-text mt-2 text-caption-2 font-regular text-neutral-1-700" *ngIf="tip">{{ tip }}</div>
      </div>
    </div>
    <div *ngIf="!simple" class="tds-spin-container flex flex-col h-full w-full"
     [class.tds-spin-blur]="isLoading"
     [ngClass]="{'select-none opacity-50 overflow-hidden pointer-events-none clear-both':isLoading}"
     >
      <ng-content></ng-content>
    </div>
  `,
                host: {
                    '[class.relative]': '!simple',
                    '[class.block]': "isLoading"
                }
            }]
    }], function () { return [{ type: i1.TDSConfigService }, { type: i0.ChangeDetectorRef }, { type: i2.Directionality, decorators: [{
                type: Optional
            }] }]; }, { indicator: [{
            type: Input
        }], size: [{
            type: Input
        }], tip: [{
            type: Input
        }], delay: [{
            type: Input
        }], simple: [{
            type: Input
        }], spinning: [{
            type: Input
        }], color: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;base64,