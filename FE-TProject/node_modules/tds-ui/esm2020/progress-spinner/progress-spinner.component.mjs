import { ChangeDetectionStrategy, Component } from '@angular/core';
import { mixinColor } from 'tds-ui/shared/common';
import * as i0 from "@angular/core";
const SPINNER_DEFAULT_COLOR = "primary";
// Boilerplate for applying mixins to TButtonBase.
/** @docs-private */
class TDSSpinnerBase {
    constructor(_elementRef) {
        this._elementRef = _elementRef;
    }
}
const _TDSSpinnerMixinBase = mixinColor(TDSSpinnerBase, SPINNER_DEFAULT_COLOR);
export class TDSProgressSpinnerComponent extends _TDSSpinnerMixinBase {
    constructor(elementRef) {
        super(elementRef);
        this._color = 'primary';
        this.cssColor = 'text-primary-1 dark:text-d-primary-1';
    }
    get color() {
        return this._color;
    }
    set color(value) {
        const colorPalette = value || this.defaultColor;
        if (colorPalette !== this._color) {
            // if (this._color) {
            //   this._elementRef.nativeElement.classList.remove(this.getClassColor(this._color));
            // }
            // if (colorPalette) {
            //   this._elementRef.nativeElement.classList.add(this.getClassColor(colorPalette));
            // }
            this.cssColor = this.getClassColor(colorPalette);
            this._color = colorPalette;
        }
    }
    getClassColor(color) {
        let result = "";
        switch (color) {
            case 'primary':
                result = 'text-primary-1 dark:text-d-primary-1';
                break;
            case 'secondary':
                result = 'text-secondary-2 dark:text-d-secondary-2';
                break;
            case 'info':
                result = 'text-info-500 dark:text-d-info-500';
                break;
            case 'warning':
                result = 'text-warning-500 dark:text-d-warning-500';
                break;
            case 'error':
                result = 'text-error-500 dark:text-d-error-500 ';
                break;
            case 'black':
                result = 'text-black-500';
                break;
            case 'white':
                result = 'text-white';
                break;
            // case 'gray':
            //   result = 'text-gray-500'
            //   break;
            case 'red':
                result = 'text-base-red-500 dark:text-d-base-red-500 ';
                break;
            case 'yellow':
                result = 'text-base-yellow-500 dark:text-d-base-yellow-500';
                break;
            case 'green':
                result = 'text-base-green-500 dark:text-d-base-green-500';
                break;
            case 'blue':
                result = 'text-base-blue-500 dark:text-d-base-blue-500';
                break;
            case 'indigo':
                result = 'text-base-indigo-500 dark:text-d-base-indigo-500';
                break;
            case 'purple':
                result = 'text-base-purple-500 dark:text-d-base-purple-500';
                break;
            case 'pink':
                result = 'text-base-pink-500 dark:text-d-base-pink-500';
                break;
            case 'amber':
                result = 'text-base-amber-500 dark:text-d-base-amber-500';
                break;
            case 'sky':
                result = 'text-base-sky-500 dark:text-d-base-sky-500';
                break;
            case 'lime':
                result = 'text-base-lime-500 dark:text-d-base-lime-500';
                break;
            case 'teal':
                result = 'text-base-teal-500 dark:text-d-base-teal-500';
                break;
            case 'orange':
                result = 'text-base-orange-500 dark:text-d-base-orange-500';
                break;
            default:
                result = "text-primary-1 dark:text-d-primary-1";
                break;
        }
        return result;
    }
}
TDSProgressSpinnerComponent.ɵfac = function TDSProgressSpinnerComponent_Factory(t) { return new (t || TDSProgressSpinnerComponent)(i0.ɵɵdirectiveInject(i0.ElementRef)); };
TDSProgressSpinnerComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSProgressSpinnerComponent, selectors: [["tds-spinner"]], hostAttrs: [1, "block", "relative", "overflow-hiden"], hostVars: 2, hostBindings: function TDSProgressSpinnerComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵclassMap(ctx.cssColor);
    } }, inputs: { color: "color" }, features: [i0.ɵɵInheritDefinitionFeature], decls: 2, vars: 0, consts: [["viewBox", "0 0 16 16", "fill", "none", "xmlns", "http://www.w3.org/2000/svg", 1, "animate-spin", "w-full", "h-full"], ["d", "M8 0C9.58225 1.88681e-08 11.129 0.469192 12.4446 1.34824C13.7602 2.22729 14.7855 3.47672 15.391 4.93853C15.9965 6.40034 16.155 8.00887 15.8463 9.56072C15.5376 11.1126 14.7757 12.538 13.6569 13.6569C12.538 14.7757 11.1126 15.5376 9.56072 15.8463C8.00887 16.155 6.40034 15.9965 4.93853 15.391C3.47672 14.7855 2.22729 13.7602 1.34824 12.4446C0.469192 11.129 -3.77363e-08 9.58225 0 8L1.56233 8C1.56233 9.27325 1.93989 10.5179 2.64727 11.5766C3.35465 12.6352 4.36008 13.4604 5.53641 13.9476C6.71274 14.4349 8.00714 14.5624 9.25593 14.314C10.5047 14.0656 11.6518 13.4524 12.5521 12.5521C13.4524 11.6518 14.0656 10.5047 14.314 9.25593C14.5624 8.00714 14.4349 6.71274 13.9476 5.53641C13.4604 4.36008 12.6352 3.35465 11.5766 2.64727C10.5179 1.93989 9.27325 1.56233 8 1.56233L8 0Z", "fill", "currentColor"]], template: function TDSProgressSpinnerComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵnamespaceSVG();
        i0.ɵɵelementStart(0, "svg", 0);
        i0.ɵɵelement(1, "path", 1);
        i0.ɵɵelementEnd();
    } }, encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSProgressSpinnerComponent, [{
        type: Component,
        args: [{
                selector: 'tds-spinner',
                template: `
  <svg class="animate-spin w-full h-full" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8 0C9.58225 1.88681e-08 11.129 0.469192 12.4446 1.34824C13.7602 2.22729 14.7855 3.47672 15.391 4.93853C15.9965 6.40034 16.155 8.00887 15.8463 9.56072C15.5376 11.1126 14.7757 12.538 13.6569 13.6569C12.538 14.7757 11.1126 15.5376 9.56072 15.8463C8.00887 16.155 6.40034 15.9965 4.93853 15.391C3.47672 14.7855 2.22729 13.7602 1.34824 12.4446C0.469192 11.129 -3.77363e-08 9.58225 0 8L1.56233 8C1.56233 9.27325 1.93989 10.5179 2.64727 11.5766C3.35465 12.6352 4.36008 13.4604 5.53641 13.9476C6.71274 14.4349 8.00714 14.5624 9.25593 14.314C10.5047 14.0656 11.6518 13.4524 12.5521 12.5521C13.4524 11.6518 14.0656 10.5047 14.314 9.25593C14.5624 8.00714 14.4349 6.71274 13.9476 5.53641C13.4604 4.36008 12.6352 3.35465 11.5766 2.64727C10.5179 1.93989 9.27325 1.56233 8 1.56233L8 0Z" fill="currentColor"/>
</svg>
 `,
                inputs: ["color"],
                host: {
                    'class': "block relative overflow-hiden",
                    '[class]': 'cssColor'
                },
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: i0.ElementRef }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,