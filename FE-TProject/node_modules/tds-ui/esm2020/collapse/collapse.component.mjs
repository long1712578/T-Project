import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, Input, Optional, ViewEncapsulation } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { WithConfig } from 'tds-ui/core/config';
import { InputBoolean } from 'tds-ui/shared/utility';
import * as i0 from "@angular/core";
import * as i1 from "tds-ui/core/config";
import * as i2 from "@angular/cdk/bidi";
const _c0 = ["*"];
const TDS_CONFIG_MODULE_NAME = 'collapse';
export class TDSCollapseComponent {
    constructor(tdsConfigService, cdr, elementRef, directionality) {
        this.tdsConfigService = tdsConfigService;
        this.cdr = cdr;
        this.elementRef = elementRef;
        this.directionality = directionality;
        this._tdsModuleName = TDS_CONFIG_MODULE_NAME;
        this.accordion = false;
        this.bordered = true;
        this.ghost = false;
        this.expandIconPosition = 'left';
        this.dir = 'ltr';
        this.listOfTDSCollapsePanelComponent = [];
        this.destroy$ = new Subject();
        // TODO: move to host after View Engine deprecation
        this.elementRef.nativeElement.classList.add('tds-collapse');
        this.tdsConfigService
            .getConfigChangeEventForComponent(TDS_CONFIG_MODULE_NAME)
            .pipe(takeUntil(this.destroy$))
            .subscribe(() => {
            this.cdr.markForCheck();
        });
    }
    ngOnInit() {
        this.directionality.change?.pipe(takeUntil(this.destroy$)).subscribe((direction) => {
            this.dir = direction;
            this.cdr.detectChanges();
        });
        this.dir = this.directionality.value;
    }
    addPanel(value) {
        this.listOfTDSCollapsePanelComponent.push(value);
    }
    removePanel(value) {
        this.listOfTDSCollapsePanelComponent.splice(this.listOfTDSCollapsePanelComponent.indexOf(value), 1);
    }
    click(collapse) {
        if (this.accordion && !collapse.active) {
            this.listOfTDSCollapsePanelComponent
                .filter(item => item !== collapse)
                .forEach(item => {
                if (item.active) {
                    item.active = false;
                    item.activeChange.emit(item.active);
                    item.markForCheck();
                }
            });
        }
        collapse.active = !collapse.active;
        collapse.activeChange.emit(collapse.active);
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
}
TDSCollapseComponent.ɵfac = function TDSCollapseComponent_Factory(t) { return new (t || TDSCollapseComponent)(i0.ɵɵdirectiveInject(i1.TDSConfigService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i2.Directionality, 8)); };
TDSCollapseComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSCollapseComponent, selectors: [["tds-collapse"]], hostAttrs: [1, "block", "box-border", "m-0", "p-0", "rounded"], hostVars: 18, hostBindings: function TDSCollapseComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵclassProp("tds-collapse-icon-position-left", ctx.expandIconPosition === "left")("tds-collapse-icon-position-right", ctx.expandIconPosition === "right")("tds-collapse-ghost", ctx.ghost)("tds-collapse-borderless", !ctx.bordered)("tds-collapse-rtl", ctx.dir === "rtl")("border", ctx.bordered)("border-neutral-2-200", ctx.bordered)("dark:border-d-neutral-2-200", ctx.bordered)("border-b-0", ctx.bordered);
    } }, inputs: { accordion: "accordion", bordered: "bordered", ghost: "ghost", expandIconPosition: "expandIconPosition" }, exportAs: ["tdsCollapse"], ngContentSelectors: _c0, decls: 1, vars: 0, template: function TDSCollapseComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
__decorate([
    WithConfig(),
    InputBoolean()
], TDSCollapseComponent.prototype, "accordion", void 0);
__decorate([
    WithConfig(),
    InputBoolean()
], TDSCollapseComponent.prototype, "bordered", void 0);
__decorate([
    WithConfig(),
    InputBoolean()
], TDSCollapseComponent.prototype, "ghost", void 0);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSCollapseComponent, [{
        type: Component,
        args: [{
                selector: 'tds-collapse',
                exportAs: 'tdsCollapse',
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                template: `
    <ng-content></ng-content>
  `,
                host: {
                    "class": "block box-border m-0 p-0 rounded",
                    '[class.tds-collapse-icon-position-left]': `expandIconPosition === 'left'`,
                    '[class.tds-collapse-icon-position-right]': `expandIconPosition === 'right'`,
                    '[class.tds-collapse-ghost]': `ghost`,
                    '[class.tds-collapse-borderless]': '!bordered',
                    '[class.tds-collapse-rtl]': "dir === 'rtl'",
                    '[class.border]': 'bordered',
                    '[class.border-neutral-2-200]': 'bordered',
                    '[class.dark:border-d-neutral-2-200]': 'bordered',
                    '[class.border-b-0]': 'bordered',
                }
            }]
    }], function () { return [{ type: i1.TDSConfigService }, { type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i2.Directionality, decorators: [{
                type: Optional
            }] }]; }, { accordion: [{
            type: Input
        }], bordered: [{
            type: Input
        }], ghost: [{
            type: Input
        }], expandIconPosition: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;base64,