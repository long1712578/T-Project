import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, EventEmitter, Input, Optional, Output, ViewEncapsulation } from '@angular/core';
import { ReplaySubject, Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { WithConfig } from "tds-ui/core/config";
import { gridResponsiveMap, TDSBreakpointEnum } from 'tds-ui/core/services';
import { InputBoolean, InputNumber } from 'tds-ui/shared/utility';
import * as i0 from "@angular/core";
import * as i1 from "tds-ui/i18n";
import * as i2 from "tds-ui/core/services";
import * as i3 from "tds-ui/core/config";
import * as i4 from "@angular/cdk/bidi";
import * as i5 from "@angular/common";
import * as i6 from "./pagination-simple.component";
import * as i7 from "./pagination-default.component";
function TDSPaginationComponent_ng_container_0_ng_container_1_ng_template_1_Template(rf, ctx) { }
function TDSPaginationComponent_ng_container_0_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtemplate(1, TDSPaginationComponent_ng_container_0_ng_container_1_ng_template_1_Template, 0, 0, "ng-template", 6);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    i0.ɵɵnextContext(2);
    const _r1 = i0.ɵɵreference(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngTemplateOutlet", _r1.template);
} }
function TDSPaginationComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtemplate(1, TDSPaginationComponent_ng_container_0_ng_container_1_Template, 2, 1, "ng-container", 5);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    const _r2 = i0.ɵɵreference(4);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r0.simple)("ngIfElse", _r2.template);
} }
const TDS_CONFIG_MODULE_NAME = 'pagination';
export class TDSPaginationComponent {
    constructor(i18n, cdr, breakpointService, tdsConfigService, directionality, elementRef) {
        this.i18n = i18n;
        this.cdr = cdr;
        this.breakpointService = breakpointService;
        this.tdsConfigService = tdsConfigService;
        this.directionality = directionality;
        this.elementRef = elementRef;
        this._tdsModuleName = TDS_CONFIG_MODULE_NAME;
        this.pageSizeChange = new EventEmitter();
        this.pageIndexChange = new EventEmitter();
        this.showTotal = null;
        this.itemRender = null;
        this.size = 'sm';
        this.pageSizeOptions = [10, 20, 30, 40];
        this.showSizeChanger = false;
        this.showQuickJumper = false;
        this.simple = false;
        this.disabled = false;
        this.responsive = false;
        this.hideOnSinglePage = false;
        this.total = 0;
        this.pageIndex = 1;
        this.pageSize = 10;
        this.showRefresh = false;
        this.bordered = true;
        this.clickRefresh = new EventEmitter();
        this.showPagination = true;
        this._size = "sm";
        this.dir = 'ltr';
        this.destroy$ = new Subject();
        this.total$ = new ReplaySubject(1);
        // TODO: move to host after View Engine deprecation
        this.elementRef.nativeElement.classList.add('tds-pagination');
    }
    validatePageIndex(value, lastIndex) {
        if (value > lastIndex) {
            return lastIndex;
        }
        else if (value < 1) {
            return 1;
        }
        else {
            return value;
        }
    }
    onPageIndexChange(index) {
        const lastIndex = this.getLastIndex(this.total, this.pageSize);
        const validIndex = this.validatePageIndex(index, lastIndex);
        if (validIndex !== this.pageIndex && !this.disabled) {
            this.pageIndex = validIndex;
            this.pageIndexChange.emit(this.pageIndex);
        }
    }
    onPageSizeChange(size) {
        this.pageSize = size;
        this.pageSizeChange.emit(size);
        const lastIndex = this.getLastIndex(this.total, this.pageSize);
        if (this.pageIndex > lastIndex) {
            this.onPageIndexChange(lastIndex);
        }
    }
    onTotalChange(total) {
        const lastIndex = this.getLastIndex(total, this.pageSize);
        if (this.pageIndex > lastIndex) {
            Promise.resolve().then(() => {
                this.onPageIndexChange(lastIndex);
                this.cdr.markForCheck();
            });
        }
    }
    getLastIndex(total, pageSize) {
        return Math.ceil(total / pageSize);
    }
    ngOnInit() {
        this.i18n.localeChange.pipe(takeUntil(this.destroy$)).subscribe(() => {
            this.locale = this.i18n.getLocaleData('Pagination');
            this.cdr.markForCheck();
        });
        this.total$.pipe(takeUntil(this.destroy$)).subscribe(total => {
            this.onTotalChange(total);
        });
        this.breakpointService
            .subscribe(gridResponsiveMap)
            .pipe(takeUntil(this.destroy$))
            .subscribe(bp => {
            if (this.responsive) {
                this._size = bp === TDSBreakpointEnum.xs ? 'sm' : 'md';
                this.cdr.markForCheck();
            }
        });
        this.directionality.change?.pipe(takeUntil(this.destroy$)).subscribe((direction) => {
            this.dir = direction;
            this.cdr.detectChanges();
        });
        this.dir = this.directionality.value;
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    ngOnChanges(changes) {
        const { hideOnSinglePage, total, pageSize, size } = changes;
        if (total) {
            this.total$.next(this.total);
        }
        if (hideOnSinglePage || total || pageSize) {
            this.showPagination =
                (this.hideOnSinglePage && this.total > this.pageSize) || (this.total > 0 && !this.hideOnSinglePage);
        }
        if (size) {
            this._size = size.currentValue;
        }
    }
    onClickRefresh(e) {
        this.clickRefresh.emit(e);
    }
}
TDSPaginationComponent.ɵfac = function TDSPaginationComponent_Factory(t) { return new (t || TDSPaginationComponent)(i0.ɵɵdirectiveInject(i1.TDSI18nService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.TDSBreakpointService), i0.ɵɵdirectiveInject(i3.TDSConfigService), i0.ɵɵdirectiveInject(i4.Directionality, 8), i0.ɵɵdirectiveInject(i0.ElementRef)); };
TDSPaginationComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSPaginationComponent, selectors: [["tds-pagination"]], hostVars: 8, hostBindings: function TDSPaginationComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵclassProp("tds-pagination-simple", ctx.simple)("tds-pagination-disabled", ctx.disabled)("mini", !ctx.simple && ctx._size === "small")("tds-pagination-rtl", ctx.dir === "rtl");
    } }, inputs: { showTotal: "showTotal", itemRender: "itemRender", size: "size", pageSizeOptions: "pageSizeOptions", showSizeChanger: "showSizeChanger", showQuickJumper: "showQuickJumper", simple: "simple", disabled: "disabled", responsive: "responsive", hideOnSinglePage: "hideOnSinglePage", total: "total", pageIndex: "pageIndex", pageSize: "pageSize", showRefresh: "showRefresh", bordered: "bordered" }, outputs: { pageSizeChange: "pageSizeChange", pageIndexChange: "pageIndexChange", clickRefresh: "clickRefresh" }, exportAs: ["tdsPagination"], features: [i0.ɵɵNgOnChangesFeature], decls: 5, vars: 21, consts: [[4, "ngIf"], [3, "disabled", "itemRender", "locale", "pageSize", "total", "pageIndex", "size", "pageIndexChange"], ["simplePagination", ""], [3, "size", "itemRender", "showTotal", "showRefresh", "disabled", "locale", "showSizeChanger", "showQuickJumper", "total", "pageIndex", "pageSize", "pageSizeOptions", "bordered", "pageIndexChange", "pageSizeChange", "clickRefresh"], ["defaultPagination", ""], [4, "ngIf", "ngIfElse"], [3, "ngTemplateOutlet"]], template: function TDSPaginationComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtemplate(0, TDSPaginationComponent_ng_container_0_Template, 2, 2, "ng-container", 0);
        i0.ɵɵelementStart(1, "tds-pagination-simple", 1, 2);
        i0.ɵɵlistener("pageIndexChange", function TDSPaginationComponent_Template_tds_pagination_simple_pageIndexChange_1_listener($event) { return ctx.onPageIndexChange($event); });
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(3, "tds-pagination-default", 3, 4);
        i0.ɵɵlistener("pageIndexChange", function TDSPaginationComponent_Template_tds_pagination_default_pageIndexChange_3_listener($event) { return ctx.onPageIndexChange($event); })("pageSizeChange", function TDSPaginationComponent_Template_tds_pagination_default_pageSizeChange_3_listener($event) { return ctx.onPageSizeChange($event); })("clickRefresh", function TDSPaginationComponent_Template_tds_pagination_default_clickRefresh_3_listener($event) { return ctx.onClickRefresh($event); });
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵproperty("ngIf", ctx.showPagination);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("disabled", ctx.disabled)("itemRender", ctx.itemRender)("locale", ctx.locale)("pageSize", ctx.pageSize)("total", ctx.total)("pageIndex", ctx.pageIndex)("size", ctx._size);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("size", ctx._size)("itemRender", ctx.itemRender)("showTotal", ctx.showTotal)("showRefresh", ctx.showRefresh)("disabled", ctx.disabled)("locale", ctx.locale)("showSizeChanger", ctx.showSizeChanger)("showQuickJumper", ctx.showQuickJumper)("total", ctx.total)("pageIndex", ctx.pageIndex)("pageSize", ctx.pageSize)("pageSizeOptions", ctx.pageSizeOptions)("bordered", ctx.bordered);
    } }, directives: [i5.NgIf, i5.NgTemplateOutlet, i6.TDSPaginationSimpleComponent, i7.TDSPaginationDefaultComponent], encapsulation: 2, changeDetection: 0 });
__decorate([
    WithConfig()
], TDSPaginationComponent.prototype, "size", void 0);
__decorate([
    WithConfig()
], TDSPaginationComponent.prototype, "pageSizeOptions", void 0);
__decorate([
    WithConfig(),
    InputBoolean()
], TDSPaginationComponent.prototype, "showSizeChanger", void 0);
__decorate([
    WithConfig(),
    InputBoolean()
], TDSPaginationComponent.prototype, "showQuickJumper", void 0);
__decorate([
    WithConfig(),
    InputBoolean()
], TDSPaginationComponent.prototype, "simple", void 0);
__decorate([
    InputBoolean()
], TDSPaginationComponent.prototype, "disabled", void 0);
__decorate([
    InputBoolean()
], TDSPaginationComponent.prototype, "responsive", void 0);
__decorate([
    InputBoolean()
], TDSPaginationComponent.prototype, "hideOnSinglePage", void 0);
__decorate([
    InputNumber()
], TDSPaginationComponent.prototype, "total", void 0);
__decorate([
    InputNumber()
], TDSPaginationComponent.prototype, "pageIndex", void 0);
__decorate([
    InputNumber()
], TDSPaginationComponent.prototype, "pageSize", void 0);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSPaginationComponent, [{
        type: Component,
        args: [{
                selector: 'tds-pagination',
                exportAs: 'tdsPagination',
                preserveWhitespaces: false,
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: `
    <ng-container *ngIf="showPagination">
      <ng-container *ngIf="simple; else defaultPagination.template">
        <ng-template [ngTemplateOutlet]="simplePagination.template"></ng-template>
      </ng-container>
    </ng-container>
    <tds-pagination-simple
      #simplePagination
      [disabled]="disabled"
      [itemRender]="itemRender"
      [locale]="locale"
      [pageSize]="pageSize"
      [total]="total"
      [pageIndex]="pageIndex"
      [size]="_size"
      (pageIndexChange)="onPageIndexChange($event)"
    ></tds-pagination-simple>
    <tds-pagination-default
      #defaultPagination
      [size]="_size"
      [itemRender]="itemRender"
      [showTotal]="showTotal"
      [showRefresh]="showRefresh"
      [disabled]="disabled"
      [locale]="locale"
      [showSizeChanger]="showSizeChanger"
      [showQuickJumper]="showQuickJumper"
      [total]="total"
      [pageIndex]="pageIndex"
      [pageSize]="pageSize"
      [pageSizeOptions]="pageSizeOptions"
      [bordered]="bordered"
      (pageIndexChange)="onPageIndexChange($event)"
      (pageSizeChange)="onPageSizeChange($event)"
      (clickRefresh)="onClickRefresh($event)"
    ></tds-pagination-default>
  `,
                host: {
                    '[class.tds-pagination-simple]': 'simple',
                    '[class.tds-pagination-disabled]': 'disabled',
                    '[class.mini]': `!simple && _size === 'small'`,
                    '[class.tds-pagination-rtl]': `dir === 'rtl'`
                }
            }]
    }], function () { return [{ type: i1.TDSI18nService }, { type: i0.ChangeDetectorRef }, { type: i2.TDSBreakpointService }, { type: i3.TDSConfigService }, { type: i4.Directionality, decorators: [{
                type: Optional
            }] }, { type: i0.ElementRef }]; }, { pageSizeChange: [{
            type: Output
        }], pageIndexChange: [{
            type: Output
        }], showTotal: [{
            type: Input
        }], itemRender: [{
            type: Input
        }], size: [{
            type: Input
        }], pageSizeOptions: [{
            type: Input
        }], showSizeChanger: [{
            type: Input
        }], showQuickJumper: [{
            type: Input
        }], simple: [{
            type: Input
        }], disabled: [{
            type: Input
        }], responsive: [{
            type: Input
        }], hideOnSinglePage: [{
            type: Input
        }], total: [{
            type: Input
        }], pageIndex: [{
            type: Input
        }], pageSize: [{
            type: Input
        }], showRefresh: [{
            type: Input
        }], bordered: [{
            type: Input
        }], clickRefresh: [{
            type: Output
        }] }); })();
//# sourceMappingURL=data:application/json;base64,