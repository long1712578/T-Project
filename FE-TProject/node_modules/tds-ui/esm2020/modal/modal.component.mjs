import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, ContentChild, EventEmitter, Input, Output, TemplateRef, ViewChild } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { InputBoolean } from 'tds-ui/shared/utility';
import { TDSModalContentDirective } from './modal-content.directive';
import { TDSModalFooterDirective } from './modal-footer.directive';
import { TDSModalTitleDirective } from './modal-title.directive';
import { getConfigFromComponent } from './utils';
import * as i0 from "@angular/core";
import * as i1 from "./modal.service";
function TDSModalComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵprojection(0);
} }
const _c0 = ["*"];
export class TDSModalComponent {
    constructor(cdr, modal, viewContainerRef) {
        this.cdr = cdr;
        this.modal = modal;
        this.viewContainerRef = viewContainerRef;
        this.visible = false;
        this.closable = true;
        this.okLoading = false;
        this.okDisabled = false;
        this.cancelDisabled = false;
        this.cancelLoading = false;
        this.keyboard = true;
        this.noAnimation = false;
        this.centered = false;
        this.size = "md";
        this.zindex = 60;
        this.closeIcon = 'close';
        this.okType = 'primary';
        this.okDanger = false;
        this.iconType = 'question-circle'; // Confirm Modal ONLY
        this.modalType = 'default';
        this.autofocus = 'auto';
        // TODO(@hsuanxyz) Input will not be supported
        this.onOk = new EventEmitter();
        // TODO(@hsuanxyz) Input will not be supported
        this.onCancel = new EventEmitter();
        this.onAfterOpen = new EventEmitter();
        this.onAfterClose = new EventEmitter();
        this.visibleChange = new EventEmitter();
        this.modalRef = null;
        this.destroy$ = new Subject();
    }
    set modalTitle(value) {
        if (value) {
            this.setTitleWithTemplate(value);
        }
    }
    set modalFooter(value) {
        if (value) {
            this.setFooterWithTemplate(value);
        }
    }
    get width() {
        let result = 500;
        switch (this.size) {
            case "sm":
                result = 300;
                break;
            case "md":
                result = 500;
                break;
            case "lg":
                result = 800;
                break;
            case "xl":
                result = 1140;
                break;
            default:
                result = 500;
                break;
        }
        return result;
    }
    get afterOpen() {
        // Observable alias for afterOpen
        return this.onAfterOpen.asObservable();
    }
    get afterClose() {
        // Observable alias for afterClose
        return this.onAfterClose.asObservable();
    }
    open() {
        if (!this.visible) {
            this.visible = true;
            this.visibleChange.emit(true);
        }
        if (!this.modalRef) {
            const config = this.getConfig();
            this.modalRef = this.modal.create(config);
            // When the modal is implicitly closed (e.g. closeAll) the visible needs to be set to the correct value and emit.
            this.modalRef.afterClose
                .asObservable()
                .pipe(takeUntil(this.destroy$))
                .subscribe(() => {
                this.close();
            });
        }
    }
    close(result) {
        if (this.visible) {
            this.visible = false;
            this.visibleChange.emit(false);
        }
        if (this.modalRef) {
            this.modalRef.close(result);
            this.modalRef = null;
        }
    }
    destroy(result) {
        this.close(result);
    }
    triggerOk() {
        this.modalRef?.triggerOk();
    }
    triggerCancel() {
        this.modalRef?.triggerCancel();
    }
    getContentComponent() {
        return this.modalRef?.getContentComponent();
    }
    getElement() {
        return this.modalRef?.getElement();
    }
    getModalRef() {
        return this.modalRef;
    }
    setTitleWithTemplate(templateRef) {
        this.title = templateRef;
        if (this.modalRef) {
            // If modalRef already created, set the title in next tick
            Promise.resolve().then(() => {
                this.modalRef.updateConfig({
                    title: this.title
                });
            });
        }
    }
    setFooterWithTemplate(templateRef) {
        this.footer = templateRef;
        if (this.modalRef) {
            // If modalRef already created, set the footer in next tick
            Promise.resolve().then(() => {
                this.modalRef.updateConfig({
                    footer: this.footer
                });
            });
        }
        this.cdr.markForCheck();
    }
    getConfig() {
        const componentConfig = getConfigFromComponent(this);
        componentConfig.viewContainerRef = this.viewContainerRef;
        componentConfig.content = this.content || this.contentFromContentChild;
        return componentConfig;
    }
    ngOnChanges(changes) {
        const { visible, ...otherChanges } = changes;
        if (Object.keys(otherChanges).length && this.modalRef) {
            this.modalRef.updateConfig(getConfigFromComponent(this));
        }
        if (visible) {
            if (this.visible) {
                this.open();
            }
            else {
                this.close();
            }
        }
    }
    ngOnDestroy() {
        this.modalRef?._finishDialogClose();
        this.destroy$.next();
        this.destroy$.complete();
    }
}
TDSModalComponent.ɵfac = function TDSModalComponent_Factory(t) { return new (t || TDSModalComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.TDSModalService), i0.ɵɵdirectiveInject(i0.ViewContainerRef)); };
TDSModalComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSModalComponent, selectors: [["tds-modal"]], contentQueries: function TDSModalComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        i0.ɵɵcontentQuery(dirIndex, TDSModalTitleDirective, 7, TemplateRef);
        i0.ɵɵcontentQuery(dirIndex, TDSModalContentDirective, 7, TemplateRef);
        i0.ɵɵcontentQuery(dirIndex, TDSModalFooterDirective, 7, TemplateRef);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.modalTitle = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.contentFromContentChild = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.modalFooter = _t.first);
    } }, viewQuery: function TDSModalComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(TemplateRef, 7);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.contentTemplateRef = _t.first);
    } }, inputs: { mask: "mask", autoClose: "autoClose", closeOnNavigation: "closeOnNavigation", visible: "visible", closable: "closable", okLoading: "okLoading", okDisabled: "okDisabled", cancelDisabled: "cancelDisabled", cancelLoading: "cancelLoading", keyboard: "keyboard", noAnimation: "noAnimation", centered: "centered", size: "size", content: "content", componentParams: "componentParams", footer: "footer", zindex: "zindex", wrapClassName: "wrapClassName", className: "className", style: "style", title: "title", closeIcon: "closeIcon", maskStyle: "maskStyle", bodyStyle: "bodyStyle", okText: "okText", cancelText: "cancelText", okType: "okType", okDanger: "okDanger", iconType: "iconType", modalType: "modalType", autofocus: "autofocus", onOk: "onOk", onCancel: "onCancel" }, outputs: { onOk: "onOk", onCancel: "onCancel", onAfterOpen: "onAfterOpen", onAfterClose: "onAfterClose", visibleChange: "visibleChange" }, exportAs: ["tdsModal"], features: [i0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function TDSModalComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵtemplate(0, TDSModalComponent_ng_template_0_Template, 1, 0, "ng-template");
    } }, encapsulation: 2, changeDetection: 0 });
__decorate([
    InputBoolean()
], TDSModalComponent.prototype, "mask", void 0);
__decorate([
    InputBoolean()
], TDSModalComponent.prototype, "autoClose", void 0);
__decorate([
    InputBoolean()
], TDSModalComponent.prototype, "closeOnNavigation", void 0);
__decorate([
    InputBoolean()
], TDSModalComponent.prototype, "visible", void 0);
__decorate([
    InputBoolean()
], TDSModalComponent.prototype, "closable", void 0);
__decorate([
    InputBoolean()
], TDSModalComponent.prototype, "okLoading", void 0);
__decorate([
    InputBoolean()
], TDSModalComponent.prototype, "okDisabled", void 0);
__decorate([
    InputBoolean()
], TDSModalComponent.prototype, "cancelDisabled", void 0);
__decorate([
    InputBoolean()
], TDSModalComponent.prototype, "cancelLoading", void 0);
__decorate([
    InputBoolean()
], TDSModalComponent.prototype, "keyboard", void 0);
__decorate([
    InputBoolean()
], TDSModalComponent.prototype, "noAnimation", void 0);
__decorate([
    InputBoolean()
], TDSModalComponent.prototype, "centered", void 0);
__decorate([
    InputBoolean()
], TDSModalComponent.prototype, "okDanger", void 0);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSModalComponent, [{
        type: Component,
        args: [{
                selector: 'tds-modal',
                exportAs: 'tdsModal',
                template: `
    <ng-template>
      <ng-content></ng-content>
    </ng-template>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.TDSModalService }, { type: i0.ViewContainerRef }]; }, { mask: [{
            type: Input
        }], autoClose: [{
            type: Input
        }], closeOnNavigation: [{
            type: Input
        }], visible: [{
            type: Input
        }], closable: [{
            type: Input
        }], okLoading: [{
            type: Input
        }], okDisabled: [{
            type: Input
        }], cancelDisabled: [{
            type: Input
        }], cancelLoading: [{
            type: Input
        }], keyboard: [{
            type: Input
        }], noAnimation: [{
            type: Input
        }], centered: [{
            type: Input
        }], size: [{
            type: Input
        }], content: [{
            type: Input
        }], componentParams: [{
            type: Input
        }], footer: [{
            type: Input
        }], zindex: [{
            type: Input
        }], wrapClassName: [{
            type: Input
        }], className: [{
            type: Input
        }], style: [{
            type: Input
        }], title: [{
            type: Input
        }], closeIcon: [{
            type: Input
        }], maskStyle: [{
            type: Input
        }], bodyStyle: [{
            type: Input
        }], okText: [{
            type: Input
        }], cancelText: [{
            type: Input
        }], okType: [{
            type: Input
        }], okDanger: [{
            type: Input
        }], iconType: [{
            type: Input
        }], modalType: [{
            type: Input
        }], autofocus: [{
            type: Input
        }], onOk: [{
            type: Input
        }, {
            type: Output
        }], onCancel: [{
            type: Input
        }, {
            type: Output
        }], onAfterOpen: [{
            type: Output
        }], onAfterClose: [{
            type: Output
        }], visibleChange: [{
            type: Output
        }], contentTemplateRef: [{
            type: ViewChild,
            args: [TemplateRef, { static: true }]
        }], modalTitle: [{
            type: ContentChild,
            args: [TDSModalTitleDirective, { static: true, read: TemplateRef }]
        }], contentFromContentChild: [{
            type: ContentChild,
            args: [TDSModalContentDirective, { static: true, read: TemplateRef }]
        }], modalFooter: [{
            type: ContentChild,
            args: [TDSModalFooterDirective, { static: true, read: TemplateRef }]
        }] }); })();
//# sourceMappingURL=data:application/json;base64,