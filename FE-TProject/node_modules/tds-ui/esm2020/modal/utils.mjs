export function applyConfigDefaults(config, defaultOptions) {
    return { ...defaultOptions, ...config };
}
export function getValueWithConfig(userValue, configValue, defaultValue) {
    return typeof userValue === 'undefined' ? (typeof configValue === 'undefined' ? defaultValue : configValue) : userValue;
}
/**
 * Assign the params into the content component instance.
 * @deprecated Should use dependency injection to get the params for user
 * @breaking-change 12.0.0
 */
export function setContentInstanceParams(instance, params) {
    Object.assign(instance, params);
}
export function getConfigFromComponent(component) {
    const { size, centered, mask, autoClose, closable, okLoading, okDisabled, cancelDisabled, cancelLoading, keyboard, noAnimation, content, componentParams, footer, zindex, width, wrapClassName, className, style, title, closeIcon, maskStyle, bodyStyle, okText, cancelText, okType, okDanger, iconType, modalType, onOk, onCancel, onAfterOpen, onAfterClose, closeOnNavigation, autofocus } = component;
    return {
        size,
        centered,
        mask,
        autoClose,
        closable,
        okLoading,
        okDisabled,
        cancelDisabled,
        cancelLoading,
        keyboard,
        noAnimation,
        content,
        componentParams,
        footer,
        zindex,
        width,
        wrapClassName,
        className,
        style,
        title,
        closeIcon,
        maskStyle,
        bodyStyle,
        okText,
        cancelText,
        okType,
        okDanger,
        iconType,
        modalType,
        onOk,
        onCancel,
        onAfterOpen,
        onAfterClose,
        closeOnNavigation,
        autofocus
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy90ZHMtdWkvbW9kYWwvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBS0EsTUFBTSxVQUFVLG1CQUFtQixDQUFDLE1BQW9CLEVBQUUsY0FBNEI7SUFDcEYsT0FBTyxFQUFFLEdBQUcsY0FBYyxFQUFFLEdBQUcsTUFBTSxFQUFFLENBQUM7QUFDMUMsQ0FBQztBQUVELE1BQU0sVUFBVSxrQkFBa0IsQ0FBSSxTQUF3QixFQUFFLFdBQTBCLEVBQUUsWUFBZTtJQUN6RyxPQUFPLE9BQU8sU0FBUyxLQUFLLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLFdBQVcsS0FBSyxXQUFXLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztBQUMxSCxDQUFDO0FBRUQ7Ozs7R0FJRztBQUNILE1BQU0sVUFBVSx3QkFBd0IsQ0FBSSxRQUFXLEVBQUUsTUFBOEI7SUFDckYsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDbEMsQ0FBQztBQUVELE1BQU0sVUFBVSxzQkFBc0IsQ0FBQyxTQUE0QjtJQUNqRSxNQUFNLEVBQ0osSUFBSSxFQUNKLFFBQVEsRUFDUixJQUFJLEVBQ0osU0FBUyxFQUNULFFBQVEsRUFDUixTQUFTLEVBQ1QsVUFBVSxFQUNWLGNBQWMsRUFDZCxhQUFhLEVBQ2IsUUFBUSxFQUNSLFdBQVcsRUFDWCxPQUFPLEVBQ1AsZUFBZSxFQUNmLE1BQU0sRUFDTixNQUFNLEVBQ04sS0FBSyxFQUNMLGFBQWEsRUFDYixTQUFTLEVBQ1QsS0FBSyxFQUNMLEtBQUssRUFDTCxTQUFTLEVBQ1QsU0FBUyxFQUNULFNBQVMsRUFDVCxNQUFNLEVBQ04sVUFBVSxFQUNWLE1BQU0sRUFDTixRQUFRLEVBQ1IsUUFBUSxFQUNSLFNBQVMsRUFDVCxJQUFJLEVBQ0osUUFBUSxFQUNSLFdBQVcsRUFDWCxZQUFZLEVBQ1osaUJBQWlCLEVBQ2pCLFNBQVMsRUFDVixHQUFHLFNBQVMsQ0FBQztJQUNkLE9BQU87UUFDTCxJQUFJO1FBQ0osUUFBUTtRQUNSLElBQUk7UUFDSixTQUFTO1FBQ1QsUUFBUTtRQUNSLFNBQVM7UUFDVCxVQUFVO1FBQ1YsY0FBYztRQUNkLGFBQWE7UUFDYixRQUFRO1FBQ1IsV0FBVztRQUNYLE9BQU87UUFDUCxlQUFlO1FBQ2YsTUFBTTtRQUNOLE1BQU07UUFDTixLQUFLO1FBQ0wsYUFBYTtRQUNiLFNBQVM7UUFDVCxLQUFLO1FBQ0wsS0FBSztRQUNMLFNBQVM7UUFDVCxTQUFTO1FBQ1QsU0FBUztRQUNULE1BQU07UUFDTixVQUFVO1FBQ1YsTUFBTTtRQUNOLFFBQVE7UUFDUixRQUFRO1FBQ1IsU0FBUztRQUNULElBQUk7UUFDSixRQUFRO1FBQ1IsV0FBVztRQUNYLFlBQVk7UUFDWixpQkFBaUI7UUFDakIsU0FBUztLQUNWLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiXHJcblxyXG5pbXBvcnQgeyBNb2RhbE9wdGlvbnMgfSBmcm9tICcuL21vZGFsLXR5cGVzJztcclxuaW1wb3J0IHsgVERTTW9kYWxDb21wb25lbnQgfSBmcm9tICcuL21vZGFsLmNvbXBvbmVudCc7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYXBwbHlDb25maWdEZWZhdWx0cyhjb25maWc6IE1vZGFsT3B0aW9ucywgZGVmYXVsdE9wdGlvbnM6IE1vZGFsT3B0aW9ucyk6IE1vZGFsT3B0aW9ucyB7XHJcbiAgcmV0dXJuIHsgLi4uZGVmYXVsdE9wdGlvbnMsIC4uLmNvbmZpZyB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0VmFsdWVXaXRoQ29uZmlnPFQ+KHVzZXJWYWx1ZTogVCB8IHVuZGVmaW5lZCwgY29uZmlnVmFsdWU6IFQgfCB1bmRlZmluZWQsIGRlZmF1bHRWYWx1ZTogVCk6IFQgfCB1bmRlZmluZWQge1xyXG4gIHJldHVybiB0eXBlb2YgdXNlclZhbHVlID09PSAndW5kZWZpbmVkJyA/ICh0eXBlb2YgY29uZmlnVmFsdWUgPT09ICd1bmRlZmluZWQnID8gZGVmYXVsdFZhbHVlIDogY29uZmlnVmFsdWUpIDogdXNlclZhbHVlO1xyXG59XHJcblxyXG4vKipcclxuICogQXNzaWduIHRoZSBwYXJhbXMgaW50byB0aGUgY29udGVudCBjb21wb25lbnQgaW5zdGFuY2UuXHJcbiAqIEBkZXByZWNhdGVkIFNob3VsZCB1c2UgZGVwZW5kZW5jeSBpbmplY3Rpb24gdG8gZ2V0IHRoZSBwYXJhbXMgZm9yIHVzZXJcclxuICogQGJyZWFraW5nLWNoYW5nZSAxMi4wLjBcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXRDb250ZW50SW5zdGFuY2VQYXJhbXM8VD4oaW5zdGFuY2U6IFQsIHBhcmFtczogUGFydGlhbDxUPiB8IHVuZGVmaW5lZCk6IHZvaWQge1xyXG4gIE9iamVjdC5hc3NpZ24oaW5zdGFuY2UsIHBhcmFtcyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRDb25maWdGcm9tQ29tcG9uZW50KGNvbXBvbmVudDogVERTTW9kYWxDb21wb25lbnQpOiBNb2RhbE9wdGlvbnMge1xyXG4gIGNvbnN0IHtcclxuICAgIHNpemUsXHJcbiAgICBjZW50ZXJlZCxcclxuICAgIG1hc2ssXHJcbiAgICBhdXRvQ2xvc2UsXHJcbiAgICBjbG9zYWJsZSxcclxuICAgIG9rTG9hZGluZyxcclxuICAgIG9rRGlzYWJsZWQsXHJcbiAgICBjYW5jZWxEaXNhYmxlZCxcclxuICAgIGNhbmNlbExvYWRpbmcsXHJcbiAgICBrZXlib2FyZCxcclxuICAgIG5vQW5pbWF0aW9uLFxyXG4gICAgY29udGVudCxcclxuICAgIGNvbXBvbmVudFBhcmFtcyxcclxuICAgIGZvb3RlcixcclxuICAgIHppbmRleCxcclxuICAgIHdpZHRoLFxyXG4gICAgd3JhcENsYXNzTmFtZSxcclxuICAgIGNsYXNzTmFtZSxcclxuICAgIHN0eWxlLFxyXG4gICAgdGl0bGUsXHJcbiAgICBjbG9zZUljb24sXHJcbiAgICBtYXNrU3R5bGUsXHJcbiAgICBib2R5U3R5bGUsXHJcbiAgICBva1RleHQsXHJcbiAgICBjYW5jZWxUZXh0LFxyXG4gICAgb2tUeXBlLFxyXG4gICAgb2tEYW5nZXIsXHJcbiAgICBpY29uVHlwZSxcclxuICAgIG1vZGFsVHlwZSxcclxuICAgIG9uT2ssXHJcbiAgICBvbkNhbmNlbCxcclxuICAgIG9uQWZ0ZXJPcGVuLFxyXG4gICAgb25BZnRlckNsb3NlLFxyXG4gICAgY2xvc2VPbk5hdmlnYXRpb24sXHJcbiAgICBhdXRvZm9jdXNcclxuICB9ID0gY29tcG9uZW50O1xyXG4gIHJldHVybiB7XHJcbiAgICBzaXplLFxyXG4gICAgY2VudGVyZWQsXHJcbiAgICBtYXNrLFxyXG4gICAgYXV0b0Nsb3NlLFxyXG4gICAgY2xvc2FibGUsXHJcbiAgICBva0xvYWRpbmcsXHJcbiAgICBva0Rpc2FibGVkLFxyXG4gICAgY2FuY2VsRGlzYWJsZWQsXHJcbiAgICBjYW5jZWxMb2FkaW5nLFxyXG4gICAga2V5Ym9hcmQsXHJcbiAgICBub0FuaW1hdGlvbixcclxuICAgIGNvbnRlbnQsXHJcbiAgICBjb21wb25lbnRQYXJhbXMsXHJcbiAgICBmb290ZXIsXHJcbiAgICB6aW5kZXgsXHJcbiAgICB3aWR0aCxcclxuICAgIHdyYXBDbGFzc05hbWUsXHJcbiAgICBjbGFzc05hbWUsXHJcbiAgICBzdHlsZSxcclxuICAgIHRpdGxlLFxyXG4gICAgY2xvc2VJY29uLFxyXG4gICAgbWFza1N0eWxlLFxyXG4gICAgYm9keVN0eWxlLFxyXG4gICAgb2tUZXh0LFxyXG4gICAgY2FuY2VsVGV4dCxcclxuICAgIG9rVHlwZSxcclxuICAgIG9rRGFuZ2VyLFxyXG4gICAgaWNvblR5cGUsXHJcbiAgICBtb2RhbFR5cGUsXHJcbiAgICBvbk9rLFxyXG4gICAgb25DYW5jZWwsXHJcbiAgICBvbkFmdGVyT3BlbixcclxuICAgIG9uQWZ0ZXJDbG9zZSxcclxuICAgIGNsb3NlT25OYXZpZ2F0aW9uLFxyXG4gICAgYXV0b2ZvY3VzXHJcbiAgfTtcclxufVxyXG4iXX0=