import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/clipboard";
import * as i2 from "tds-ui/i18n";
import * as i3 from "tds-ui/tooltip";
import * as i4 from "tds-ui/core/outlet";
import * as i5 from "@angular/common";
function TDSTextCopyComponent_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelement(1, "i", 2);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const icon_r1 = ctx.$implicit;
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngClass", icon_r1);
} }
export class TDSTextCopyComponent {
    constructor(host, cdr, clipboard, i18n) {
        this.host = host;
        this.cdr = cdr;
        this.clipboard = clipboard;
        this.i18n = i18n;
        this.copied = false;
        this.copyId = -1;
        this.nativeElement = this.host.nativeElement;
        this.copyTooltip = null;
        this.copedTooltip = null;
        this.copyIcon = 'tdsi-copy-fill';
        this.copedIcon = 'tdsi-tick-fill';
        this.destroy$ = new Subject();
        this.icons = ['tdsi-copy-fill', 'tdsi-tick-fill'];
        this.textCopy = new EventEmitter();
    }
    ngOnInit() {
        this.i18n.localeChange.pipe(takeUntil(this.destroy$)).subscribe(() => {
            this.locale = this.i18n.getLocaleData('Text');
            this.updateTooltips();
            this.cdr.markForCheck();
        });
    }
    ngOnChanges(changes) {
        const { tooltips, icons } = changes;
        if (tooltips) {
            this.updateTooltips();
        }
        if (icons) {
            this.updateIcons();
        }
    }
    ngOnDestroy() {
        clearTimeout(this.copyId);
        this.destroy$.next();
        this.destroy$.complete();
    }
    onClick() {
        if (this.copied) {
            return;
        }
        this.copied = true;
        this.cdr.detectChanges();
        const text = this.text;
        this.textCopy.emit(text);
        this.clipboard.copy(text);
        this.onCopied();
    }
    onCopied() {
        clearTimeout(this.copyId);
        this.copyId = setTimeout(() => {
            this.copied = false;
            this.cdr.detectChanges();
        }, 3000);
    }
    updateTooltips() {
        if (this.tooltips === null) {
            this.copedTooltip = null;
            this.copyTooltip = null;
        }
        else if (Array.isArray(this.tooltips)) {
            const [copyTooltip, copedTooltip] = this.tooltips;
            this.copyTooltip = copyTooltip || this.locale?.copy;
            this.copedTooltip = copedTooltip || this.locale?.copied;
        }
        else {
            this.copyTooltip = this.locale?.copy;
            this.copedTooltip = this.locale?.copied;
        }
        this.cdr.markForCheck();
    }
    updateIcons() {
        const [copyIcon, copedIcon] = this.icons;
        this.copyIcon = copyIcon;
        this.copedIcon = copedIcon;
        this.cdr.markForCheck();
    }
}
TDSTextCopyComponent.ɵfac = function TDSTextCopyComponent_Factory(t) { return new (t || TDSTextCopyComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.Clipboard), i0.ɵɵdirectiveInject(i2.TDSI18nService)); };
TDSTextCopyComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSTextCopyComponent, selectors: [["tds-text-copy"]], inputs: { text: "text", tooltips: "tooltips", icons: "icons" }, outputs: { textCopy: "textCopy" }, exportAs: ["tdsTextCopy"], features: [i0.ɵɵNgOnChangesFeature], decls: 2, vars: 4, consts: [["type", "button", "tds-tooltip", "", 1, "tds-typography-copy", "cursor-pointer", "bg-transparent", "border-0", "no-underline", "outline-none", "ml-1", 3, "tooltipTitle", "click"], [4, "tdsStringTemplateOutlet"], [1, "text-xl", "text-primary-1", 2, "display", "inline-block", "font-style", "normal", "line-height", "0", "text-align", "center", "text-transform", "none", "vertical-align", "-.125em", "text-rendering", "optimizeLegibility", "-webkit-font-smoothing", "antialiased", 3, "ngClass"]], template: function TDSTextCopyComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "button", 0);
        i0.ɵɵlistener("click", function TDSTextCopyComponent_Template_button_click_0_listener() { return ctx.onClick(); });
        i0.ɵɵtemplate(1, TDSTextCopyComponent_ng_container_1_Template, 2, 1, "ng-container", 1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵclassProp("tds-typography-copy-success", ctx.copied);
        i0.ɵɵproperty("tooltipTitle", ctx.copied ? ctx.copedTooltip : ctx.copyTooltip);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("tdsStringTemplateOutlet", ctx.copied ? ctx.copedIcon : ctx.copyIcon);
    } }, directives: [i3.TDSTooltipDirective, i4.TDSStringTemplateOutletDirective, i5.NgClass], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSTextCopyComponent, [{
        type: Component,
        args: [{
                selector: 'tds-text-copy',
                exportAs: 'tdsTextCopy',
                template: `
    <button
      type="button"
      tds-tooltip
      [tooltipTitle]="copied ? copedTooltip : copyTooltip"
      class="tds-typography-copy cursor-pointer bg-transparent border-0 no-underline outline-none ml-1"
      [class.tds-typography-copy-success]="copied"
      (click)="onClick()"
    >
      <ng-container *tdsStringTemplateOutlet="copied ? copedIcon : copyIcon; let icon">
        <i class="text-xl text-primary-1" [ngClass]="icon" style="display: inline-block;       
        font-style: normal;
        line-height: 0;
        text-align: center;
        text-transform: none;
        vertical-align: -.125em;
        text-rendering: optimizeLegibility;
        -webkit-font-smoothing: antialiased;"></i>
      </ng-container>
    </button>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                preserveWhitespaces: false
            }]
    }], function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1.Clipboard }, { type: i2.TDSI18nService }]; }, { text: [{
            type: Input
        }], tooltips: [{
            type: Input
        }], icons: [{
            type: Input
        }], textCopy: [{
            type: Output
        }] }); })();
//# sourceMappingURL=data:application/json;base64,