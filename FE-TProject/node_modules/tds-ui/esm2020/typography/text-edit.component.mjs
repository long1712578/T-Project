import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewChild, ViewEncapsulation } from '@angular/core';
import { Subject } from 'rxjs';
import { take, takeUntil } from 'rxjs/operators';
import { TDSAutosizeDirective } from 'tds-ui/tds-input';
import * as i0 from "@angular/core";
import * as i1 from "tds-ui/i18n";
import * as i2 from "@angular/common";
import * as i3 from "tds-ui/tooltip";
import * as i4 from "tds-ui/core/outlet";
import * as i5 from "tds-ui/tds-input";
const _c0 = ["textarea"];
function TDSTextEditComponent_button_0_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelement(1, "i", 4);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const icon_r3 = ctx.$implicit;
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngClass", icon_r3);
} }
function TDSTextEditComponent_button_0_Template(rf, ctx) { if (rf & 1) {
    const _r5 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 2);
    i0.ɵɵlistener("click", function TDSTextEditComponent_button_0_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r5); const ctx_r4 = i0.ɵɵnextContext(); return ctx_r4.onClick(); });
    i0.ɵɵtemplate(1, TDSTextEditComponent_button_0_ng_container_1_Template, 2, 1, "ng-container", 3);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵproperty("tooltipTitle", ctx_r0.tooltip === null ? null : ctx_r0.tooltip || (ctx_r0.locale == null ? null : ctx_r0.locale.edit));
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("tdsStringTemplateOutlet", ctx_r0.icon);
} }
function TDSTextEditComponent_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    const _r8 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "textarea", 5, 6);
    i0.ɵɵlistener("input", function TDSTextEditComponent_ng_container_1_Template_textarea_input_1_listener($event) { i0.ɵɵrestoreView(_r8); const ctx_r7 = i0.ɵɵnextContext(); return ctx_r7.onInput($event); })("blur", function TDSTextEditComponent_ng_container_1_Template_textarea_blur_1_listener() { i0.ɵɵrestoreView(_r8); const ctx_r9 = i0.ɵɵnextContext(); return ctx_r9.confirm(); })("keydown.esc", function TDSTextEditComponent_ng_container_1_Template_textarea_keydown_esc_1_listener() { i0.ɵɵrestoreView(_r8); const ctx_r10 = i0.ɵɵnextContext(); return ctx_r10.onCancel(); })("keydown.enter", function TDSTextEditComponent_ng_container_1_Template_textarea_keydown_enter_1_listener($event) { i0.ɵɵrestoreView(_r8); const ctx_r11 = i0.ɵɵnextContext(); return ctx_r11.onEnter($event); });
    i0.ɵɵelementEnd();
    i0.ɵɵelementContainerEnd();
} }
export class TDSTextEditComponent {
    constructor(zone, host, cdr, i18n) {
        this.zone = zone;
        this.host = host;
        this.cdr = cdr;
        this.i18n = i18n;
        this.editing = false;
        this.destroy$ = new Subject();
        this.icon = 'tdsi-edit-fill';
        this.startEditing = new EventEmitter();
        this.endEditing = new EventEmitter(true);
        this.nativeElement = this.host.nativeElement;
    }
    ngOnInit() {
        this.i18n.localeChange.pipe(takeUntil(this.destroy$)).subscribe(() => {
            this.locale = this.i18n.getLocaleData('Text');
            this.cdr.markForCheck();
        });
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    onClick() {
        this.beforeText = this.text;
        this.currentText = this.beforeText;
        this.editing = true;
        this.startEditing.emit();
        this.focusAndSetValue();
    }
    confirm() {
        this.editing = false;
        this.endEditing.emit(this.currentText);
    }
    onInput(event) {
        const target = event.target;
        this.currentText = target.value;
    }
    onEnter(event) {
        event.stopPropagation();
        event.preventDefault();
        this.confirm();
    }
    onCancel() {
        this.currentText = this.beforeText;
        this.confirm();
    }
    focusAndSetValue() {
        this.zone.onStable.pipe(take(1), takeUntil(this.destroy$)).subscribe(() => {
            if (this.textarea?.nativeElement) {
                this.textarea.nativeElement.focus();
                this.textarea.nativeElement.value = this.currentText || '';
                this.autosizeDirective.resizeToFitContent();
                this.cdr.markForCheck();
            }
        });
    }
}
TDSTextEditComponent.ɵfac = function TDSTextEditComponent_Factory(t) { return new (t || TDSTextEditComponent)(i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.TDSI18nService)); };
TDSTextEditComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSTextEditComponent, selectors: [["tds-text-edit"]], viewQuery: function TDSTextEditComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 5);
        i0.ɵɵviewQuery(TDSAutosizeDirective, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.textarea = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.autosizeDirective = _t.first);
    } }, inputs: { text: "text", icon: "icon", tooltip: "tooltip" }, outputs: { startEditing: "startEditing", endEditing: "endEditing" }, exportAs: ["tdsTextEdit"], decls: 2, vars: 2, consts: [["tds-tooltip", "", "class", "tds-typography-edit cursor-pointer bg-transparent border-0 no-underline outline-none ml-1", 3, "tooltipTitle", "click", 4, "ngIf"], [4, "ngIf"], ["tds-tooltip", "", 1, "tds-typography-edit", "cursor-pointer", "bg-transparent", "border-0", "no-underline", "outline-none", "ml-1", 3, "tooltipTitle", "click"], [4, "tdsStringTemplateOutlet"], [1, "text-xl", "text-primary-1", 2, "display", "inline-block", "font-style", "normal", "line-height", "0", "text-align", "center", "text-transform", "none", "vertical-align", "-.125em", "text-rendering", "optimizeLegibility", "-webkit-font-smoothing", "antialiased", 3, "ngClass"], ["tdsAutosize", "", 1, "w-full", "p-1", "rounded", "border", "border-primary-1", "focus:ring-primary-1", "focus:outline-none", "focus:border-transparent", "shadow-none", "bg-transparent", "text-current", "outline-none", "box-border", 3, "input", "blur", "keydown.esc", "keydown.enter"], ["textarea", ""]], template: function TDSTextEditComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtemplate(0, TDSTextEditComponent_button_0_Template, 2, 2, "button", 0);
        i0.ɵɵtemplate(1, TDSTextEditComponent_ng_container_1_Template, 3, 0, "ng-container", 1);
    } if (rf & 2) {
        i0.ɵɵproperty("ngIf", !ctx.editing);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx.editing);
    } }, directives: [i2.NgIf, i3.TDSTooltipDirective, i4.TDSStringTemplateOutletDirective, i2.NgClass, i5.TDSAutosizeDirective], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSTextEditComponent, [{
        type: Component,
        args: [{
                selector: 'tds-text-edit',
                exportAs: 'tdsTextEdit',
                template: `
    <button
      *ngIf="!editing"
      tds-tooltip
      class="tds-typography-edit cursor-pointer bg-transparent border-0 no-underline outline-none ml-1"
      [tooltipTitle]="tooltip === null ? null : tooltip || locale?.edit"
      (click)="onClick()"
    >
      <ng-container *tdsStringTemplateOutlet="icon; let icon">
        <i class="text-xl text-primary-1" [ngClass]="icon" style="display: inline-block;      
        font-style: normal;
        line-height: 0;
        text-align: center;
        text-transform: none;
        vertical-align: -.125em;
        text-rendering: optimizeLegibility;
        -webkit-font-smoothing: antialiased;"></i>
      </ng-container>
    </button>
    <ng-container *ngIf="editing">
      <textarea
        #textarea        
        class="w-full p-1 rounded border border-primary-1 focus:ring-primary-1 focus:outline-none focus:border-transparent shadow-none  bg-transparent text-current  outline-none  box-border"
        tdsAutosize
        (input)="onInput($event)"
        (blur)="confirm()"
        (keydown.esc)="onCancel()"
        (keydown.enter)="onEnter($event)"
      ></textarea>
      <!-- <button class="tds-typography-edit-content-confirm" (click)="confirm()">
      lưu
    </button> -->
      
    </ng-container>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                preserveWhitespaces: false
            }]
    }], function () { return [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1.TDSI18nService }]; }, { text: [{
            type: Input
        }], icon: [{
            type: Input
        }], tooltip: [{
            type: Input
        }], startEditing: [{
            type: Output
        }], endEditing: [{
            type: Output
        }], textarea: [{
            type: ViewChild,
            args: ['textarea', { static: false }]
        }], autosizeDirective: [{
            type: ViewChild,
            args: [TDSAutosizeDirective, { static: false }]
        }] }); })();
//# sourceMappingURL=data:application/json;base64,