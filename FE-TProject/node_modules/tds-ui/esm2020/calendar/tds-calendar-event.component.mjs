import { ChangeDetectionStrategy, Component, Input, ViewEncapsulation } from '@angular/core';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
const _c0 = ["*"];
export class TDSCalendarEventComponent {
    constructor() {
        this.tdsStartDate = new Date();
        this.tdsEndDate = new Date();
        this.changes = new Subject();
    }
    ngOnInit() {
    }
    ngOnChanges() {
        this.changes.next();
    }
}
TDSCalendarEventComponent.ɵfac = function TDSCalendarEventComponent_Factory(t) { return new (t || TDSCalendarEventComponent)(); };
TDSCalendarEventComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSCalendarEventComponent, selectors: [["tds-calendar-event"]], inputs: { tdsStartDate: "tdsStartDate", tdsEndDate: "tdsEndDate", tdsData: "tdsData", tdsTemplate: "tdsTemplate" }, features: [i0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function TDSCalendarEventComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSCalendarEventComponent, [{
        type: Component,
        args: [{
                selector: 'tds-calendar-event',
                template: `
    <ng-content></ng-content>
  `,
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
            }]
    }], function () { return []; }, { tdsStartDate: [{
            type: Input
        }], tdsEndDate: [{
            type: Input
        }], tdsData: [{
            type: Input
        }], tdsTemplate: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGRzLWNhbGVuZGFyLWV2ZW50LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL3Rkcy11aS9jYWxlbmRhci90ZHMtY2FsZW5kYXItZXZlbnQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFrQyxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3SCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDOzs7QUFXL0IsTUFBTSxPQUFPLHlCQUF5QjtJQU1wQztRQUxTLGlCQUFZLEdBQVMsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUNoQyxlQUFVLEdBQVMsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUd2QyxZQUFPLEdBQUcsSUFBSSxPQUFPLEVBQVEsQ0FBQztJQUNkLENBQUM7SUFDakIsUUFBUTtJQUNSLENBQUM7SUFDRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUN0QixDQUFDOztrR0FYVSx5QkFBeUI7NEVBQXpCLHlCQUF5Qjs7UUFMbEMsa0JBQXlCOzt1RkFLaEIseUJBQXlCO2NBUnJDLFNBQVM7ZUFBQztnQkFDVCxRQUFRLEVBQUUsb0JBQW9CO2dCQUM5QixRQUFRLEVBQUU7O0dBRVQ7Z0JBQ0QsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7Z0JBQ3JDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2FBQ2hEO3NDQUVVLFlBQVk7a0JBQXBCLEtBQUs7WUFDRyxVQUFVO2tCQUFsQixLQUFLO1lBQ0csT0FBTztrQkFBZixLQUFLO1lBQ0csV0FBVztrQkFBbkIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIElucHV0LCBPbkNoYW5nZXMsIE9uSW5pdCwgVGVtcGxhdGVSZWYsIFZpZXdFbmNhcHN1bGF0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBURFNTYWZlQW55IH0gZnJvbSAndGRzLXVpL3NoYXJlZC91dGlsaXR5JztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAndGRzLWNhbGVuZGFyLWV2ZW50JyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG4gIGAsXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxufSlcbmV4cG9ydCBjbGFzcyBURFNDYWxlbmRhckV2ZW50Q29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcbiAgQElucHV0KCkgdGRzU3RhcnREYXRlOiBEYXRlID0gbmV3IERhdGUoKTtcbiAgQElucHV0KCkgdGRzRW5kRGF0ZTogRGF0ZSA9IG5ldyBEYXRlKCk7XG4gIEBJbnB1dCgpIHRkc0RhdGE6VERTU2FmZUFueTtcbiAgQElucHV0KCkgdGRzVGVtcGxhdGUhOnN0cmluZyB8IFRlbXBsYXRlUmVmPHZvaWQ+O1xuICBjaGFuZ2VzID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcbiAgY29uc3RydWN0b3IoKSB7IH1cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gIH0gXG4gIG5nT25DaGFuZ2VzKCk6IHZvaWQge1xuICAgIHRoaXMuY2hhbmdlcy5uZXh0KCk7XG4gIH1cbn1cbiJdfQ==