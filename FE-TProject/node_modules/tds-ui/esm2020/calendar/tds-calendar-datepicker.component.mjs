import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { eachDayOfInterval, endOfMonth, endOfWeek, startOfMonth, startOfWeek } from 'date-fns';
import { CandyDate } from 'tds-ui/core/time';
import * as i0 from "@angular/core";
import * as i1 from "tds-ui/i18n";
import * as i2 from "tds-ui/dropdown";
import * as i3 from "tds-ui/date-picker";
import * as i4 from "@angular/forms";
export class TDSCalendarDatepickerComponent {
    constructor(cdr, i18n, dateHelper) {
        this.cdr = cdr;
        this.i18n = i18n;
        this.dateHelper = dateHelper;
        this.tdsMode = "date";
        this.tdsViewDate = new Date();
        this.tdsViewDateChange = new EventEmitter();
        this.tdsValueChange = new EventEmitter();
        this.activeDate = new CandyDate();
        this.formatDate = 'MMMM yyyy';
        this.viewDate = '';
        this.dropdownVisible = false;
    }
    ngOnChanges(changes) {
        if (changes.tdsViewDate || changes.tdsMode) {
            this.activeDate = new CandyDate(this.tdsViewDate);
            this.updateFormatDate();
        }
    }
    ngOnInit() {
        // this.weekStartsOn = this.i18n.getDateLocale().
        this.updateFormatDate();
    }
    onChangeDatePicker(result) {
        if (!this.activeDate.isSame(result)) {
            this.activeDate = new CandyDate(result);
        }
        this.dropdownVisible = false;
        this.updateFormatDate();
        this.valueChange();
    }
    onNextPrevious(e, step) {
        e.stopPropagation();
        e.preventDefault();
        switch (this.tdsMode) {
            case 'date':
                this.activeDate = new CandyDate(this.activeDate.addDays(step).nativeDate);
                break;
            case 'week':
                this.activeDate = new CandyDate(this.activeDate.addMonths(step).nativeDate);
                break;
            case 'month':
                this.activeDate = new CandyDate(this.activeDate.addMonths(step).nativeDate);
                break;
            case 'year':
                this.activeDate = new CandyDate(this.activeDate.addYears(step).nativeDate);
                break;
            default:
                this.activeDate = new CandyDate(this.activeDate.addMonths(step).nativeDate);
                break;
        }
        this.valueChange();
        this.updateFormatDate();
    }
    updateFormatDate() {
        switch (this.tdsMode) {
            case 'date':
                this.formatDate = 'EEEE - dd/MM/yyyy';
                break;
            case 'week':
                this.formatDate = 'MMMM yyyy';
                break;
            case 'month':
                this.formatDate = 'MMMM - yyyy';
                break;
            case 'year':
                this.formatDate = 'yyyy';
                break;
            default:
                this.formatDate = 'yyyy';
                break;
        }
        this.viewDate = this.dateHelper.format(this.activeDate.nativeDate, this.formatDate);
        this.cdr.markForCheck();
    }
    valueChange() {
        let viewDate = this.activeDate.clone().nativeDate;
        this.tdsViewDateChange.emit(viewDate);
        let rangeDate = [];
        switch (this.tdsMode) {
            case 'week':
                rangeDate = this.getDayOfWeek(viewDate);
                break;
            case 'month':
                rangeDate = this.getDayOfMonth(viewDate);
                break;
            default:
                rangeDate = [viewDate];
                break;
        }
        this.tdsValueChange.emit(rangeDate);
    }
    onDropdownOutsideClick() {
        if (this.dropdownVisible) {
            this.dropdownVisible = false;
        }
    }
    getDayOfWeek(viewDate) {
        let startWeek = startOfWeek(viewDate, { weekStartsOn: this.tdsWeekStartsOn || this.dateHelper.getFirstDayOfWeek() });
        let endWeek = endOfWeek(viewDate, { weekStartsOn: this.tdsWeekStartsOn || this.dateHelper.getFirstDayOfWeek() });
        return eachDayOfInterval({
            start: startWeek,
            end: endWeek
        });
    }
    getDayOfMonth(viewDate) {
        let startMonth = startOfMonth(viewDate);
        let endMonth = endOfMonth(viewDate);
        return eachDayOfInterval({
            start: startMonth,
            end: endMonth
        });
    }
}
TDSCalendarDatepickerComponent.ɵfac = function TDSCalendarDatepickerComponent_Factory(t) { return new (t || TDSCalendarDatepickerComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.TDSI18nService), i0.ɵɵdirectiveInject(i1.DateHelperService)); };
TDSCalendarDatepickerComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSCalendarDatepickerComponent, selectors: [["tds-calendar-datepicker"]], inputs: { tdsMode: "tdsMode", tdsViewDate: "tdsViewDate", locale: "locale", tdsWeekStartsOn: "tdsWeekStartsOn" }, outputs: { tdsViewDateChange: "tdsViewDateChange", tdsValueChange: "tdsValueChange" }, exportAs: ["tdsCalendarDatepicker"], features: [i0.ɵɵNgOnChangesFeature], decls: 11, vars: 9, consts: [[1, "inline-flex", "justify-center", "items-center", "gap-x-4"], [1, "text-neutral-1-500", "hover:bg-neutral-3-50", "active:bg-neutral-3-100", "border", "border-transparent", "p-1.5", "rounded-full", "inline-flex", "justify-center", "items-center", 3, "click"], [1, "tdsi-arrow-left-line", "text-2xl", "leading-6"], ["tds-dropdown", "", 1, "inline-flex", "justify-center", "items-center", "text-heading-4", "font-semibold", "text-neutral-1-900", "py-2", 3, "autoClose", "placement", "visible", "trigger", "tdsDropdownMenu", "visibleChange", "tdsDropdownOutsideClick"], [1, "tdsi-arrow-right-line", "text-2xl", "leading-6"], ["drpDatepicker", "tdsDropdownMenu"], [1, "w-full"], [3, "inline", "ngModel", "mode", "ngModelChange"]], template: function TDSCalendarDatepickerComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 0)(1, "button", 1);
        i0.ɵɵlistener("click", function TDSCalendarDatepickerComponent_Template_button_click_1_listener($event) { return ctx.onNextPrevious($event, -1); });
        i0.ɵɵelement(2, "span", 2);
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(3, "button", 3);
        i0.ɵɵlistener("visibleChange", function TDSCalendarDatepickerComponent_Template_button_visibleChange_3_listener($event) { return ctx.dropdownVisible = $event; })("tdsDropdownOutsideClick", function TDSCalendarDatepickerComponent_Template_button_tdsDropdownOutsideClick_3_listener() { return ctx.onDropdownOutsideClick(); });
        i0.ɵɵtext(4);
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(5, "button", 1);
        i0.ɵɵlistener("click", function TDSCalendarDatepickerComponent_Template_button_click_5_listener($event) { return ctx.onNextPrevious($event, 1); });
        i0.ɵɵelement(6, "span", 4);
        i0.ɵɵelementEnd()();
        i0.ɵɵelementStart(7, "tds-dropdown-menu", null, 5)(9, "div", 6)(10, "tds-date-picker", 7);
        i0.ɵɵlistener("ngModelChange", function TDSCalendarDatepickerComponent_Template_tds_date_picker_ngModelChange_10_listener($event) { return ctx.onChangeDatePicker($event); });
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        const _r0 = i0.ɵɵreference(8);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("autoClose", false)("placement", "bottomCenter")("visible", ctx.dropdownVisible)("trigger", "click")("tdsDropdownMenu", _r0);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx.viewDate, " ");
        i0.ɵɵadvance(6);
        i0.ɵɵproperty("inline", true)("ngModel", ctx.activeDate.nativeDate)("mode", ctx.tdsMode);
    } }, directives: [i2.TDSDropDownDirective, i2.TDSDropdownMenuComponent, i3.TDSDatePickerComponent, i4.NgControlStatus, i4.NgModel], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSCalendarDatepickerComponent, [{
        type: Component,
        args: [{ selector: 'tds-calendar-datepicker', exportAs: 'tdsCalendarDatepicker', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"inline-flex justify-center items-center gap-x-4 \">\r\n    <button (click)=\"onNextPrevious($event,-1)\" class=\"text-neutral-1-500 hover:bg-neutral-3-50 active:bg-neutral-3-100 border border-transparent p-1.5 rounded-full inline-flex justify-center items-center\">\r\n        <span class=\"tdsi-arrow-left-line text-2xl leading-6\"></span>\r\n    </button>\r\n    <button class=\"inline-flex justify-center items-center text-heading-4 font-semibold text-neutral-1-900 py-2\" [autoClose]=\"false\" [placement]=\"'bottomCenter'\" [(visible)]=\"dropdownVisible\" [trigger]=\"'click'\"  tds-dropdown [tdsDropdownMenu]=\"drpDatepicker\" (tdsDropdownOutsideClick)=\"onDropdownOutsideClick()\">\r\n        {{viewDate}}\r\n    </button>\r\n    <button (click)=\"onNextPrevious($event,1)\"  class=\"text-neutral-1-500 hover:bg-neutral-3-50 active:bg-neutral-3-100 border border-transparent p-1.5 rounded-full inline-flex justify-center items-center\">\r\n        <span class=\"tdsi-arrow-right-line text-2xl leading-6\"></span>\r\n    </button>\r\n</div>\r\n<tds-dropdown-menu #drpDatepicker=\"tdsDropdownMenu\">\r\n    <div class=\"w-full\" >\r\n        <tds-date-picker [inline]=\"true\" [ngModel]=\"activeDate.nativeDate\" (ngModelChange)=\"onChangeDatePicker($event)\" [mode]=\"tdsMode\">\r\n        </tds-date-picker>\r\n    </div>\r\n</tds-dropdown-menu>" }]
    }], function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.TDSI18nService }, { type: i1.DateHelperService }]; }, { tdsMode: [{
            type: Input
        }], tdsViewDate: [{
            type: Input
        }], locale: [{
            type: Input
        }], tdsWeekStartsOn: [{
            type: Input
        }], tdsViewDateChange: [{
            type: Output
        }], tdsValueChange: [{
            type: Output
        }] }); })();
//# sourceMappingURL=data:application/json;base64,