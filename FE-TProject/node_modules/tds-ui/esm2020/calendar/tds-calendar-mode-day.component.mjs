import { ChangeDetectionStrategy, Component, ContentChildren, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { CandyDate } from 'tds-ui/core/time';
import { getDayViewHourGrid, trackByHourSegment, getDayView } from './calendar.utils';
import { TDSCalendarEventComponent } from './tds-calendar-event.component';
import { startWith, switchMap, takeUntil } from 'rxjs/operators';
import { BehaviorSubject, merge } from 'rxjs';
import { TDSDestroyService } from 'tds-ui/core/services';
import * as i0 from "@angular/core";
import * as i1 from "tds-ui/core/services";
import * as i2 from "@angular/common";
import * as i3 from "./tds-calendar-current-time.component";
import * as i4 from "tds-ui/core/outlet";
function TDSCalendarModeDayComponent_ng_template_6_ng_template_0_tr_0_Template(rf, ctx) { if (rf & 1) {
    const _r11 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "tr", 9)(1, "td", 10);
    i0.ɵɵtext(2);
    i0.ɵɵpipe(3, "date");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(4, "td", 11);
    i0.ɵɵlistener("click", function TDSCalendarModeDayComponent_ng_template_6_ng_template_0_tr_0_Template_td_click_4_listener($event) { i0.ɵɵrestoreView(_r11); const segment_r6 = i0.ɵɵnextContext().$implicit; const ctx_r9 = i0.ɵɵnextContext(2); return ctx_r9.onClickSegment($event, segment_r6); });
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const segment_r6 = i0.ɵɵnextContext().$implicit;
    const week_r2 = i0.ɵɵnextContext().$implicit;
    const ctx_r7 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵattribute("rowspan", week_r2.segments.length);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind2(3, 4, segment_r6.displayDate, "HH:mm"), " ");
    i0.ɵɵadvance(2);
    i0.ɵɵstyleProp("height", ctx_r7.hourSegmentHeight, "px");
} }
function TDSCalendarModeDayComponent_ng_template_6_ng_template_0_tr_1_Template(rf, ctx) { if (rf & 1) {
    const _r16 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "tr", 12)(1, "td", 11);
    i0.ɵɵlistener("click", function TDSCalendarModeDayComponent_ng_template_6_ng_template_0_tr_1_Template_td_click_1_listener($event) { i0.ɵɵrestoreView(_r16); const segment_r6 = i0.ɵɵnextContext().$implicit; const ctx_r14 = i0.ɵɵnextContext(2); return ctx_r14.onClickSegment($event, segment_r6); });
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r8 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(1);
    i0.ɵɵstyleProp("height", ctx_r8.hourSegmentHeight, "px");
} }
function TDSCalendarModeDayComponent_ng_template_6_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, TDSCalendarModeDayComponent_ng_template_6_ng_template_0_tr_0_Template, 5, 7, "tr", 7);
    i0.ɵɵtemplate(1, TDSCalendarModeDayComponent_ng_template_6_ng_template_0_tr_1_Template, 2, 2, "tr", 8);
} if (rf & 2) {
    const segment_r6 = ctx.$implicit;
    i0.ɵɵproperty("ngIf", segment_r6.isStart);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", !segment_r6.isStart);
} }
function TDSCalendarModeDayComponent_ng_template_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, TDSCalendarModeDayComponent_ng_template_6_ng_template_0_Template, 2, 2, "ng-template", 6);
} if (rf & 2) {
    const week_r2 = ctx.$implicit;
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵproperty("ngForOf", week_r2.segments)("ngForTrackBy", ctx_r0.trackByHourSegment);
} }
function TDSCalendarModeDayComponent_div_8_ng_template_3_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const dataEvent_r18 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("", dataEvent_r18.event.template, " ");
} }
function TDSCalendarModeDayComponent_div_8_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 16);
    i0.ɵɵtemplate(1, TDSCalendarModeDayComponent_div_8_ng_template_3_ng_container_1_Template, 2, 1, "ng-container", 17);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const dataEvent_r18 = ctx.$implicit;
    i0.ɵɵstyleProp("height", dataEvent_r18.height, "px")("margin-top", dataEvent_r18.top, "px")("margin-left", dataEvent_r18.left, "px")("width", dataEvent_r18.width, "px");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("tdsStringTemplateOutlet", dataEvent_r18.event.template);
} }
function TDSCalendarModeDayComponent_div_8_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 13)(1, "div", 14);
    i0.ɵɵelement(2, "div", 15);
    i0.ɵɵtemplate(3, TDSCalendarModeDayComponent_div_8_ng_template_3_Template, 2, 9, "ng-template", 3);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵstyleProp("left", ctx_r1.widthColTime, "px");
    i0.ɵɵadvance(2);
    i0.ɵɵstyleProp("width", ctx_r1.maxWidth, "px");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngForOf", ctx_r1.dayView.events);
} }
const _c0 = ["*"];
export class TDSCalendarModeDayComponent {
    constructor(destroy$, cdr, elementRef) {
        this.destroy$ = destroy$;
        this.cdr = cdr;
        this.elementRef = elementRef;
        this.viewDate = new Date();
        this.start = new CandyDate();
        /**
         * Giờ kết thúc ngày trong thời gian 24 giờ. Phải là 0-23
         */
        this.dayEndHour = 17;
        /**
        * Phút cuối ngày. Phải là 0-59
        */
        this.dayEndMinute = 30;
        /**
        * Giờ bắt đầu ngày trong thời gian 24 giờ. Phải là 0-23
        */
        this.dayStartHour = 8;
        /**
        * Phút bắt đầu ngày. Phải là 0-59
        */
        this.dayStartMinute = 0;
        /**
         * The number of segments in an hour. Must divide equally into 60.
         */
        this.hourSegments = 4;
        /**
         * The height in pixels of each hour segment
         */
        this.hourSegmentHeight = 30;
        /**
         * The minimum height in pixels of each event
         */
        this.minimumEventHeight = 100;
        /**
        * The width in pixels of each hour segment
        */
        this.hourSegmentWidth = 200;
        /**
         * The duration of each segment group in minutes
         */
        this.hourDuration = 60;
        this.widthColTime = 80;
        /**
         * @hidden
         */
        this.trackByHourSegment = trackByHourSegment;
        this.weekViewHour = [];
        this.activeDate = new CandyDate();
        this.maxWidth = 0;
        this.widthTable = null;
        this.listOfTemplateEventItem$ = new BehaviorSubject([]);
        this.tdsClickSegment = new EventEmitter();
        this.listOfEvent = [];
        this.paddingLeftContent = 16;
    }
    ngOnInit() {
        this.listOfTemplateEventItem$.pipe(takeUntil(this.destroy$))
            .subscribe((value) => {
            let dayStart = {
                hour: this.dayStartHour,
                minute: this.dayStartMinute,
            };
            let dayEnd = {
                hour: this.dayEndHour,
                minute: this.dayEndMinute,
            };
            this.listOfEvent = [...value];
            this.dayView = getDayView({
                events: [...value], viewDate: this.viewDate, hourSegments: this.hourSegments, dayStart: dayStart,
                dayEnd: dayEnd, eventWidth: this.hourSegmentWidth, hourDuration: this.hourDuration, minimumEventHeight: this.minimumEventHeight, segmentHeight: this.hourSegmentHeight
            });
            let width = this.paddingLeftContent;
            let widthComp = this.elementRef.nativeElement.getBoundingClientRect().width;
            this.dayView.events.forEach(e => {
                const widtCol = e.left + e.width;
                if (width < widtCol) {
                    width = widtCol;
                }
            });
            this.widthTable = width > widthComp ? width + this.widthColTime + this.paddingLeftContent : null;
            this.maxWidth = width == 0 ? 0 : width;
            this.cdr.markForCheck();
        });
    }
    ngOnChanges(changes) {
        if (changes.viewDate) {
            this.buildTime();
            this.cdr.markForCheck();
        }
    }
    ngAfterContentInit() {
        this.listEventComp.changes.pipe(startWith(true), switchMap(() => merge(...[
            this.listEventComp.changes,
            ...this.listEventComp.map(option => option.changes),
        ]).pipe(startWith(true))), takeUntil(this.destroy$)).subscribe(() => {
            const listOfEventInterface = this.listEventComp.toArray().map(item => {
                const { tdsEndDate, tdsStartDate, tdsData, tdsTemplate } = item;
                return {
                    start: tdsStartDate,
                    end: tdsEndDate,
                    data: tdsData,
                    template: tdsTemplate,
                    allDay: false
                };
            });
            this.listOfTemplateEventItem$.next(listOfEventInterface);
        });
    }
    onClickSegment(e, date) {
        e.stopPropagation();
        e.preventDefault();
        this.tdsClickSegment.emit(date);
    }
    buildTime() {
        this.activeDate = new CandyDate(this.viewDate);
        let dayStart = {
            hour: this.dayStartHour,
            minute: this.dayStartMinute,
        };
        let dayEnd = {
            hour: this.dayEndHour,
            minute: this.dayEndMinute,
        };
        this.weekViewHour = getDayViewHourGrid({
            dayStart: dayStart,
            dayEnd: dayEnd,
            hourDuration: this.hourDuration,
            viewDate: this.viewDate,
            hourSegments: this.hourSegments
        });
        this.listOfTemplateEventItem$.next(this.listOfEvent);
    }
}
TDSCalendarModeDayComponent.ɵfac = function TDSCalendarModeDayComponent_Factory(t) { return new (t || TDSCalendarModeDayComponent)(i0.ɵɵdirectiveInject(i1.TDSDestroyService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef)); };
TDSCalendarModeDayComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSCalendarModeDayComponent, selectors: [["tds-calendar-mode-day"]], contentQueries: function TDSCalendarModeDayComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        i0.ɵɵcontentQuery(dirIndex, TDSCalendarEventComponent, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.listEventComp = _t);
    } }, hostAttrs: [1, "w-full", "block", "border", "border-neutral-2-200"], inputs: { viewDate: "viewDate", locale: "locale", start: "start", dayEndHour: "dayEndHour", dayEndMinute: "dayEndMinute", dayStartHour: "dayStartHour", dayStartMinute: "dayStartMinute", hourSegments: "hourSegments", hourSegmentHeight: "hourSegmentHeight", minimumEventHeight: "minimumEventHeight", hourSegmentWidth: "hourSegmentWidth", hourDuration: "hourDuration", widthColTime: "widthColTime", currentTimeMarkerTemplate: "currentTimeMarkerTemplate" }, outputs: { tdsClickSegment: "tdsClickSegment" }, features: [i0.ɵɵProvidersFeature([TDSDestroyService]), i0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0, decls: 10, vars: 15, consts: [[1, "w-full", "h-full", "relative", "overflow-auto", "tds-custom-scroll"], [1, "table-fixed", "min-w-full"], [3, "width"], ["ngFor", "", 3, "ngForOf"], [3, "columnDate", "dayStartHour", "dayStartMinute", "dayEndHour", "dayEndMinute", "hourSegments", "hourDuration", "hourSegmentHeight", "customTemplate", "widthColTime"], ["class", "tds-calendar-event-container pointer-events-none absolute inset-0 pl-4", 3, "left", 4, "ngIf"], ["ngFor", "", 3, "ngForOf", "ngForTrackBy"], ["class", "tds-calendar-segment-start", 4, "ngIf"], ["class", "tds-calendar-segment", 4, "ngIf"], [1, "tds-calendar-segment-start"], [1, "tds-calendar-col-lock", "align-top", "text-center", "sticky", "left-0", "z-10", "bg-white"], [1, "cursor-pointer", 3, "click"], [1, "tds-calendar-segment"], [1, "tds-calendar-event-container", "pointer-events-none", "absolute", "inset-0", "pl-4"], [1, "w-full", "h-full", "relative", "pointer-events-none"], [1, "h-px", "pointer-events-none"], [1, "absolute", "pointer-events-auto"], [4, "tdsStringTemplateOutlet"]], template: function TDSCalendarModeDayComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵelementStart(0, "div", 0)(1, "table", 1)(2, "colgroup");
        i0.ɵɵelement(3, "col", 2)(4, "col");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(5, "tbody");
        i0.ɵɵtemplate(6, TDSCalendarModeDayComponent_ng_template_6_Template, 1, 2, "ng-template", 3);
        i0.ɵɵelementEnd()();
        i0.ɵɵelement(7, "tds-calendar-current-time", 4);
        i0.ɵɵtemplate(8, TDSCalendarModeDayComponent_div_8_Template, 4, 5, "div", 5);
        i0.ɵɵelementEnd();
        i0.ɵɵprojection(9);
    } if (rf & 2) {
        i0.ɵɵadvance(1);
        i0.ɵɵstyleProp("width", ctx.widthTable, "px");
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("width", ctx.widthColTime);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngForOf", ctx.weekViewHour);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("columnDate", ctx.viewDate)("dayStartHour", ctx.dayStartHour)("dayStartMinute", ctx.dayStartMinute)("dayEndHour", ctx.dayEndHour)("dayEndMinute", ctx.dayEndMinute)("hourSegments", ctx.hourSegments)("hourDuration", ctx.hourDuration)("hourSegmentHeight", ctx.hourSegmentHeight)("customTemplate", ctx.currentTimeMarkerTemplate)("widthColTime", ctx.widthColTime);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx.dayView);
    } }, directives: [i2.NgForOf, i2.NgIf, i3.TDSCalendarCurrentTimeComponent, i4.TDSStringTemplateOutletDirective], pipes: [i2.DatePipe], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSCalendarModeDayComponent, [{
        type: Component,
        args: [{ selector: 'tds-calendar-mode-day', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, providers: [TDSDestroyService], host: {
                    class: "w-full block border  border-neutral-2-200"
                }, template: "<div class=\"w-full h-full  relative overflow-auto tds-custom-scroll\">\n    <table class=\"table-fixed min-w-full\" [style.width.px]=\"widthTable\">\n        <colgroup>\n            <col [width]=\"widthColTime\">\n            <col>\n        </colgroup>\n        <tbody>\n            <ng-template ngFor [ngForOf]=\"weekViewHour\" let-week let-idx=\"index\" let-total=\"count\">               \n                <ng-template ngFor [ngForOf]=\"week.segments\" let-segment [ngForTrackBy]=\"trackByHourSegment\">\n                    <tr  *ngIf=\"segment.isStart\" class=\"tds-calendar-segment-start\">\n                        <td [attr.rowspan]=\"week.segments.length\" class=\"tds-calendar-col-lock align-top text-center sticky left-0 z-10 bg-white \">\n                            {{segment.displayDate | date:\"HH:mm\"}}\n                        </td>\n                        <td class=\"cursor-pointer\" [style.height.px]=\"hourSegmentHeight\" (click)=\"onClickSegment($event,segment)\">\n                            \n                        </td>\n                    </tr>\n                    <tr *ngIf=\"!segment.isStart\" class=\"tds-calendar-segment\">\n                        <td class=\"cursor-pointer\" [style.height.px]=\"hourSegmentHeight\" (click)=\"onClickSegment($event,segment)\">                           \n                        </td>\n                    </tr>                    \n                </ng-template>\n            </ng-template>\n        </tbody>\n    </table>\n    <tds-calendar-current-time\n    [columnDate]=\"viewDate\"\n    [dayStartHour]=\"dayStartHour\"\n    [dayStartMinute]=\"dayStartMinute\"\n    [dayEndHour]=\"dayEndHour\"\n    [dayEndMinute]=\"dayEndMinute\"\n    [hourSegments]=\"hourSegments\"\n    [hourDuration]=\"hourDuration\"\n    [hourSegmentHeight]=\"hourSegmentHeight\"\n    [customTemplate]=\"currentTimeMarkerTemplate\"\n    [widthColTime]=\"widthColTime\"\n  ></tds-calendar-current-time>\n    <!-- <ng-template ngFor [ngForOf]=\"weekViewHour\" let-week let-idx=\"index\" let-total=\"count\">\n        <ng-template ngFor [ngForOf]=\"week.segments\" let-segment [ngForTrackBy]=\"trackByHourSegment\">\n            <div class=\"w-full flex\" [ngClass]=\"{'border-t border-neutral-2-200':segment.isStart}\"\n                [style.height.px]=\"hourSegmentHeight\">\n                <div class=\"w-20 text-center\">\n                    <span *ngIf=\"segment.isStart\">\n                        {{segment.displayDate | date:\"HH:mm\"}}\n                    </span>\n                </div>\n                <div class=\"flex-auto\">\n\n                </div>\n            </div>\n        </ng-template>\n    </ng-template> -->\n    <div class=\"tds-calendar-event-container pointer-events-none absolute inset-0 pl-4\" [style.left.px]=\"widthColTime\" *ngIf=\"dayView\">\n        <div class=\"w-full h-full relative pointer-events-none\">\n            <div class=\"h-px pointer-events-none\" [style.width.px]=\"maxWidth\"></div>\n            <ng-template ngFor [ngForOf]=\"dayView.events\" let-dataEvent>\n                <div class=\"absolute pointer-events-auto\" [style.height.px]=\"dataEvent.height\" [style.marginTop.px]=\"dataEvent.top\"\n                    [style.marginLeft.px]=\"dataEvent.left\" [style.width.px]=\"dataEvent.width\">\n                    <ng-container *tdsStringTemplateOutlet=\"dataEvent.event.template\">{{ dataEvent.event.template }}\n                    </ng-container>\n                </div>\n            </ng-template>   \n        </div>\n    </div>     \n  \n</div>\n<ng-content></ng-content>" }]
    }], function () { return [{ type: i1.TDSDestroyService }, { type: i0.ChangeDetectorRef }, { type: i0.ElementRef }]; }, { viewDate: [{
            type: Input
        }], locale: [{
            type: Input
        }], start: [{
            type: Input
        }], dayEndHour: [{
            type: Input
        }], dayEndMinute: [{
            type: Input
        }], dayStartHour: [{
            type: Input
        }], dayStartMinute: [{
            type: Input
        }], hourSegments: [{
            type: Input
        }], hourSegmentHeight: [{
            type: Input
        }], minimumEventHeight: [{
            type: Input
        }], hourSegmentWidth: [{
            type: Input
        }], hourDuration: [{
            type: Input
        }], widthColTime: [{
            type: Input
        }], currentTimeMarkerTemplate: [{
            type: Input
        }], listEventComp: [{
            type: ContentChildren,
            args: [TDSCalendarEventComponent, { descendants: true }]
        }], tdsClickSegment: [{
            type: Output
        }] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGRzLWNhbGVuZGFyLW1vZGUtZGF5LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL3Rkcy11aS9jYWxlbmRhci90ZHMtY2FsZW5kYXItbW9kZS1kYXkuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vcHJvamVjdHMvdGRzLXVpL2NhbGVuZGFyL3Rkcy1jYWxlbmRhci1tb2RlLWRheS5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQW9CLHVCQUF1QixFQUFxQixTQUFTLEVBQUUsZUFBZSxFQUFjLFlBQVksRUFBRSxLQUFLLEVBQXFCLE1BQU0sRUFBeUMsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDL08sT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRTdDLE9BQU8sRUFBRSxrQkFBa0IsRUFBZ0Isa0JBQWtCLEVBQThCLFVBQVUsRUFBZ0MsTUFBTSxrQkFBa0IsQ0FBQztBQUM5SixPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUMzRSxPQUFPLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNqRSxPQUFPLEVBQUUsZUFBZSxFQUFFLEtBQUssRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUU5QyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQzs7Ozs7Ozs7SUNDckMsNkJBQWdFLGFBQUE7SUFFeEQsWUFDSjs7SUFBQSxpQkFBSztJQUNMLDhCQUEwRztJQUF6Qyx3UEFBUyx5Q0FBOEIsSUFBQztJQUV6RyxpQkFBSyxFQUFBOzs7OztJQUxELGVBQXFDO0lBQXJDLGtEQUFxQztJQUNyQyxlQUNKO0lBREksc0ZBQ0o7SUFDMkIsZUFBcUM7SUFBckMsd0RBQXFDOzs7O0lBSXBFLDhCQUEwRCxhQUFBO0lBQ1cseVBBQVMsMENBQThCLElB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Q0FBdUIsa0NBQUEsc0NBQUEsOEJBQUEsa0NBQUEsa0NBQUEsa0NBQUEsNENBQUEsaURBQUEsa0NBQUE7UUEwQjZGLGVBQWE7UUFBYixrQ0FBYTs7dUZEaEN4SCwyQkFBMkI7Y0FWdkMsU0FBUzsyQkFDRSx1QkFBdUIsaUJBRWxCLGlCQUFpQixDQUFDLElBQUksbUJBQ3BCLHVCQUF1QixDQUFDLE1BQU0sYUFDcEMsQ0FBQyxpQkFBaUIsQ0FBQyxRQUN4QjtvQkFDSixLQUFLLEVBQUUsMkNBQTJDO2lCQUNuRDs2SEFHUSxRQUFRO2tCQUFoQixLQUFLO1lBQ0csTUFBTTtrQkFBZCxLQUFLO1lBQ0csS0FBSztrQkFBYixLQUFLO1lBSUcsVUFBVTtrQkFBbEIsS0FBSztZQUlHLFlBQVk7a0JBQXBCLEtBQUs7WUFJRyxZQUFZO2tCQUFwQixLQUFLO1lBSUcsY0FBYztrQkFBdEIsS0FBSztZQUtHLFlBQVk7a0JBQXBCLEtBQUs7WUFLRyxpQkFBaUI7a0JBQXpCLEtBQUs7WUFJRyxrQkFBa0I7a0JBQTFCLEtBQUs7WUFJRyxnQkFBZ0I7a0JBQXhCLEtBQUs7WUFJRyxZQUFZO2tCQUFwQixLQUFLO1lBQ0csWUFBWTtrQkFBcEIsS0FBSztZQTRCRyx5QkFBeUI7a0JBQWpDLEtBQUs7WUFZNkQsYUFBYTtrQkFBL0UsZUFBZTttQkFBQyx5QkFBeUIsRUFBRSxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUU7WUFDdkQsZUFBZTtrQkFBeEIsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyQ29udGVudEluaXQsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDaGFuZ2VEZXRlY3RvclJlZiwgQ29tcG9uZW50LCBDb250ZW50Q2hpbGRyZW4sIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uQ2hhbmdlcywgT25Jbml0LCBPdXRwdXQsIFF1ZXJ5TGlzdCwgU2ltcGxlQ2hhbmdlcywgVGVtcGxhdGVSZWYsIFZpZXdFbmNhcHN1bGF0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDYW5keURhdGUgfSBmcm9tICd0ZHMtdWkvY29yZS90aW1lJztcbmltcG9ydCB7IFREU0NhbGVuZGFySTE4bkludGVyZmFjZSB9IGZyb20gJ3Rkcy11aS9pMThuJztcbmltcG9ydCB7IGdldERheVZpZXdIb3VyR3JpZCwgV2Vla1ZpZXdIb3VyLCB0cmFja0J5SG91clNlZ21lbnQsIFREU0NhbmxlbmRhckV2ZW50SW50ZXJmYWNlLCBnZXREYXlWaWV3LCBEYXlWaWV3LCBXZWVrVmlld0hvdXJTZWdtZW50IH0gZnJvbSAnLi9jYWxlbmRhci51dGlscyc7XG5pbXBvcnQgeyBURFNDYWxlbmRhckV2ZW50Q29tcG9uZW50IH0gZnJvbSAnLi90ZHMtY2FsZW5kYXItZXZlbnQuY29tcG9uZW50JztcbmltcG9ydCB7IHN0YXJ0V2l0aCwgc3dpdGNoTWFwLCB0YWtlVW50aWwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIG1lcmdlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBURFNTYWZlQW55IH0gZnJvbSAndGRzLXVpL3NoYXJlZC91dGlsaXR5JztcbmltcG9ydCB7IFREU0Rlc3Ryb3lTZXJ2aWNlIH0gZnJvbSAndGRzLXVpL2NvcmUvc2VydmljZXMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd0ZHMtY2FsZW5kYXItbW9kZS1kYXknLFxuICB0ZW1wbGF0ZVVybDogJy4vdGRzLWNhbGVuZGFyLW1vZGUtZGF5LmNvbXBvbmVudC5odG1sJyxcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHByb3ZpZGVyczogW1REU0Rlc3Ryb3lTZXJ2aWNlXSxcbiAgaG9zdDoge1xuICAgIGNsYXNzOiBcInctZnVsbCBibG9jayBib3JkZXIgIGJvcmRlci1uZXV0cmFsLTItMjAwXCJcbiAgfVxufSlcbmV4cG9ydCBjbGFzcyBURFNDYWxlbmRhck1vZGVEYXlDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcywgQWZ0ZXJDb250ZW50SW5pdCB7XG4gIEBJbnB1dCgpIHZpZXdEYXRlOiBEYXRlID0gbmV3IERhdGUoKTtcbiAgQElucHV0KCkgbG9jYWxlITogVERTQ2FsZW5kYXJJMThuSW50ZXJmYWNlO1xuICBASW5wdXQoKSBzdGFydDogQ2FuZHlEYXRlID0gbmV3IENhbmR5RGF0ZSgpO1xuICAvKipcbiAgICogR2nhu50ga+G6v3QgdGjDumMgbmfDoHkgdHJvbmcgdGjhu51pIGdpYW4gMjQgZ2nhu50uIFBo4bqjaSBsw6AgMC0yM1xuICAgKi9cbiAgQElucHV0KCkgZGF5RW5kSG91cjogbnVtYmVyID0gMTc7XG4gIC8qKlxuICAqIFBow7p0IGN14buRaSBuZ8OgeS4gUGjhuqNpIGzDoCAwLTU5XG4gICovXG4gIEBJbnB1dCgpIGRheUVuZE1pbnV0ZTogbnVtYmVyID0gMzA7XG4gIC8qKlxuICAqIEdp4budIGLhuq90IMSR4bqndSBuZ8OgeSB0cm9uZyB0aOG7nWkgZ2lhbiAyNCBnaeG7nS4gUGjhuqNpIGzDoCAwLTIzXG4gICovXG4gIEBJbnB1dCgpIGRheVN0YXJ0SG91cjogbnVtYmVyID0gODtcbiAgLyoqXG4gICogUGjDunQgYuG6r3QgxJHhuqd1IG5nw6B5LiBQaOG6o2kgbMOgIDAtNTlcbiAgKi9cbiAgQElucHV0KCkgZGF5U3RhcnRNaW51dGU6IG51bWJlciA9IDA7XG5cbiAgLyoqXG4gICAqIFRoZSBudW1iZXIgb2Ygc2VnbWVudHMgaW4gYW4gaG91ci4gTXVzdCBkaXZpZGUgZXF1YWxseSBpbnRvIDYwLlxuICAgKi9cbiAgQElucHV0KCkgaG91clNlZ21lbnRzOiBudW1iZXIgPSA0O1xuXG4gIC8qKlxuICAgKiBUaGUgaGVpZ2h0IGluIHBpeGVscyBvZiBlYWNoIGhvdXIgc2VnbWVudFxuICAgKi9cbiAgQElucHV0KCkgaG91clNlZ21lbnRIZWlnaHQ6IG51bWJlciA9IDMwO1xuICAvKipcbiAgICogVGhlIG1pbmltdW0gaGVpZ2h0IGluIHBpeGVscyBvZiBlYWNoIGV2ZW50XG4gICAqL1xuICBASW5wdXQoKSBtaW5pbXVtRXZlbnRIZWlnaHQ6IG51bWJlciA9IDEwMDtcbiAgLyoqXG4gICogVGhlIHdpZHRoIGluIHBpeGVscyBvZiBlYWNoIGhvdXIgc2VnbWVudFxuICAqL1xuICBASW5wdXQoKSBob3VyU2VnbWVudFdpZHRoOiBudW1iZXIgPSAyMDA7XG4gIC8qKlxuICAgKiBUaGUgZHVyYXRpb24gb2YgZWFjaCBzZWdtZW50IGdyb3VwIGluIG1pbnV0ZXNcbiAgICovXG4gIEBJbnB1dCgpIGhvdXJEdXJhdGlvbjogbnVtYmVyID0gNjA7XG4gIEBJbnB1dCgpIHdpZHRoQ29sVGltZTogbnVtYmVyID0gODA7XG4gIC8vICAgLyoqXG4gIC8vICAgKiBUaGUgc3RhcnQgbnVtYmVyIG9mIHRoZSB3ZWVrLlxuICAvLyAgICogVGhpcyBpcyBpZ25vcmVkIHdoZW4gdGhlIGBkYXlzSW5XZWVrYCBpbnB1dCBpcyBhbHNvIHNldCBhcyB0aGUgYHZpZXdEYXRlYCB3aWxsIGJlIHVzZWQgYXMgdGhlIHN0YXJ0IG9mIHRoZSB3ZWVrIGluc3RlYWQuXG4gIC8vICAgKiBgYGBcbiAgLy8gICAqL1xuICAvLyAgIEBJbnB1dCgpIHdlZWtTdGFydHNPbjogbnVtYmVyID0gMTtcbiAgLy8gICAvKipcbiAgLy8gKiBBbiBhcnJheSBvZiBkYXkgaW5kZXhlcyAoMCA9IHN1bmRheSwgMSA9IG1vbmRheSBldGMpIHRoYXQgd2lsbCBiZSBoaWRkZW4gb24gdGhlIHZpZXdcbiAgLy8gKi9cbiAgLy8gICBASW5wdXQoKSBleGNsdWRlRGF5czogbnVtYmVyW10gPSBbXTtcbiAgLy8gICAvKipcbiAgLy8gICAgKiBUaGUgcHJlY2lzaW9uIHRvIGRpc3BsYXkgZXZlbnRzLlxuICAvLyAgICAqIGBkYXlzYCB3aWxsIHJvdW5kIGV2ZW50IHN0YXJ0IGFuZCBlbmQgZGF0ZXMgdG8gdGhlIG5lYXJlc3QgZGF5IGFuZCBgbWludXRlc2Agd2lsbCBub3QgZG8gdGhpcyByb3VuZGluZ1xuICAvLyAgICAqL1xuICAvLyAgIEBJbnB1dCgpIHByZWNpc2lvbjogJ2RheXMnIHwgJ21pbnV0ZXMnID0gJ2RheXMnO1xuICAvLyAgIC8qKlxuICAvLyAgKiBBbiBhcnJheSBvZiBkYXkgaW5kZXhlcyAoMCA9IHN1bmRheSwgMSA9IG1vbmRheSBldGMpIHRoYXQgaW5kaWNhdGUgd2hpY2ggZGF5cyBhcmUgd2Vla2VuZHNcbiAgLy8gICovXG4gIC8vICAgQElucHV0KCkgd2Vla2VuZERheXMhOiBudW1iZXJbXTtcbiAgLy8gICAvKipcbiAgLy8gICAgKiBUaGUgbnVtYmVyIG9mIGRheXMgaW4gYSB3ZWVrLiBDYW4gYmUgdXNlZCB0byBjcmVhdGUgYSBzaG9ydGVyIG9yIGxvbmdlciB3ZWVrIHZpZXcuXG4gIC8vICAgICogVGhlIGZpcnN0IGRheSBvZiB0aGUgd2VlayB3aWxsIGFsd2F5cyBiZSB0aGUgYHZpZXdEYXRlYCBhbmQgYHdlZWtTdGFydHNPbmAgaWYgc2V0IHdpbGwgYmUgaWdub3JlZFxuICAvLyAgICAqL1xuICAvLyAgIEBJbnB1dCgpIGRheXNJbldlZWs6IG51bWJlciA9IDE7XG4gIC8qKlxuICogQSBjdXN0b20gdGVtcGxhdGUgdG8gdXNlIGZvciB0aGUgY3VycmVudCB0aW1lIG1hcmtlclxuICovXG4gIEBJbnB1dCgpIGN1cnJlbnRUaW1lTWFya2VyVGVtcGxhdGUhOiBUZW1wbGF0ZVJlZjxhbnk+O1xuXG4gIC8qKlxuICAgKiBAaGlkZGVuXG4gICAqL1xuICB0cmFja0J5SG91clNlZ21lbnQgPSB0cmFja0J5SG91clNlZ21lbnQ7XG5cbiAgd2Vla1ZpZXdIb3VyOiBXZWVrVmlld0hvdXJbXSA9IFtdO1xuICBhY3RpdmVEYXRlOiBDYW5keURhdGUgPSBuZXcgQ2FuZHlEYXRlKCk7XG4gIG1heFdpZHRoOiBudW1iZXIgPSAwO1xuICB3aWR0aFRhYmxlOiBudW1iZXIgfCBudWxsID0gbnVsbDtcbiAgcHJpdmF0ZSBsaXN0T2ZUZW1wbGF0ZUV2ZW50SXRlbSQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PFREU0NhbmxlbmRhckV2ZW50SW50ZXJmYWNlW10+KFtdKTtcbiAgQENvbnRlbnRDaGlsZHJlbihURFNDYWxlbmRhckV2ZW50Q29tcG9uZW50LCB7IGRlc2NlbmRhbnRzOiB0cnVlIH0pIGxpc3RFdmVudENvbXAhOiBRdWVyeUxpc3Q8VERTQ2FsZW5kYXJFdmVudENvbXBvbmVudD47XG4gIEBPdXRwdXQoKSB0ZHNDbGlja1NlZ21lbnQgPSBuZXcgRXZlbnRFbWl0dGVyPFdlZWtWaWV3SG91clNlZ21lbnQ+KCk7XG4gIGxpc3RPZkV2ZW50OiBURFNDYW5sZW5kYXJFdmVudEludGVyZmFjZVtdID0gW107XG4gIGRheVZpZXchOiBEYXlWaWV3O1xuICBwYWRkaW5nTGVmdENvbnRlbnQgPSAxNjtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBkZXN0cm95JDogVERTRGVzdHJveVNlcnZpY2UsIHByaXZhdGUgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZiwgcHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7IH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcblxuICAgIHRoaXMubGlzdE9mVGVtcGxhdGVFdmVudEl0ZW0kLnBpcGUodGFrZVVudGlsKHRoaXMuZGVzdHJveSQpKVxuICAgICAgLnN1YnNjcmliZSgodmFsdWU6IFREU0NhbmxlbmRhckV2ZW50SW50ZXJmYWNlW10pID0+IHtcbiAgICAgICAgbGV0IGRheVN0YXJ0ID0ge1xuICAgICAgICAgIGhvdXI6IHRoaXMuZGF5U3RhcnRIb3VyLFxuICAgICAgICAgIG1pbnV0ZTogdGhpcy5kYXlTdGFydE1pbnV0ZSxcbiAgICAgICAgfVxuICAgICAgICBsZXQgZGF5RW5kID0ge1xuICAgICAgICAgIGhvdXI6IHRoaXMuZGF5RW5kSG91cixcbiAgICAgICAgICBtaW51dGU6IHRoaXMuZGF5RW5kTWludXRlLFxuICAgICAgICB9XG4gICAgICAgIHRoaXMubGlzdE9mRXZlbnQgPSBbLi4udmFsdWVdO1xuICAgICAgICB0aGlzLmRheVZpZXcgPSBnZXREYXlWaWV3KHtcbiAgICAgICAgICBldmVudHM6IFsuLi52YWx1ZV0sIHZpZXdEYXRlOiB0aGlzLnZpZXdEYXRlLCBob3VyU2VnbWVudHM6IHRoaXMuaG91clNlZ21lbnRzLCBkYXlTdGFydDogZGF5U3RhcnQsXG4gICAgICAgICAgZGF5RW5kOiBkYXlFbmQsIGV2ZW50V2lkdGg6IHRoaXMuaG91clNlZ21lbnRXaWR0aCwgaG91ckR1cmF0aW9uOiB0aGlzLmhvdXJEdXJhdGlvbiwgbWluaW11bUV2ZW50SGVpZ2h0OiB0aGlzLm1pbmltdW1FdmVudEhlaWdodCwgc2VnbWVudEhlaWdodDogdGhpcy5ob3VyU2VnbWVudEhlaWdodFxuICAgICAgICB9KTtcbiAgICAgICAgbGV0IHdpZHRoID0gdGhpcy5wYWRkaW5nTGVmdENvbnRlbnQ7XG4gICAgICAgIGxldCB3aWR0aENvbXAgPSB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aDtcbiAgICAgICAgdGhpcy5kYXlWaWV3LmV2ZW50cy5mb3JFYWNoKGUgPT4ge1xuICAgICAgICAgIGNvbnN0IHdpZHRDb2wgPSBlLmxlZnQgKyBlLndpZHRoXG4gICAgICAgICAgaWYgKHdpZHRoIDwgd2lkdENvbCkge1xuICAgICAgICAgICAgd2lkdGggPSB3aWR0Q29sO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMud2lkdGhUYWJsZSA9IHdpZHRoID4gd2lkdGhDb21wID8gd2lkdGggKyB0aGlzLndpZHRoQ29sVGltZSArIHRoaXMucGFkZGluZ0xlZnRDb250ZW50IDogbnVsbDtcbiAgICAgICAgdGhpcy5tYXhXaWR0aCA9IHdpZHRoID09IDAgPyAwIDogd2lkdGg7XG5cbiAgICAgICAgdGhpcy5jZHIubWFya0ZvckNoZWNrKCk7XG4gICAgICB9KTtcbiAgfVxuXG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xuICAgIGlmIChjaGFuZ2VzLnZpZXdEYXRlKSB7XG4gICAgICB0aGlzLmJ1aWxkVGltZSgpO1xuICAgICAgdGhpcy5jZHIubWFya0ZvckNoZWNrKCk7XG4gICAgfVxuICB9XG4gIG5nQWZ0ZXJDb250ZW50SW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLmxpc3RFdmVudENvbXAuY2hhbmdlcy5waXBlKFxuICAgICAgc3RhcnRXaXRoKHRydWUpLFxuICAgICAgc3dpdGNoTWFwKCgpID0+XG4gICAgICAgIG1lcmdlKFxuICAgICAgICAgIC4uLltcbiAgICAgICAgICAgIHRoaXMubGlzdEV2ZW50Q29tcC5jaGFuZ2VzLFxuICAgICAgICAgICAgLi4udGhpcy5saXN0RXZlbnRDb21wLm1hcChvcHRpb24gPT4gb3B0aW9uLmNoYW5nZXMpLFxuICAgICAgICAgIF1cbiAgICAgICAgKS5waXBlKHN0YXJ0V2l0aCh0cnVlKSlcbiAgICAgICksXG4gICAgICB0YWtlVW50aWwodGhpcy5kZXN0cm95JClcbiAgICApLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICBjb25zdCBsaXN0T2ZFdmVudEludGVyZmFjZSA9IHRoaXMubGlzdEV2ZW50Q29tcC50b0FycmF5KCkubWFwKGl0ZW0gPT4ge1xuICAgICAgICBjb25zdCB7IHRkc0VuZERhdGUsIHRkc1N0YXJ0RGF0ZSwgdGRzRGF0YSwgdGRzVGVtcGxhdGUgfSA9IGl0ZW07XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc3RhcnQ6IHRkc1N0YXJ0RGF0ZSxcbiAgICAgICAgICBlbmQ6IHRkc0VuZERhdGUsXG4gICAgICAgICAgZGF0YTogdGRzRGF0YSxcbiAgICAgICAgICB0ZW1wbGF0ZTogdGRzVGVtcGxhdGUsXG4gICAgICAgICAgYWxsRGF5OiBmYWxzZVxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgICB0aGlzLmxpc3RPZlRlbXBsYXRlRXZlbnRJdGVtJC5uZXh0KGxpc3RPZkV2ZW50SW50ZXJmYWNlKTtcblxuICAgIH0pXG4gIH1cbiAgb25DbGlja1NlZ21lbnQoZTpNb3VzZUV2ZW50LGRhdGU6V2Vla1ZpZXdIb3VyU2VnbWVudClcbiAge1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHRoaXMudGRzQ2xpY2tTZWdtZW50LmVtaXQoZGF0ZSlcbiAgfVxuICBwcml2YXRlIGJ1aWxkVGltZSgpIHtcbiAgICB0aGlzLmFjdGl2ZURhdGUgPSBuZXcgQ2FuZHlEYXRlKHRoaXMudmlld0RhdGUpO1xuICAgIGxldCBkYXlTdGFydCA9IHtcbiAgICAgIGhvdXI6IHRoaXMuZGF5U3RhcnRIb3VyLFxuICAgICAgbWludXRlOiB0aGlzLmRheVN0YXJ0TWludXRlLFxuICAgIH1cbiAgICBsZXQgZGF5RW5kID0ge1xuICAgICAgaG91cjogdGhpcy5kYXlFbmRIb3VyLFxuICAgICAgbWludXRlOiB0aGlzLmRheUVuZE1pbnV0ZSxcbiAgICB9XG4gICAgdGhpcy53ZWVrVmlld0hvdXIgPSBnZXREYXlWaWV3SG91ckdyaWQoe1xuICAgICAgZGF5U3RhcnQ6IGRheVN0YXJ0LFxuICAgICAgZGF5RW5kOiBkYXlFbmQsXG4gICAgICBob3VyRHVyYXRpb246IHRoaXMuaG91ckR1cmF0aW9uLFxuICAgICAgdmlld0RhdGU6IHRoaXMudmlld0RhdGUsXG4gICAgICBob3VyU2VnbWVudHM6IHRoaXMuaG91clNlZ21lbnRzXG4gICAgfSk7XG4gICAgdGhpcy5saXN0T2ZUZW1wbGF0ZUV2ZW50SXRlbSQubmV4dCh0aGlzLmxpc3RPZkV2ZW50KTtcbiAgfVxuXG59XG4iLCI8ZGl2IGNsYXNzPVwidy1mdWxsIGgtZnVsbCAgcmVsYXRpdmUgb3ZlcmZsb3ctYXV0byB0ZHMtY3VzdG9tLXNjcm9sbFwiPlxuICAgIDx0YWJsZSBjbGFzcz1cInRhYmxlLWZpeGVkIG1pbi13LWZ1bGxcIiBbc3R5bGUud2lkdGgucHhdPVwid2lkdGhUYWJsZVwiPlxuICAgICAgICA8Y29sZ3JvdXA+XG4gICAgICAgICAgICA8Y29sIFt3aWR0aF09XCJ3aWR0aENvbFRpbWVcIj5cbiAgICAgICAgICAgIDxjb2w+XG4gICAgICAgIDwvY29sZ3JvdXA+XG4gICAgICAgIDx0Ym9keT5cbiAgICAgICAgICAgIDxuZy10ZW1wbGF0ZSBuZ0ZvciBbbmdGb3JPZl09XCJ3ZWVrVmlld0hvdXJcIiBsZXQtd2VlayBsZXQtaWR4PVwiaW5kZXhcIiBsZXQtdG90YWw9XCJjb3VudFwiPiAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIDxuZy10ZW1wbGF0ZSBuZ0ZvciBbbmdGb3JPZl09XCJ3ZWVrLnNlZ21lbnRzXCIgbGV0LXNlZ21lbnQgW25nRm9yVHJhY2tCeV09XCJ0cmFja0J5SG91clNlZ21lbnRcIj5cbiAgICAgICAgICAgICAgICAgICAgPHRyICAqbmdJZj1cInNlZ21lbnQuaXNTdGFydFwiIGNsYXNzPVwidGRzLWNhbGVuZGFyLXNlZ21lbnQtc3RhcnRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBbYXR0ci5yb3dzcGFuXT1cIndlZWsuc2VnbWVudHMubGVuZ3RoXCIgY2xhc3M9XCJ0ZHMtY2FsZW5kYXItY29sLWxvY2sgYWxpZ24tdG9wIHRleHQtY2VudGVyIHN0aWNreSBsZWZ0LTAgei0xMCBiZy13aGl0ZSBcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7e3NlZ21lbnQuZGlzcGxheURhdGUgfCBkYXRlOlwiSEg6bW1cIn19XG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVwiY3Vyc29yLXBvaW50ZXJcIiBbc3R5bGUuaGVpZ2h0LnB4XT1cImhvdXJTZWdtZW50SGVpZ2h0XCIgKGNsaWNrKT1cIm9uQ2xpY2tTZWdtZW50KCRldmVudCxzZWdtZW50KVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgICAgICAgICAgPHRyICpuZ0lmPVwiIXNlZ21lbnQuaXNTdGFydFwiIGNsYXNzPVwidGRzLWNhbGVuZGFyLXNlZ21lbnRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cImN1cnNvci1wb2ludGVyXCIgW3N0eWxlLmhlaWdodC5weF09XCJob3VyU2VnbWVudEhlaWdodFwiIChjbGljayk9XCJvbkNsaWNrU2VnbWVudCgkZXZlbnQsc2VnbWVudClcIj4gICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgICAgICAgICAgIDwvdHI+ICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICA8L25nLXRlbXBsYXRlPlxuICAgICAgICAgICAgPC9uZy10ZW1wbGF0ZT5cbiAgICAgICAgPC90Ym9keT5cbiAgICA8L3RhYmxlPlxuICAgIDx0ZHMtY2FsZW5kYXItY3VycmVudC10aW1lXG4gICAgW2NvbHVtbkRhdGVdPVwidmlld0RhdGVcIlxuICAgIFtkYXlTdGFydEhvdXJdPVwiZGF5U3RhcnRIb3VyXCJcbiAgICBbZGF5U3RhcnRNaW51dGVdPVwiZGF5U3RhcnRNaW51dGVcIlxuICAgIFtkYXlFbmRIb3VyXT1cImRheUVuZEhvdXJcIlxuICAgIFtkYXlFbmRNaW51dGVdPVwiZGF5RW5kTWludXRlXCJcbiAgICBbaG91clNlZ21lbnRzXT1cImhvdXJTZWdtZW50c1wiXG4gICAgW2hvdXJEdXJhdGlvbl09XCJob3VyRHVyYXRpb25cIlxuICAgIFtob3VyU2VnbWVudEhlaWdodF09XCJob3VyU2VnbWVudEhlaWdodFwiXG4gICAgW2N1c3RvbVRlbXBsYXRlXT1cImN1cnJlbnRUaW1lTWFya2VyVGVtcGxhdGVcIlxuICAgIFt3aWR0aENvbFRpbWVdPVwid2lkdGhDb2xUaW1lXCJcbiAgPjwvdGRzLWNhbGVuZGFyLWN1cnJlbnQtdGltZT5cbiAgICA8IS0tIDxuZy10ZW1wbGF0ZSBuZ0ZvciBbbmdGb3JPZl09XCJ3ZWVrVmlld0hvdXJcIiBsZXQtd2VlayBsZXQtaWR4PVwiaW5kZXhcIiBsZXQtdG90YWw9XCJjb3VudFwiPlxuICAgICAgICA8bmctdGVtcGxhdGUgbmdGb3IgW25nRm9yT2ZdPVwid2Vlay5zZWdtZW50c1wiIGxldC1zZWdtZW50IFtuZ0ZvclRyYWNrQnldPVwidHJhY2tCeUhvdXJTZWdtZW50XCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwidy1mdWxsIGZsZXhcIiBbbmdDbGFzc109XCJ7J2JvcmRlci10IGJvcmRlci1uZXV0cmFsLTItMjAwJzpzZWdtZW50LmlzU3RhcnR9XCJcbiAgICAgICAgICAgICAgICBbc3R5bGUuaGVpZ2h0LnB4XT1cImhvdXJTZWdtZW50SGVpZ2h0XCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInctMjAgdGV4dC1jZW50ZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gKm5nSWY9XCJzZWdtZW50LmlzU3RhcnRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIHt7c2VnbWVudC5kaXNwbGF5RGF0ZSB8IGRhdGU6XCJISDptbVwifX1cbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4LWF1dG9cIj5cblxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvbmctdGVtcGxhdGU+XG4gICAgPC9uZy10ZW1wbGF0ZT4gLS0+XG4gICAgPGRpdiBjbGFzcz1cInRkcy1jYWxlbmRhci1ldmVudC1jb250YWluZXIgcG9pbnRlci1ldmVudHMtbm9uZSBhYnNvbHV0ZSBpbnNldC0wIHBsLTRcIiBbc3R5bGUubGVmdC5weF09XCJ3aWR0aENvbFRpbWVcIiAqbmdJZj1cImRheVZpZXdcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInctZnVsbCBoLWZ1bGwgcmVsYXRpdmUgcG9pbnRlci1ldmVudHMtbm9uZVwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImgtcHggcG9pbnRlci1ldmVudHMtbm9uZVwiIFtzdHlsZS53aWR0aC5weF09XCJtYXhXaWR0aFwiPjwvZGl2PlxuICAgICAgICAgICAgPG5nLXRlbXBsYXRlIG5nRm9yIFtuZ0Zvck9mXT1cImRheVZpZXcuZXZlbnRzXCIgbGV0LWRhdGFFdmVudD5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYWJzb2x1dGUgcG9pbnRlci1ldmVudHMtYXV0b1wiIFtzdHlsZS5oZWlnaHQucHhdPVwiZGF0YUV2ZW50LmhlaWdodFwiIFtzdHlsZS5tYXJnaW5Ub3AucHhdPVwiZGF0YUV2ZW50LnRvcFwiXG4gICAgICAgICAgICAgICAgICAgIFtzdHlsZS5tYXJnaW5MZWZ0LnB4XT1cImRhdGFFdmVudC5sZWZ0XCIgW3N0eWxlLndpZHRoLnB4XT1cImRhdGFFdmVudC53aWR0aFwiPlxuICAgICAgICAgICAgICAgICAgICA8bmctY29udGFpbmVyICp0ZHNTdHJpbmdUZW1wbGF0ZU91dGxldD1cImRhdGFFdmVudC5ldmVudC50ZW1wbGF0ZVwiPnt7IGRhdGFFdmVudC5ldmVudC50ZW1wbGF0ZSB9fVxuICAgICAgICAgICAgICAgICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvbmctdGVtcGxhdGU+ICAgXG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PiAgICAgXG4gIFxuPC9kaXY+XG48bmctY29udGVudD48L25nLWNvbnRlbnQ+Il19