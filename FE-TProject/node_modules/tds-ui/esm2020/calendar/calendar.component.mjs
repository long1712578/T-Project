import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, ContentChild, EventEmitter, forwardRef, Input, Optional, Output, TemplateRef, ViewEncapsulation } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { CandyDate } from 'tds-ui/core/time';
import { InputBoolean } from 'tds-ui/shared/utility';
import { TDSDateCellDirective as DateCell, TDSDateFullCellDirective as DateFullCell, TDSMonthCellDirective as MonthCell, TDSMonthFullCellDirective as MonthFullCell } from './calendar-cells';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/bidi";
import * as i2 from "./calendar-header.component";
import * as i3 from "@angular/common";
import * as i4 from "./tds-calendar-mode-day.component";
function TDSCalendarComponent_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "tds-calendar-mode-day", 4);
    i0.ɵɵprojection(2);
    i0.ɵɵelementEnd();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("viewDate", ctx_r0.activeDate.nativeDate);
} }
function TDSCalendarComponent_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, " tu\u1EA7n ");
    i0.ɵɵelementContainerEnd();
} }
function TDSCalendarComponent_ng_container_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, " th\u00E1ng ");
    i0.ɵɵelementContainerEnd();
} }
function TDSCalendarComponent_ng_container_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, " n\u0103m ");
    i0.ɵɵelementContainerEnd();
} }
const _c0 = ["*"];
export class TDSCalendarComponent {
    constructor(cdr, directionality) {
        this.cdr = cdr;
        this.directionality = directionality;
        this.activeDate = new CandyDate();
        this.prefixCls = 'tds-picker-calendar';
        this.destroy$ = new Subject();
        this.dir = 'ltr';
        this.onChangeFn = () => { };
        this.onTouchFn = () => { };
        this.tdsMode = 'month';
        this.tdsModeChange = new EventEmitter();
        this.tdsPanelChange = new EventEmitter();
        this.tdsSelectChange = new EventEmitter();
        this.tdsValueChange = new EventEmitter();
        this.tdsFullscreen = true;
    }
    get dateCell() {
        return (this.tdsDateCell || this.tdsDateCellChild);
    }
    get dateFullCell() {
        return (this.tdsDateFullCell || this.tdsDateFullCellChild);
    }
    get monthCell() {
        return (this.tdsMonthCell || this.tdsMonthCellChild);
    }
    get monthFullCell() {
        return (this.tdsMonthFullCell || this.tdsMonthFullCellChild);
    }
    ngOnInit() {
        this.dir = this.directionality.value;
        this.directionality.change?.pipe(takeUntil(this.destroy$)).subscribe(() => {
            this.dir = this.directionality.value;
        });
    }
    onModeChange(mode) {
        this.tdsModeChange.emit(mode);
        this.tdsPanelChange.emit({ date: this.activeDate.nativeDate, mode });
    }
    onYearSelect(year) {
        const date = this.activeDate.setYear(year);
        this.updateDate(date);
    }
    onMonthSelect(month) {
        const date = this.activeDate.setMonth(month);
        this.updateDate(date);
    }
    onDateSelect(date) {
        // Only activeDate is enough in calendar
        // this.value = date;
        this.updateDate(date);
    }
    writeValue(value) {
        this.updateDate(new CandyDate(value), false);
        this.cdr.markForCheck();
    }
    registerOnChange(fn) {
        this.onChangeFn = fn;
    }
    registerOnTouched(fn) {
        this.onTouchFn = fn;
    }
    updateDate(date, touched = true) {
        this.activeDate = date;
        if (touched) {
            this.onChangeFn(date.nativeDate);
            this.onTouchFn();
            this.tdsSelectChange.emit(date.nativeDate);
            this.tdsValueChange.emit(date.nativeDate);
        }
    }
    ngOnChanges(changes) {
        if (changes.tdsValue) {
            this.updateDate(new CandyDate(this.tdsValue), false);
        }
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
}
TDSCalendarComponent.ɵfac = function TDSCalendarComponent_Factory(t) { return new (t || TDSCalendarComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.Directionality, 8)); };
TDSCalendarComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSCalendarComponent, selectors: [["tds-calendar"]], contentQueries: function TDSCalendarComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        i0.ɵɵcontentQuery(dirIndex, DateCell, 5, TemplateRef);
        i0.ɵɵcontentQuery(dirIndex, DateFullCell, 5, TemplateRef);
        i0.ɵɵcontentQuery(dirIndex, MonthCell, 5, TemplateRef);
        i0.ɵɵcontentQuery(dirIndex, MonthFullCell, 5, TemplateRef);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tdsDateCellChild = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tdsDateFullCellChild = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tdsMonthCellChild = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tdsMonthFullCellChild = _t.first);
    } }, hostAttrs: [1, "tds-picker-calendar", "border", "border-primary-1", "block"], hostVars: 6, hostBindings: function TDSCalendarComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵclassProp("tds-picker-calendar-full", ctx.tdsFullscreen)("tds-picker-calendar-mini", !ctx.tdsFullscreen)("tds-picker-calendar-rtl", ctx.dir === "rtl");
    } }, inputs: { tdsMode: "tdsMode", tdsValue: "tdsValue", tdsDisabledDate: "tdsDisabledDate", tdsDateCell: "tdsDateCell", tdsDateFullCell: "tdsDateFullCell", tdsMonthCell: "tdsMonthCell", tdsMonthFullCell: "tdsMonthFullCell", tdsFullscreen: "tdsFullscreen" }, outputs: { tdsModeChange: "tdsModeChange", tdsPanelChange: "tdsPanelChange", tdsSelectChange: "tdsSelectChange", tdsValueChange: "tdsValueChange" }, exportAs: ["tdsCalendar"], features: [i0.ɵɵProvidersFeature([{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => TDSCalendarComponent), multi: true }]), i0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0, decls: 7, vars: 8, consts: [[3, "tdsFullscreen", "tdsViewDate", "tdsMode", "tdsViewDateChange", "tdsModeChange"], [1, "tds-picker-calendar-body"], [3, "ngSwitch"], [4, "ngSwitchCase"], [3, "viewDate"]], template: function TDSCalendarComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵelementStart(0, "tds-calendar-header", 0);
        i0.ɵɵlistener("tdsViewDateChange", function TDSCalendarComponent_Template_tds_calendar_header_tdsViewDateChange_0_listener($event) { return ctx.activeDate.nativeDate = $event; })("tdsModeChange", function TDSCalendarComponent_Template_tds_calendar_header_tdsModeChange_0_listener($event) { return ctx.onModeChange($event); });
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(1, "div", 1);
        i0.ɵɵelementContainerStart(2, 2);
        i0.ɵɵtemplate(3, TDSCalendarComponent_ng_container_3_Template, 3, 1, "ng-container", 3);
        i0.ɵɵtemplate(4, TDSCalendarComponent_ng_container_4_Template, 2, 0, "ng-container", 3);
        i0.ɵɵtemplate(5, TDSCalendarComponent_ng_container_5_Template, 2, 0, "ng-container", 3);
        i0.ɵɵtemplate(6, TDSCalendarComponent_ng_container_6_Template, 2, 0, "ng-container", 3);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵproperty("tdsFullscreen", ctx.tdsFullscreen)("tdsViewDate", ctx.activeDate.nativeDate)("tdsMode", ctx.tdsMode);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngSwitch", ctx.tdsMode);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngSwitchCase", "date");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngSwitchCase", "week");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngSwitchCase", "month");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngSwitchCase", "year");
    } }, directives: [i2.TDSCalendarHeaderComponent, i3.NgSwitch, i3.NgSwitchCase, i4.TDSCalendarModeDayComponent], encapsulation: 2, changeDetection: 0 });
__decorate([
    InputBoolean()
], TDSCalendarComponent.prototype, "tdsFullscreen", void 0);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSCalendarComponent, [{
        type: Component,
        args: [{
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                selector: 'tds-calendar',
                exportAs: 'tdsCalendar',
                template: `
    <tds-calendar-header
      [tdsFullscreen]="tdsFullscreen"
      [(tdsViewDate)]="activeDate.nativeDate"
      [tdsMode]="tdsMode"
      (tdsModeChange)="onModeChange($event)"
      
    ></tds-calendar-header>
    <div class="tds-picker-calendar-body">
      <ng-container [ngSwitch]="tdsMode">
        <ng-container *ngSwitchCase="'date'">
          <tds-calendar-mode-day [viewDate]="activeDate.nativeDate">
            <ng-content></ng-content>
          </tds-calendar-mode-day>
        </ng-container>
        <ng-container *ngSwitchCase="'week'">
          tuần
        </ng-container>
        <ng-container *ngSwitchCase="'month'">
          tháng
        </ng-container>
        <ng-container *ngSwitchCase="'year'">
          năm
        </ng-container>
      </ng-container>
    </div>
    <!-- <div class="tds-picker-panel">
      <div class="tds-picker-{{ tdsMode === 'month' ? 'day' : 'month' }}-panel">
        <div class="">
          <ng-container *ngIf="tdsMode === 'month'; then monthModeTable; else yearModeTable"></ng-container>
        </div>
      </div>
    </div> -->
    <!-- <ng-template #monthModeTable> -->
      <!--  TODO [cellRender] [fullCellRender] -->
      <!-- <date-table
        [prefixCls]="prefixCls"
        [value]="activeDate"
        [activeDate]="activeDate"
        [cellRender]="$any(dateCell)"
        [fullCellRender]="$any(dateFullCell)"
        [disabledDate]="tdsDisabledDate"
        (valueChange)="onDateSelect($event)"
      ></date-table>
    </ng-template> -->

    <!--  TODO [cellRender] [fullCellRender] -->
    <!-- <ng-template #yearModeTable>
      <month-table
        [prefixCls]="prefixCls"
        [value]="activeDate"
        [activeDate]="activeDate"
        [cellRender]="$any(monthCell)"
        [fullCellRender]="$any(monthFullCell)"
        (valueChange)="onDateSelect($event)"
      ></month-table>
    </ng-template> -->
  `,
                host: {
                    class: 'tds-picker-calendar border border-primary-1 block',
                    '[class.tds-picker-calendar-full]': 'tdsFullscreen',
                    '[class.tds-picker-calendar-mini]': '!tdsFullscreen',
                    '[class.tds-picker-calendar-rtl]': `dir === 'rtl'`
                },
                providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => TDSCalendarComponent), multi: true }]
            }]
    }], function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.Directionality, decorators: [{
                type: Optional
            }] }]; }, { tdsMode: [{
            type: Input
        }], tdsValue: [{
            type: Input
        }], tdsDisabledDate: [{
            type: Input
        }], tdsModeChange: [{
            type: Output
        }], tdsPanelChange: [{
            type: Output
        }], tdsSelectChange: [{
            type: Output
        }], tdsValueChange: [{
            type: Output
        }], tdsDateCell: [{
            type: Input
        }], tdsDateCellChild: [{
            type: ContentChild,
            args: [DateCell, { static: false, read: TemplateRef }]
        }], tdsDateFullCell: [{
            type: Input
        }], tdsDateFullCellChild: [{
            type: ContentChild,
            args: [DateFullCell, { static: false, read: TemplateRef }]
        }], tdsMonthCell: [{
            type: Input
        }], tdsMonthCellChild: [{
            type: ContentChild,
            args: [MonthCell, { static: false, read: TemplateRef }]
        }], tdsMonthFullCell: [{
            type: Input
        }], tdsMonthFullCellChild: [{
            type: ContentChild,
            args: [MonthFullCell, { static: false, read: TemplateRef }]
        }], tdsFullscreen: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;base64,