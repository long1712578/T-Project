import { Pipe } from '@angular/core';
import { sum } from 'tds-ui/core/util';
import * as i0 from "@angular/core";
export class TDSAggregatePipe {
    transform(value, method) {
        if (!Array.isArray(value)) {
            return value;
        }
        if (value.length === 0) {
            return undefined;
        }
        switch (method) {
            case 'sum':
                return sum(value);
            case 'avg':
                return sum(value) / value.length;
            case 'max':
                return Math.max(...value);
            case 'min':
                return Math.min(...value);
            default:
                throw Error(`Invalid Pipe Arguments: Aggregate pipe doesn't support this type`);
        }
    }
}
TDSAggregatePipe.ɵfac = function TDSAggregatePipe_Factory(t) { return new (t || TDSAggregatePipe)(); };
TDSAggregatePipe.ɵpipe = /*@__PURE__*/ i0.ɵɵdefinePipe({ name: "tdsAggregate", type: TDSAggregatePipe, pure: true });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSAggregatePipe, [{
        type: Pipe,
        args: [{
                name: 'tdsAggregate'
            }]
    }], null, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGRzLWFnZ3JlZ2F0ZS5waXBlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvdGRzLXVpL2NvcmUvcGlwZXMvdGRzLWFnZ3JlZ2F0ZS5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBQ3BELE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQzs7QUFPdkMsTUFBTSxPQUFPLGdCQUFnQjtJQUMzQixTQUFTLENBQUMsS0FBZSxFQUFFLE1BQXVCO1FBQ2hELElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3pCLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7UUFFRCxJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ3RCLE9BQU8sU0FBUyxDQUFDO1NBQ2xCO1FBRUQsUUFBUSxNQUFNLEVBQUU7WUFDZCxLQUFLLEtBQUs7Z0JBQ1IsT0FBTyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDcEIsS0FBSyxLQUFLO2dCQUNSLE9BQU8sR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUM7WUFDbkMsS0FBSyxLQUFLO2dCQUNSLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDO1lBQzVCLEtBQUssS0FBSztnQkFDUixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQztZQUM1QjtnQkFDRSxNQUFNLEtBQUssQ0FBQyxrRUFBa0UsQ0FBQyxDQUFDO1NBQ25GO0lBQ0gsQ0FBQzs7Z0ZBdEJVLGdCQUFnQjtxRkFBaEIsZ0JBQWdCO3VGQUFoQixnQkFBZ0I7Y0FINUIsSUFBSTtlQUFDO2dCQUNKLElBQUksRUFBRSxjQUFjO2FBQ3JCIiwic291cmNlc0NvbnRlbnQiOlsiXHJcblxyXG5pbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IHN1bSB9IGZyb20gJ3Rkcy11aS9jb3JlL3V0aWwnO1xyXG5cclxuZXhwb3J0IHR5cGUgQWdncmVnYXRlTWV0aG9kID0gJ3N1bScgfCAnbWF4JyB8ICdtaW4nIHwgJ2F2Zyc7XHJcblxyXG5AUGlwZSh7XHJcbiAgbmFtZTogJ3Rkc0FnZ3JlZ2F0ZSdcclxufSlcclxuZXhwb3J0IGNsYXNzIFREU0FnZ3JlZ2F0ZVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICB0cmFuc2Zvcm0odmFsdWU6IG51bWJlcltdLCBtZXRob2Q6IEFnZ3JlZ2F0ZU1ldGhvZCk6IHVuZGVmaW5lZCB8IG51bWJlciB7XHJcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodmFsdWUubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgc3dpdGNoIChtZXRob2QpIHtcclxuICAgICAgY2FzZSAnc3VtJzpcclxuICAgICAgICByZXR1cm4gc3VtKHZhbHVlKTtcclxuICAgICAgY2FzZSAnYXZnJzpcclxuICAgICAgICByZXR1cm4gc3VtKHZhbHVlKSAvIHZhbHVlLmxlbmd0aDtcclxuICAgICAgY2FzZSAnbWF4JzpcclxuICAgICAgICByZXR1cm4gTWF0aC5tYXgoLi4udmFsdWUpO1xyXG4gICAgICBjYXNlICdtaW4nOlxyXG4gICAgICAgIHJldHVybiBNYXRoLm1pbiguLi52YWx1ZSk7XHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgdGhyb3cgRXJyb3IoYEludmFsaWQgUGlwZSBBcmd1bWVudHM6IEFnZ3JlZ2F0ZSBwaXBlIGRvZXNuJ3Qgc3VwcG9ydCB0aGlzIHR5cGVgKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19