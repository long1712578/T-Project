import { Pipe } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/platform-browser";
export class TDSSanitizerPipe {
    constructor(sanitizer) {
        this.sanitizer = sanitizer;
    }
    transform(value, type = 'html') {
        switch (type) {
            case 'html':
                return this.sanitizer.bypassSecurityTrustHtml(value);
            case 'style':
                return this.sanitizer.bypassSecurityTrustStyle(value);
            case 'url':
                return this.sanitizer.bypassSecurityTrustUrl(value);
            case 'resourceUrl':
                return this.sanitizer.bypassSecurityTrustResourceUrl(value);
            default:
                throw new Error(`Invalid safe type specified`);
        }
    }
}
TDSSanitizerPipe.ɵfac = function TDSSanitizerPipe_Factory(t) { return new (t || TDSSanitizerPipe)(i0.ɵɵdirectiveInject(i1.DomSanitizer, 16)); };
TDSSanitizerPipe.ɵpipe = /*@__PURE__*/ i0.ɵɵdefinePipe({ name: "tdsSanitizer", type: TDSSanitizerPipe, pure: true });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSSanitizerPipe, [{
        type: Pipe,
        args: [{
                name: 'tdsSanitizer'
            }]
    }], function () { return [{ type: i1.DomSanitizer }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGRzLXNhbml0aXplci5waXBlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvdGRzLXVpL2NvcmUvcGlwZXMvdGRzLXNhbml0aXplci5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDOzs7QUFTcEQsTUFBTSxPQUFPLGdCQUFnQjtJQUMzQixZQUFzQixTQUF1QjtRQUF2QixjQUFTLEdBQVQsU0FBUyxDQUFjO0lBQUcsQ0FBQztJQUtqRCxTQUFTLENBQUMsS0FBVSxFQUFFLE9BQXlCLE1BQU07UUFDbkQsUUFBUSxJQUFJLEVBQUU7WUFDWixLQUFLLE1BQU07Z0JBQ1QsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLHVCQUF1QixDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3ZELEtBQUssT0FBTztnQkFDVixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsd0JBQXdCLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDeEQsS0FBSyxLQUFLO2dCQUNSLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxzQkFBc0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN0RCxLQUFLLGFBQWE7Z0JBQ2hCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyw4QkFBOEIsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUM5RDtnQkFDRSxNQUFNLElBQUksS0FBSyxDQUFDLDZCQUE2QixDQUFDLENBQUM7U0FDbEQ7SUFDSCxDQUFDOztnRkFuQlUsZ0JBQWdCO3FGQUFoQixnQkFBZ0I7dUZBQWhCLGdCQUFnQjtjQUg1QixJQUFJO2VBQUM7Z0JBQ0osSUFBSSxFQUFFLGNBQWM7YUFDckIiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuXHJcbmltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRG9tU2FuaXRpemVyLCBTYWZlSHRtbCwgU2FmZVJlc291cmNlVXJsLCBTYWZlU3R5bGUsIFNhZmVVcmwgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcclxuXHJcblxyXG50eXBlIERvbVNhbml0aXplclR5cGUgPSAnaHRtbCcgfCAnc3R5bGUnIHwgJ3VybCcgfCAncmVzb3VyY2VVcmwnO1xyXG5cclxuQFBpcGUoe1xyXG4gIG5hbWU6ICd0ZHNTYW5pdGl6ZXInXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBURFNTYW5pdGl6ZXJQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIHNhbml0aXplcjogRG9tU2FuaXRpemVyKSB7fVxyXG4gIHRyYW5zZm9ybSh2YWx1ZTogYW55LCB0eXBlOiAnaHRtbCcpOiBTYWZlSHRtbDtcclxuICB0cmFuc2Zvcm0odmFsdWU6IGFueSwgdHlwZTogJ3N0eWxlJyk6IFNhZmVTdHlsZTtcclxuICB0cmFuc2Zvcm0odmFsdWU6IGFueSwgdHlwZTogJ3VybCcpOiBTYWZlVXJsO1xyXG4gIHRyYW5zZm9ybSh2YWx1ZTogYW55LCB0eXBlOiAncmVzb3VyY2VVcmwnKTogU2FmZVJlc291cmNlVXJsO1xyXG4gIHRyYW5zZm9ybSh2YWx1ZTogYW55LCB0eXBlOiBEb21TYW5pdGl6ZXJUeXBlID0gJ2h0bWwnKTogU2FmZUh0bWwgfCBTYWZlU3R5bGUgfCBTYWZlVXJsIHwgU2FmZVJlc291cmNlVXJsIHtcclxuICAgIHN3aXRjaCAodHlwZSkge1xyXG4gICAgICBjYXNlICdodG1sJzpcclxuICAgICAgICByZXR1cm4gdGhpcy5zYW5pdGl6ZXIuYnlwYXNzU2VjdXJpdHlUcnVzdEh0bWwodmFsdWUpO1xyXG4gICAgICBjYXNlICdzdHlsZSc6XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2FuaXRpemVyLmJ5cGFzc1NlY3VyaXR5VHJ1c3RTdHlsZSh2YWx1ZSk7XHJcbiAgICAgIGNhc2UgJ3VybCc6XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2FuaXRpemVyLmJ5cGFzc1NlY3VyaXR5VHJ1c3RVcmwodmFsdWUpO1xyXG4gICAgICBjYXNlICdyZXNvdXJjZVVybCc6XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2FuaXRpemVyLmJ5cGFzc1NlY3VyaXR5VHJ1c3RSZXNvdXJjZVVybCh2YWx1ZSk7XHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHNhZmUgdHlwZSBzcGVjaWZpZWRgKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19