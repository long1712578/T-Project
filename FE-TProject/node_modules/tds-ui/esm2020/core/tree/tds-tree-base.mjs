import { TDSTreeNode } from './tds-tree-base-node';
export class TDSTreeBase {
    constructor(tdsTreeService) {
        this.tdsTreeService = tdsTreeService;
    }
    /**
     * Coerces a value({@link any[]}) to a TreeNodes({@link TDSTreeNode[]})
     */
    coerceTreeNodes(value) {
        let nodes = [];
        if (!this.tdsTreeService.isArrayOfTDSTreeNode(value)) {
            // has not been new TDSTreeNode
            nodes = value.map(item => new TDSTreeNode(item, null, this.tdsTreeService));
        }
        else {
            nodes = value.map((item) => {
                item.service = this.tdsTreeService;
                return item;
            });
        }
        return nodes;
    }
    /**
     * Get all nodes({@link TDSTreeNode})
     */
    getTreeNodes() {
        return this.tdsTreeService.rootNodes;
    }
    /**
     * Get {@link TDSTreeNode} with key
     */
    getTreeNodeByKey(key) {
        // flat tree nodes
        const nodes = [];
        const getNode = (node) => {
            nodes.push(node);
            node.getChildren().forEach(n => {
                getNode(n);
            });
        };
        this.getTreeNodes().forEach(n => {
            getNode(n);
        });
        return nodes.find(n => n.key === key) || null;
    }
    /**
     * Get checked nodes(merged)
     */
    getCheckedNodeList() {
        return this.tdsTreeService.getCheckedNodeList();
    }
    /**
     * Get selected nodes
     */
    getSelectedNodeList() {
        return this.tdsTreeService.getSelectedNodeList();
    }
    /**
     * Get half checked nodes
     */
    getHalfCheckedNodeList() {
        return this.tdsTreeService.getHalfCheckedNodeList();
    }
    /**
     * Get expanded nodes
     */
    getExpandedNodeList() {
        return this.tdsTreeService.getExpandedNodeList();
    }
    /**
     * Get matched nodes(if searchValue is not null)
     */
    getMatchedNodeList() {
        return this.tdsTreeService.getMatchedNodeList();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGRzLXRyZWUtYmFzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3Rkcy11aS9jb3JlL3RyZWUvdGRzLXRyZWUtYmFzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFHbkQsTUFBTSxPQUFPLFdBQVc7SUFDdEIsWUFBbUIsY0FBa0M7UUFBbEMsbUJBQWMsR0FBZCxjQUFjLENBQW9CO0lBQUcsQ0FBQztJQUV6RDs7T0FFRztJQUNILGVBQWUsQ0FBQyxLQUFtQjtRQUNqQyxJQUFJLEtBQUssR0FBa0IsRUFBRSxDQUFDO1FBQzlCLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3BELCtCQUErQjtZQUMvQixLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksV0FBVyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7U0FDN0U7YUFBTTtZQUNMLEtBQUssR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBaUIsRUFBRSxFQUFFO2dCQUN0QyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUM7Z0JBQ25DLE9BQU8sSUFBSSxDQUFDO1lBQ2QsQ0FBQyxDQUFDLENBQUM7U0FDSjtRQUNELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUVEOztPQUVHO0lBQ0gsWUFBWTtRQUNWLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUM7SUFDdkMsQ0FBQztJQUVEOztPQUVHO0lBQ0gsZ0JBQWdCLENBQUMsR0FBVztRQUMxQixrQkFBa0I7UUFDbEIsTUFBTSxLQUFLLEdBQWtCLEVBQUUsQ0FBQztRQUNoQyxNQUFNLE9BQU8sR0FBRyxDQUFDLElBQWlCLEVBQVEsRUFBRTtZQUMxQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2pCLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQzdCLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNiLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDO1FBQ0YsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUM5QixPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDYixDQUFDLENBQUMsQ0FBQztRQUNILE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDO0lBQ2hELENBQUM7SUFFRDs7T0FFRztJQUNILGtCQUFrQjtRQUNoQixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztJQUNsRCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxtQkFBbUI7UUFDakIsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLG1CQUFtQixFQUFFLENBQUM7SUFDbkQsQ0FBQztJQUVEOztPQUVHO0lBQ0gsc0JBQXNCO1FBQ3BCLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO0lBQ3RELENBQUM7SUFFRDs7T0FFRztJQUNILG1CQUFtQjtRQUNqQixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztJQUNuRCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxrQkFBa0I7UUFDaEIsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLGtCQUFrQixFQUFFLENBQUM7SUFDbEQsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiXHJcblxyXG5pbXBvcnQgeyBURFNTYWZlQW55IH0gZnJvbSAndGRzLXVpL3NoYXJlZC91dGlsaXR5J1xyXG5pbXBvcnQgeyBURFNUcmVlTm9kZSB9IGZyb20gJy4vdGRzLXRyZWUtYmFzZS1ub2RlJztcclxuaW1wb3J0IHsgVERTVHJlZUJhc2VTZXJ2aWNlIH0gZnJvbSAnLi90ZHMtdHJlZS1iYXNlLnNlcnZpY2UnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFREU1RyZWVCYXNlIHtcclxuICBjb25zdHJ1Y3RvcihwdWJsaWMgdGRzVHJlZVNlcnZpY2U6IFREU1RyZWVCYXNlU2VydmljZSkge31cclxuXHJcbiAgLyoqXHJcbiAgICogQ29lcmNlcyBhIHZhbHVlKHtAbGluayBhbnlbXX0pIHRvIGEgVHJlZU5vZGVzKHtAbGluayBURFNUcmVlTm9kZVtdfSlcclxuICAgKi9cclxuICBjb2VyY2VUcmVlTm9kZXModmFsdWU6IFREU1NhZmVBbnlbXSk6IFREU1RyZWVOb2RlW10ge1xyXG4gICAgbGV0IG5vZGVzOiBURFNUcmVlTm9kZVtdID0gW107XHJcbiAgICBpZiAoIXRoaXMudGRzVHJlZVNlcnZpY2UuaXNBcnJheU9mVERTVHJlZU5vZGUodmFsdWUpKSB7XHJcbiAgICAgIC8vIGhhcyBub3QgYmVlbiBuZXcgVERTVHJlZU5vZGVcclxuICAgICAgbm9kZXMgPSB2YWx1ZS5tYXAoaXRlbSA9PiBuZXcgVERTVHJlZU5vZGUoaXRlbSwgbnVsbCwgdGhpcy50ZHNUcmVlU2VydmljZSkpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgbm9kZXMgPSB2YWx1ZS5tYXAoKGl0ZW06IFREU1RyZWVOb2RlKSA9PiB7XHJcbiAgICAgICAgaXRlbS5zZXJ2aWNlID0gdGhpcy50ZHNUcmVlU2VydmljZTtcclxuICAgICAgICByZXR1cm4gaXRlbTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbm9kZXM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXQgYWxsIG5vZGVzKHtAbGluayBURFNUcmVlTm9kZX0pXHJcbiAgICovXHJcbiAgZ2V0VHJlZU5vZGVzKCk6IFREU1RyZWVOb2RlW10ge1xyXG4gICAgcmV0dXJuIHRoaXMudGRzVHJlZVNlcnZpY2Uucm9vdE5vZGVzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0IHtAbGluayBURFNUcmVlTm9kZX0gd2l0aCBrZXlcclxuICAgKi9cclxuICBnZXRUcmVlTm9kZUJ5S2V5KGtleTogc3RyaW5nKTogVERTVHJlZU5vZGUgfCBudWxsIHtcclxuICAgIC8vIGZsYXQgdHJlZSBub2Rlc1xyXG4gICAgY29uc3Qgbm9kZXM6IFREU1RyZWVOb2RlW10gPSBbXTtcclxuICAgIGNvbnN0IGdldE5vZGUgPSAobm9kZTogVERTVHJlZU5vZGUpOiB2b2lkID0+IHtcclxuICAgICAgbm9kZXMucHVzaChub2RlKTtcclxuICAgICAgbm9kZS5nZXRDaGlsZHJlbigpLmZvckVhY2gobiA9PiB7XHJcbiAgICAgICAgZ2V0Tm9kZShuKTtcclxuICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgdGhpcy5nZXRUcmVlTm9kZXMoKS5mb3JFYWNoKG4gPT4ge1xyXG4gICAgICBnZXROb2RlKG4pO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gbm9kZXMuZmluZChuID0+IG4ua2V5ID09PSBrZXkpIHx8IG51bGw7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXQgY2hlY2tlZCBub2RlcyhtZXJnZWQpXHJcbiAgICovXHJcbiAgZ2V0Q2hlY2tlZE5vZGVMaXN0KCk6IFREU1RyZWVOb2RlW10ge1xyXG4gICAgcmV0dXJuIHRoaXMudGRzVHJlZVNlcnZpY2UuZ2V0Q2hlY2tlZE5vZGVMaXN0KCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXQgc2VsZWN0ZWQgbm9kZXNcclxuICAgKi9cclxuICBnZXRTZWxlY3RlZE5vZGVMaXN0KCk6IFREU1RyZWVOb2RlW10ge1xyXG4gICAgcmV0dXJuIHRoaXMudGRzVHJlZVNlcnZpY2UuZ2V0U2VsZWN0ZWROb2RlTGlzdCgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0IGhhbGYgY2hlY2tlZCBub2Rlc1xyXG4gICAqL1xyXG4gIGdldEhhbGZDaGVja2VkTm9kZUxpc3QoKTogVERTVHJlZU5vZGVbXSB7XHJcbiAgICByZXR1cm4gdGhpcy50ZHNUcmVlU2VydmljZS5nZXRIYWxmQ2hlY2tlZE5vZGVMaXN0KCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXQgZXhwYW5kZWQgbm9kZXNcclxuICAgKi9cclxuICBnZXRFeHBhbmRlZE5vZGVMaXN0KCk6IFREU1RyZWVOb2RlW10ge1xyXG4gICAgcmV0dXJuIHRoaXMudGRzVHJlZVNlcnZpY2UuZ2V0RXhwYW5kZWROb2RlTGlzdCgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0IG1hdGNoZWQgbm9kZXMoaWYgc2VhcmNoVmFsdWUgaXMgbm90IG51bGwpXHJcbiAgICovXHJcbiAgZ2V0TWF0Y2hlZE5vZGVMaXN0KCk6IFREU1RyZWVOb2RlW10ge1xyXG4gICAgcmV0dXJuIHRoaXMudGRzVHJlZVNlcnZpY2UuZ2V0TWF0Y2hlZE5vZGVMaXN0KCk7XHJcbiAgfVxyXG59XHJcbiJdfQ==