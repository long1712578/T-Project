export function isCheckDisabled(node) {
    const { isDisabled, isDisableCheckbox } = node;
    return !!(isDisabled || isDisableCheckbox);
}
export function isInArray(needle, haystack) {
    return haystack.length > 0 && haystack.indexOf(needle) > -1;
}
export function getPosition(level, index) {
    return `${level}-${index}`;
}
export function getKey(key, pos) {
    if (key !== null && key !== undefined) {
        return key;
    }
    return pos;
}
/**
 * Flat nest tree data into flatten list. This is used for virtual list render.
 *
 * @param treeNodeList Origin data node list
 * @param expandedKeys
 * need expanded keys, provides `true` means all expanded (used in `rc-tree-select`).
 */
export function flattenTreeData(treeNodeList = [], expandedKeys = []) {
    const expandedKeySet = new Set(expandedKeys === true ? [] : expandedKeys);
    const flattenList = [];
    function dig(list, parent = null) {
        return list.map((treeNode, index) => {
            const pos = getPosition(parent ? parent.pos : '0', index);
            const mergedKey = getKey(treeNode.key, pos);
            treeNode.isStart = [...(parent ? parent.isStart : []), index === 0];
            treeNode.isEnd = [...(parent ? parent.isEnd : []), index === list.length - 1];
            // Add FlattenDataNode into list
            // TODO: only need data here.
            const flattenNode = {
                parent,
                pos,
                children: [],
                data: treeNode,
                isStart: [...(parent ? parent.isStart : []), index === 0],
                isEnd: [...(parent ? parent.isEnd : []), index === list.length - 1]
            };
            flattenList.push(flattenNode);
            // Loop treeNode children
            if (expandedKeys === true || expandedKeySet.has(mergedKey) || treeNode.isExpanded) {
                flattenNode.children = dig(treeNode.children || [], flattenNode);
            }
            else {
                flattenNode.children = [];
            }
            return flattenNode;
        });
    }
    dig(treeNodeList);
    return flattenList;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGRzLXRyZWUtYmFzZS11dGlsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvdGRzLXVpL2NvcmUvdHJlZS90ZHMtdHJlZS1iYXNlLXV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBS0EsTUFBTSxVQUFVLGVBQWUsQ0FBQyxJQUFpQjtJQUMvQyxNQUFNLEVBQUUsVUFBVSxFQUFFLGlCQUFpQixFQUFFLEdBQUcsSUFBSSxDQUFDO0lBQy9DLE9BQU8sQ0FBQyxDQUFDLENBQUMsVUFBVSxJQUFJLGlCQUFpQixDQUFDLENBQUM7QUFDN0MsQ0FBQztBQUVELE1BQU0sVUFBVSxTQUFTLENBQUMsTUFBa0IsRUFBRSxRQUFzQjtJQUNsRSxPQUFPLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDOUQsQ0FBQztBQUVELE1BQU0sVUFBVSxXQUFXLENBQUMsS0FBc0IsRUFBRSxLQUFhO0lBQy9ELE9BQU8sR0FBRyxLQUFLLElBQUksS0FBSyxFQUFFLENBQUM7QUFDN0IsQ0FBQztBQUVELE1BQU0sVUFBVSxNQUFNLENBQUMsR0FBbUIsRUFBRSxHQUFXO0lBQ3JELElBQUksR0FBRyxLQUFLLElBQUksSUFBSSxHQUFHLEtBQUssU0FBUyxFQUFFO1FBQ3JDLE9BQU8sR0FBRyxDQUFDO0tBQ1o7SUFDRCxPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUM7QUFFRDs7Ozs7O0dBTUc7QUFDSCxNQUFNLFVBQVUsZUFBZSxDQUM3QixlQUE4QixFQUFFLEVBQ2hDLGVBQXdDLEVBQUU7SUFFMUMsTUFBTSxjQUFjLEdBQUcsSUFBSSxHQUFHLENBQUMsWUFBWSxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUMxRSxNQUFNLFdBQVcsR0FBa0IsRUFBRSxDQUFDO0lBRXRDLFNBQVMsR0FBRyxDQUFDLElBQW1CLEVBQUUsU0FBNkIsSUFBSTtRQUNqRSxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLEVBQUU7WUFDbEMsTUFBTSxHQUFHLEdBQVcsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQ2xFLE1BQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQzVDLFFBQVEsQ0FBQyxPQUFPLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDcEUsUUFBUSxDQUFDLEtBQUssR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUssS0FBSyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQzlFLGdDQUFnQztZQUNoQyw2QkFBNkI7WUFDN0IsTUFBTSxXQUFXLEdBQWdCO2dCQUMvQixNQUFNO2dCQUNOLEdBQUc7Z0JBQ0gsUUFBUSxFQUFFLEVBQUU7Z0JBQ1osSUFBSSxFQUFFLFFBQVE7Z0JBQ2QsT0FBTyxFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsS0FBSyxLQUFLLENBQUMsQ0FBQztnQkFDekQsS0FBSyxFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsS0FBSyxLQUFLLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO2FBQ3BFLENBQUM7WUFFRixXQUFXLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBRTlCLHlCQUF5QjtZQUN6QixJQUFJLFlBQVksS0FBSyxJQUFJLElBQUksY0FBYyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsSUFBSSxRQUFRLENBQUMsVUFBVSxFQUFFO2dCQUNqRixXQUFXLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUMsUUFBUSxJQUFJLEVBQUUsRUFBRSxXQUFXLENBQUMsQ0FBQzthQUNsRTtpQkFBTTtnQkFDTCxXQUFXLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQzthQUMzQjtZQUVELE9BQU8sV0FBVyxDQUFDO1FBQ3JCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUNsQixPQUFPLFdBQVcsQ0FBQztBQUNyQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiXHJcblxyXG5pbXBvcnQgeyBURFNTYWZlQW55IH0gZnJvbSAndGRzLXVpL3NoYXJlZC91dGlsaXR5JztcclxuaW1wb3J0IHsgRmxhdHRlbk5vZGUsIFREU1RyZWVOb2RlLCBURFNUcmVlTm9kZUtleSB9IGZyb20gJy4vdGRzLXRyZWUtYmFzZS1ub2RlJztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc0NoZWNrRGlzYWJsZWQobm9kZTogVERTVHJlZU5vZGUpOiBib29sZWFuIHtcclxuICBjb25zdCB7IGlzRGlzYWJsZWQsIGlzRGlzYWJsZUNoZWNrYm94IH0gPSBub2RlO1xyXG4gIHJldHVybiAhIShpc0Rpc2FibGVkIHx8IGlzRGlzYWJsZUNoZWNrYm94KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzSW5BcnJheShuZWVkbGU6IFREU1NhZmVBbnksIGhheXN0YWNrOiBURFNTYWZlQW55W10pOiBib29sZWFuIHtcclxuICByZXR1cm4gaGF5c3RhY2subGVuZ3RoID4gMCAmJiBoYXlzdGFjay5pbmRleE9mKG5lZWRsZSkgPiAtMTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFBvc2l0aW9uKGxldmVsOiBzdHJpbmcgfCBudW1iZXIsIGluZGV4OiBudW1iZXIpOiBzdHJpbmcge1xyXG4gIHJldHVybiBgJHtsZXZlbH0tJHtpbmRleH1gO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0S2V5KGtleTogVERTVHJlZU5vZGVLZXksIHBvczogc3RyaW5nKTogVERTVHJlZU5vZGVLZXkge1xyXG4gIGlmIChrZXkgIT09IG51bGwgJiYga2V5ICE9PSB1bmRlZmluZWQpIHtcclxuICAgIHJldHVybiBrZXk7XHJcbiAgfVxyXG4gIHJldHVybiBwb3M7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBGbGF0IG5lc3QgdHJlZSBkYXRhIGludG8gZmxhdHRlbiBsaXN0LiBUaGlzIGlzIHVzZWQgZm9yIHZpcnR1YWwgbGlzdCByZW5kZXIuXHJcbiAqXHJcbiAqIEBwYXJhbSB0cmVlTm9kZUxpc3QgT3JpZ2luIGRhdGEgbm9kZSBsaXN0XHJcbiAqIEBwYXJhbSBleHBhbmRlZEtleXNcclxuICogbmVlZCBleHBhbmRlZCBrZXlzLCBwcm92aWRlcyBgdHJ1ZWAgbWVhbnMgYWxsIGV4cGFuZGVkICh1c2VkIGluIGByYy10cmVlLXNlbGVjdGApLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGZsYXR0ZW5UcmVlRGF0YShcclxuICB0cmVlTm9kZUxpc3Q6IFREU1RyZWVOb2RlW10gPSBbXSxcclxuICBleHBhbmRlZEtleXM6IFREU1RyZWVOb2RlS2V5W10gfCB0cnVlID0gW11cclxuKTogRmxhdHRlbk5vZGVbXSB7XHJcbiAgY29uc3QgZXhwYW5kZWRLZXlTZXQgPSBuZXcgU2V0KGV4cGFuZGVkS2V5cyA9PT0gdHJ1ZSA/IFtdIDogZXhwYW5kZWRLZXlzKTtcclxuICBjb25zdCBmbGF0dGVuTGlzdDogRmxhdHRlbk5vZGVbXSA9IFtdO1xyXG5cclxuICBmdW5jdGlvbiBkaWcobGlzdDogVERTVHJlZU5vZGVbXSwgcGFyZW50OiBGbGF0dGVuTm9kZSB8IG51bGwgPSBudWxsKTogRmxhdHRlbk5vZGVbXSB7XHJcbiAgICByZXR1cm4gbGlzdC5tYXAoKHRyZWVOb2RlLCBpbmRleCkgPT4ge1xyXG4gICAgICBjb25zdCBwb3M6IHN0cmluZyA9IGdldFBvc2l0aW9uKHBhcmVudCA/IHBhcmVudC5wb3MgOiAnMCcsIGluZGV4KTtcclxuICAgICAgY29uc3QgbWVyZ2VkS2V5ID0gZ2V0S2V5KHRyZWVOb2RlLmtleSwgcG9zKTtcclxuICAgICAgdHJlZU5vZGUuaXNTdGFydCA9IFsuLi4ocGFyZW50ID8gcGFyZW50LmlzU3RhcnQgOiBbXSksIGluZGV4ID09PSAwXTtcclxuICAgICAgdHJlZU5vZGUuaXNFbmQgPSBbLi4uKHBhcmVudCA/IHBhcmVudC5pc0VuZCA6IFtdKSwgaW5kZXggPT09IGxpc3QubGVuZ3RoIC0gMV07XHJcbiAgICAgIC8vIEFkZCBGbGF0dGVuRGF0YU5vZGUgaW50byBsaXN0XHJcbiAgICAgIC8vIFRPRE86IG9ubHkgbmVlZCBkYXRhIGhlcmUuXHJcbiAgICAgIGNvbnN0IGZsYXR0ZW5Ob2RlOiBGbGF0dGVuTm9kZSA9IHtcclxuICAgICAgICBwYXJlbnQsXHJcbiAgICAgICAgcG9zLFxyXG4gICAgICAgIGNoaWxkcmVuOiBbXSxcclxuICAgICAgICBkYXRhOiB0cmVlTm9kZSxcclxuICAgICAgICBpc1N0YXJ0OiBbLi4uKHBhcmVudCA/IHBhcmVudC5pc1N0YXJ0IDogW10pLCBpbmRleCA9PT0gMF0sXHJcbiAgICAgICAgaXNFbmQ6IFsuLi4ocGFyZW50ID8gcGFyZW50LmlzRW5kIDogW10pLCBpbmRleCA9PT0gbGlzdC5sZW5ndGggLSAxXVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgZmxhdHRlbkxpc3QucHVzaChmbGF0dGVuTm9kZSk7XHJcblxyXG4gICAgICAvLyBMb29wIHRyZWVOb2RlIGNoaWxkcmVuXHJcbiAgICAgIGlmIChleHBhbmRlZEtleXMgPT09IHRydWUgfHwgZXhwYW5kZWRLZXlTZXQuaGFzKG1lcmdlZEtleSkgfHwgdHJlZU5vZGUuaXNFeHBhbmRlZCkge1xyXG4gICAgICAgIGZsYXR0ZW5Ob2RlLmNoaWxkcmVuID0gZGlnKHRyZWVOb2RlLmNoaWxkcmVuIHx8IFtdLCBmbGF0dGVuTm9kZSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZmxhdHRlbk5vZGUuY2hpbGRyZW4gPSBbXTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIGZsYXR0ZW5Ob2RlO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBkaWcodHJlZU5vZGVMaXN0KTtcclxuICByZXR1cm4gZmxhdHRlbkxpc3Q7XHJcbn1cclxuIl19