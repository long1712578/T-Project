import { Injectable } from "@angular/core";
import { distinctUntilChanged, map, startWith } from "rxjs/operators";
import * as i0 from "@angular/core";
import * as i1 from "./resize";
import * as i2 from "@angular/cdk/layout";
export var TDSBreakpointEnum;
(function (TDSBreakpointEnum) {
    TDSBreakpointEnum["xxl"] = "xxl";
    TDSBreakpointEnum["xl"] = "xl";
    TDSBreakpointEnum["lg"] = "lg";
    TDSBreakpointEnum["md"] = "md";
    TDSBreakpointEnum["sm"] = "sm";
    TDSBreakpointEnum["xs"] = "xs";
})(TDSBreakpointEnum || (TDSBreakpointEnum = {}));
export const gridResponsiveMap = {
    xs: '(max-width: 575px)',
    sm: '(min-width: 576px)',
    md: '(min-width: 768px)',
    lg: '(min-width: 992px)',
    xl: '(min-width: 1200px)',
    xxl: '(min-width: 1600px)'
};
export const siderResponsiveMap = {
    xs: '(max-width: 479.98px)',
    sm: '(max-width: 575.98px)',
    md: '(max-width: 767.98px)',
    lg: '(max-width: 991.98px)',
    xl: '(max-width: 1199.98px)',
    xxl: '(max-width: 1599.98px)'
};
export class TDSBreakpointService {
    constructor(resizeService, mediaMatcher) {
        this.resizeService = resizeService;
        this.mediaMatcher = mediaMatcher;
        this.resizeService.subscribe().subscribe(() => { });
    }
    subscribe(breakpointMap, fullMap) {
        if (fullMap) {
            const get = () => this.matchMedia(breakpointMap, true);
            return this.resizeService.subscribe().pipe(map(get), startWith(get()), distinctUntilChanged((x, y) => x[0] === y[0]), map(x => x[1]));
        }
        else {
            const get = () => this.matchMedia(breakpointMap);
            return this.resizeService.subscribe().pipe(map(get), startWith(get()), distinctUntilChanged());
        }
    }
    matchMedia(breakpointMap, fullMap) {
        let bp = TDSBreakpointEnum.md;
        const breakpointBooleanMap = {};
        Object.keys(breakpointMap).map(breakpoint => {
            const castBP = breakpoint;
            const matched = this.mediaMatcher.matchMedia(gridResponsiveMap[castBP]).matches;
            breakpointBooleanMap[breakpoint] = matched;
            if (matched) {
                bp = castBP;
            }
        });
        if (fullMap) {
            return [bp, breakpointBooleanMap];
        }
        else {
            return bp;
        }
    }
}
TDSBreakpointService.ɵfac = function TDSBreakpointService_Factory(t) { return new (t || TDSBreakpointService)(i0.ɵɵinject(i1.TDSResizeService), i0.ɵɵinject(i2.MediaMatcher)); };
TDSBreakpointService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: TDSBreakpointService, factory: TDSBreakpointService.ɵfac, providedIn: 'root' });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSBreakpointService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: i1.TDSResizeService }, { type: i2.MediaMatcher }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJlYWtwb2ludC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3Rkcy11aS9jb3JlL3NlcnZpY2VzL2JyZWFrcG9pbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7O0FBSXRFLE1BQU0sQ0FBTixJQUFZLGlCQU9YO0FBUEQsV0FBWSxpQkFBaUI7SUFDM0IsZ0NBQVcsQ0FBQTtJQUNYLDhCQUFTLENBQUE7SUFDVCw4QkFBUyxDQUFBO0lBQ1QsOEJBQVMsQ0FBQTtJQUNULDhCQUFTLENBQUE7SUFDVCw4QkFBUyxDQUFBO0FBQ1gsQ0FBQyxFQVBXLGlCQUFpQixLQUFqQixpQkFBaUIsUUFPNUI7QUFNRCxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBa0I7SUFDOUMsRUFBRSxFQUFFLG9CQUFvQjtJQUN4QixFQUFFLEVBQUUsb0JBQW9CO0lBQ3hCLEVBQUUsRUFBRSxvQkFBb0I7SUFDeEIsRUFBRSxFQUFFLG9CQUFvQjtJQUN4QixFQUFFLEVBQUUscUJBQXFCO0lBQ3pCLEdBQUcsRUFBRSxxQkFBcUI7Q0FDM0IsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFrQjtJQUMvQyxFQUFFLEVBQUUsdUJBQXVCO0lBQzNCLEVBQUUsRUFBRSx1QkFBdUI7SUFDM0IsRUFBRSxFQUFFLHVCQUF1QjtJQUMzQixFQUFFLEVBQUUsdUJBQXVCO0lBQzNCLEVBQUUsRUFBRSx3QkFBd0I7SUFDNUIsR0FBRyxFQUFFLHdCQUF3QjtDQUM5QixDQUFDO0FBS0YsTUFBTSxPQUFPLG9CQUFvQjtJQUMvQixZQUFvQixhQUErQixFQUFVLFlBQTBCO1FBQW5FLGtCQUFhLEdBQWIsYUFBYSxDQUFrQjtRQUFVLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBQ3JGLElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxFQUFFLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxHQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFJRCxTQUFTLENBQUMsYUFBNEIsRUFBRSxPQUFjO1FBQ3BELElBQUksT0FBTyxFQUFFO1lBQ1gsTUFBTSxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDdkQsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsRUFBRSxDQUFDLElBQUksQ0FDeEMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUNSLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUNoQixvQkFBb0IsQ0FDbEIsQ0FBQyxDQUE0QyxFQUFFLENBQTRDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQzlHLEVBQ0QsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQ2YsQ0FBQztTQUNIO2FBQU07WUFDTCxNQUFNLEdBQUcsR0FBRyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQ2pELE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLG9CQUFvQixFQUFFLENBQUMsQ0FBQztTQUNoRztJQUNILENBQUM7SUFJTyxVQUFVLENBQ2hCLGFBQTRCLEVBQzVCLE9BQWM7UUFFZCxJQUFJLEVBQUUsR0FBRyxpQkFBaUIsQ0FBQyxFQUFFLENBQUM7UUFFOUIsTUFBTSxvQkFBb0IsR0FBa0MsRUFBRSxDQUFDO1FBRS9ELE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQzFDLE1BQU0sTUFBTSxHQUFHLFVBQStCLENBQUM7WUFDL0MsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7WUFFaEYsb0JBQW9CLENBQUMsVUFBK0IsQ0FBQyxHQUFHLE9BQU8sQ0FBQztZQUVoRSxJQUFJLE9BQU8sRUFBRTtnQkFDWCxFQUFFLEdBQUcsTUFBTSxDQUFDO2FBQ2I7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUVILElBQUksT0FBTyxFQUFFO1lBQ1gsT0FBTyxDQUFDLEVBQUUsRUFBRSxvQkFBNEMsQ0FBQyxDQUFDO1NBQzNEO2FBQU07WUFDTCxPQUFPLEVBQUUsQ0FBQztTQUNYO0lBQ0gsQ0FBQzs7d0ZBbERVLG9CQUFvQjswRUFBcEIsb0JBQW9CLFdBQXBCLG9CQUFvQixtQkFGbkIsTUFBTTt1RkFFUCxvQkFBb0I7Y0FIaEMsVUFBVTtlQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tIFwicnhqc1wiO1xyXG5pbXBvcnQgeyBkaXN0aW5jdFVudGlsQ2hhbmdlZCwgbWFwLCBzdGFydFdpdGggfSBmcm9tIFwicnhqcy9vcGVyYXRvcnNcIjtcclxuaW1wb3J0IHsgVERTUmVzaXplU2VydmljZSB9IGZyb20gXCIuL3Jlc2l6ZVwiO1xyXG5pbXBvcnQgeyBNZWRpYU1hdGNoZXIgfSBmcm9tICdAYW5ndWxhci9jZGsvbGF5b3V0JztcclxuXHJcbmV4cG9ydCBlbnVtIFREU0JyZWFrcG9pbnRFbnVtIHtcclxuICB4eGwgPSAneHhsJyxcclxuICB4bCA9ICd4bCcsXHJcbiAgbGcgPSAnbGcnLFxyXG4gIG1kID0gJ21kJyxcclxuICBzbSA9ICdzbScsXHJcbiAgeHMgPSAneHMnXHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIEJyZWFrcG9pbnRNYXAgPSB7IFtrZXkgaW4gVERTQnJlYWtwb2ludEVudW1dOiBzdHJpbmcgfTtcclxuZXhwb3J0IHR5cGUgQnJlYWtwb2ludEJvb2xlYW5NYXAgPSB7IFtrZXkgaW4gVERTQnJlYWtwb2ludEVudW1dOiBib29sZWFuIH07XHJcbmV4cG9ydCB0eXBlIFREU0JyZWFrcG9pbnRLZXkgPSBrZXlvZiB0eXBlb2YgVERTQnJlYWtwb2ludEVudW07XHJcblxyXG5leHBvcnQgY29uc3QgZ3JpZFJlc3BvbnNpdmVNYXA6IEJyZWFrcG9pbnRNYXAgPSB7XHJcbiAgeHM6ICcobWF4LXdpZHRoOiA1NzVweCknLFxyXG4gIHNtOiAnKG1pbi13aWR0aDogNTc2cHgpJyxcclxuICBtZDogJyhtaW4td2lkdGg6IDc2OHB4KScsXHJcbiAgbGc6ICcobWluLXdpZHRoOiA5OTJweCknLFxyXG4gIHhsOiAnKG1pbi13aWR0aDogMTIwMHB4KScsXHJcbiAgeHhsOiAnKG1pbi13aWR0aDogMTYwMHB4KSdcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBzaWRlclJlc3BvbnNpdmVNYXA6IEJyZWFrcG9pbnRNYXAgPSB7XHJcbiAgeHM6ICcobWF4LXdpZHRoOiA0NzkuOThweCknLFxyXG4gIHNtOiAnKG1heC13aWR0aDogNTc1Ljk4cHgpJyxcclxuICBtZDogJyhtYXgtd2lkdGg6IDc2Ny45OHB4KScsXHJcbiAgbGc6ICcobWF4LXdpZHRoOiA5OTEuOThweCknLFxyXG4gIHhsOiAnKG1heC13aWR0aDogMTE5OS45OHB4KScsXHJcbiAgeHhsOiAnKG1heC13aWR0aDogMTU5OS45OHB4KSdcclxufTtcclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICBwcm92aWRlZEluOiAncm9vdCdcclxufSlcclxuZXhwb3J0IGNsYXNzIFREU0JyZWFrcG9pbnRTZXJ2aWNlIHtcclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlc2l6ZVNlcnZpY2U6IFREU1Jlc2l6ZVNlcnZpY2UsIHByaXZhdGUgbWVkaWFNYXRjaGVyOiBNZWRpYU1hdGNoZXIpIHtcclxuICAgIHRoaXMucmVzaXplU2VydmljZS5zdWJzY3JpYmUoKS5zdWJzY3JpYmUoKCkgPT4ge30pO1xyXG4gIH1cclxuXHJcbiAgc3Vic2NyaWJlKGJyZWFrcG9pbnRNYXA6IEJyZWFrcG9pbnRNYXApOiBPYnNlcnZhYmxlPFREU0JyZWFrcG9pbnRFbnVtPjtcclxuICBzdWJzY3JpYmUoYnJlYWtwb2ludE1hcDogQnJlYWtwb2ludE1hcCwgZnVsbE1hcDogdHJ1ZSk6IE9ic2VydmFibGU8QnJlYWtwb2ludEJvb2xlYW5NYXA+O1xyXG4gIHN1YnNjcmliZShicmVha3BvaW50TWFwOiBCcmVha3BvaW50TWFwLCBmdWxsTWFwPzogdHJ1ZSk6IE9ic2VydmFibGU8VERTQnJlYWtwb2ludEVudW0gfCBCcmVha3BvaW50Qm9vbGVhbk1hcD4ge1xyXG4gICAgaWYgKGZ1bGxNYXApIHtcclxuICAgICAgY29uc3QgZ2V0ID0gKCkgPT4gdGhpcy5tYXRjaE1lZGlhKGJyZWFrcG9pbnRNYXAsIHRydWUpO1xyXG4gICAgICByZXR1cm4gdGhpcy5yZXNpemVTZXJ2aWNlLnN1YnNjcmliZSgpLnBpcGUoXHJcbiAgICAgICAgbWFwKGdldCksXHJcbiAgICAgICAgc3RhcnRXaXRoKGdldCgpKSxcclxuICAgICAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZChcclxuICAgICAgICAgICh4OiBbVERTQnJlYWtwb2ludEVudW0sIEJyZWFrcG9pbnRCb29sZWFuTWFwXSwgeTogW1REU0JyZWFrcG9pbnRFbnVtLCBCcmVha3BvaW50Qm9vbGVhbk1hcF0pID0+IHhbMF0gPT09IHlbMF1cclxuICAgICAgICApLFxyXG4gICAgICAgIG1hcCh4ID0+IHhbMV0pXHJcbiAgICAgICk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zdCBnZXQgPSAoKSA9PiB0aGlzLm1hdGNoTWVkaWEoYnJlYWtwb2ludE1hcCk7XHJcbiAgICAgIHJldHVybiB0aGlzLnJlc2l6ZVNlcnZpY2Uuc3Vic2NyaWJlKCkucGlwZShtYXAoZ2V0KSwgc3RhcnRXaXRoKGdldCgpKSwgZGlzdGluY3RVbnRpbENoYW5nZWQoKSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIG1hdGNoTWVkaWEoYnJlYWtwb2ludE1hcDogQnJlYWtwb2ludE1hcCk6IFREU0JyZWFrcG9pbnRFbnVtO1xyXG4gIHByaXZhdGUgbWF0Y2hNZWRpYShicmVha3BvaW50TWFwOiBCcmVha3BvaW50TWFwLCBmdWxsTWFwOiB0cnVlKTogW1REU0JyZWFrcG9pbnRFbnVtLCBCcmVha3BvaW50Qm9vbGVhbk1hcF07XHJcbiAgcHJpdmF0ZSBtYXRjaE1lZGlhKFxyXG4gICAgYnJlYWtwb2ludE1hcDogQnJlYWtwb2ludE1hcCxcclxuICAgIGZ1bGxNYXA/OiB0cnVlXHJcbiAgKTogVERTQnJlYWtwb2ludEVudW0gfCBbVERTQnJlYWtwb2ludEVudW0sIEJyZWFrcG9pbnRCb29sZWFuTWFwXSB7XHJcbiAgICBsZXQgYnAgPSBURFNCcmVha3BvaW50RW51bS5tZDtcclxuXHJcbiAgICBjb25zdCBicmVha3BvaW50Qm9vbGVhbk1hcDogUGFydGlhbDxCcmVha3BvaW50Qm9vbGVhbk1hcD4gPSB7fTtcclxuXHJcbiAgICBPYmplY3Qua2V5cyhicmVha3BvaW50TWFwKS5tYXAoYnJlYWtwb2ludCA9PiB7XHJcbiAgICAgIGNvbnN0IGNhc3RCUCA9IGJyZWFrcG9pbnQgYXMgVERTQnJlYWtwb2ludEVudW07XHJcbiAgICAgIGNvbnN0IG1hdGNoZWQgPSB0aGlzLm1lZGlhTWF0Y2hlci5tYXRjaE1lZGlhKGdyaWRSZXNwb25zaXZlTWFwW2Nhc3RCUF0pLm1hdGNoZXM7XHJcblxyXG4gICAgICBicmVha3BvaW50Qm9vbGVhbk1hcFticmVha3BvaW50IGFzIFREU0JyZWFrcG9pbnRFbnVtXSA9IG1hdGNoZWQ7XHJcblxyXG4gICAgICBpZiAobWF0Y2hlZCkge1xyXG4gICAgICAgIGJwID0gY2FzdEJQO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBpZiAoZnVsbE1hcCkge1xyXG4gICAgICByZXR1cm4gW2JwLCBicmVha3BvaW50Qm9vbGVhbk1hcCBhcyBCcmVha3BvaW50Qm9vbGVhbk1hcF07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gYnA7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19