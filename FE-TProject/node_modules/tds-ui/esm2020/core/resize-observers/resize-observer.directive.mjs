import { __decorate } from "tslib";
import { Directive, EventEmitter, Input, Output } from '@angular/core';
import { InputBoolean } from 'tds-ui/shared/utility';
import * as i0 from "@angular/core";
import * as i1 from "./resize-observer.service";
export class TDSResizeObserverDirective {
    constructor(resizeObserver, elementRef) {
        this.resizeObserver = resizeObserver;
        this.elementRef = elementRef;
        this.resizeObserve = new EventEmitter();
        this.resizeObserverDisabled = false;
        this.currentSubscription = null;
    }
    subscribe() {
        this.unsubscribe();
        this.currentSubscription = this.resizeObserver.observe(this.elementRef).subscribe(this.resizeObserve);
    }
    unsubscribe() {
        this.currentSubscription?.unsubscribe();
    }
    ngAfterContentInit() {
        if (!this.currentSubscription && !this.resizeObserverDisabled) {
            this.subscribe();
        }
    }
    ngOnDestroy() {
        this.unsubscribe();
    }
    ngOnChanges(changes) {
        const { resizeObserve } = changes;
        if (resizeObserve) {
            if (this.resizeObserverDisabled) {
                this.unsubscribe();
            }
            else {
                this.subscribe();
            }
        }
    }
}
TDSResizeObserverDirective.ɵfac = function TDSResizeObserverDirective_Factory(t) { return new (t || TDSResizeObserverDirective)(i0.ɵɵdirectiveInject(i1.TDSResizeObserver), i0.ɵɵdirectiveInject(i0.ElementRef)); };
TDSResizeObserverDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: TDSResizeObserverDirective, selectors: [["", "resizeObserver", ""]], inputs: { resizeObserverDisabled: "resizeObserverDisabled" }, outputs: { resizeObserve: "resizeObserve" }, features: [i0.ɵɵNgOnChangesFeature] });
__decorate([
    InputBoolean()
], TDSResizeObserverDirective.prototype, "resizeObserverDisabled", void 0);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSResizeObserverDirective, [{
        type: Directive,
        args: [{
                selector: '[resizeObserver]'
            }]
    }], function () { return [{ type: i1.TDSResizeObserver }, { type: i0.ElementRef }]; }, { resizeObserve: [{
            type: Output
        }], resizeObserverDisabled: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzaXplLW9ic2VydmVyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3Rkcy11aS9jb3JlL3Jlc2l6ZS1vYnNlcnZlcnMvcmVzaXplLW9ic2VydmVyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBR0EsT0FBTyxFQUVMLFNBQVMsRUFFVCxZQUFZLEVBQ1osS0FBSyxFQUdMLE1BQU0sRUFFUCxNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7OztBQU9yRCxNQUFNLE9BQU8sMEJBQTBCO0lBZXJDLFlBQW9CLGNBQWlDLEVBQVUsVUFBbUM7UUFBOUUsbUJBQWMsR0FBZCxjQUFjLENBQW1CO1FBQVUsZUFBVSxHQUFWLFVBQVUsQ0FBeUI7UUFiL0Usa0JBQWEsR0FBRyxJQUFJLFlBQVksRUFBeUIsQ0FBQztRQUNwRCwyQkFBc0IsR0FBRyxLQUFLLENBQUM7UUFDaEQsd0JBQW1CLEdBQXdCLElBQUksQ0FBQztJQVc2QyxDQUFDO0lBVDlGLFNBQVM7UUFDZixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDbkIsSUFBSSxDQUFDLG1CQUFtQixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ3hHLENBQUM7SUFFTyxXQUFXO1FBQ2pCLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxXQUFXLEVBQUUsQ0FBQztJQUMxQyxDQUFDO0lBSUQsa0JBQWtCO1FBQ2hCLElBQUksQ0FBQyxJQUFJLENBQUMsbUJBQW1CLElBQUksQ0FBQyxJQUFJLENBQUMsc0JBQXNCLEVBQUU7WUFDN0QsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1NBQ2xCO0lBQ0gsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDckIsQ0FBQztJQUVELFdBQVcsQ0FBQyxPQUFzQjtRQUNoQyxNQUFNLEVBQUUsYUFBYSxFQUFFLEdBQUcsT0FBTyxDQUFDO1FBQ2xDLElBQUksYUFBYSxFQUFFO1lBQ2pCLElBQUksSUFBSSxDQUFDLHNCQUFzQixFQUFFO2dCQUMvQixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7YUFDcEI7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO2FBQ2xCO1NBQ0Y7SUFDSCxDQUFDOztvR0FwQ1UsMEJBQTBCOzZFQUExQiwwQkFBMEI7QUFHWjtJQUFmLFlBQVksRUFBRTswRUFBZ0M7dUZBSDdDLDBCQUEwQjtjQUh0QyxTQUFTO2VBQUM7Z0JBQ1QsUUFBUSxFQUFFLGtCQUFrQjthQUM3Qjs2RkFHb0IsYUFBYTtrQkFBL0IsTUFBTTtZQUNrQixzQkFBc0I7a0JBQTlDLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuXHJcbmltcG9ydCB7IEJvb2xlYW5JbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9jb2VyY2lvbic7XHJcbmltcG9ydCB7XHJcbiAgQWZ0ZXJDb250ZW50SW5pdCxcclxuICBEaXJlY3RpdmUsXHJcbiAgRWxlbWVudFJlZixcclxuICBFdmVudEVtaXR0ZXIsXHJcbiAgSW5wdXQsXHJcbiAgT25DaGFuZ2VzLFxyXG4gIE9uRGVzdHJveSxcclxuICBPdXRwdXQsXHJcbiAgU2ltcGxlQ2hhbmdlc1xyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgSW5wdXRCb29sZWFuIH0gZnJvbSAndGRzLXVpL3NoYXJlZC91dGlsaXR5JztcclxuXHJcbmltcG9ydCB7IFREU1Jlc2l6ZU9ic2VydmVyIH0gZnJvbSAnLi9yZXNpemUtb2JzZXJ2ZXIuc2VydmljZSc7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ1tyZXNpemVPYnNlcnZlcl0nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBURFNSZXNpemVPYnNlcnZlckRpcmVjdGl2ZSBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQsIE9uRGVzdHJveSwgT25DaGFuZ2VzIHtcclxuICBzdGF0aWMgbmdBY2NlcHRJbnB1dFR5cGVfcmVzaXplT2JzZXJ2ZXJEaXNhYmxlZDogQm9vbGVhbklucHV0O1xyXG4gIEBPdXRwdXQoKSByZWFkb25seSByZXNpemVPYnNlcnZlID0gbmV3IEV2ZW50RW1pdHRlcjxSZXNpemVPYnNlcnZlckVudHJ5W10+KCk7XHJcbiAgQElucHV0KCkgQElucHV0Qm9vbGVhbigpIHJlc2l6ZU9ic2VydmVyRGlzYWJsZWQgPSBmYWxzZTtcclxuICBwcml2YXRlIGN1cnJlbnRTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbiB8IG51bGwgPSBudWxsO1xyXG5cclxuICBwcml2YXRlIHN1YnNjcmliZSgpOiB2b2lkIHtcclxuICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcclxuICAgIHRoaXMuY3VycmVudFN1YnNjcmlwdGlvbiA9IHRoaXMucmVzaXplT2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLmVsZW1lbnRSZWYpLnN1YnNjcmliZSh0aGlzLnJlc2l6ZU9ic2VydmUpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSB1bnN1YnNjcmliZSgpOiB2b2lkIHtcclxuICAgIHRoaXMuY3VycmVudFN1YnNjcmlwdGlvbj8udW5zdWJzY3JpYmUoKTtcclxuICB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVzaXplT2JzZXJ2ZXI6IFREU1Jlc2l6ZU9ic2VydmVyLCBwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+KSB7fVxyXG5cclxuICBuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZCB7XHJcbiAgICBpZiAoIXRoaXMuY3VycmVudFN1YnNjcmlwdGlvbiAmJiAhdGhpcy5yZXNpemVPYnNlcnZlckRpc2FibGVkKSB7XHJcbiAgICAgIHRoaXMuc3Vic2NyaWJlKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcclxuICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcclxuICB9XHJcblxyXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcclxuICAgIGNvbnN0IHsgcmVzaXplT2JzZXJ2ZSB9ID0gY2hhbmdlcztcclxuICAgIGlmIChyZXNpemVPYnNlcnZlKSB7XHJcbiAgICAgIGlmICh0aGlzLnJlc2l6ZU9ic2VydmVyRGlzYWJsZWQpIHtcclxuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5zdWJzY3JpYmUoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=