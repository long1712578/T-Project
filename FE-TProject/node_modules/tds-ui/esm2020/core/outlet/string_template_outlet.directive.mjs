import { Directive, Input, TemplateRef } from '@angular/core';
import * as i0 from "@angular/core";
export class TDSStringTemplateOutletDirective {
    constructor(viewContainer, templateRef) {
        this.viewContainer = viewContainer;
        this.templateRef = templateRef;
        this.embeddedViewRef = null;
        this.context = new TDSStringTemplateOutletContext();
        this.tdsStringTemplateOutletContext = null;
        this.tdsStringTemplateOutlet = null;
    }
    static ngTemplateContextGuard(_dir, _ctx) {
        return true;
    }
    recreateView() {
        this.viewContainer.clear();
        const isTemplateRef = this.tdsStringTemplateOutlet instanceof TemplateRef;
        const templateRef = (isTemplateRef ? this.tdsStringTemplateOutlet : this.templateRef);
        this.embeddedViewRef = this.viewContainer.createEmbeddedView(templateRef, isTemplateRef ? this.tdsStringTemplateOutletContext : this.context);
    }
    updateContext() {
        const isTemplateRef = this.tdsStringTemplateOutlet instanceof TemplateRef;
        const newCtx = isTemplateRef ? this.tdsStringTemplateOutletContext : this.context;
        const oldCtx = this.embeddedViewRef.context;
        if (newCtx) {
            for (const propName of Object.keys(newCtx)) {
                oldCtx[propName] = newCtx[propName];
            }
        }
    }
    ngOnChanges(changes) {
        const { tdsStringTemplateOutletContext, tdsStringTemplateOutlet } = changes;
        const shouldRecreateView = () => {
            let shouldOutletRecreate = false;
            if (tdsStringTemplateOutlet) {
                if (tdsStringTemplateOutlet.firstChange) {
                    shouldOutletRecreate = true;
                }
                else {
                    const isPreviousOutletTemplate = tdsStringTemplateOutlet.previousValue instanceof TemplateRef;
                    const isCurrentOutletTemplate = tdsStringTemplateOutlet.currentValue instanceof TemplateRef;
                    shouldOutletRecreate = isPreviousOutletTemplate || isCurrentOutletTemplate;
                }
            }
            const hasContextShapeChanged = (ctxChange) => {
                const prevCtxKeys = Object.keys(ctxChange.previousValue || {});
                const currCtxKeys = Object.keys(ctxChange.currentValue || {});
                if (prevCtxKeys.length === currCtxKeys.length) {
                    for (const propName of currCtxKeys) {
                        if (prevCtxKeys.indexOf(propName) === -1) {
                            return true;
                        }
                    }
                    return false;
                }
                else {
                    return true;
                }
            };
            const shouldContextRecreate = tdsStringTemplateOutletContext && hasContextShapeChanged(tdsStringTemplateOutletContext);
            return shouldContextRecreate || shouldOutletRecreate;
        };
        if (tdsStringTemplateOutlet) {
            this.context.$implicit = tdsStringTemplateOutlet.currentValue;
        }
        const recreateView = shouldRecreateView();
        if (recreateView) {
            /** recreate view when context shape or outlet change **/
            this.recreateView();
        }
        else {
            /** update context **/
            this.updateContext();
        }
    }
}
TDSStringTemplateOutletDirective.ɵfac = function TDSStringTemplateOutletDirective_Factory(t) { return new (t || TDSStringTemplateOutletDirective)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.TemplateRef)); };
TDSStringTemplateOutletDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: TDSStringTemplateOutletDirective, selectors: [["", "tdsStringTemplateOutlet", ""]], inputs: { tdsStringTemplateOutletContext: "tdsStringTemplateOutletContext", tdsStringTemplateOutlet: "tdsStringTemplateOutlet" }, exportAs: ["tdsStringTemplateOutlet"], features: [i0.ɵɵNgOnChangesFeature] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSStringTemplateOutletDirective, [{
        type: Directive,
        args: [{
                selector: '[tdsStringTemplateOutlet]',
                exportAs: 'tdsStringTemplateOutlet'
            }]
    }], function () { return [{ type: i0.ViewContainerRef }, { type: i0.TemplateRef }]; }, { tdsStringTemplateOutletContext: [{
            type: Input
        }], tdsStringTemplateOutlet: [{
            type: Input
        }] }); })();
export class TDSStringTemplateOutletContext {
}
//# sourceMappingURL=data:application/json;base64,