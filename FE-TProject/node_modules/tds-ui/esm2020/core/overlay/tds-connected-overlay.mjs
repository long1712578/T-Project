import { __decorate } from "tslib";
import { CdkOverlayOrigin } from '@angular/cdk/overlay';
import { Directive, ElementRef, Input } from '@angular/core';
import { takeUntil } from 'rxjs/operators';
import { TDSDestroyService } from 'tds-ui/core/services';
import { InputBoolean } from 'tds-ui/shared/utility';
import { getPlacementName } from './overlay-position';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/overlay";
import * as i2 from "tds-ui/core/services";
export class TDSConnectedOverlayDirective {
    constructor(cdkConnectedOverlay, TDSDestroyService) {
        this.cdkConnectedOverlay = cdkConnectedOverlay;
        this.TDSDestroyService = TDSDestroyService;
        this.tdsArrowPointAtCenter = false;
        this.cdkConnectedOverlay.backdropClass = 'nz-overlay-transparent-backdrop';
        this.cdkConnectedOverlay.positionChange
            .pipe(takeUntil(this.TDSDestroyService))
            .subscribe((position) => {
            if (this.tdsArrowPointAtCenter) {
                this.updateArrowPosition(position);
            }
        });
    }
    updateArrowPosition(position) {
        const originRect = this.getOriginRect();
        const placement = getPlacementName(position);
        let offsetX = 0;
        let offsetY = 0;
        if (placement === 'topLeft' || placement === 'bottomLeft') {
            offsetX = originRect.width / 2 - 14;
        }
        else if (placement === 'topRight' || placement === 'bottomRight') {
            offsetX = -(originRect.width / 2 - 14);
        }
        else if (placement === 'leftTop' || placement === 'rightTop') {
            offsetY = originRect.height / 2 - 10;
        }
        else if (placement === 'leftBottom' || placement === 'rightBottom') {
            offsetY = -(originRect.height / 2 - 10);
        }
        if (this.cdkConnectedOverlay.offsetX !== offsetX || this.cdkConnectedOverlay.offsetY !== offsetY) {
            this.cdkConnectedOverlay.offsetY = offsetY;
            this.cdkConnectedOverlay.offsetX = offsetX;
            this.cdkConnectedOverlay.overlayRef.updatePosition();
        }
    }
    getFlexibleConnectedPositionStrategyOrigin() {
        if (this.cdkConnectedOverlay.origin instanceof CdkOverlayOrigin) {
            return this.cdkConnectedOverlay.origin.elementRef;
        }
        else {
            return this.cdkConnectedOverlay.origin;
        }
    }
    getOriginRect() {
        const origin = this.getFlexibleConnectedPositionStrategyOrigin();
        if (origin instanceof ElementRef) {
            return origin.nativeElement.getBoundingClientRect();
        }
        // Check for Element so SVG elements are also supported.
        if (origin instanceof Element) {
            return origin.getBoundingClientRect();
        }
        const width = origin.width || 0;
        const height = origin.height || 0;
        // If the origin is a point, return a client rect as if it was a 0x0 element at the point.
        return {
            top: origin.y,
            bottom: origin.y + height,
            left: origin.x,
            right: origin.x + width,
            height,
            width
        };
    }
}
TDSConnectedOverlayDirective.ɵfac = function TDSConnectedOverlayDirective_Factory(t) { return new (t || TDSConnectedOverlayDirective)(i0.ɵɵdirectiveInject(i1.CdkConnectedOverlay), i0.ɵɵdirectiveInject(i2.TDSDestroyService)); };
TDSConnectedOverlayDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: TDSConnectedOverlayDirective, selectors: [["", "cdkConnectedOverlay", "", "tdsConnectedOverlay", ""]], inputs: { tdsArrowPointAtCenter: "tdsArrowPointAtCenter" }, exportAs: ["tdsConnectedOverlay"], features: [i0.ɵɵProvidersFeature([TDSDestroyService])] });
__decorate([
    InputBoolean()
], TDSConnectedOverlayDirective.prototype, "tdsArrowPointAtCenter", void 0);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSConnectedOverlayDirective, [{
        type: Directive,
        args: [{
                selector: '[cdkConnectedOverlay][tdsConnectedOverlay]',
                exportAs: 'tdsConnectedOverlay',
                providers: [TDSDestroyService]
            }]
    }], function () { return [{ type: i1.CdkConnectedOverlay }, { type: i2.TDSDestroyService }]; }, { tdsArrowPointAtCenter: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;base64,