import { ChangeDetectionStrategy, Component, InjectionToken, Input, ViewEncapsulation, Directive, Inject, Optional } from '@angular/core';
import { mixinDisabled } from 'tds-ui/shared/common';
import { TDS_OPTION_PARENT_COMPONENT } from './option-parent';
import * as i0 from "@angular/core";
const _c0 = ["*", [["tds-option"], ["ng-container"]]];
const _c1 = ["*", "tds-option, ng-container"];
// Notes on the accessibility pattern used for `tds-optgroup`.
// The option group has two different "modes": regular and inert. The regular mode uses the
// recommended a11y pattern which has `role="group"` on the group element with `aria-labelledby`
// pointing to the label. This works for `tds-select`, but it seems to hit a bug for autocomplete
// under VoiceOver where the group doesn't get read out at all. The bug appears to be that if
// there's __any__ a11y-related attribute on the group (e.g. `role` or `aria-labelledby`),
// VoiceOver on Safari won't read it out.
// We've introduced the `inert` mode as a workaround. Under this mode, all a11y attributes are
// removed from the group, and we get the screen reader to read out the group label by mirroring it
// inside an invisible element in the option. This is sub-optimal, because the screen reader will
// repeat the group label on each navigation, whereas the default pattern only reads the group when
// the user enters a new group. The following alternate approaches were considered:
// 1. Reading out the group label using the `LiveAnnouncer` solves the problem, but we can't control
//    when the text will be read out so sometimes it comes in too late or never if the user
//    navigates quickly.
// 2. `<tds-option aria-describedby="groupLabel"` - This works on Safari, but VoiceOver in Chrome
//    won't read out the description at all.
// 3. `<tds-option aria-labelledby="optionLabel groupLabel"` - This works on Chrome, but Safari
//     doesn't read out the text at all. Furthermore, on
// Boilerplate for applying mixins to TDSOptgroup.
/** @docs-private */
class TDSOptgroupBase {
}
const _TDSOptgroupMixinBase = mixinDisabled(TDSOptgroupBase);
// Counter for unique group ids.
let _uniqueOptgroupIdCounter = 0;
export class _TDSOptgroupBase extends _TDSOptgroupMixinBase {
    constructor(parent) {
        super();
        /** Unique id for the underlying label. */
        this._labelId = `tds-optgroup-label-${_uniqueOptgroupIdCounter++}`;
        this._inert = parent?.inertGroups ?? false;
    }
}
_TDSOptgroupBase.ɵfac = function _TDSOptgroupBase_Factory(t) { return new (t || _TDSOptgroupBase)(i0.ɵɵdirectiveInject(TDS_OPTION_PARENT_COMPONENT, 8)); };
_TDSOptgroupBase.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: _TDSOptgroupBase, inputs: { label: "label" }, features: [i0.ɵɵInheritDefinitionFeature] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(_TDSOptgroupBase, [{
        type: Directive
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [TDS_OPTION_PARENT_COMPONENT]
            }, {
                type: Optional
            }] }]; }, { label: [{
            type: Input
        }] }); })();
/**
 * Injection token that can be used to reference instances of `TDSOptgroup`. It serves as
 * alternative token to the actual `TDSOptgroup` class which could cause unnecessary
 * retention of the class and its component metadata.
 */
export const TDS_OPTGROUP = new InjectionToken('TDSOptgroup');
/**
 * Component that is used to group instances of `tds-option`.
 */
export class TDSOptgroup extends _TDSOptgroupBase {
}
TDSOptgroup.ɵfac = /*@__PURE__*/ function () { let ɵTDSOptgroup_BaseFactory; return function TDSOptgroup_Factory(t) { return (ɵTDSOptgroup_BaseFactory || (ɵTDSOptgroup_BaseFactory = i0.ɵɵgetInheritedFactory(TDSOptgroup)))(t || TDSOptgroup); }; }();
TDSOptgroup.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSOptgroup, selectors: [["tds-optgroup"]], hostAttrs: [1, "tds-optgroup"], hostVars: 5, hostBindings: function TDSOptgroup_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵattribute("role", ctx._inert ? null : "group")("aria-disabled", ctx._inert ? null : ctx.disabled.toString())("aria-labelledby", ctx._inert ? null : ctx._labelId);
        i0.ɵɵclassProp("tds-optgroup-disabled", ctx.disabled);
    } }, inputs: { disabled: "disabled" }, exportAs: ["tdsOptgroup"], features: [i0.ɵɵProvidersFeature([{ provide: TDS_OPTGROUP, useExisting: TDSOptgroup }]), i0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 4, vars: 2, consts: [["aria-hidden", "true", 1, "tds-optgroup-label", 3, "id"]], template: function TDSOptgroup_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef(_c0);
        i0.ɵɵelementStart(0, "span", 0);
        i0.ɵɵtext(1);
        i0.ɵɵprojection(2);
        i0.ɵɵelementEnd();
        i0.ɵɵprojection(3, 1);
    } if (rf & 2) {
        i0.ɵɵproperty("id", ctx._labelId);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1("", ctx.label, " ");
    } }, encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSOptgroup, [{
        type: Component,
        args: [{ selector: 'tds-optgroup', exportAs: 'tdsOptgroup', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, inputs: ['disabled'], host: {
                    'class': 'tds-optgroup',
                    '[attr.role]': '_inert ? null : "group"',
                    '[attr.aria-disabled]': '_inert ? null : disabled.toString()',
                    '[attr.aria-labelledby]': '_inert ? null : _labelId',
                    '[class.tds-optgroup-disabled]': 'disabled',
                }, providers: [{ provide: TDS_OPTGROUP, useExisting: TDSOptgroup }], template: "<span class=\"tds-optgroup-label\" aria-hidden=\"true\" [id]=\"_labelId\">{{ label }} \r\n    <ng-content></ng-content>\r\n</span>\r\n<ng-content select=\"tds-option, ng-container\"></ng-content>\r\n" }]
    }], null, null); })();
//# sourceMappingURL=data:application/json;base64,