import { __decorate } from "tslib";
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { CdkOverlayOrigin } from '@angular/cdk/overlay';
import { ChangeDetectionStrategy, Component, EventEmitter, forwardRef, Host, Inject, Input, Optional, Output, Self, ViewChild, ViewEncapsulation } from '@angular/core';
import { isValid } from 'date-fns';
import { of, Subject } from 'rxjs';
import { map, takeUntil } from 'rxjs/operators';
import { InputBoolean } from 'tds-ui/shared/utility';
import { slideMotion } from 'tds-ui/core/animation';
import { TDSFormFieldControl, TDS_FORM_FIELD } from 'tds-ui/form-field';
import { isNil } from 'tds-ui/core/util';
import * as i0 from "@angular/core";
import * as i1 from "tds-ui/i18n";
import * as i2 from "@angular/cdk/platform";
import * as i3 from "@angular/cdk/bidi";
import * as i4 from "@angular/forms";
import * as i5 from "@angular/common";
import * as i6 from "tds-ui/core/outlet";
import * as i7 from "@angular/cdk/overlay";
import * as i8 from "./time-picker-panel.component";
import * as i9 from "tds-ui/form-field";
const _c0 = ["inputElement"];
const _c1 = function (a0, a1, a2) { return { "px-1": a0, "px-1.5": a1, "px-2": a2 }; };
function TDSTimePickerComponent_div_5_Template(rf, ctx) { if (rf & 1) {
    const _r5 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 8);
    i0.ɵɵlistener("click", function TDSTimePickerComponent_div_5_Template_div_click_0_listener($event) { i0.ɵɵrestoreView(_r5); const ctx_r4 = i0.ɵɵnextContext(); return ctx_r4.onClickClearBtn($event); });
    i0.ɵɵelement(1, "span", 9);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction3(1, _c1, ctx_r1.size === "sm", ctx_r1.size === "md", ctx_r1.size === "lg"));
} }
function TDSTimePickerComponent_ng_container_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelement(1, "span", 10);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const suffixIcon_r6 = ctx.$implicit;
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngClass", suffixIcon_r6);
} }
function TDSTimePickerComponent_ng_template_8_Template(rf, ctx) { if (rf & 1) {
    const _r8 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 11)(1, "div", 12)(2, "div", 13)(3, "tds-time-picker-panel", 14);
    i0.ɵɵlistener("ngModelChange", function TDSTimePickerComponent_ng_template_8_Template_tds_time_picker_panel_ngModelChange_3_listener($event) { i0.ɵɵrestoreView(_r8); const ctx_r7 = i0.ɵɵnextContext(); return ctx_r7.value = $event; })("ngModelChange", function TDSTimePickerComponent_ng_template_8_Template_tds_time_picker_panel_ngModelChange_3_listener($event) { i0.ɵɵrestoreView(_r8); const ctx_r9 = i0.ɵɵnextContext(); return ctx_r9.onPanelValueChange($event); })("closePanel", function TDSTimePickerComponent_ng_template_8_Template_tds_time_picker_panel_closePanel_3_listener() { i0.ɵɵrestoreView(_r8); const ctx_r10 = i0.ɵɵnextContext(); return ctx_r10.setCurrentValueAndClose(); });
    i0.ɵɵpipe(4, "async");
    i0.ɵɵelementEnd()()()();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵproperty("@slideMotion", "enter");
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngClass", ctx_r3.popupClassName)("format", ctx_r3.format)("hourStep", ctx_r3.hourStep)("minuteStep", ctx_r3.minuteStep)("secondStep", ctx_r3.secondStep)("disabledHours", ctx_r3.disabledHours)("disabledMinutes", ctx_r3.disabledMinutes)("disabledSeconds", ctx_r3.disabledSeconds)("placeHolder", ctx_r3.placeholder || i0.ɵɵpipeBind1(4, 19, ctx_r3.i18nPlaceHolder$))("hideDisabledOptions", ctx_r3.hideDisabledOptions)("use12Hours", ctx_r3.use12Hours)("defaultOpenValue", ctx_r3.defaultOpenValue)("addOn", ctx_r3.addOn)("clearText", ctx_r3.clearText)("nowText", ctx_r3.nowText)("okText", ctx_r3.okText)("allowEmpty", ctx_r3.allowEmpty)("ngModel", ctx_r3.value);
} }
const _c2 = function (a0) { return { "border border-neutral-2-200 dark:border-d-neutral-2-200 rounded": a0 }; };
const _c3 = function (a0, a1, a2) { return { "pl-2.5 py-1": a0, "pl-3 py-1.5": a1, "pl-4 py-2": a2 }; };
export class TDSTimePickerComponent {
    constructor(
    // public tdsConfigService: TDSConfigService,
    i18n, element, renderer, cdr, dateHelper, platform, elementRef, directionality, _formField, ngControl) {
        this.i18n = i18n;
        this.element = element;
        this.renderer = renderer;
        this.cdr = cdr;
        this.dateHelper = dateHelper;
        this.platform = platform;
        this.elementRef = elementRef;
        this.directionality = directionality;
        this._formField = _formField;
        this.ngControl = ngControl;
        this.destroy$ = new Subject();
        this.isInit = false;
        this.focused = false;
        this.inputValue = '';
        this.value = null;
        this.preValue = null;
        this.i18nPlaceHolder$ = of(undefined);
        this.overlayPositions = [
            {
                originX: 'start',
                originY: 'bottom',
                overlayX: 'start',
                overlayY: 'top',
                offsetY: 3
            }
        ];
        this.dir = 'ltr';
        this.parentIsFormField = false;
        this.tdsId = null;
        this._size = "md";
        this.hourStep = 1;
        this.minuteStep = 1;
        this.secondStep = 1;
        this.clearText = 'clear';
        this.nowText = '';
        this.okText = '';
        this.popupClassName = '';
        this.placeholder = 'hh:mm a';
        this.format = 'hh:mm a';
        this.isOpen = false;
        this.use12Hours = true;
        this.suffixIcon = 'tdsi-time-line';
        this.openChange = new EventEmitter();
        this.hideDisabledOptions = false;
        this.allowEmpty = true;
        this.disabled = false;
        this.autoFocus = false;
        this.backdrop = false;
        this.id = null;
        this.stateChanges = new Subject();
        this._required = false;
        // TODO: move to host after View Engine deprecation
        this.elementRef.nativeElement.classList.add('tds-picker');
        if (this.ngControl != null) {
            this.ngControl.valueAccessor = this;
        }
        if (this._formField) {
            // this.size = this._formField.size;
            this.parentIsFormField = true;
        }
    }
    get size() {
        return this._size;
    }
    set size(value) {
        if (this._size != value) {
            this._size = value;
            this.stateChanges.next();
        }
    }
    get empty() {
        return false;
    }
    get required() {
        return this._required;
    }
    set required(value) {
        this._required = coerceBooleanProperty(value);
        this.stateChanges.next();
    }
    emitValue(value) {
        this.setValue(value, true);
        if (this._onChange) {
            this._onChange(this.value);
        }
        if (this._onTouched) {
            this._onTouched();
        }
    }
    setValue(value, syncPreValue = false) {
        if (syncPreValue) {
            this.preValue = isValid(value) ? new Date(value) : null;
        }
        this.value = isValid(value) ? new Date(value) : null;
        this.setInputValue(value);
    }
    setInputValue(value) {
        this.inputValue = this.dateHelper.format(value, this.format);
        this.cdr.markForCheck();
    }
    open() {
        if (this.disabled || this.isOpen) {
            return;
        }
        this.focus();
        this.isOpen = true;
        this.openChange.emit(this.isOpen);
    }
    close() {
        this.isOpen = false;
        this.cdr.markForCheck();
        this.openChange.emit(this.isOpen);
    }
    updateAutoFocus() {
        if (this.isInit && !this.disabled) {
            if (this.autoFocus) {
                this.renderer.setAttribute(this.inputRef.nativeElement, 'autofocus', 'autofocus');
            }
            else {
                this.renderer.removeAttribute(this.inputRef.nativeElement, 'autofocus');
            }
        }
    }
    onClickClearBtn(event) {
        event.stopPropagation();
        this.emitValue(null);
    }
    onClickOutside(event) {
        if (!this.element.nativeElement.contains(event.target)) {
            this.setCurrentValueAndClose();
        }
    }
    onFocus(value) {
        this.focused = value;
    }
    focus() {
        if (this.inputRef.nativeElement) {
            this.inputRef.nativeElement.focus();
        }
    }
    blur() {
        if (this.inputRef.nativeElement) {
            this.inputRef.nativeElement.blur();
        }
    }
    onKeyupEsc() {
        this.setValue(this.preValue);
    }
    onKeyupEnter() {
        if (this.isOpen && isValid(this.value)) {
            this.setCurrentValueAndClose();
        }
        else if (!this.isOpen) {
            this.open();
        }
    }
    onInputChange(str) {
        if (!this.platform.TRIDENT && document.activeElement === this.inputRef.nativeElement) {
            this.open();
            this.parseTimeString(str);
        }
    }
    onPanelValueChange(value) {
        this.setValue(value);
        this.focus();
    }
    setCurrentValueAndClose() {
        this.emitValue(this.value);
        this.close();
    }
    ngOnInit() {
        this.inputSize = Math.max(8, this.format.length) + 2;
        this.origin = new CdkOverlayOrigin(this.element);
        //cập nhật input value khi local change
        this.i18n.localeChange.pipe(takeUntil(this.destroy$)).subscribe(() => {
            if (this.value) {
                this.setInputValue(this.value);
            }
        });
        this.i18nPlaceHolder$ = this.i18n.localeChange.pipe(map((locale) => locale.TimePicker.placeholder));
        this.dir = this.directionality.value;
        this.directionality.change?.pipe(takeUntil(this.destroy$)).subscribe((direction) => {
            this.dir = direction;
        });
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    ngOnChanges(changes) {
        const { use12Hours, format, disabled, autoFocus } = changes;
        if (use12Hours && !use12Hours.previousValue && use12Hours.currentValue && !format) {
            this.format = 'h:mm a';
        }
        if (disabled) {
            const value = disabled.currentValue;
            const input = this.inputRef.nativeElement;
            if (value) {
                this.renderer.setAttribute(input, 'disabled', '');
            }
            else {
                this.renderer.removeAttribute(input, 'disabled');
            }
        }
        if (autoFocus) {
            this.updateAutoFocus();
        }
    }
    parseTimeString(str) {
        const value = this.dateHelper.parseTime(str, this.format) || null;
        if (isValid(value)) {
            this.value = value;
            this.cdr.markForCheck();
        }
    }
    ngAfterViewInit() {
        this.isInit = true;
        this.updateAutoFocus();
    }
    writeValue(time) {
        let result;
        if (time instanceof Date) {
            result = time;
        }
        else if (isNil(time)) {
            result = null;
        }
        else {
            console.warn('Non-Date type is not recommended for time-picker, use "Date" type.');
            result = new Date(time);
        }
        this.setValue(result, true);
    }
    registerOnChange(fn) {
        this._onChange = fn;
    }
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this.cdr.markForCheck();
    }
    get errorState() {
        return this.ngControl && this.ngControl.errors !== null && !!this.ngControl.touched;
    }
    setDescribedByIds(ids) {
        // if (ids.length) {
        //   this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));
        // } else {
        //   this._elementRef.nativeElement.removeAttribute('aria-describedby');
        // }
    }
    onContainerClick(e) {
        // e.preventDefault();
        // e.stopPropagation();
    }
}
TDSTimePickerComponent.ɵfac = function TDSTimePickerComponent_Factory(t) { return new (t || TDSTimePickerComponent)(i0.ɵɵdirectiveInject(i1.TDSI18nService), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.DateHelperService), i0.ɵɵdirectiveInject(i2.Platform), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i3.Directionality, 8), i0.ɵɵdirectiveInject(TDS_FORM_FIELD, 9), i0.ɵɵdirectiveInject(i4.NgControl, 10)); };
TDSTimePickerComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSTimePickerComponent, selectors: [["tds-time-picker"]], viewQuery: function TDSTimePickerComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 7);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputRef = _t.first);
    } }, hostAttrs: [1, "w-full", "block", "relative", "box-border", "m-0", "p-0"], hostVars: 6, hostBindings: function TDSTimePickerComponent_HostBindings(rf, ctx) { if (rf & 1) {
        i0.ɵɵlistener("click", function TDSTimePickerComponent_click_HostBindingHandler() { return ctx.open(); });
    } if (rf & 2) {
        i0.ɵɵclassProp("tds-picker-disabled", ctx.disabled)("tds-picker-focused", ctx.focused)("tds-picker-rtl", ctx.dir === "rtl");
    } }, inputs: { tdsId: "tdsId", size: "size", hourStep: "hourStep", minuteStep: "minuteStep", secondStep: "secondStep", clearText: "clearText", nowText: "nowText", okText: "okText", popupClassName: "popupClassName", placeholder: "placeholder", addOn: "addOn", defaultOpenValue: "defaultOpenValue", disabledHours: "disabledHours", disabledMinutes: "disabledMinutes", disabledSeconds: "disabledSeconds", format: "format", isOpen: "isOpen", use12Hours: "use12Hours", suffixIcon: "suffixIcon", hideDisabledOptions: "hideDisabledOptions", allowEmpty: "allowEmpty", disabled: "disabled", autoFocus: "autoFocus", backdrop: "backdrop", id: "id", required: "required" }, outputs: { openChange: "openChange" }, exportAs: ["tdsTimePicker"], features: [i0.ɵɵProvidersFeature([
            // { provide: NG_VALUE_ACCESSOR, useExisting: TDSTimePickerComponent, multi: true }
            {
                provide: TDSFormFieldControl,
                useExisting: forwardRef(() => TDSTimePickerComponent)
            }
        ]), i0.ɵɵNgOnChangesFeature], decls: 9, vars: 27, consts: [[1, "tds-picker-input", "flex", "items-stretch", "w-full", "group", 3, "ngClass"], [1, "flex-auto", "flex", "items-center", 3, "ngClass"], ["type", "text", 1, "text-body-2", "font-regular", "dark:text-d-neutral-1-40", "text-neutral-1-40", "focus:outline-none", "focus:ring-transparent", "focus:border-transparent", "shadow-none", "border-0", "bg-transparent", "text-current", "pl-0", "pb-0", "pt-0", "m-0", "w-full", "outline-none", "box-border", 3, "placeholder", "ngModel", "disabled", "ngModelChange", "focus", "blur", "keyup.enter", "keyup.escape"], ["inputElement", ""], ["class", "tds-picker-clear flex items-center cursor-pointer", 3, "ngClass", "click", 4, "ngIf"], [1, "tds-picker-suffix", "text-neutral-1-900", "dark:text-d-neutral-1-900", "group-hover:bg-neutral-3-50", "dark:group-hover:bg-d-neutral-3-300", "flex", "items-center", "group-hover:border-transparent", 2, "border-top-right-radius", "0.2rem", "border-bottom-right-radius", "0.2rem", 3, "ngClass"], [4, "tdsStringTemplateOutlet"], ["cdkConnectedOverlay", "", 3, "cdkConnectedOverlayHasBackdrop", "cdkConnectedOverlayPositions", "cdkConnectedOverlayOrigin", "cdkConnectedOverlayOpen", "cdkConnectedOverlayOffsetY", "cdkConnectedOverlayTransformOriginOn", "detach", "overlayOutsideClick"], [1, "tds-picker-clear", "flex", "items-center", "cursor-pointer", 3, "ngClass", "click"], [1, "tdsi-close-fill", "text-base", "leading-4", "text-neutral-1-500", "dark:text-d-neutral-1-500"], [1, "text-lg", "leading-5", "text-neutral-1-900", "dark:text-d-neutral-1-900", 3, "ngClass"], [1, "tds-picker-dropdown"], [1, "tds-picker-panel-container"], ["tabindex", "-1", 1, "tds-picker-panel"], [3, "ngClass", "format", "hourStep", "minuteStep", "secondStep", "disabledHours", "disabledMinutes", "disabledSeconds", "placeHolder", "hideDisabledOptions", "use12Hours", "defaultOpenValue", "addOn", "clearText", "nowText", "okText", "allowEmpty", "ngModel", "ngModelChange", "closePanel"]], template: function TDSTimePickerComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 0)(1, "div", 1)(2, "input", 2, 3);
        i0.ɵɵlistener("ngModelChange", function TDSTimePickerComponent_Template_input_ngModelChange_2_listener($event) { return ctx.inputValue = $event; })("focus", function TDSTimePickerComponent_Template_input_focus_2_listener() { return ctx.onFocus(true); })("blur", function TDSTimePickerComponent_Template_input_blur_2_listener() { return ctx.onFocus(false); })("keyup.enter", function TDSTimePickerComponent_Template_input_keyup_enter_2_listener() { return ctx.onKeyupEnter(); })("keyup.escape", function TDSTimePickerComponent_Template_input_keyup_escape_2_listener() { return ctx.onKeyupEsc(); })("ngModelChange", function TDSTimePickerComponent_Template_input_ngModelChange_2_listener($event) { return ctx.onInputChange($event); });
        i0.ɵɵpipe(4, "async");
        i0.ɵɵelementEnd()();
        i0.ɵɵtemplate(5, TDSTimePickerComponent_div_5_Template, 2, 5, "div", 4);
        i0.ɵɵelementStart(6, "div", 5);
        i0.ɵɵtemplate(7, TDSTimePickerComponent_ng_container_7_Template, 2, 1, "ng-container", 6);
        i0.ɵɵelementEnd()();
        i0.ɵɵtemplate(8, TDSTimePickerComponent_ng_template_8_Template, 5, 21, "ng-template", 7);
        i0.ɵɵlistener("detach", function TDSTimePickerComponent_Template_ng_template_detach_8_listener() { return ctx.close(); })("overlayOutsideClick", function TDSTimePickerComponent_Template_ng_template_overlayOutsideClick_8_listener($event) { return ctx.onClickOutside($event); });
    } if (rf & 2) {
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(17, _c2, !ctx.parentIsFormField));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction3(19, _c3, ctx.size === "sm", ctx.size === "md", ctx.size === "lg"));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("placeholder", ctx.placeholder || i0.ɵɵpipeBind1(4, 15, ctx.i18nPlaceHolder$))("ngModel", ctx.inputValue)("disabled", ctx.disabled);
        i0.ɵɵattribute("id", ctx.tdsId);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx.allowEmpty && !ctx.disabled && ctx.value);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction3(23, _c1, ctx.size === "sm", ctx.size === "md", ctx.size === "lg"));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("tdsStringTemplateOutlet", ctx.suffixIcon);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("cdkConnectedOverlayHasBackdrop", ctx.backdrop)("cdkConnectedOverlayPositions", ctx.overlayPositions)("cdkConnectedOverlayOrigin", ctx.origin)("cdkConnectedOverlayOpen", ctx.isOpen)("cdkConnectedOverlayOffsetY", -2)("cdkConnectedOverlayTransformOriginOn", ".tds-picker-dropdown");
    } }, directives: [i5.NgClass, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgModel, i5.NgIf, i6.TDSStringTemplateOutletDirective, i7.CdkConnectedOverlay, i8.TDSTimePickerPanelComponent], pipes: [i5.AsyncPipe], encapsulation: 2, data: { animation: [slideMotion] }, changeDetection: 0 });
__decorate([
    InputBoolean()
], TDSTimePickerComponent.prototype, "use12Hours", void 0);
__decorate([
    InputBoolean()
], TDSTimePickerComponent.prototype, "hideDisabledOptions", void 0);
__decorate([
    InputBoolean()
], TDSTimePickerComponent.prototype, "allowEmpty", void 0);
__decorate([
    InputBoolean()
], TDSTimePickerComponent.prototype, "disabled", void 0);
__decorate([
    InputBoolean()
], TDSTimePickerComponent.prototype, "autoFocus", void 0);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSTimePickerComponent, [{
        type: Component,
        args: [{
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                selector: 'tds-time-picker',
                exportAs: 'tdsTimePicker',
                template: `
  <div class="tds-picker-input flex items-stretch w-full group" 
  [ngClass]="{ 'border border-neutral-2-200 dark:border-d-neutral-2-200 rounded':!parentIsFormField}">
  <div class="flex-auto flex items-center" [ngClass]="{
    'pl-2.5 py-1':size ==='sm', 
    'pl-3 py-1.5':size ==='md' ,                                              
    'pl-4 py-2':size ==='lg'        
  }">
  <input
  class="text-body-2 font-regular dark:text-d-neutral-1-40 text-neutral-1-40 focus:outline-none focus:ring-transparent focus:border-transparent shadow-none border-0 bg-transparent text-current pl-0 pb-0 pt-0 m-0 w-full outline-none  box-border"
  #inputElement [attr.id]="tdsId" type="text" [placeholder]="placeholder || (i18nPlaceHolder$ | async)"
  [(ngModel)]="inputValue" [disabled]="disabled" (focus)="onFocus(true)" (blur)="onFocus(false)"
  (keyup.enter)="onKeyupEnter()" (keyup.escape)="onKeyupEsc()" (ngModelChange)="onInputChange($event)" />
    </div>
    <div *ngIf="allowEmpty && !disabled && value" class="tds-picker-clear flex items-center cursor-pointer" (click)="onClickClearBtn($event)"
    [ngClass]="{
    'px-1':size ==='sm',
    'px-1.5':size ==='md',                                          
    'px-2':size ==='lg'
  }">
    <span class="tdsi-close-fill text-base leading-4 text-neutral-1-500 dark:text-d-neutral-1-500"></span>
  </div>
  <div
    class="tds-picker-suffix text-neutral-1-900 dark:text-d-neutral-1-900  group-hover:bg-neutral-3-50 dark:group-hover:bg-d-neutral-3-300 flex items-center  group-hover:border-transparent"
    style="border-top-right-radius: 0.2rem;border-bottom-right-radius: 0.2rem;" [ngClass]="{
      'px-1':size ==='sm',
      'px-1.5':size ==='md',                                          
      'px-2':size ==='lg'
  }">
    <ng-container *tdsStringTemplateOutlet="suffixIcon; let suffixIcon">
      <span [ngClass]="suffixIcon" class="text-lg leading-5 text-neutral-1-900 dark:text-d-neutral-1-900"></span>
    </ng-container>
  </div>
   
  </div>
  
  <ng-template cdkConnectedOverlay [cdkConnectedOverlayHasBackdrop]="backdrop"
    [cdkConnectedOverlayPositions]="overlayPositions" [cdkConnectedOverlayOrigin]="origin"
    [cdkConnectedOverlayOpen]="isOpen" [cdkConnectedOverlayOffsetY]="-2"
    [cdkConnectedOverlayTransformOriginOn]="'.tds-picker-dropdown'" (detach)="close()"
    (overlayOutsideClick)="onClickOutside($event)">
    <div [@slideMotion]="'enter'" class="tds-picker-dropdown">
      <div class="tds-picker-panel-container">
        <div tabindex="-1" class="tds-picker-panel">
          <tds-time-picker-panel [ngClass]="popupClassName" [format]="format" [hourStep]="hourStep"
            [minuteStep]="minuteStep" [secondStep]="secondStep" [disabledHours]="disabledHours"
            [disabledMinutes]="disabledMinutes" [disabledSeconds]="disabledSeconds"
            [placeHolder]="placeholder || (i18nPlaceHolder$ | async)" [hideDisabledOptions]="hideDisabledOptions"
            [use12Hours]="use12Hours" [defaultOpenValue]="defaultOpenValue" [addOn]="addOn" [clearText]="clearText"
            [nowText]="nowText" [okText]="okText" [allowEmpty]="allowEmpty" [(ngModel)]="value"
            (ngModelChange)="onPanelValueChange($event)" (closePanel)="setCurrentValueAndClose()"></tds-time-picker-panel>
        </div>
      </div>
    </div>
  </ng-template>
  `,
                host: {
                    '[class.tds-picker-disabled]': `disabled`,
                    '[class.tds-picker-focused]': `focused`,
                    '[class.tds-picker-rtl]': `dir === 'rtl'`,
                    '(click)': 'open()',
                    'class': 'w-full block relative box-border m-0 p-0',
                },
                animations: [slideMotion],
                providers: [
                    // { provide: NG_VALUE_ACCESSOR, useExisting: TDSTimePickerComponent, multi: true }
                    {
                        provide: TDSFormFieldControl,
                        useExisting: forwardRef(() => TDSTimePickerComponent)
                    }
                ]
            }]
    }], function () { return [{ type: i1.TDSI18nService }, { type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }, { type: i1.DateHelperService }, { type: i2.Platform }, { type: i0.ElementRef }, { type: i3.Directionality, decorators: [{
                type: Optional
            }] }, { type: i9.TDSFormField, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [TDS_FORM_FIELD]
            }, {
                type: Host
            }] }, { type: i4.NgControl, decorators: [{
                type: Optional
            }, {
                type: Self
            }] }]; }, { inputRef: [{
            type: ViewChild,
            args: ['inputElement', { static: true }]
        }], tdsId: [{
            type: Input
        }], size: [{
            type: Input
        }], hourStep: [{
            type: Input
        }], minuteStep: [{
            type: Input
        }], secondStep: [{
            type: Input
        }], clearText: [{
            type: Input
        }], nowText: [{
            type: Input
        }], okText: [{
            type: Input
        }], popupClassName: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], addOn: [{
            type: Input
        }], defaultOpenValue: [{
            type: Input
        }], disabledHours: [{
            type: Input
        }], disabledMinutes: [{
            type: Input
        }], disabledSeconds: [{
            type: Input
        }], format: [{
            type: Input
        }], isOpen: [{
            type: Input
        }], use12Hours: [{
            type: Input
        }], suffixIcon: [{
            type: Input
        }], openChange: [{
            type: Output
        }], hideDisabledOptions: [{
            type: Input
        }], allowEmpty: [{
            type: Input
        }], disabled: [{
            type: Input
        }], autoFocus: [{
            type: Input
        }], backdrop: [{
            type: Input
        }], id: [{
            type: Input
        }], required: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;base64,