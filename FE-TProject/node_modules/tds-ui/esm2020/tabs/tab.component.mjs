import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, ContentChild, EventEmitter, Inject, InjectionToken, Input, Output, TemplateRef, ViewChild, ViewEncapsulation } from '@angular/core';
import { Subject } from 'rxjs';
import { TDSTabLinkDirective, TDSTabLinkTemplateDirective } from './tab-link.directive';
import { TDSTabDirective } from './tab.directive';
import { InputBoolean } from 'tds-ui/shared/utility';
import * as i0 from "@angular/core";
const _c0 = ["contentTemplate"];
function TDSTabComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵprojection(0);
} }
function TDSTabComponent_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵprojection(0, 1);
} }
const _c1 = [[["", "tds-tab-link", ""]], "*"];
const _c2 = ["[tds-tab-link]", "*"];
/**
 * Used to provide a tab set to a tab without causing a circular dependency.
 */
export const TDS_TAB_SET = new InjectionToken('TDS_TAB_SET');
export class TDSTabComponent {
    constructor(closestTabSet) {
        this.closestTabSet = closestTabSet;
        this.title = '';
        this.closable = false;
        this.closeIcon = 'close';
        this.disabled = false;
        this.forceRender = false;
        this.clsContent = "p-4 w-full h-full";
        this.tabSelect = new EventEmitter();
        this.tabDeselect = new EventEmitter();
        this.tabClick = new EventEmitter();
        this.tabContextmenu = new EventEmitter();
        this.template = null;
        this.isActive = false;
        this.position = null;
        this.origin = null;
        this.stateChanges = new Subject();
    }
    get content() {
        return this.template || this.contentTemplate;
    }
    get label() {
        return this.title || this.tabLinkTemplateDirective?.templateRef;
    }
    ngOnChanges(changes) {
        const { title, disabled, forceRender } = changes;
        if (title || disabled || forceRender) {
            this.stateChanges.next();
        }
    }
    ngOnDestroy() {
        this.stateChanges.complete();
    }
}
TDSTabComponent.ɵfac = function TDSTabComponent_Factory(t) { return new (t || TDSTabComponent)(i0.ɵɵdirectiveInject(TDS_TAB_SET)); };
TDSTabComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSTabComponent, selectors: [["tds-tab"]], contentQueries: function TDSTabComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        i0.ɵɵcontentQuery(dirIndex, TDSTabLinkTemplateDirective, 5);
        i0.ɵɵcontentQuery(dirIndex, TDSTabDirective, 5, TemplateRef);
        i0.ɵɵcontentQuery(dirIndex, TDSTabLinkDirective, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tabLinkTemplateDirective = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.template = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.linkDirective = _t.first);
    } }, viewQuery: function TDSTabComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 7);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.contentTemplate = _t.first);
    } }, inputs: { title: "title", closable: "closable", closeIcon: "closeIcon", disabled: "disabled", forceRender: "forceRender", clsContent: "clsContent" }, outputs: { tabSelect: "tabSelect", tabDeselect: "tabDeselect", tabClick: "tabClick", tabContextmenu: "tabContextmenu" }, exportAs: ["tdsTab"], features: [i0.ɵɵNgOnChangesFeature], ngContentSelectors: _c2, decls: 4, vars: 0, consts: [["tabLinkTemplate", ""], ["contentTemplate", ""]], template: function TDSTabComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef(_c1);
        i0.ɵɵtemplate(0, TDSTabComponent_ng_template_0_Template, 1, 0, "ng-template", null, 0, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtemplate(2, TDSTabComponent_ng_template_2_Template, 1, 0, "ng-template", null, 1, i0.ɵɵtemplateRefExtractor);
    } }, encapsulation: 2, changeDetection: 0 });
__decorate([
    InputBoolean()
], TDSTabComponent.prototype, "closable", void 0);
__decorate([
    InputBoolean()
], TDSTabComponent.prototype, "disabled", void 0);
__decorate([
    InputBoolean()
], TDSTabComponent.prototype, "forceRender", void 0);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSTabComponent, [{
        type: Component,
        args: [{
                selector: 'tds-tab',
                exportAs: 'tdsTab',
                preserveWhitespaces: false,
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: `
    <ng-template #tabLinkTemplate>
      <ng-content select="[tds-tab-link]"></ng-content>
    </ng-template>
    <ng-template #contentTemplate>
      <ng-content></ng-content>
    </ng-template>
  `
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [TDS_TAB_SET]
            }] }]; }, { title: [{
            type: Input
        }], closable: [{
            type: Input
        }], closeIcon: [{
            type: Input
        }], disabled: [{
            type: Input
        }], forceRender: [{
            type: Input
        }], clsContent: [{
            type: Input
        }], tabSelect: [{
            type: Output
        }], tabDeselect: [{
            type: Output
        }], tabClick: [{
            type: Output
        }], tabContextmenu: [{
            type: Output
        }], tabLinkTemplateDirective: [{
            type: ContentChild,
            args: [TDSTabLinkTemplateDirective, { static: false }]
        }], template: [{
            type: ContentChild,
            args: [TDSTabDirective, { static: false, read: TemplateRef }]
        }], linkDirective: [{
            type: ContentChild,
            args: [TDSTabLinkDirective, { static: false }]
        }], contentTemplate: [{
            type: ViewChild,
            args: ['contentTemplate', { static: true }]
        }] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL3Rkcy11aS90YWJzL3RhYi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUVBLE9BQU8sRUFDTCx1QkFBdUIsRUFDdkIsU0FBUyxFQUNULFlBQVksRUFDWixZQUFZLEVBQ1osTUFBTSxFQUNOLGNBQWMsRUFDZCxLQUFLLEVBR0wsTUFBTSxFQUVOLFdBQVcsRUFDWCxTQUFTLEVBQ1QsaUJBQWlCLEVBQ2xCLE1BQU0sZUFBZSxDQUFDO0FBR3ZCLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFL0IsT0FBTyxFQUFFLG1CQUFtQixFQUFFLDJCQUEyQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDeEYsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRWxELE9BQU8sRUFBRSxZQUFZLEVBQWMsTUFBTSx1QkFBdUIsQ0FBQzs7OztJQWUzRCxrQkFBaUQ7OztJQUdqRCxxQkFBeUI7Ozs7QUFoQi9COztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLElBQUksY0FBYyxDQUFhLGFBQWEsQ0FBQyxDQUFDO0FBaUJ6RSxNQUFNLE9BQU8sZUFBZTtJQWtDMUIsWUFBd0MsYUFBeUI7UUFBekIsa0JBQWEsR0FBYixhQUFhLENBQVk7UUE3QnhELFVBQUssR0FBNkMsRUFBRSxDQUFDO1FBQ3JDLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFDakMsY0FBUyxHQUFxQyxPQUFPLENBQUM7UUFDdEMsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUNqQixnQkFBVyxHQUFHLEtBQUssQ0FBQztRQUNwQyxlQUFVLEdBQVEsbUJBQW1CLENBQUM7UUFDNUIsY0FBUyxHQUFHLElBQUksWUFBWSxFQUFRLENBQUM7UUFDckMsZ0JBQVcsR0FBRyxJQUFJLFlBQVksRUFBUSxDQUFDO1FBQ3ZDLGFBQVEsR0FBRyxJQUFJLFlBQVksRUFBUSxDQUFDO1FBQ3BDLG1CQUFjLEdBQUcsSUFBSSxZQUFZLEVBQWMsQ0FBQztRQUdFLGFBQVEsR0FBNkIsSUFBSSxDQUFDO1FBSS9HLGFBQVEsR0FBWSxLQUFLLENBQUM7UUFDMUIsYUFBUSxHQUFrQixJQUFJLENBQUM7UUFDL0IsV0FBTSxHQUFrQixJQUFJLENBQUM7UUFDcEIsaUJBQVksR0FBRyxJQUFJLE9BQU8sRUFBUSxDQUFDO0lBVXdCLENBQUM7SUFSckUsSUFBSSxPQUFPO1FBQ1QsT0FBTyxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxlQUFlLENBQUM7SUFDL0MsQ0FBQztJQUVELElBQUksS0FBSztRQUNQLE9BQU8sSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsd0JBQXdCLEVBQUUsV0FBVyxDQUFDO0lBQ2xFLENBQUM7SUFJRCxXQUFXLENBQUMsT0FBc0I7UUFFaEMsTUFBTSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLEdBQUcsT0FBTyxDQUFDO1FBQ2pELElBQUksS0FBSyxJQUFJLFFBQVEsSUFBSSxXQUFXLEVBQUU7WUFDcEMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUMxQjtJQUNILENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUMvQixDQUFDOzs4RUE5Q1UsZUFBZSx1QkFrQ04sV0FBVztrRUFsQ3BCLGVBQWU7b0NBZ0JaLDJCQUEyQjtvQ0FDM0IsZUFBZSxLQUF5QixXQUFXO29DQUNuRCxtQkFBbUI7Ozs7Ozs7Ozs7Ozs7UUExQi9CLGlIQUVjO1FBQ2QsaUhBRWM7O0FBU1M7SUFBZixZQUFZLEVBQUU7aURBQWtCO0FBRWpCO0lBQWYsWUFBWSxFQUFFO2lEQUFrQjtBQUNqQjtJQUFmLFlBQVksRUFBRTtvREFBcUI7dUZBVGxDLGVBQWU7Y0FmM0IsU0FBUztlQUFDO2dCQUNULFFBQVEsRUFBRSxTQUFTO2dCQUNuQixRQUFRLEVBQUUsUUFBUTtnQkFDbEIsbUJBQW1CLEVBQUUsS0FBSztnQkFDMUIsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7Z0JBQ3JDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2dCQUMvQyxRQUFRLEVBQUU7Ozs7Ozs7R0FPVDthQUNGOztzQkFtQ2MsTUFBTTt1QkFBQyxXQUFXO3dCQTdCdEIsS0FBSztrQkFBYixLQUFLO1lBQ21CLFFBQVE7a0JBQWhDLEtBQUs7WUFDRyxTQUFTO2tCQUFqQixLQUFLO1lBQ21CLFFBQVE7a0JBQWhDLEtBQUs7WUFDbUIsV0FBVztrQkFBbkMsS0FBSztZQUNHLFVBQVU7a0JBQWxCLEtBQUs7WUFDYSxTQUFTO2tCQUEzQixNQUFNO1lBQ1ksV0FBVztrQkFBN0IsTUFBTTtZQUNZLFFBQVE7a0JBQTFCLE1BQU07WUFDWSxjQUFjO2tCQUFoQyxNQUFNO1lBRXVELHdCQUF3QjtrQkFBckYsWUFBWTttQkFBQywyQkFBMkIsRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUU7WUFDUyxRQUFRO2tCQUE1RSxZQUFZO21CQUFDLGVBQWUsRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRTtZQUNiLGFBQWE7a0JBQWxFLFlBQVk7bUJBQUMsbUJBQW1CLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFO1lBQ0osZUFBZTtrQkFBOUQsU0FBUzttQkFBQyxpQkFBaUIsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuXHJcbmltcG9ydCB7XHJcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXHJcbiAgQ29tcG9uZW50LFxyXG4gIENvbnRlbnRDaGlsZCxcclxuICBFdmVudEVtaXR0ZXIsXHJcbiAgSW5qZWN0LFxyXG4gIEluamVjdGlvblRva2VuLFxyXG4gIElucHV0LFxyXG4gIE9uQ2hhbmdlcyxcclxuICBPbkRlc3Ryb3ksXHJcbiAgT3V0cHV0LFxyXG4gIFNpbXBsZUNoYW5nZXMsXHJcbiAgVGVtcGxhdGVSZWYsXHJcbiAgVmlld0NoaWxkLFxyXG4gIFZpZXdFbmNhcHN1bGF0aW9uXHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFRhYlRlbXBsYXRlQ29udGV4dCB9IGZyb20gJy4vaW50ZXJmYWNlcyc7XHJcblxyXG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XHJcblxyXG5pbXBvcnQgeyBURFNUYWJMaW5rRGlyZWN0aXZlLCBURFNUYWJMaW5rVGVtcGxhdGVEaXJlY3RpdmUgfSBmcm9tICcuL3RhYi1saW5rLmRpcmVjdGl2ZSc7XHJcbmltcG9ydCB7IFREU1RhYkRpcmVjdGl2ZSB9IGZyb20gJy4vdGFiLmRpcmVjdGl2ZSc7XHJcbmltcG9ydCB7IEJvb2xlYW5JbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9jb2VyY2lvbic7XHJcbmltcG9ydCB7IElucHV0Qm9vbGVhbiwgVERTU2FmZUFueSB9IGZyb20gJ3Rkcy11aS9zaGFyZWQvdXRpbGl0eSc7XHJcblxyXG4vKipcclxuICogVXNlZCB0byBwcm92aWRlIGEgdGFiIHNldCB0byBhIHRhYiB3aXRob3V0IGNhdXNpbmcgYSBjaXJjdWxhciBkZXBlbmRlbmN5LlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IFREU19UQUJfU0VUID0gbmV3IEluamVjdGlvblRva2VuPFREU1NhZmVBbnk+KCdURFNfVEFCX1NFVCcpO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICd0ZHMtdGFiJyxcclxuICBleHBvcnRBczogJ3Rkc1RhYicsXHJcbiAgcHJlc2VydmVXaGl0ZXNwYWNlczogZmFsc2UsXHJcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcclxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcclxuICB0ZW1wbGF0ZTogYFxyXG4gICAgPG5nLXRlbXBsYXRlICN0YWJMaW5rVGVtcGxhdGU+XHJcbiAgICAgIDxuZy1jb250ZW50IHNlbGVjdD1cIlt0ZHMtdGFiLWxpbmtdXCI+PC9uZy1jb250ZW50PlxyXG4gICAgPC9uZy10ZW1wbGF0ZT5cclxuICAgIDxuZy10ZW1wbGF0ZSAjY29udGVudFRlbXBsYXRlPlxyXG4gICAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XHJcbiAgICA8L25nLXRlbXBsYXRlPlxyXG4gIGBcclxufSlcclxuZXhwb3J0IGNsYXNzIFREU1RhYkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcclxuICBzdGF0aWMgbmdBY2NlcHRJbnB1dFR5cGVfZGlzYWJsZWQ6IEJvb2xlYW5JbnB1dDtcclxuICBzdGF0aWMgbmdBY2NlcHRJbnB1dFR5cGVfY2xvc2FibGU6IEJvb2xlYW5JbnB1dDtcclxuICBzdGF0aWMgbmdBY2NlcHRJbnB1dFR5cGVfZm9yY2VSZW5kZXI6IEJvb2xlYW5JbnB1dDtcclxuXHJcbiAgQElucHV0KCkgdGl0bGU6IHN0cmluZyB8IFRlbXBsYXRlUmVmPFRhYlRlbXBsYXRlQ29udGV4dD4gPSAnJztcclxuICBASW5wdXQoKSBASW5wdXRCb29sZWFuKCkgY2xvc2FibGUgPSBmYWxzZTtcclxuICBASW5wdXQoKSBjbG9zZUljb246IHN0cmluZyB8IFRlbXBsYXRlUmVmPFREU1NhZmVBbnk+ID0gJ2Nsb3NlJztcclxuICBASW5wdXQoKSBASW5wdXRCb29sZWFuKCkgZGlzYWJsZWQgPSBmYWxzZTtcclxuICBASW5wdXQoKSBASW5wdXRCb29sZWFuKCkgZm9yY2VSZW5kZXIgPSBmYWxzZTtcclxuICBASW5wdXQoKSBjbHNDb250ZW50OnN0cmluZz1cInAtNCB3LWZ1bGwgaC1mdWxsXCI7XHJcbiAgQE91dHB1dCgpIHJlYWRvbmx5IHRhYlNlbGVjdCA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcclxuICBAT3V0cHV0KCkgcmVhZG9ubHkgdGFiRGVzZWxlY3QgPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XHJcbiAgQE91dHB1dCgpIHJlYWRvbmx5IHRhYkNsaWNrID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xyXG4gIEBPdXRwdXQoKSByZWFkb25seSB0YWJDb250ZXh0bWVudSA9IG5ldyBFdmVudEVtaXR0ZXI8TW91c2VFdmVudD4oKTtcclxuXHJcbiAgQENvbnRlbnRDaGlsZChURFNUYWJMaW5rVGVtcGxhdGVEaXJlY3RpdmUsIHsgc3RhdGljOiBmYWxzZSB9KSB0YWJMaW5rVGVtcGxhdGVEaXJlY3RpdmUhOiBURFNUYWJMaW5rVGVtcGxhdGVEaXJlY3RpdmU7XHJcbiAgQENvbnRlbnRDaGlsZChURFNUYWJEaXJlY3RpdmUsIHsgc3RhdGljOiBmYWxzZSwgcmVhZDogVGVtcGxhdGVSZWYgfSkgdGVtcGxhdGU6IFRlbXBsYXRlUmVmPHZvaWQ+IHwgbnVsbCA9IG51bGw7XHJcbiAgQENvbnRlbnRDaGlsZChURFNUYWJMaW5rRGlyZWN0aXZlLCB7IHN0YXRpYzogZmFsc2UgfSkgbGlua0RpcmVjdGl2ZSE6IFREU1RhYkxpbmtEaXJlY3RpdmU7XHJcbiAgQFZpZXdDaGlsZCgnY29udGVudFRlbXBsYXRlJywgeyBzdGF0aWM6IHRydWUgfSkgY29udGVudFRlbXBsYXRlITogVGVtcGxhdGVSZWY8VERTU2FmZUFueT47XHJcblxyXG4gIGlzQWN0aXZlOiBib29sZWFuID0gZmFsc2U7XHJcbiAgcG9zaXRpb246IG51bWJlciB8IG51bGwgPSBudWxsO1xyXG4gIG9yaWdpbjogbnVtYmVyIHwgbnVsbCA9IG51bGw7XHJcbiAgcmVhZG9ubHkgc3RhdGVDaGFuZ2VzID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcclxuXHJcbiAgZ2V0IGNvbnRlbnQoKTogVGVtcGxhdGVSZWY8VERTU2FmZUFueT4ge1xyXG4gICAgcmV0dXJuIHRoaXMudGVtcGxhdGUgfHwgdGhpcy5jb250ZW50VGVtcGxhdGU7XHJcbiAgfVxyXG5cclxuICBnZXQgbGFiZWwoKTogc3RyaW5nIHwgVGVtcGxhdGVSZWY8VERTU2FmZUFueT4ge1xyXG4gICAgcmV0dXJuIHRoaXMudGl0bGUgfHwgdGhpcy50YWJMaW5rVGVtcGxhdGVEaXJlY3RpdmU/LnRlbXBsYXRlUmVmO1xyXG4gIH1cclxuXHJcbiAgY29uc3RydWN0b3IoQEluamVjdChURFNfVEFCX1NFVCkgcHVibGljIGNsb3Nlc3RUYWJTZXQ6IFREU1NhZmVBbnkpIHt9XHJcblxyXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcclxuICAgIFxyXG4gICAgY29uc3QgeyB0aXRsZSwgZGlzYWJsZWQsIGZvcmNlUmVuZGVyIH0gPSBjaGFuZ2VzO1xyXG4gICAgaWYgKHRpdGxlIHx8IGRpc2FibGVkIHx8IGZvcmNlUmVuZGVyKSB7XHJcbiAgICAgIHRoaXMuc3RhdGVDaGFuZ2VzLm5leHQoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xyXG4gICAgdGhpcy5zdGF0ZUNoYW5nZXMuY29tcGxldGUoKTtcclxuICB9XHJcbn1cclxuIl19