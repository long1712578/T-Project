import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "tds-ui/dropdown";
import * as i3 from "tds-ui/core/outlet";
import * as i4 from "./tab-add-button.component";
const _c0 = function () { return { minWidth: "46px" }; };
function TDSTabNavOperationComponent_button_0_Template(rf, ctx) { if (rf & 1) {
    const _r6 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 5, 6);
    i0.ɵɵlistener("visibleChange", function TDSTabNavOperationComponent_button_0_Template_button_visibleChange_0_listener($event) { i0.ɵɵrestoreView(_r6); const ctx_r5 = i0.ɵɵnextContext(); return ctx_r5.menuVisChange($event); })("mouseenter", function TDSTabNavOperationComponent_button_0_Template_button_mouseenter_0_listener() { i0.ɵɵrestoreView(_r6); const ctx_r7 = i0.ɵɵnextContext(); return ctx_r7.showItems(); });
    i0.ɵɵelement(2, "i", 7);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    i0.ɵɵnextContext();
    const _r1 = i0.ɵɵreference(2);
    i0.ɵɵproperty("tdsDropdownMenu", _r1)("overlayStyle", i0.ɵɵpureFunction0(3, _c0))("matchWidthElement", null);
} }
function TDSTabNavOperationComponent_div_4_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const item_r8 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(item_r8.tab.label);
} }
const _c1 = function (a1) { return { visible: false, active: a1 }; };
function TDSTabNavOperationComponent_div_4_Template(rf, ctx) { if (rf & 1) {
    const _r12 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 8);
    i0.ɵɵlistener("click", function TDSTabNavOperationComponent_div_4_Template_div_click_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r12); const item_r8 = restoredCtx.$implicit; const ctx_r11 = i0.ɵɵnextContext(); return ctx_r11.onSelect(item_r8); })("contextmenu", function TDSTabNavOperationComponent_div_4_Template_div_contextmenu_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r12); const item_r8 = restoredCtx.$implicit; const ctx_r13 = i0.ɵɵnextContext(); return ctx_r13.onContextmenu(item_r8, $event); });
    i0.ɵɵtemplate(1, TDSTabNavOperationComponent_div_4_ng_container_1_Template, 2, 1, "ng-container", 9);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r8 = ctx.$implicit;
    i0.ɵɵclassProp("tds-tabs-dropdown-menu-item-disabled", item_r8.disabled);
    i0.ɵɵproperty("selected", item_r8.active)("disabled", item_r8.disabled);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("tdsStringTemplateOutlet", item_r8.tab.label)("tdsStringTemplateOutletContext", i0.ɵɵpureFunction1(6, _c1, item_r8.active));
} }
function TDSTabNavOperationComponent_button_5_Template(rf, ctx) { if (rf & 1) {
    const _r15 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 10);
    i0.ɵɵlistener("click", function TDSTabNavOperationComponent_button_5_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r15); const ctx_r14 = i0.ɵɵnextContext(); return ctx_r14.addClicked.emit(); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵproperty("addIcon", ctx_r3.addIcon);
} }
export class TDSTabNavOperationComponent {
    constructor(cdr, elementRef) {
        this.cdr = cdr;
        this.elementRef = elementRef;
        this.items = [];
        this.addable = false;
        this.addIcon = 'plus';
        this.hidenNextBtn = false;
        this.nextClicked = new EventEmitter();
        this.addClicked = new EventEmitter();
        this.selected = new EventEmitter();
        this.closeAnimationWaitTimeoutId = -1;
        this.menuOpened = false;
        this.element = this.elementRef.nativeElement;
    }
    onSelect(item) {
        if (!item.disabled) {
            // ignore onCanDeactivate
            item.tab.tabClick.emit();
            this.selected.emit(item);
        }
    }
    onContextmenu(item, e) {
        if (!item.disabled) {
            item.tab.tabContextmenu.emit(e);
        }
    }
    showItems() {
        clearTimeout(this.closeAnimationWaitTimeoutId);
        this.menuOpened = true;
        this.cdr.markForCheck();
    }
    menuVisChange(visible) {
        if (!visible) {
            this.closeAnimationWaitTimeoutId = setTimeout(() => {
                this.menuOpened = false;
                this.cdr.markForCheck();
            }, 150);
        }
    }
    getElementWidth() {
        return this.element?.offsetWidth || 0;
    }
    getElementHeight() {
        return this.element?.offsetHeight || 0;
    }
    ngOnDestroy() {
        clearTimeout(this.closeAnimationWaitTimeoutId);
    }
    onclickNext(e) {
        this.nextClicked.emit();
    }
}
TDSTabNavOperationComponent.ɵfac = function TDSTabNavOperationComponent_Factory(t) { return new (t || TDSTabNavOperationComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef)); };
TDSTabNavOperationComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSTabNavOperationComponent, selectors: [["tds-tab-nav-operation"]], hostAttrs: [1, "tds-tabs-nav-operations", "flex", "items-stretch"], hostVars: 4, hostBindings: function TDSTabNavOperationComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵclassProp("tds-tabs-nav-operations-hidden", ctx.items.length === 0)("hidden", ctx.items.length === 0);
    } }, inputs: { items: "items", addable: "addable", addIcon: "addIcon", hidenNextBtn: "hidenNextBtn" }, outputs: { nextClicked: "nextClicked", addClicked: "addClicked", selected: "selected" }, exportAs: ["tdsTabNavOperation"], decls: 6, vars: 3, consts: [["tds-dropdown", "", "class", "tds-tabs-nav-more px-2 py-4", "type", "button", "tabindex", "-1", "aria-hidden", "true", "overlayClassName", "tds-tabs-dropdown", "style", "box-shadow:-12px 0 8px -4px rgb(0 0 0 / 8%)", 3, "tdsDropdownMenu", "overlayStyle", "matchWidthElement", "visibleChange", "mouseenter", 4, "ngIf"], ["menu", "tdsDropdownMenu"], [1, "w-full", "py-2", "overflow-y-auto", "tds-custom-scroll", "bg-white", "dark:bg-d-neutral-3-200", "shadow-1-lg", 2, "max-height", "200px", "min-width", "150px"], ["tds-dropdown-item", "", "class", "tds-tabs-dropdown-menu-item", 3, "tds-tabs-dropdown-menu-item-disabled", "selected", "disabled", "click", "contextmenu", 4, "ngFor", "ngForOf"], ["tds-tab-add-button", "", 3, "addIcon", "click", 4, "ngIf"], ["tds-dropdown", "", "type", "button", "tabindex", "-1", "aria-hidden", "true", "overlayClassName", "tds-tabs-dropdown", 1, "tds-tabs-nav-more", "px-2", "py-4", 2, "box-shadow", "-12px 0 8px -4px rgb(0 0 0 / 8%)", 3, "tdsDropdownMenu", "overlayStyle", "matchWidthElement", "visibleChange", "mouseenter"], ["dropdownTrigger", "tdsDropdown"], [1, "tdsi-three-dots-horizon-fill"], ["tds-dropdown-item", "", 1, "tds-tabs-dropdown-menu-item", 3, "selected", "disabled", "click", "contextmenu"], [4, "tdsStringTemplateOutlet", "tdsStringTemplateOutletContext"], ["tds-tab-add-button", "", 3, "addIcon", "click"]], template: function TDSTabNavOperationComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtemplate(0, TDSTabNavOperationComponent_button_0_Template, 3, 4, "button", 0);
        i0.ɵɵelementStart(1, "tds-dropdown-menu", null, 1)(3, "div", 2);
        i0.ɵɵtemplate(4, TDSTabNavOperationComponent_div_4_Template, 2, 8, "div", 3);
        i0.ɵɵelementEnd()();
        i0.ɵɵtemplate(5, TDSTabNavOperationComponent_button_5_Template, 1, 1, "button", 4);
    } if (rf & 2) {
        i0.ɵɵproperty("ngIf", !ctx.hidenNextBtn);
        i0.ɵɵadvance(4);
        i0.ɵɵproperty("ngForOf", ctx.items);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx.addable);
    } }, directives: [i1.NgIf, i2.TDSDropDownDirective, i2.TDSDropdownMenuComponent, i1.NgForOf, i2.TDSDropDownItemDirective, i3.TDSStringTemplateOutletDirective, i4.TDSTabAddButtonComponent], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSTabNavOperationComponent, [{
        type: Component,
        args: [{ selector: 'tds-tab-nav-operation', exportAs: 'tdsTabNavOperation', preserveWhitespaces: false, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, host: {
                    class: 'tds-tabs-nav-operations flex items-stretch',
                    '[class.tds-tabs-nav-operations-hidden]': 'items.length === 0',
                    '[class.hidden]': 'items.length === 0'
                }, template: "<button *ngIf=\"!hidenNextBtn\" tds-dropdown class=\"tds-tabs-nav-more px-2 py-4\" type=\"button\" tabindex=\"-1\"\r\n  aria-hidden=\"true\" overlayClassName=\"tds-tabs-dropdown\" #dropdownTrigger=\"tdsDropdown\" [tdsDropdownMenu]=\"menu\"\r\n  [overlayStyle]=\"{ minWidth: '46px' }\" [matchWidthElement]=\"null\" (visibleChange)=\"menuVisChange($event)\"\r\n  (mouseenter)=\"showItems()\" style=\"box-shadow:-12px 0 8px -4px rgb(0 0 0 / 8%)\">\r\n  <i class='tdsi-three-dots-horizon-fill'></i>\r\n</button>\r\n<tds-dropdown-menu #menu=\"tdsDropdownMenu\">\r\n  <div class=\"w-full py-2  overflow-y-auto tds-custom-scroll bg-white dark:bg-d-neutral-3-200 shadow-1-lg\"\r\n    style=\"max-height: 200px;min-width: 150px\">\r\n    <div tds-dropdown-item *ngFor=\"let item of items\" class=\"tds-tabs-dropdown-menu-item\"\r\n      [class.tds-tabs-dropdown-menu-item-disabled]=\"item.disabled\" [selected]=\"item.active\" [disabled]=\"item.disabled\"\r\n      (click)=\"onSelect(item)\" (contextmenu)=\"onContextmenu(item, $event)\">\r\n      <ng-container *tdsStringTemplateOutlet=\"item.tab.label; context: { visible: false ,active:item.active }\">{{\r\n        item.tab.label }}</ng-container>\r\n    </div>\r\n  </div>\r\n</tds-dropdown-menu>\r\n<button *ngIf=\"addable\" tds-tab-add-button [addIcon]=\"addIcon\" (click)=\"addClicked.emit()\"></button>" }]
    }], function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }]; }, { items: [{
            type: Input
        }], addable: [{
            type: Input
        }], addIcon: [{
            type: Input
        }], hidenNextBtn: [{
            type: Input
        }], nextClicked: [{
            type: Output
        }], addClicked: [{
            type: Output
        }], selected: [{
            type: Output
        }] }); })();
//# sourceMappingURL=data:application/json;base64,