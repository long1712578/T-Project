import { __decorate } from "tslib";
import { coerceNumberProperty } from '@angular/cdk/coercion';
import { ChangeDetectionStrategy, Component, ContentChildren, EventEmitter, Input, Optional, Output, QueryList, ViewChild, ViewEncapsulation } from '@angular/core';
import { NavigationEnd } from '@angular/router';
import { merge, of, Subject, Subscription } from 'rxjs';
import { delay, filter, first, startWith, takeUntil } from 'rxjs/operators';
import { TDSTabChangeEvent } from './interfaces';
import { TDSTabNavBarComponent } from './tab-nav-bar.component';
import { TDSTabComponent, TDS_TAB_SET } from './tab.component';
import { InputBoolean } from 'tds-ui/shared/utility';
import { WithConfig } from 'tds-ui/core/config';
import { wrapIntoObservable } from 'tds-ui/core/util';
import * as i0 from "@angular/core";
import * as i1 from "tds-ui/core/config";
import * as i2 from "@angular/cdk/bidi";
import * as i3 from "@angular/router";
import * as i4 from "@angular/common";
import * as i5 from "./tab-nav-bar.component";
import * as i6 from "./tab-nav-item.directive";
import * as i7 from "@angular/cdk/a11y";
import * as i8 from "tds-ui/core/outlet";
import * as i9 from "./tab-close-button.component";
import * as i10 from "./tab-body.component";
function TDSTabSetComponent_tds_tabs_nav_0_div_1_ng_container_2_button_3_Template(rf, ctx) { if (rf & 1) {
    const _r9 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 11);
    i0.ɵɵlistener("click", function TDSTabSetComponent_tds_tabs_nav_0_div_1_ng_container_2_button_3_Template_button_click_0_listener($event) { i0.ɵɵrestoreView(_r9); const i_r4 = i0.ɵɵnextContext(2).index; const ctx_r7 = i0.ɵɵnextContext(2); return ctx_r7._onClose(i_r4, $event); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const tab_r3 = i0.ɵɵnextContext(2).$implicit;
    i0.ɵɵproperty("closeIcon", tab_r3.closeIcon);
} }
const _c0 = function (a0, a1, a2, a3, a4) { return { "border-b-3": a0, "border-l-3": a1, "tds-tabs-tab-active  border-primary-1": a2, "border-transparent": a3, "cursor-pointer hover:border-primary-1 ": a4 }; };
function TDSTabSetComponent_tds_tabs_nav_0_div_1_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "div", 9);
    i0.ɵɵtext(2);
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(3, TDSTabSetComponent_tds_tabs_nav_0_div_1_ng_container_2_button_3_Template, 1, 1, "button", 10);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r11 = i0.ɵɵnextContext();
    const i_r4 = ctx_r11.index;
    const tab_r3 = ctx_r11.$implicit;
    const ctx_r5 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction5(3, _c0, ctx_r5.position === "horizontal", ctx_r5.tabPosition === "right" || ctx_r5.tabPosition === "left", ctx_r5.selectedIndex === i_r4, ctx_r5.selectedIndex !== i_r4, !tab_r3.disabled));
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" ", tab_r3.label, " ");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", tab_r3.closable && ctx_r5.closable && !tab_r3.disabled);
} }
const _c1 = function (a0, a1, a2) { return { "text-neutral-1-900 dark:text-d-neutral-1-900": a0, "text-neutral-1-400 dark:text-d-neutral-1-400 hover:text-neutral-1-900 dark:hover:text-d-neutral-1-900": a1, "text-neutral-1-300 dark:text-d-neutral-1-300": a2 }; };
const _c2 = function (a1) { return { visible: true, active: a1 }; };
function TDSTabSetComponent_tds_tabs_nav_0_div_1_Template(rf, ctx) { if (rf & 1) {
    const _r13 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 6);
    i0.ɵɵlistener("click", function TDSTabSetComponent_tds_tabs_nav_0_div_1_Template_div_click_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r13); const tab_r3 = restoredCtx.$implicit; const i_r4 = restoredCtx.index; const ctx_r12 = i0.ɵɵnextContext(2); return ctx_r12.clickNavItem(tab_r3, i_r4, $event); })("contextmenu", function TDSTabSetComponent_tds_tabs_nav_0_div_1_Template_div_contextmenu_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r13); const tab_r3 = restoredCtx.$implicit; const ctx_r14 = i0.ɵɵnextContext(2); return ctx_r14.contextmenuNavItem(tab_r3, $event); });
    i0.ɵɵelementStart(1, "div", 7);
    i0.ɵɵtemplate(2, TDSTabSetComponent_tds_tabs_nav_0_div_1_ng_container_2_Template, 4, 9, "ng-container", 8);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const tab_r3 = ctx.$implicit;
    const i_r4 = ctx.index;
    const ctx_r2 = i0.ɵɵnextContext(2);
    i0.ɵɵstyleProp("margin-right", ctx_r2.position === "horizontal" ? ctx_r2.tabBarGutter : null, "px")("margin-bottom", ctx_r2.position === "vertical" ? ctx_r2.tabBarGutter : null, "px");
    i0.ɵɵclassProp("tds-tabs-tab-disabled", tab_r3.disabled);
    i0.ɵɵproperty("ngClass", ctx_r2.clsTab);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("disabled", tab_r3.disabled)("tab", tab_r3)("active", ctx_r2.selectedIndex === i_r4)("ngClass", i0.ɵɵpureFunction3(17, _c1, !tab_r3.disabled && ctx_r2.selectedIndex === i_r4, !tab_r3.disabled && ctx_r2.selectedIndex !== i_r4, tab_r3.disabled));
    i0.ɵɵattribute("tabIndex", ctx_r2.getTabIndex(tab_r3, i_r4))("aria-disabled", tab_r3.disabled)("aria-selected", ctx_r2.selectedIndex === i_r4 && !ctx_r2.hideAll)("aria-controls", ctx_r2.getTabContentId(i_r4));
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("tdsStringTemplateOutlet", tab_r3.label)("tdsStringTemplateOutletContext", i0.ɵɵpureFunction1(21, _c2, ctx_r2.selectedIndex === i_r4));
} }
function TDSTabSetComponent_tds_tabs_nav_0_Template(rf, ctx) { if (rf & 1) {
    const _r16 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "tds-tabs-nav", 4);
    i0.ɵɵlistener("tabScroll", function TDSTabSetComponent_tds_tabs_nav_0_Template_tds_tabs_nav_tabScroll_0_listener($event) { i0.ɵɵrestoreView(_r16); const ctx_r15 = i0.ɵɵnextContext(); return ctx_r15.tabListScroll.emit($event); })("selectFocusedIndex", function TDSTabSetComponent_tds_tabs_nav_0_Template_tds_tabs_nav_selectFocusedIndex_0_listener($event) { i0.ɵɵrestoreView(_r16); const ctx_r17 = i0.ɵɵnextContext(); return ctx_r17.setSelectedIndex($event); })("addClicked", function TDSTabSetComponent_tds_tabs_nav_0_Template_tds_tabs_nav_addClicked_0_listener() { i0.ɵɵrestoreView(_r16); const ctx_r18 = i0.ɵɵnextContext(); return ctx_r18._onAdd(); });
    i0.ɵɵtemplate(1, TDSTabSetComponent_tds_tabs_nav_0_div_1_Template, 3, 23, "div", 5);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵclassMap(ctx_r0.clsTab);
    i0.ɵɵproperty("ngStyle", ctx_r0.tabBarStyle)("selectedIndex", ctx_r0.selectedIndex || 0)("inkBarAnimated", ctx_r0.inkBarAnimated)("addable", ctx_r0.addable)("addIcon", ctx_r0.addIcon)("hideBar", ctx_r0.hideAll)("position", ctx_r0.position)("tabPosition", ctx_r0.tabPosition)("extraTemplate", ctx_r0.tabBarExtraContent)("hidenNextBtn", ctx_r0.hidenNextBtn);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngForOf", ctx_r0.tabs);
} }
function TDSTabSetComponent_div_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "div", 12);
} if (rf & 2) {
    const tab_r19 = ctx.$implicit;
    const i_r20 = ctx.index;
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵproperty("active", ctx_r1.selectedIndex == i_r20 && !ctx_r1.hideAll)("content", tab_r19.content)("forceRender", tab_r19.forceRender)("tabPaneAnimated", ctx_r1.tabPaneAnimated)("ngClass", tab_r19.clsContent);
} }
const TDS_CONFIG_MODULE_NAME = 'tabs';
let nextId = 0;
export class TDSTabSetComponent {
    constructor(tdsConfigService, cdr, directionality, router) {
        this.tdsConfigService = tdsConfigService;
        this.cdr = cdr;
        this.directionality = directionality;
        this.router = router;
        this.tabPosition = 'top';
        this.onCanDeactivate = null;
        this.addIcon = 'plus';
        this.tabBarStyle = null;
        this.type = 'line';
        this.size = 'default';
        this.animated = false;
        this.tabBarGutter = undefined;
        this.hideAdd = false;
        this.centered = false;
        this.hideAll = false;
        this.linkRouter = false;
        this.linkExact = true;
        this.hidenNextBtn = false;
        this.clsTab = 'px-4';
        this.selectChange = new EventEmitter(true);
        this.selectedIndexChange = new EventEmitter();
        this.tabListScroll = new EventEmitter();
        this.close = new EventEmitter();
        this.add = new EventEmitter();
        // Pick up only direct descendants under ivy rendering engine
        // We filter out only the tabs that belong to this tab set in `tabs`.
        this.allTabs = new QueryList();
        // All the direct tabs for this tab set
        this.tabs = new QueryList();
        this.dir = 'ltr';
        this.destroy$ = new Subject();
        this.indexToSelect = 0;
        this._selectedIndex = null;
        this.tabLabelSubscription = Subscription.EMPTY;
        this.tabsSubscription = Subscription.EMPTY;
        this.canDeactivateSubscription = Subscription.EMPTY;
        this.tabSetId = nextId++;
    }
    get selectedIndex() {
        return this._selectedIndex;
    }
    set selectedIndex(value) {
        this.indexToSelect = coerceNumberProperty(value, null);
    }
    get position() {
        return ['top', 'bottom'].indexOf(this.tabPosition) === -1 ? 'vertical' : 'horizontal';
    }
    get addable() {
        return this.type === 'editable-card' && !this.hideAdd;
    }
    get closable() {
        return this.type === 'editable-card';
    }
    get line() {
        return this.type === 'line';
    }
    get inkBarAnimated() {
        return this.line && (typeof this.animated === 'boolean' ? this.animated : this.animated.inkBar);
    }
    get tabPaneAnimated() {
        return false;
        // (
        //   this.position === 'horizontal' && this.line && (typeof this.animated === 'boolean' ? this.animated : this.animated.tabPane)
        // );
    }
    ngOnInit() {
        this.dir = this.directionality.value;
        this.directionality.change?.pipe(takeUntil(this.destroy$)).subscribe((direction) => {
            this.dir = direction;
            this.cdr.detectChanges();
        });
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
        this.tabs.destroy();
        this.tabLabelSubscription.unsubscribe();
        this.tabsSubscription.unsubscribe();
        this.canDeactivateSubscription.unsubscribe();
    }
    ngAfterContentInit() {
        Promise.resolve().then(() => {
            this.setUpRouter();
        });
        this.subscribeToTabLabels();
        this.subscribeToAllTabChanges();
        // Subscribe to changes in the amount of tabs, in order to be
        // able to re-render the content as new tabs are added or removed.
        this.tabsSubscription = this.tabs.changes.subscribe(() => {
            const indexToSelect = this.clampTabIndex(this.indexToSelect);
            // Maintain the previously-selected tab if a new tab is added or removed and there is no
            // explicit change that selects a different tab.
            if (indexToSelect === this._selectedIndex) {
                const tabs = this.tabs.toArray();
                for (let i = 0; i < tabs.length; i++) {
                    if (tabs[i].isActive) {
                        // Assign both to the `indexToSelect` and `_selectedIndex` so we don't fire a changed
                        // event, otherwise the consumer may end up in an infinite loop in some edge cases like
                        // adding a tab within the `selectedIndexChange` event.
                        this.indexToSelect = this._selectedIndex = i;
                        break;
                    }
                }
            }
            this.subscribeToTabLabels();
            this.cdr.markForCheck();
        });
    }
    ngAfterContentChecked() {
        // Don't clamp the `indexToSelect` immediately in the setter because it can happen that
        // the amount of tabs changes before the actual change detection runs.
        const indexToSelect = (this.indexToSelect = this.clampTabIndex(this.indexToSelect));
        // If there is a change in selected index, emit a change event. Should not trigger if
        // the selected index has not yet been initialized.
        if (this._selectedIndex !== indexToSelect) {
            const isFirstRun = this._selectedIndex == null;
            if (!isFirstRun) {
                this.selectChange.emit(this.createChangeEvent(indexToSelect));
            }
            // Changing these values after change detection has run
            // since the checked content may contain references to them.
            Promise.resolve().then(() => {
                this.tabs.forEach((tab, index) => (tab.isActive = index === indexToSelect));
                if (!isFirstRun) {
                    this.selectedIndexChange.emit(indexToSelect);
                }
            });
        }
        // Setup the position for each tab and optionally setup an origin on the next selected tab.
        this.tabs.forEach((tab, index) => {
            tab.position = index - indexToSelect;
            // If there is already a selected tab, then set up an origin for the next selected tab
            // if it doesn't have one already.
            if (this._selectedIndex != null && tab.position === 0 && !tab.origin) {
                tab.origin = indexToSelect - this._selectedIndex;
            }
        });
        if (this._selectedIndex !== indexToSelect) {
            this._selectedIndex = indexToSelect;
            this.cdr.markForCheck();
        }
    }
    _onClose(index, e) {
        e.preventDefault();
        e.stopPropagation();
        this.close.emit({ index });
    }
    _onAdd() {
        this.add.emit();
    }
    clampTabIndex(index) {
        return Math.min(this.tabs.length - 1, Math.max(index || 0, 0));
    }
    createChangeEvent(index) {
        const event = new TDSTabChangeEvent();
        event.index = index;
        if (this.tabs && this.tabs.length) {
            event.tab = this.tabs.toArray()[index];
            this.tabs.forEach((tab, i) => {
                if (i !== index) {
                    tab.tabDeselect.emit();
                }
            });
            event.tab.tabSelect.emit();
        }
        return event;
    }
    subscribeToTabLabels() {
        if (this.tabLabelSubscription) {
            this.tabLabelSubscription.unsubscribe();
        }
        this.tabLabelSubscription = merge(...this.tabs.map(tab => tab.stateChanges)).subscribe(() => this.cdr.markForCheck());
    }
    subscribeToAllTabChanges() {
        this.allTabs.changes.pipe(startWith(this.allTabs)).subscribe((tabs) => {
            this.tabs.reset(tabs.filter(tab => tab.closestTabSet === this));
            this.tabs.notifyOnChanges();
        });
    }
    canDeactivateFun(pre, next) {
        if (typeof this.onCanDeactivate === 'function') {
            const observable = wrapIntoObservable(this.onCanDeactivate(pre, next));
            return observable.pipe(first(), takeUntil(this.destroy$));
        }
        else {
            return of(true);
        }
    }
    clickNavItem(tab, index, e) {
        if (!tab.disabled) {
            // ignore onCanDeactivate
            tab.tabClick.emit();
            if (!this.isRouterLinkClickEvent(index, e)) {
                this.setSelectedIndex(index);
            }
        }
    }
    isRouterLinkClickEvent(index, event) {
        const target = event.target;
        if (this.linkRouter) {
            return !!this.tabs.toArray()[index]?.linkDirective?.elementRef.nativeElement.contains(target);
        }
        else {
            return false;
        }
    }
    contextmenuNavItem(tab, e) {
        if (!tab.disabled) {
            // ignore onCanDeactivate
            tab.tabContextmenu.emit(e);
        }
    }
    setSelectedIndex(index) {
        this.canDeactivateSubscription.unsubscribe();
        this.canDeactivateSubscription = this.canDeactivateFun(this._selectedIndex, index).subscribe(can => {
            if (can) {
                this.selectedIndex = index;
                this.tabNavBarRef.focusIndex = index;
                this.cdr.markForCheck();
            }
        });
    }
    getTabIndex(tab, index) {
        if (tab.disabled) {
            return null;
        }
        return this._selectedIndex === index ? 0 : -1;
    }
    getTabContentId(i) {
        return `tds-tabs-${this.tabSetId}-tab-${i}`;
    }
    setUpRouter() {
        if (this.linkRouter) {
            if (!this.router) {
                throw new Error(`[TDS] you should import 'RouterModule' if you want to use 'linkRouter'!`);
            }
            this.router.events
                .pipe(takeUntil(this.destroy$), filter(e => e instanceof NavigationEnd), startWith(true), delay(0))
                .subscribe(() => {
                this.updateRouterActive();
                this.cdr.markForCheck();
            });
        }
    }
    updateRouterActive() {
        if (this.router.navigated) {
            const index = this.findShouldActiveTabIndex();
            if (index !== this._selectedIndex) {
                this.setSelectedIndex(index);
            }
            this.hideAll = index === -1;
        }
    }
    findShouldActiveTabIndex() {
        const tabs = this.tabs.toArray();
        const isActive = this.isLinkActive(this.router);
        return tabs.findIndex(tab => {
            const c = tab.linkDirective;
            return c ? isActive(c.routerLink) || isActive(c.routerLinkWithHref) : false;
        });
    }
    isLinkActive(router) {
        return (link) => (link ? router.isActive(link.urlTree, this.linkExact) : false);
    }
    getTabContentMarginValue() {
        return -(this.selectedIndex || 0) * 100;
    }
    getTabContentMarginLeft() {
        if (this.tabPaneAnimated) {
            if (this.dir !== 'rtl') {
                return this.getTabContentMarginValue() + '%';
            }
        }
        return '';
    }
    getTabContentMarginRight() {
        if (this.tabPaneAnimated) {
            if (this.dir === 'rtl') {
                return this.getTabContentMarginValue() + '%';
            }
        }
        return '';
    }
}
TDSTabSetComponent.ɵfac = function TDSTabSetComponent_Factory(t) { return new (t || TDSTabSetComponent)(i0.ɵɵdirectiveInject(i1.TDSConfigService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.Directionality, 8), i0.ɵɵdirectiveInject(i3.Router, 8)); };
TDSTabSetComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSTabSetComponent, selectors: [["tds-tabset"]], contentQueries: function TDSTabSetComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        i0.ɵɵcontentQuery(dirIndex, TDSTabComponent, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.allTabs = _t);
    } }, viewQuery: function TDSTabSetComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(TDSTabNavBarComponent, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tabNavBarRef = _t.first);
    } }, hostAttrs: [1, "tds-tabs", "box-border", "m-0", "p-0", "flex", "overflow-hidden", "w-full"], hostVars: 32, hostBindings: function TDSTabSetComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵclassProp("tds-tabs-card", ctx.type === "card" || ctx.type === "editable-card")("tds-tabs-editable", ctx.type === "editable-card")("tds-tabs-editable-card", ctx.type === "editable-card")("tds-tabs-centered", ctx.centered)("tds-tabs-rtl", ctx.dir === "rtl")("tds-tabs-top", ctx.tabPosition === "top")("flex-col", ctx.tabPosition === "top" || ctx.tabPosition === "bottom")("tds-tabs-bottom", ctx.tabPosition === "bottom")("tds-tabs-left", ctx.tabPosition === "left")("tds-tabs-right", ctx.tabPosition === "right")("flex-row-reverse", ctx.tabPosition === "right")("flex-col-reverse", ctx.tabPosition === "bottom")("py-4", ctx.tabPosition === "right")("tds-tabs-default", ctx.size === "default")("tds-tabs-small", ctx.size === "small")("tds-tabs-large", ctx.size === "large");
    } }, inputs: { selectedIndex: "selectedIndex", tabPosition: "tabPosition", tabBarExtraContent: "tabBarExtraContent", onCanDeactivate: "onCanDeactivate", addIcon: "addIcon", tabBarStyle: "tabBarStyle", type: "type", size: "size", animated: "animated", tabBarGutter: "tabBarGutter", hideAdd: "hideAdd", centered: "centered", hideAll: "hideAll", linkRouter: "linkRouter", linkExact: "linkExact", hidenNextBtn: "hidenNextBtn", clsTab: "clsTab" }, outputs: { selectChange: "selectChange", selectedIndexChange: "selectedIndexChange", tabListScroll: "tabListScroll", close: "close", add: "add" }, exportAs: ["tdsTabset"], features: [i0.ɵɵProvidersFeature([
            {
                provide: TDS_TAB_SET,
                useExisting: TDSTabSetComponent
            }
        ])], decls: 4, vars: 16, consts: [[3, "ngStyle", "selectedIndex", "inkBarAnimated", "addable", "addIcon", "hideBar", "position", "tabPosition", "extraTemplate", "class", "hidenNextBtn", "tabScroll", "selectFocusedIndex", "addClicked", 4, "ngIf"], [1, "tds-tabs-content-holder", "h-full", "w-full"], [1, "tds-tabs-content", "h-full", "w-full"], ["tds-tab-body", "", 3, "active", "content", "forceRender", "tabPaneAnimated", "ngClass", 4, "ngFor", "ngForOf"], [3, "ngStyle", "selectedIndex", "inkBarAnimated", "addable", "addIcon", "hideBar", "position", "tabPosition", "extraTemplate", "hidenNextBtn", "tabScroll", "selectFocusedIndex", "addClicked"], ["class", "tds-tabs-tab relative inline-block outline-none  text-body-2 ", 3, "margin-right", "margin-bottom", "tds-tabs-tab-disabled", "ngClass", "click", "contextmenu", 4, "ngFor", "ngForOf"], [1, "tds-tabs-tab", "relative", "inline-block", "outline-none", "text-body-2", 3, "ngClass", "click", "contextmenu"], ["role", "tab", "tdsTabNavItem", "", "cdkMonitorElementFocus", "", 1, "tds-tabs-tab-btn", "focus:outline-none", "w-full", 3, "disabled", "tab", "active", "ngClass"], [4, "tdsStringTemplateOutlet", "tdsStringTemplateOutletContext"], [1, "px-2", "py-4", "font-semibold", "text-body-2", 3, "ngClass"], ["tds-tab-close-button", "", 3, "closeIcon", "click", 4, "ngIf"], ["tds-tab-close-button", "", 3, "closeIcon", "click"], ["tds-tab-body", "", 3, "active", "content", "forceRender", "tabPaneAnimated", "ngClass"]], template: function TDSTabSetComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtemplate(0, TDSTabSetComponent_tds_tabs_nav_0_Template, 2, 13, "tds-tabs-nav", 0);
        i0.ɵɵelementStart(1, "div", 1)(2, "div", 2);
        i0.ɵɵtemplate(3, TDSTabSetComponent_div_3_Template, 1, 5, "div", 3);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        i0.ɵɵproperty("ngIf", ctx.tabs.length);
        i0.ɵɵadvance(2);
        i0.ɵɵstyleProp("margin-left", ctx.getTabContentMarginLeft())("margin-right", ctx.getTabContentMarginRight());
        i0.ɵɵclassProp("tds-tabs-content-top", ctx.tabPosition === "top")("tds-tabs-content-bottom", ctx.tabPosition === "bottom")("tds-tabs-content-left", ctx.tabPosition === "left")("tds-tabs-content-right", ctx.tabPosition === "right")("tds-tabs-content-animated", ctx.tabPaneAnimated);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngForOf", ctx.tabs);
    } }, directives: [i4.NgIf, i5.TDSTabNavBarComponent, i4.NgStyle, i4.NgForOf, i4.NgClass, i6.TDSTabNavItemDirective, i7.CdkMonitorFocus, i8.TDSStringTemplateOutletDirective, i9.TDSTabCloseButtonComponent, i10.TDSTabBodyComponent], encapsulation: 2 });
__decorate([
    WithConfig()
], TDSTabSetComponent.prototype, "type", void 0);
__decorate([
    WithConfig()
], TDSTabSetComponent.prototype, "size", void 0);
__decorate([
    WithConfig()
], TDSTabSetComponent.prototype, "animated", void 0);
__decorate([
    WithConfig()
], TDSTabSetComponent.prototype, "tabBarGutter", void 0);
__decorate([
    InputBoolean()
], TDSTabSetComponent.prototype, "hideAdd", void 0);
__decorate([
    InputBoolean()
], TDSTabSetComponent.prototype, "centered", void 0);
__decorate([
    InputBoolean()
], TDSTabSetComponent.prototype, "hideAll", void 0);
__decorate([
    InputBoolean()
], TDSTabSetComponent.prototype, "linkRouter", void 0);
__decorate([
    InputBoolean()
], TDSTabSetComponent.prototype, "linkExact", void 0);
__decorate([
    InputBoolean()
], TDSTabSetComponent.prototype, "hidenNextBtn", void 0);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSTabSetComponent, [{
        type: Component,
        args: [{ selector: 'tds-tabset', exportAs: 'tdsTabset', preserveWhitespaces: false, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, providers: [
                    {
                        provide: TDS_TAB_SET,
                        useExisting: TDSTabSetComponent
                    }
                ], host: {
                    class: 'tds-tabs box-border m-0 p-0 flex overflow-hidden w-full ',
                    '[class.tds-tabs-card]': `type === 'card' || type === 'editable-card'`,
                    '[class.tds-tabs-editable]': `type === 'editable-card'`,
                    '[class.tds-tabs-editable-card]': `type === 'editable-card'`,
                    '[class.tds-tabs-centered]': `centered`,
                    '[class.tds-tabs-rtl]': `dir === 'rtl'`,
                    '[class.tds-tabs-top]': `tabPosition === 'top'`,
                    '[class.flex-col]': `tabPosition === 'top' || tabPosition === 'bottom'`,
                    '[class.tds-tabs-bottom]': `tabPosition === 'bottom'`,
                    '[class.tds-tabs-left]': `tabPosition === 'left'`,
                    '[class.tds-tabs-right]': `tabPosition === 'right'`,
                    '[class.flex-row-reverse]': `tabPosition === 'right'`,
                    '[class.flex-col-reverse]': `tabPosition === 'bottom'`,
                    '[class.py-4]': `tabPosition === 'right'`,
                    '[class.tds-tabs-default]': `size === 'default'`,
                    '[class.tds-tabs-small]': `size === 'small'`,
                    '[class.tds-tabs-large]': `size === 'large'`
                }, template: "<tds-tabs-nav *ngIf=\"tabs.length\" [ngStyle]=\"tabBarStyle\" [selectedIndex]=\"selectedIndex || 0\"\r\n    [inkBarAnimated]=\"inkBarAnimated\" [addable]=\"addable\" [addIcon]=\"addIcon\" [hideBar]=\"hideAll\" [position]=\"position\"\r\n    [tabPosition]=\"tabPosition\" [extraTemplate]=\"tabBarExtraContent\" (tabScroll)=\"tabListScroll.emit($event)\"\r\n    (selectFocusedIndex)=\"setSelectedIndex($event)\" (addClicked)=\"_onAdd()\" [class]=\"clsTab\" [hidenNextBtn]=\"hidenNextBtn\">\r\n    <div class=\"tds-tabs-tab relative inline-block outline-none  text-body-2 \"\r\n        [style.margin-right.px]=\"position === 'horizontal' ? tabBarGutter : null\"\r\n        [style.margin-bottom.px]=\"position === 'vertical' ? tabBarGutter : null\"\r\n        [class.tds-tabs-tab-disabled]=\"tab.disabled\" (click)=\"clickNavItem(tab, i, $event)\" [ngClass]=\"clsTab\"\r\n        (contextmenu)=\"contextmenuNavItem(tab, $event)\" *ngFor=\"let tab of tabs; let i = index\">\r\n        <div role=\"tab\" [attr.tabIndex]=\"getTabIndex(tab, i)\" [attr.aria-disabled]=\"tab.disabled\"\r\n            [attr.aria-selected]=\"selectedIndex === i && !hideAll\" [attr.aria-controls]=\"getTabContentId(i)\"\r\n            [disabled]=\"tab.disabled\" [tab]=\"tab\" [active]=\"selectedIndex === i\"\r\n            class=\"tds-tabs-tab-btn focus:outline-none w-full\" tdsTabNavItem cdkMonitorElementFocus [ngClass]=\"{\r\n                'text-neutral-1-900 dark:text-d-neutral-1-900':!tab.disabled && selectedIndex === i,\r\n                    'text-neutral-1-400 dark:text-d-neutral-1-400 hover:text-neutral-1-900 dark:hover:text-d-neutral-1-900':!tab.disabled && selectedIndex !== i,\r\n                    'text-neutral-1-300 dark:text-d-neutral-1-300':tab.disabled\r\n            }\">\r\n            <ng-container *tdsStringTemplateOutlet=\"tab.label; context: { visible: true , active: selectedIndex === i}\">\r\n                <div class=\"px-2 py-4 font-semibold text-body-2\" [ngClass]=\"{\r\n                    'border-b-3':position === 'horizontal',\r\n                    'border-l-3': tabPosition === 'right' || tabPosition === 'left',\r\n                    'tds-tabs-tab-active  border-primary-1':selectedIndex === i,\r\n                    'border-transparent':selectedIndex !== i,\r\n                    'cursor-pointer hover:border-primary-1 ':!tab.disabled\r\n                    \r\n                }\">\r\n                    {{ tab.label }}\r\n                </div>\r\n                <button tds-tab-close-button *ngIf=\"tab.closable && closable && !tab.disabled\"\r\n                    [closeIcon]=\"tab.closeIcon\" (click)=\"_onClose(i, $event)\"></button>\r\n            </ng-container>\r\n\r\n\r\n        </div>\r\n    </div>\r\n</tds-tabs-nav>\r\n<div class=\"tds-tabs-content-holder h-full w-full\">\r\n    <div class=\"tds-tabs-content h-full w-full\" [class.tds-tabs-content-top]=\"tabPosition === 'top'\"\r\n        [class.tds-tabs-content-bottom]=\"tabPosition === 'bottom'\"\r\n        [class.tds-tabs-content-left]=\"tabPosition === 'left'\" [class.tds-tabs-content-right]=\"tabPosition === 'right'\"\r\n        [class.tds-tabs-content-animated]=\"tabPaneAnimated\" [style.margin-left]=\"getTabContentMarginLeft()\"\r\n        [style.margin-right]=\"getTabContentMarginRight()\">\r\n        <div tds-tab-body *ngFor=\"let tab of tabs; let i = index\" [active]=\"selectedIndex == i && !hideAll\"\r\n            [content]=\"tab.content\" [forceRender]=\"tab.forceRender\" [tabPaneAnimated]=\"tabPaneAnimated\"\r\n            [ngClass]=\"tab.clsContent\"></div>\r\n    </div>\r\n</div>" }]
    }], function () { return [{ type: i1.TDSConfigService }, { type: i0.ChangeDetectorRef }, { type: i2.Directionality, decorators: [{
                type: Optional
            }] }, { type: i3.Router, decorators: [{
                type: Optional
            }] }]; }, { selectedIndex: [{
            type: Input
        }], tabPosition: [{
            type: Input
        }], tabBarExtraContent: [{
            type: Input
        }], onCanDeactivate: [{
            type: Input
        }], addIcon: [{
            type: Input
        }], tabBarStyle: [{
            type: Input
        }], type: [{
            type: Input
        }], size: [{
            type: Input
        }], animated: [{
            type: Input
        }], tabBarGutter: [{
            type: Input
        }], hideAdd: [{
            type: Input
        }], centered: [{
            type: Input
        }], hideAll: [{
            type: Input
        }], linkRouter: [{
            type: Input
        }], linkExact: [{
            type: Input
        }], hidenNextBtn: [{
            type: Input
        }], clsTab: [{
            type: Input
        }], selectChange: [{
            type: Output
        }], selectedIndexChange: [{
            type: Output
        }], tabListScroll: [{
            type: Output
        }], close: [{
            type: Output
        }], add: [{
            type: Output
        }], allTabs: [{
            type: ContentChildren,
            args: [TDSTabComponent, { descendants: true }]
        }], tabNavBarRef: [{
            type: ViewChild,
            args: [TDSTabNavBarComponent, { static: false }]
        }] }); })();
//# sourceMappingURL=data:application/json;base64,