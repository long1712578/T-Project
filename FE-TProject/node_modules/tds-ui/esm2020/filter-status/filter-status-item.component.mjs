import { ChangeDetectionStrategy, Component, ContentChild, Input, Optional, TemplateRef, ViewEncapsulation } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { TDSFilterStatusTemplateDirective } from './filter-status.directive';
import * as i0 from "@angular/core";
import * as i1 from "./filter-status.service";
import * as i2 from "@angular/common";
function TDSFilterStatusItemComponent_ng_template_0_Template(rf, ctx) { }
const _c0 = function (a0, a1) { return { "text-white bg-primary-1": a0, "text-neutral-1-500  dark:text-d-neutral-1-500 bg-neutral-3-100 dark:bg-d-neutral-1-400  group-hover:text-white group-hover:bg-primary-1": a1 }; };
function TDSFilterStatusItemComponent_ng_template_1_div_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 5);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r9 = i0.ɵɵnextContext();
    const active_r3 = ctx_r9.active;
    const count_r5 = ctx_r9.count;
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction2(2, _c0, active_r3, !active_r3));
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" ", count_r5, " ");
} }
const _c1 = function (a0, a1) { return { "border-b-3 border-primary-1": a0, "hover:border-b-3 hover:border-primary-1 group": a1 }; };
const _c2 = function (a0, a1) { return { "text-neutral-1-900 dark:text-d-neutral-1-900": a0, "text-neutral-1-400 dark:text-d-neutral-1-400 group-hover:text-neutral-1-900 dark:group-hover:text-d-neutral-1-900": a1 }; };
function TDSFilterStatusItemComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 2)(1, "div", 3);
    i0.ɵɵtext(2);
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(3, TDSFilterStatusItemComponent_ng_template_1_div_3_Template, 2, 5, "div", 4);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const active_r3 = ctx.active;
    const disabled_r4 = ctx.disabled;
    const count_r5 = ctx.count;
    const name_r6 = ctx.name;
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction2(4, _c1, active_r3, !disabled_r4));
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction2(7, _c2, active_r3, !active_r3));
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(name_r6);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", count_r5);
} }
const _c3 = function (a0, a1, a2, a3, a4) { return { active: a0, disabled: a1, name: a2, count: a3, $implicit: a4 }; };
export class TDSFilterStatusItemComponent {
    constructor(elementRef, cdr, tdsFilterStatusService) {
        this.elementRef = elementRef;
        this.cdr = cdr;
        this.tdsFilterStatusService = tdsFilterStatusService;
        this.active = false;
        this.disabled = false;
        this.value = null;
        this.count = null;
        this.name = null;
        this.destroy$ = new Subject();
    }
    ngOnInit() {
        if (this.tdsFilterStatusService) {
            this.tdsFilterStatusService.disabled$.pipe(takeUntil(this.destroy$)).subscribe(disabled => {
                this.disabled = disabled;
                this.cdr.markForCheck();
            });
            this.tdsFilterStatusService.selected$.pipe(takeUntil(this.destroy$)).subscribe(value => {
                this.active = this.value === value;
                this.cdr.markForCheck();
            });
        }
    }
    onHostClick(event) {
        /** prevent label click triggered twice. **/
        event.stopPropagation();
        event.preventDefault();
        if (!this.disabled && !this.active) {
            if (this.tdsFilterStatusService) {
                this.tdsFilterStatusService.select(this.value);
            }
        }
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    ngOnChanges(changes) {
        this.cdr.markForCheck();
    }
}
TDSFilterStatusItemComponent.ɵfac = function TDSFilterStatusItemComponent_Factory(t) { return new (t || TDSFilterStatusItemComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.TDSFilterStatusService, 8)); };
TDSFilterStatusItemComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSFilterStatusItemComponent, selectors: [["tds-filter-status-item"]], contentQueries: function TDSFilterStatusItemComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        i0.ɵɵcontentQuery(dirIndex, TDSFilterStatusTemplateDirective, 5, TemplateRef);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.customTemplate = _t.first);
    } }, hostAttrs: [1, "inline-block"], hostVars: 4, hostBindings: function TDSFilterStatusItemComponent_HostBindings(rf, ctx) { if (rf & 1) {
        i0.ɵɵlistener("click", function TDSFilterStatusItemComponent_click_HostBindingHandler($event) { return ctx.onHostClick($event); });
    } if (rf & 2) {
        i0.ɵɵclassProp("cursor-pointer", !ctx.disabled)("cursor-not-allowed", ctx.disabled);
    } }, inputs: { disabled: "disabled", value: "value", count: "count", name: "name" }, exportAs: ["tdsFilterTab"], features: [i0.ɵɵNgOnChangesFeature], decls: 3, vars: 8, consts: [[3, "ngTemplateOutlet", "ngTemplateOutletContext"], ["defaultTemplate", ""], [1, "p-4", "flex", "items-center", 3, "ngClass"], [1, "text-body-2", "mr-2", "font-semibold", 3, "ngClass"], ["class", "text-caption-2 font-semibold py-0.5 px-1.5 rounded-full flex", 3, "ngClass", 4, "ngIf"], [1, "text-caption-2", "font-semibold", "py-0.5", "px-1.5", "rounded-full", "flex", 3, "ngClass"]], template: function TDSFilterStatusItemComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtemplate(0, TDSFilterStatusItemComponent_ng_template_0_Template, 0, 0, "ng-template", 0);
        i0.ɵɵtemplate(1, TDSFilterStatusItemComponent_ng_template_1_Template, 4, 10, "ng-template", null, 1, i0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r1 = i0.ɵɵreference(2);
        i0.ɵɵproperty("ngTemplateOutlet", ctx.customTemplate || _r1)("ngTemplateOutletContext", i0.ɵɵpureFunction5(2, _c3, ctx.active, ctx.disabled, ctx.name, ctx.count, ctx.value));
    } }, directives: [i2.NgTemplateOutlet, i2.NgClass, i2.NgIf], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSFilterStatusItemComponent, [{
        type: Component,
        args: [{ selector: 'tds-filter-status-item', exportAs: 'tdsFilterTab', preserveWhitespaces: false, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {
                    '(click)': 'onHostClick($event)',
                    '[class.cursor-pointer]': '!disabled',
                    '[class.cursor-not-allowed]': 'disabled',
                    'class': "inline-block"
                }, template: "<!-- <ng-content></ng-content> -->\r\n<ng-template [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\r\n    [ngTemplateOutletContext]=\"{active:active, disabled:disabled, name:name, count:count, $implicit:value }\">\r\n</ng-template>\r\n<ng-template #defaultTemplate let-active='active' let-disabled=\"disabled\" let-count='count' let-name='name' let-value>\r\n    <div class=\"p-4 flex items-center \" [ngClass]=\"{'border-b-3 border-primary-1':active,'hover:border-b-3 hover:border-primary-1 group':!disabled}\">\r\n        <div class=\"text-body-2 mr-2 font-semibold\" [ngClass]=\"{'text-neutral-1-900 dark:text-d-neutral-1-900':active,'text-neutral-1-400 dark:text-d-neutral-1-400 group-hover:text-neutral-1-900 dark:group-hover:text-d-neutral-1-900':!active}\">{{name}}</div>\r\n        <div *ngIf=\"count\" class=\"text-caption-2 font-semibold py-0.5 px-1.5 rounded-full flex\" [ngClass]=\"{'text-white bg-primary-1':active,'text-neutral-1-500  dark:text-d-neutral-1-500 bg-neutral-3-100 dark:bg-d-neutral-1-400  group-hover:text-white group-hover:bg-primary-1':!active}\"> \r\n            {{count}}\r\n        </div>\r\n    </div>\r\n</ng-template>" }]
    }], function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1.TDSFilterStatusService, decorators: [{
                type: Optional
            }] }]; }, { disabled: [{
            type: Input
        }], value: [{
            type: Input
        }], count: [{
            type: Input
        }], name: [{
            type: Input
        }], customTemplate: [{
            type: ContentChild,
            args: [TDSFilterStatusTemplateDirective, { read: TemplateRef }]
        }] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLXN0YXR1cy1pdGVtLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL3Rkcy11aS9maWx0ZXItc3RhdHVzL2ZpbHRlci1zdGF0dXMtaXRlbS5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi9wcm9qZWN0cy90ZHMtdWkvZmlsdGVyLXN0YXR1cy9maWx0ZXItc3RhdHVzLWl0ZW0uY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLHVCQUF1QixFQUFxQixTQUFTLEVBQUUsWUFBWSxFQUFjLEtBQUssRUFBZ0MsUUFBUSxFQUFpQixXQUFXLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOU0sT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMvQixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFM0MsT0FBTyxFQUFFLGdDQUFnQyxFQUFFLE1BQU0sMkJBQTJCLENBQUM7Ozs7Ozs7SUNHckUsOEJBQXlSO0lBQ3JSLFlBQ0o7SUFBQSxpQkFBTTs7Ozs7SUFGa0YsMkVBQWdNO0lBQ3BSLGVBQ0o7SUFESSx5Q0FDSjs7Ozs7SUFKSiw4QkFBaUosYUFBQTtJQUMrRixZQUFRO0lBQUEsaUJBQU07SUFDMVAsMkZBRU07SUFDVixpQkFBTTs7Ozs7O0lBTDhCLDZFQUE0RztJQUNoRyxlQUErTDtJQUEvTCwyRUFBK0w7SUFBQyxlQUFRO0lBQVIsNkJBQVE7SUFDOU8sZUFBVztJQUFYLCtCQUFXOzs7QURjekIsTUFBTSxPQUFPLDRCQUE0QjtJQVd2QyxZQUFvQixVQUFzQixFQUNoQyxHQUFzQixFQUNWLHNCQUE4QztRQUZoRCxlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQ2hDLFFBQUcsR0FBSCxHQUFHLENBQW1CO1FBQ1YsMkJBQXNCLEdBQXRCLHNCQUFzQixDQUF3QjtRQVpwRSxXQUFNLEdBQVksS0FBSyxDQUFDO1FBQ2YsYUFBUSxHQUFZLEtBQUssQ0FBQztRQUMxQixVQUFLLEdBQXNCLElBQUksQ0FBQztRQUNoQyxVQUFLLEdBQWtCLElBQUksQ0FBQztRQUM1QixTQUFJLEdBQWtCLElBQUksQ0FBQztRQUM1QixhQUFRLEdBQUcsSUFBSSxPQUFPLEVBQVEsQ0FBQztJQU9rQyxDQUFDO0lBSTFFLFFBQVE7UUFDTixJQUFJLElBQUksQ0FBQyxzQkFBc0IsRUFBRTtZQUMvQixJQUFJLENBQUMsc0JBQXNCLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxFQUFFO2dCQUN4RixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztnQkFDekIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsQ0FBQztZQUMxQixDQUFDLENBQUMsQ0FBQztZQUNILElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBRXJGLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssS0FBSyxLQUFLLENBQUM7Z0JBQ25DLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLENBQUM7WUFDMUIsQ0FBQyxDQUFDLENBQUM7U0FFSjtJQUNILENBQUM7SUFDRCxXQUFXLENBQUMsS0FBaUI7UUFDM0IsNENBQTRDO1FBQzVDLEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUN4QixLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDdkIsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2xDLElBQUksSUFBSSxDQUFDLHNCQUFzQixFQUFFO2dCQUMvQixJQUFJLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUNoRDtTQUNGO0lBRUgsQ0FBQztJQUNELFdBQVc7UUFDVCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDM0IsQ0FBQztJQUNELFdBQVcsQ0FBQyxPQUFzQjtRQUNqQyxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3pCLENBQUM7O3dHQWhEVSw0QkFBNEI7K0VBQTVCLDRCQUE0QjtvQ0FVekIsZ0NBQWdDLEtBQVUsV0FBVzs7Ozs7K0dBVnhELHVCQUFtQjs7OztRQ3BCaEMsNkZBRWM7UUFDZCwrSEFPYzs7O1FBVkQsNERBQXNELGlIQUFBOzt1RkRvQnRELDRCQUE0QjtjQWR4QyxTQUFTOzJCQUNFLHdCQUF3QixZQUV4QixjQUFjLHVCQUNILEtBQUssaUJBQ1gsaUJBQWlCLENBQUMsSUFBSSxtQkFDcEIsdUJBQXVCLENBQUMsTUFBTSxRQUN6QztvQkFDSixTQUFTLEVBQUUscUJBQXFCO29CQUNoQyx3QkFBd0IsRUFBQyxXQUFXO29CQUNwQyw0QkFBNEIsRUFBQyxVQUFVO29CQUN2QyxPQUFPLEVBQUUsY0FBYztpQkFDeEI7O3NCQWVFLFFBQVE7d0JBWEYsUUFBUTtrQkFBaEIsS0FBSztZQUNHLEtBQUs7a0JBQWIsS0FBSztZQUNHLEtBQUs7a0JBQWIsS0FBSztZQUNHLElBQUk7a0JBQVosS0FBSztZQUtpRSxjQUFjO2tCQUFwRixZQUFZO21CQUFDLGdDQUFnQyxFQUFFLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDaGFuZ2VEZXRlY3RvclJlZiwgQ29tcG9uZW50LCBDb250ZW50Q2hpbGQsIEVsZW1lbnRSZWYsIElucHV0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgT25Jbml0LCBPcHRpb25hbCwgU2ltcGxlQ2hhbmdlcywgVGVtcGxhdGVSZWYsIFZpZXdFbmNhcHN1bGF0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBURFNTYWZlQW55IH0gZnJvbSAndGRzLXVpL3NoYXJlZC91dGlsaXR5JztcclxuaW1wb3J0IHsgVERTRmlsdGVyU3RhdHVzVGVtcGxhdGVEaXJlY3RpdmUgfSBmcm9tICcuL2ZpbHRlci1zdGF0dXMuZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgVERTRmlsdGVyU3RhdHVzU2VydmljZSB9IGZyb20gJy4vZmlsdGVyLXN0YXR1cy5zZXJ2aWNlJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAndGRzLWZpbHRlci1zdGF0dXMtaXRlbScsXHJcbiAgdGVtcGxhdGVVcmw6ICcuL2ZpbHRlci1zdGF0dXMtaXRlbS5jb21wb25lbnQuaHRtbCcsXHJcbiAgZXhwb3J0QXM6ICd0ZHNGaWx0ZXJUYWInLFxyXG4gIHByZXNlcnZlV2hpdGVzcGFjZXM6IGZhbHNlLFxyXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXHJcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXHJcbiAgaG9zdDoge1xyXG4gICAgJyhjbGljayknOiAnb25Ib3N0Q2xpY2soJGV2ZW50KScsXHJcbiAgICAnW2NsYXNzLmN1cnNvci1wb2ludGVyXSc6JyFkaXNhYmxlZCcsIFxyXG4gICAgJ1tjbGFzcy5jdXJzb3Itbm90LWFsbG93ZWRdJzonZGlzYWJsZWQnLFxyXG4gICAgJ2NsYXNzJzogXCJpbmxpbmUtYmxvY2tcIlxyXG4gIH1cclxufSlcclxuZXhwb3J0IGNsYXNzIFREU0ZpbHRlclN0YXR1c0l0ZW1Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSxPbkNoYW5nZXMge1xyXG4gIGFjdGl2ZTogYm9vbGVhbiA9IGZhbHNlO1xyXG4gIEBJbnB1dCgpIGRpc2FibGVkOiBib29sZWFuID0gZmFsc2U7XHJcbiAgQElucHV0KCkgdmFsdWU6IFREU1NhZmVBbnkgfCBudWxsID0gbnVsbDtcclxuICBASW5wdXQoKSBjb3VudDogbnVtYmVyIHwgbnVsbCA9IG51bGw7XHJcbiAgQElucHV0KCkgbmFtZTogc3RyaW5nIHwgbnVsbCA9IG51bGw7XHJcbiAgcHJpdmF0ZSBkZXN0cm95JCA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XHJcblxyXG5cclxuICAvLyBjdXN0b20gdGVtcGxhdGVzXHJcbiAgQENvbnRlbnRDaGlsZChURFNGaWx0ZXJTdGF0dXNUZW1wbGF0ZURpcmVjdGl2ZSwgeyByZWFkOiBUZW1wbGF0ZVJlZiB9KSBjdXN0b21UZW1wbGF0ZSE6IFRlbXBsYXRlUmVmPFREU1NhZmVBbnk+O1xyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZixcclxuICAgIHByaXZhdGUgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZixcclxuICAgIEBPcHRpb25hbCgpIHByaXZhdGUgdGRzRmlsdGVyU3RhdHVzU2VydmljZTogVERTRmlsdGVyU3RhdHVzU2VydmljZSwpIHsgfVxyXG4gXHJcblxyXG5cclxuICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLnRkc0ZpbHRlclN0YXR1c1NlcnZpY2UpIHtcclxuICAgICAgdGhpcy50ZHNGaWx0ZXJTdGF0dXNTZXJ2aWNlLmRpc2FibGVkJC5waXBlKHRha2VVbnRpbCh0aGlzLmRlc3Ryb3kkKSkuc3Vic2NyaWJlKGRpc2FibGVkID0+IHtcclxuICAgICAgICB0aGlzLmRpc2FibGVkID0gZGlzYWJsZWQ7XHJcbiAgICAgICAgdGhpcy5jZHIubWFya0ZvckNoZWNrKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgICB0aGlzLnRkc0ZpbHRlclN0YXR1c1NlcnZpY2Uuc2VsZWN0ZWQkLnBpcGUodGFrZVVudGlsKHRoaXMuZGVzdHJveSQpKS5zdWJzY3JpYmUodmFsdWUgPT4ge1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuYWN0aXZlID0gdGhpcy52YWx1ZSA9PT0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5jZHIubWFya0ZvckNoZWNrKCk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgIH1cclxuICB9XHJcbiAgb25Ib3N0Q2xpY2soZXZlbnQ6IE1vdXNlRXZlbnQpIHtcclxuICAgIC8qKiBwcmV2ZW50IGxhYmVsIGNsaWNrIHRyaWdnZXJlZCB0d2ljZS4gKiovXHJcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICBpZiAoIXRoaXMuZGlzYWJsZWQgJiYgIXRoaXMuYWN0aXZlKSB7XHJcbiAgICAgIGlmICh0aGlzLnRkc0ZpbHRlclN0YXR1c1NlcnZpY2UpIHtcclxuICAgICAgICB0aGlzLnRkc0ZpbHRlclN0YXR1c1NlcnZpY2Uuc2VsZWN0KHRoaXMudmFsdWUpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gIH1cclxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcclxuICAgIHRoaXMuZGVzdHJveSQubmV4dCgpO1xyXG4gICAgdGhpcy5kZXN0cm95JC5jb21wbGV0ZSgpO1xyXG4gIH1cclxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XHJcbiAgIHRoaXMuY2RyLm1hcmtGb3JDaGVjaygpO1xyXG4gIH1cclxufVxyXG4iLCI8IS0tIDxuZy1jb250ZW50PjwvbmctY29udGVudD4gLS0+XHJcbjxuZy10ZW1wbGF0ZSBbbmdUZW1wbGF0ZU91dGxldF09XCJjdXN0b21UZW1wbGF0ZSB8fCBkZWZhdWx0VGVtcGxhdGVcIlxyXG4gICAgW25nVGVtcGxhdGVPdXRsZXRDb250ZXh0XT1cInthY3RpdmU6YWN0aXZlLCBkaXNhYmxlZDpkaXNhYmxlZCwgbmFtZTpuYW1lLCBjb3VudDpjb3VudCwgJGltcGxpY2l0OnZhbHVlIH1cIj5cclxuPC9uZy10ZW1wbGF0ZT5cclxuPG5nLXRlbXBsYXRlICNkZWZhdWx0VGVtcGxhdGUgbGV0LWFjdGl2ZT0nYWN0aXZlJyBsZXQtZGlzYWJsZWQ9XCJkaXNhYmxlZFwiIGxldC1jb3VudD0nY291bnQnIGxldC1uYW1lPSduYW1lJyBsZXQtdmFsdWU+XHJcbiAgICA8ZGl2IGNsYXNzPVwicC00IGZsZXggaXRlbXMtY2VudGVyIFwiIFtuZ0NsYXNzXT1cInsnYm9yZGVyLWItMyBib3JkZXItcHJpbWFyeS0xJzphY3RpdmUsJ2hvdmVyOmJvcmRlci1iLTMgaG92ZXI6Ym9yZGVyLXByaW1hcnktMSBncm91cCc6IWRpc2FibGVkfVwiPlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJ0ZXh0LWJvZHktMiBtci0yIGZvbnQtc2VtaWJvbGRcIiBbbmdDbGFzc109XCJ7J3RleHQtbmV1dHJhbC0xLTkwMCBkYXJrOnRleHQtZC1uZXV0cmFsLTEtOTAwJzphY3RpdmUsJ3RleHQtbmV1dHJhbC0xLTQwMCBkYXJrOnRleHQtZC1uZXV0cmFsLTEtNDAwIGdyb3VwLWhvdmVyOnRleHQtbmV1dHJhbC0xLTkwMCBkYXJrOmdyb3VwLWhvdmVyOnRleHQtZC1uZXV0cmFsLTEtOTAwJzohYWN0aXZlfVwiPnt7bmFtZX19PC9kaXY+XHJcbiAgICAgICAgPGRpdiAqbmdJZj1cImNvdW50XCIgY2xhc3M9XCJ0ZXh0LWNhcHRpb24tMiBmb250LXNlbWlib2xkIHB5LTAuNSBweC0xLjUgcm91bmRlZC1mdWxsIGZsZXhcIiBbbmdDbGFzc109XCJ7J3RleHQtd2hpdGUgYmctcHJpbWFyeS0xJzphY3RpdmUsJ3RleHQtbmV1dHJhbC0xLTUwMCAgZGFyazp0ZXh0LWQtbmV1dHJhbC0xLTUwMCBiZy1uZXV0cmFsLTMtMTAwIGRhcms6YmctZC1uZXV0cmFsLTEtNDAwICBncm91cC1ob3Zlcjp0ZXh0LXdoaXRlIGdyb3VwLWhvdmVyOmJnLXByaW1hcnktMSc6IWFjdGl2ZX1cIj4gXHJcbiAgICAgICAgICAgIHt7Y291bnR9fVxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbjwvbmctdGVtcGxhdGU+Il19