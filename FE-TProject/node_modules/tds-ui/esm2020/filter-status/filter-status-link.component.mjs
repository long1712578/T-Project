import { ChangeDetectionStrategy, Component, ContentChild, Input, Optional, ViewEncapsulation } from "@angular/core";
import { Subject } from "rxjs";
import { takeUntil } from "rxjs/operators";
import { TDSFilterStatusLinkDirective } from "./filter-status-link.directive";
import * as i0 from "@angular/core";
import * as i1 from "./filter-status.service";
const _c0 = ["*"];
export class TDSFilterStatusLinkComponent {
    constructor(elementRef, cdr, tdsFilterStatusService) {
        this.elementRef = elementRef;
        this.cdr = cdr;
        this.tdsFilterStatusService = tdsFilterStatusService;
        this.active = false;
        this.disabled = false;
        this.value = null;
        this.count = null;
        this.name = null;
        this.destroy$ = new Subject();
    }
    ngOnInit() {
        if (this.tdsFilterStatusService) {
            this.tdsFilterStatusService.disabled$.pipe(takeUntil(this.destroy$)).subscribe(disabled => {
                this.disabled = disabled;
                this.cdr.markForCheck();
            });
            this.tdsFilterStatusService.selected$.pipe(takeUntil(this.destroy$)).subscribe(value => {
                this.active = this.value === value;
                this.cdr.markForCheck();
            });
        }
    }
    onHostClick(event) {
        /** prevent label click triggered twice. **/
        event.stopPropagation();
        event.preventDefault();
        if (!this.disabled && !this.active) {
            if (this.tdsFilterStatusService) {
                this.tdsFilterStatusService.select(this.value);
            }
        }
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    ngOnChanges(changes) {
        this.cdr.markForCheck();
    }
}
TDSFilterStatusLinkComponent.ɵfac = function TDSFilterStatusLinkComponent_Factory(t) { return new (t || TDSFilterStatusLinkComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.TDSFilterStatusService, 8)); };
TDSFilterStatusLinkComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSFilterStatusLinkComponent, selectors: [["tds-filter-status-link"]], contentQueries: function TDSFilterStatusLinkComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        i0.ɵɵcontentQuery(dirIndex, TDSFilterStatusLinkDirective, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.linkDirective = _t.first);
    } }, hostAttrs: [1, "inline-block"], hostVars: 4, hostBindings: function TDSFilterStatusLinkComponent_HostBindings(rf, ctx) { if (rf & 1) {
        i0.ɵɵlistener("click", function TDSFilterStatusLinkComponent_click_HostBindingHandler($event) { return ctx.onHostClick($event); });
    } if (rf & 2) {
        i0.ɵɵclassProp("cursor-pointer", !ctx.disabled)("cursor-not-allowed", ctx.disabled);
    } }, inputs: { disabled: "disabled", value: "value", count: "count", name: "name" }, exportAs: ["tdsFilterLink"], features: [i0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function TDSFilterStatusLinkComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSFilterStatusLinkComponent, [{
        type: Component,
        args: [{ selector: 'tds-filter-status-link', exportAs: 'tdsFilterLink', preserveWhitespaces: false, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {
                    '(click)': 'onHostClick($event)',
                    '[class.cursor-pointer]': '!disabled',
                    '[class.cursor-not-allowed]': 'disabled',
                    'class': "inline-block"
                }, template: "<ng-content></ng-content> " }]
    }], function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1.TDSFilterStatusService, decorators: [{
                type: Optional
            }] }]; }, { disabled: [{
            type: Input
        }], value: [{
            type: Input
        }], count: [{
            type: Input
        }], name: [{
            type: Input
        }], linkDirective: [{
            type: ContentChild,
            args: [TDSFilterStatusLinkDirective, { static: false }]
        }] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLXN0YXR1cy1saW5rLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL3Rkcy11aS9maWx0ZXItc3RhdHVzL2ZpbHRlci1zdGF0dXMtbGluay5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi9wcm9qZWN0cy90ZHMtdWkvZmlsdGVyLXN0YXR1cy9maWx0ZXItc3RhdHVzLWxpbmsuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLHVCQUF1QixFQUFxQixTQUFTLEVBQUUsWUFBWSxFQUFjLEtBQUssRUFBZ0MsUUFBUSxFQUFpQixpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNqTSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQy9CLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUUzQyxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQzs7OztBQWlCNUUsTUFBTSxPQUFPLDRCQUE0QjtJQVF2QyxZQUFvQixVQUFzQixFQUNoQyxHQUFzQixFQUNWLHNCQUE4QztRQUZoRCxlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQ2hDLFFBQUcsR0FBSCxHQUFHLENBQW1CO1FBQ1YsMkJBQXNCLEdBQXRCLHNCQUFzQixDQUF3QjtRQVRwRSxXQUFNLEdBQVksS0FBSyxDQUFDO1FBQ2YsYUFBUSxHQUFZLEtBQUssQ0FBQztRQUMxQixVQUFLLEdBQXNCLElBQUksQ0FBQztRQUNoQyxVQUFLLEdBQWtCLElBQUksQ0FBQztRQUM1QixTQUFJLEdBQWtCLElBQUksQ0FBQztRQUU1QixhQUFRLEdBQUcsSUFBSSxPQUFPLEVBQVEsQ0FBQztJQUdpQyxDQUFDO0lBQ3pFLFFBQVE7UUFDTixJQUFJLElBQUksQ0FBQyxzQkFBc0IsRUFBRTtZQUMvQixJQUFJLENBQUMsc0JBQXNCLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxFQUFFO2dCQUN4RixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztnQkFDekIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsQ0FBQztZQUMxQixDQUFDLENBQUMsQ0FBQztZQUNILElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBRXJGLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssS0FBSyxLQUFLLENBQUM7Z0JBQ25DLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLENBQUM7WUFDMUIsQ0FBQyxDQUFDLENBQUM7U0FDSjtJQUNILENBQUM7SUFDRCxXQUFXLENBQUMsS0FBaUI7UUFDM0IsNENBQTRDO1FBQzVDLEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUN4QixLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDdkIsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2xDLElBQUksSUFBSSxDQUFDLHNCQUFzQixFQUFFO2dCQUMvQixJQUFJLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUNoRDtTQUNGO0lBRUgsQ0FBQztJQUNELFdBQVc7UUFDVCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDM0IsQ0FBQztJQUNELFdBQVcsQ0FBQyxPQUFzQjtRQUNqQyxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3pCLENBQUM7O3dHQXpDVSw0QkFBNEI7K0VBQTVCLDRCQUE0QjtvQ0FNekIsNEJBQTRCOzs7OzsrR0FOL0IsdUJBQW1COzs7OztRQ3JCbEMsa0JBQXlCOzt1RkRxQlYsNEJBQTRCO2NBZDFDLFNBQVM7MkJBQ0ksd0JBQXdCLFlBRXhCLGVBQWUsdUJBQ0osS0FBSyxpQkFDWCxpQkFBaUIsQ0FBQyxJQUFJLG1CQUNwQix1QkFBdUIsQ0FBQyxNQUFNLFFBQ3pDO29CQUNKLFNBQVMsRUFBRSxxQkFBcUI7b0JBQ2hDLHdCQUF3QixFQUFDLFdBQVc7b0JBQ3BDLDRCQUE0QixFQUFDLFVBQVU7b0JBQ3ZDLE9BQU8sRUFBRSxjQUFjO2lCQUN4Qjs7c0JBWUUsUUFBUTt3QkFSRixRQUFRO2tCQUFoQixLQUFLO1lBQ0csS0FBSztrQkFBYixLQUFLO1lBQ0csS0FBSztrQkFBYixLQUFLO1lBQ0csSUFBSTtrQkFBWixLQUFLO1lBQ3lELGFBQWE7a0JBQTNFLFlBQVk7bUJBQUMsNEJBQTRCLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENoYW5nZURldGVjdG9yUmVmLCBDb21wb25lbnQsIENvbnRlbnRDaGlsZCwgRWxlbWVudFJlZiwgSW5wdXQsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBPbkluaXQsIE9wdGlvbmFsLCBTaW1wbGVDaGFuZ2VzLCBWaWV3RW5jYXBzdWxhdGlvbiB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tIFwicnhqc1wiO1xyXG5pbXBvcnQgeyB0YWtlVW50aWwgfSBmcm9tIFwicnhqcy9vcGVyYXRvcnNcIjtcclxuaW1wb3J0IHsgVERTU2FmZUFueSB9IGZyb20gXCJ0ZHMtdWkvc2hhcmVkL3V0aWxpdHlcIjtcclxuaW1wb3J0IHsgVERTRmlsdGVyU3RhdHVzTGlua0RpcmVjdGl2ZSB9IGZyb20gXCIuL2ZpbHRlci1zdGF0dXMtbGluay5kaXJlY3RpdmVcIjtcclxuaW1wb3J0IHsgVERTRmlsdGVyU3RhdHVzU2VydmljZSB9IGZyb20gXCIuL2ZpbHRlci1zdGF0dXMuc2VydmljZVwiO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ3Rkcy1maWx0ZXItc3RhdHVzLWxpbmsnLFxyXG4gICAgdGVtcGxhdGVVcmw6ICcuL2ZpbHRlci1zdGF0dXMtbGluay5jb21wb25lbnQuaHRtbCcsXHJcbiAgICBleHBvcnRBczogJ3Rkc0ZpbHRlckxpbmsnLFxyXG4gICAgcHJlc2VydmVXaGl0ZXNwYWNlczogZmFsc2UsXHJcbiAgICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxyXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXHJcbiAgICBob3N0OiB7XHJcbiAgICAgICcoY2xpY2spJzogJ29uSG9zdENsaWNrKCRldmVudCknLFxyXG4gICAgICAnW2NsYXNzLmN1cnNvci1wb2ludGVyXSc6JyFkaXNhYmxlZCcsIFxyXG4gICAgICAnW2NsYXNzLmN1cnNvci1ub3QtYWxsb3dlZF0nOidkaXNhYmxlZCcsXHJcbiAgICAgICdjbGFzcyc6IFwiaW5saW5lLWJsb2NrXCJcclxuICAgIH1cclxuICB9KVxyXG4gIGV4cG9ydCBjbGFzcyBURFNGaWx0ZXJTdGF0dXNMaW5rQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3ksT25DaGFuZ2VzIHtcclxuICAgIGFjdGl2ZTogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgQElucHV0KCkgZGlzYWJsZWQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIEBJbnB1dCgpIHZhbHVlOiBURFNTYWZlQW55IHwgbnVsbCA9IG51bGw7XHJcbiAgICBASW5wdXQoKSBjb3VudDogbnVtYmVyIHwgbnVsbCA9IG51bGw7XHJcbiAgICBASW5wdXQoKSBuYW1lOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcclxuICAgIEBDb250ZW50Q2hpbGQoVERTRmlsdGVyU3RhdHVzTGlua0RpcmVjdGl2ZSwgeyBzdGF0aWM6IGZhbHNlIH0pIGxpbmtEaXJlY3RpdmUhOiBURFNGaWx0ZXJTdGF0dXNMaW5rRGlyZWN0aXZlO1xyXG4gICAgcHJpdmF0ZSBkZXN0cm95JCA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXHJcbiAgICAgIHByaXZhdGUgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZixcclxuICAgICAgQE9wdGlvbmFsKCkgcHJpdmF0ZSB0ZHNGaWx0ZXJTdGF0dXNTZXJ2aWNlOiBURFNGaWx0ZXJTdGF0dXNTZXJ2aWNlKSB7IH1cclxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgICBpZiAodGhpcy50ZHNGaWx0ZXJTdGF0dXNTZXJ2aWNlKSB7XHJcbiAgICAgICAgdGhpcy50ZHNGaWx0ZXJTdGF0dXNTZXJ2aWNlLmRpc2FibGVkJC5waXBlKHRha2VVbnRpbCh0aGlzLmRlc3Ryb3kkKSkuc3Vic2NyaWJlKGRpc2FibGVkID0+IHtcclxuICAgICAgICAgIHRoaXMuZGlzYWJsZWQgPSBkaXNhYmxlZDtcclxuICAgICAgICAgIHRoaXMuY2RyLm1hcmtGb3JDaGVjaygpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMudGRzRmlsdGVyU3RhdHVzU2VydmljZS5zZWxlY3RlZCQucGlwZSh0YWtlVW50aWwodGhpcy5kZXN0cm95JCkpLnN1YnNjcmliZSh2YWx1ZSA9PiB7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIHRoaXMuYWN0aXZlID0gdGhpcy52YWx1ZSA9PT0gdmFsdWU7XHJcbiAgICAgICAgICB0aGlzLmNkci5tYXJrRm9yQ2hlY2soKTtcclxuICAgICAgICB9KTsgIFxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBvbkhvc3RDbGljayhldmVudDogTW91c2VFdmVudCkge1xyXG4gICAgICAvKiogcHJldmVudCBsYWJlbCBjbGljayB0cmlnZ2VyZWQgdHdpY2UuICoqL1xyXG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgaWYgKCF0aGlzLmRpc2FibGVkICYmICF0aGlzLmFjdGl2ZSkge1xyXG4gICAgICAgIGlmICh0aGlzLnRkc0ZpbHRlclN0YXR1c1NlcnZpY2UpIHtcclxuICAgICAgICAgIHRoaXMudGRzRmlsdGVyU3RhdHVzU2VydmljZS5zZWxlY3QodGhpcy52YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgXHJcbiAgICB9XHJcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcclxuICAgICAgdGhpcy5kZXN0cm95JC5uZXh0KCk7XHJcbiAgICAgIHRoaXMuZGVzdHJveSQuY29tcGxldGUoKTtcclxuICAgIH1cclxuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcclxuICAgICB0aGlzLmNkci5tYXJrRm9yQ2hlY2soKTtcclxuICAgIH1cclxuICB9XHJcbiAgIiwiPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PiAiXX0=