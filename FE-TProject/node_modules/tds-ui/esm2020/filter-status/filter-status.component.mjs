import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, ContentChildren, EventEmitter, forwardRef, Input, Optional, Output, QueryList, ViewEncapsulation } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { NavigationEnd } from '@angular/router';
import { Subject } from 'rxjs';
import { delay, filter, startWith, takeUntil } from 'rxjs/operators';
import { InputBoolean } from 'tds-ui/shared/utility';
import { TDSFilterStatusItemComponent } from './filter-status-item.component';
import { TDSFilterStatusLinkComponent } from './filter-status-link.component';
import { TDSFilterStatusService } from './filter-status.service';
import * as i0 from "@angular/core";
import * as i1 from "./filter-status.service";
import * as i2 from "@angular/router";
const _c0 = ["*"];
export class TDSFilterStatusComponent {
    constructor(cdr, tdsFilterStatusService, router) {
        this.cdr = cdr;
        this.tdsFilterStatusService = tdsFilterStatusService;
        this.router = router;
        this._value = null;
        this.disabled = false;
        this.linkRouter = false;
        this.linkExact = true;
        this.selectChangeEvent = new EventEmitter();
        this.links = new QueryList();
        this.destroy$ = new Subject();
        this.onChange = () => { };
        this.onTouched = () => { };
    }
    get value() {
        return this._value;
    }
    set value(v) {
        if (this._value !== v) {
            this._value = v;
        }
    }
    ngOnInit() {
        if (this.tdsFilterStatusService) {
            this.tdsFilterStatusService.selected$.pipe(takeUntil(this.destroy$)).subscribe(value => {
                if (this.value !== value) {
                    this.value = value;
                    this.selectChangeEvent.emit(this.value);
                    this.onChange(this.value);
                }
            });
        }
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    ngAfterContentInit() {
        Promise.resolve().then(() => {
            this.setUpRouter();
        });
    }
    ngOnChanges(changes) {
    }
    writeValue(value) {
        this.value = value;
        this.tdsFilterStatusService.select(value);
        this.cdr.markForCheck();
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    setSelectedIndex(value) {
        if (value != this.value)
            this.tdsFilterStatusService.select(value);
    }
    setUpRouter() {
        if (this.linkRouter) {
            if (!this.router) {
                throw new Error(`[TDS] you should import 'RouterModule' if you want to use 'linkRouter'!`);
            }
            this.router.events
                .pipe(takeUntil(this.destroy$), filter(e => e instanceof NavigationEnd), startWith(true), delay(0))
                .subscribe(() => {
                this.updateRouterActive();
                this.cdr.markForCheck();
            });
        }
    }
    updateRouterActive() {
        if (this.router.navigated) {
            const index = this.findShouldActiveTabIndex();
            if (index > -1) {
                const links = this.listLinkChild.toArray();
                this.setSelectedIndex(links[index].value);
            }
        }
    }
    findShouldActiveTabIndex() {
        const links = this.listLinkChild.toArray();
        const isActive = this.isLinkActive(this.router);
        return links.findIndex(link => {
            const c = link.linkDirective;
            return c ? isActive(c.routerLink) || isActive(c.routerLinkWithHref) : false;
        });
    }
    isLinkActive(router) {
        return (link) => (link ? router.isActive(link.urlTree ? link.urlTree : '', this.linkExact) : false);
    }
}
TDSFilterStatusComponent.ɵfac = function TDSFilterStatusComponent_Factory(t) { return new (t || TDSFilterStatusComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.TDSFilterStatusService, 8), i0.ɵɵdirectiveInject(i2.Router, 8)); };
TDSFilterStatusComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSFilterStatusComponent, selectors: [["tds-filter-status"]], contentQueries: function TDSFilterStatusComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        i0.ɵɵcontentQuery(dirIndex, TDSFilterStatusItemComponent, 4);
        i0.ɵɵcontentQuery(dirIndex, TDSFilterStatusLinkComponent, 4);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.listChild = _t);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.listLinkChild = _t);
    } }, hostAttrs: [1, "inline-block"], inputs: { disabled: "disabled", linkRouter: "linkRouter", linkExact: "linkExact" }, outputs: { selectChangeEvent: "selectChange" }, exportAs: ["tdsFilterStatus"], features: [i0.ɵɵProvidersFeature([
            TDSFilterStatusService,
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => TDSFilterStatusComponent),
                multi: true
            }
        ]), i0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function TDSFilterStatusComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
__decorate([
    InputBoolean()
], TDSFilterStatusComponent.prototype, "disabled", void 0);
__decorate([
    InputBoolean()
], TDSFilterStatusComponent.prototype, "linkRouter", void 0);
__decorate([
    InputBoolean()
], TDSFilterStatusComponent.prototype, "linkExact", void 0);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSFilterStatusComponent, [{
        type: Component,
        args: [{
                selector: 'tds-filter-status',
                exportAs: 'tdsFilterStatus',
                preserveWhitespaces: false,
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: `
  <ng-content></ng-content>
  `,
                host: {
                    class: 'inline-block',
                },
                providers: [
                    TDSFilterStatusService,
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => TDSFilterStatusComponent),
                        multi: true
                    }
                ]
            }]
    }], function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.TDSFilterStatusService, decorators: [{
                type: Optional
            }] }, { type: i2.Router, decorators: [{
                type: Optional
            }] }]; }, { disabled: [{
            type: Input
        }], linkRouter: [{
            type: Input
        }], linkExact: [{
            type: Input
        }], selectChangeEvent: [{
            type: Output,
            args: ['selectChange']
        }], listChild: [{
            type: ContentChildren,
            args: [TDSFilterStatusItemComponent]
        }], listLinkChild: [{
            type: ContentChildren,
            args: [TDSFilterStatusLinkComponent]
        }] }); })();
//# sourceMappingURL=data:application/json;base64,