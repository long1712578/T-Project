import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { InputBoolean } from 'tds-ui/shared/utility';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "../addon/filter.component";
import * as i3 from "../addon/sorters.component";
const _c0 = ["columnKey", ""];
function TDSThAddOnComponent_tds_table_filter_0_Template(rf, ctx) { if (rf & 1) {
    const _r10 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "tds-table-filter", 5);
    i0.ɵɵlistener("filterChange", function TDSThAddOnComponent_tds_table_filter_0_Template_tds_table_filter_filterChange_0_listener($event) { i0.ɵɵrestoreView(_r10); const ctx_r9 = i0.ɵɵnextContext(); return ctx_r9.onFilterValueChange($event); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    const _r1 = i0.ɵɵreference(2);
    const _r3 = i0.ɵɵreference(4);
    i0.ɵɵproperty("contentTemplate", _r1)("extraTemplate", _r3)("customFilter", ctx_r0.customFilter)("filterMultiple", ctx_r0.filterMultiple)("listOfFilter", ctx_r0.filters);
} }
function TDSThAddOnComponent_ng_template_1_ng_template_0_Template(rf, ctx) { }
function TDSThAddOnComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, TDSThAddOnComponent_ng_template_1_ng_template_0_Template, 0, 0, "ng-template", 6);
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    const _r5 = i0.ɵɵreference(6);
    const _r7 = i0.ɵɵreference(8);
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r2.showSort ? _r5 : _r7);
} }
function TDSThAddOnComponent_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵprojection(0);
    i0.ɵɵprojection(1, 1);
} }
function TDSThAddOnComponent_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "tds-table-sorters", 7);
} if (rf & 2) {
    const ctx_r6 = i0.ɵɵnextContext();
    const _r7 = i0.ɵɵreference(8);
    i0.ɵɵproperty("sortOrder", ctx_r6._sortOrder)("_sortDirections", ctx_r6._sortDirections)("contentTemplate", _r7);
} }
function TDSThAddOnComponent_ng_template_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵprojection(0, 2);
} }
const _c1 = [[["", "tds-th-extra", ""]], [["tds-filter-trigger"]], "*"];
const _c2 = ["[tds-th-extra]", "tds-filter-trigger", "*"];
export class TDSThAddOnComponent {
    constructor(cdr) {
        this.cdr = cdr;
        this.manualClickOrder$ = new Subject();
        this.calcOperatorChange$ = new Subject();
        this.filterValue = null;
        this._sortOrder = null;
        this._sortDirections = ['ascend', 'descend', null];
        this.sortOrderChange$ = new Subject();
        this.destroy$ = new Subject();
        this.isNzShowSortChanged = false;
        this.isNzShowFilterChanged = false;
        this.filterMultiple = true;
        this.sortOrder = null;
        this.sortPriority = false;
        this.sortDirections = ['ascend', 'descend', null];
        this.filters = [];
        this.sortFn = null;
        this.filterFn = null;
        this.showSort = false;
        this.showFilter = false;
        this.customFilter = false;
        this.checkedChange = new EventEmitter();
        this.sortOrderChange = new EventEmitter();
        this.filterChange = new EventEmitter();
    }
    getNextSortDirection(_sortDirections, current) {
        const index = _sortDirections.indexOf(current);
        if (index === _sortDirections.length - 1) {
            return _sortDirections[0];
        }
        else {
            return _sortDirections[index + 1];
        }
    }
    emitNextSortValue() {
        if (this.showSort) {
            const nextOrder = this.getNextSortDirection(this._sortDirections, this._sortOrder);
            this.setSortOrder(nextOrder);
            this.manualClickOrder$.next(this);
        }
    }
    setSortOrder(order) {
        this.sortOrderChange$.next(order);
    }
    clearSortOrder() {
        if (this._sortOrder !== null) {
            this.setSortOrder(null);
        }
    }
    onFilterValueChange(value) {
        this.filterChange.emit(value);
        this.filterValue = value;
        this.updateCalcOperator();
    }
    updateCalcOperator() {
        this.calcOperatorChange$.next();
    }
    ngOnInit() {
        this.sortOrderChange$.pipe(takeUntil(this.destroy$)).subscribe(order => {
            if (this._sortOrder !== order) {
                this._sortOrder = order;
                this.sortOrderChange.emit(order);
            }
            this.updateCalcOperator();
            this.cdr.markForCheck();
        });
    }
    ngOnChanges(changes) {
        const { sortDirections, filters, sortOrder, sortFn, filterFn, sortPriority, filterMultiple, showSort, showFilter } = changes;
        if (sortDirections) {
            if (this.sortDirections && this.sortDirections.length) {
                this._sortDirections = this.sortDirections;
            }
        }
        if (sortOrder) {
            this._sortOrder = this.sortOrder;
            this.setSortOrder(this.sortOrder);
        }
        if (showSort) {
            this.isNzShowSortChanged = true;
        }
        if (showFilter) {
            this.isNzShowFilterChanged = true;
        }
        const isFirstChange = (value) => value && value.firstChange && value.currentValue !== undefined;
        if ((isFirstChange(sortOrder) || isFirstChange(sortFn)) && !this.isNzShowSortChanged) {
            this.showSort = true;
        }
        if (isFirstChange(filters) && !this.isNzShowFilterChanged) {
            this.showFilter = true;
        }
        if ((filters || filterMultiple) && this.showFilter) {
            const listOfValue = this.filters.filter(item => item.byDefault).map(item => item.value);
            this.filterValue = this.filterMultiple ? listOfValue : listOfValue[0] || null;
        }
        if (sortFn || filterFn || sortPriority || filters) {
            this.updateCalcOperator();
        }
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
}
TDSThAddOnComponent.ɵfac = function TDSThAddOnComponent_Factory(t) { return new (t || TDSThAddOnComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
TDSThAddOnComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSThAddOnComponent, selectors: [["th", "columnKey", ""], ["th", "sortFn", ""], ["th", "sortOrder", ""], ["th", "filters", ""], ["th", "showSort", ""], ["th", "showFilter", ""], ["th", "customFilter", ""]], hostAttrs: [1, "cursor-pointer", "hover:bg-neutral-3-100"], hostVars: 4, hostBindings: function TDSThAddOnComponent_HostBindings(rf, ctx) { if (rf & 1) {
        i0.ɵɵlistener("click", function TDSThAddOnComponent_click_HostBindingHandler() { return ctx.emitNextSortValue(); });
    } if (rf & 2) {
        i0.ɵɵclassProp("tds-table-column-has-sorters", ctx.showSort)("tds-table-column-sort", ctx._sortOrder === "descend" || ctx._sortOrder === "ascend");
    } }, inputs: { columnKey: "columnKey", filterMultiple: "filterMultiple", sortOrder: "sortOrder", sortPriority: "sortPriority", sortDirections: "sortDirections", filters: "filters", sortFn: "sortFn", filterFn: "filterFn", showSort: "showSort", showFilter: "showFilter", customFilter: "customFilter" }, outputs: { checkedChange: "checkedChange", sortOrderChange: "sortOrderChange", filterChange: "filterChange" }, features: [i0.ɵɵNgOnChangesFeature], attrs: _c0, ngContentSelectors: _c2, decls: 9, vars: 2, consts: [[3, "contentTemplate", "extraTemplate", "customFilter", "filterMultiple", "listOfFilter", "filterChange", 4, "ngIf", "ngIfElse"], ["notFilterTemplate", ""], ["extraTemplate", ""], ["sortTemplate", ""], ["contentTemplate", ""], [3, "contentTemplate", "extraTemplate", "customFilter", "filterMultiple", "listOfFilter", "filterChange"], [3, "ngTemplateOutlet"], [3, "sortOrder", "_sortDirections", "contentTemplate"]], template: function TDSThAddOnComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef(_c1);
        i0.ɵɵtemplate(0, TDSThAddOnComponent_tds_table_filter_0_Template, 1, 5, "tds-table-filter", 0);
        i0.ɵɵtemplate(1, TDSThAddOnComponent_ng_template_1_Template, 1, 1, "ng-template", null, 1, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtemplate(3, TDSThAddOnComponent_ng_template_3_Template, 2, 0, "ng-template", null, 2, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtemplate(5, TDSThAddOnComponent_ng_template_5_Template, 1, 3, "ng-template", null, 3, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtemplate(7, TDSThAddOnComponent_ng_template_7_Template, 1, 0, "ng-template", null, 4, i0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r1 = i0.ɵɵreference(2);
        i0.ɵɵproperty("ngIf", ctx.showFilter || ctx.customFilter)("ngIfElse", _r1);
    } }, directives: [i1.NgIf, i2.TDSTableFilterComponent, i1.NgTemplateOutlet, i3.TDSTableSortersComponent], encapsulation: 2, changeDetection: 0 });
__decorate([
    InputBoolean()
], TDSThAddOnComponent.prototype, "showSort", void 0);
__decorate([
    InputBoolean()
], TDSThAddOnComponent.prototype, "showFilter", void 0);
__decorate([
    InputBoolean()
], TDSThAddOnComponent.prototype, "customFilter", void 0);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSThAddOnComponent, [{
        type: Component,
        args: [{
                selector: 'th[columnKey], th[sortFn], th[sortOrder], th[filters], th[showSort], th[showFilter], th[customFilter]',
                preserveWhitespaces: false,
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: `
    <tds-table-filter
      *ngIf="showFilter || customFilter; else notFilterTemplate"
      [contentTemplate]="notFilterTemplate"
      [extraTemplate]="extraTemplate"
      [customFilter]="customFilter"
      [filterMultiple]="filterMultiple"
      [listOfFilter]="filters"
      (filterChange)="onFilterValueChange($event)"
    ></tds-table-filter>
    <ng-template #notFilterTemplate>
      <ng-template [ngTemplateOutlet]="showSort ? sortTemplate : contentTemplate"></ng-template>
    </ng-template>
    <ng-template #extraTemplate>
      <ng-content select="[tds-th-extra]"></ng-content>
      <ng-content select="tds-filter-trigger"></ng-content>
    </ng-template>
    <ng-template #sortTemplate>
      <tds-table-sorters
        [sortOrder]="_sortOrder"
        [_sortDirections]="_sortDirections"
        [contentTemplate]="contentTemplate"
      ></tds-table-sorters>
    </ng-template>
    <ng-template #contentTemplate>
      <ng-content></ng-content>
    </ng-template>
  `,
                host: {
                    '[class.tds-table-column-has-sorters]': 'showSort',
                    '[class.tds-table-column-sort]': `_sortOrder === 'descend' || _sortOrder === 'ascend'`,
                    '(click)': 'emitNextSortValue()',
                    'class': "cursor-pointer hover:bg-neutral-3-100"
                }
            }]
    }], function () { return [{ type: i0.ChangeDetectorRef }]; }, { columnKey: [{
            type: Input
        }], filterMultiple: [{
            type: Input
        }], sortOrder: [{
            type: Input
        }], sortPriority: [{
            type: Input
        }], sortDirections: [{
            type: Input
        }], filters: [{
            type: Input
        }], sortFn: [{
            type: Input
        }], filterFn: [{
            type: Input
        }], showSort: [{
            type: Input
        }], showFilter: [{
            type: Input
        }], customFilter: [{
            type: Input
        }], checkedChange: [{
            type: Output
        }], sortOrderChange: [{
            type: Output
        }], filterChange: [{
            type: Output
        }] }); })();
//# sourceMappingURL=data:application/json;base64,