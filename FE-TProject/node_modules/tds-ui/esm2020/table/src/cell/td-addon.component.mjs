import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { InputBoolean } from 'tds-ui/shared/utility';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "../addon/row-indent.directive";
import * as i3 from "../addon/row-expand-button.directive";
import * as i4 from "tds-ui/tds-checkbox";
import * as i5 from "@angular/forms";
const _c0 = ["checked", ""];
const _c1 = function (a0, a1) { return { "tdsi-arrow-right-line": a0, "tdsi-arrow-down-line": a1 }; };
function TDSTdAddOnComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    const _r3 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelement(1, "tds-row-indent", 2);
    i0.ɵɵelementStart(2, "button", 3);
    i0.ɵɵlistener("expandChange", function TDSTdAddOnComponent_ng_container_0_Template_button_expandChange_2_listener($event) { i0.ɵɵrestoreView(_r3); const ctx_r2 = i0.ɵɵnextContext(); return ctx_r2.onExpandChange($event); });
    i0.ɵɵelementStart(3, "span", 4);
    i0.ɵɵelement(4, "i", 5);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("indentSize", ctx_r0.indentSize);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("expand", ctx_r0.expand)("spaceMode", !ctx_r0.showExpand);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction2(4, _c1, !ctx_r0.expand, ctx_r0.expand));
} }
function TDSTdAddOnComponent_tds_checkbox_1_Template(rf, ctx) { if (rf & 1) {
    const _r5 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "tds-checkbox", 6);
    i0.ɵɵlistener("ngModelChange", function TDSTdAddOnComponent_tds_checkbox_1_Template_tds_checkbox_ngModelChange_0_listener($event) { i0.ɵɵrestoreView(_r5); const ctx_r4 = i0.ɵɵnextContext(); return ctx_r4.onCheckedChange($event); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵproperty("disabled", ctx_r1.disabled)("ngModel", ctx_r1.checked)("indeterminate", ctx_r1.indeterminate);
} }
const _c2 = ["*"];
export class TDSTdAddOnComponent {
    constructor() {
        this.checked = false;
        this.disabled = false;
        this.indeterminate = false;
        this.indentSize = 0;
        this.showExpand = false;
        this.showCheckbox = false;
        this.expand = false;
        this.checkedChange = new EventEmitter();
        this.expandChange = new EventEmitter();
        this.isNzShowExpandChanged = false;
        this.isNzShowCheckboxChanged = false;
    }
    onCheckedChange(checked) {
        this.checked = checked;
        this.checkedChange.emit(checked);
    }
    onExpandChange(expand) {
        this.expand = expand;
        this.expandChange.emit(expand);
    }
    ngOnChanges(changes) {
        const isFirstChange = (value) => value && value.firstChange && value.currentValue !== undefined;
        const { expand, checked, showExpand, showCheckbox } = changes;
        if (showExpand) {
            this.isNzShowExpandChanged = true;
        }
        if (showCheckbox) {
            this.isNzShowCheckboxChanged = true;
        }
        if (isFirstChange(expand) && !this.isNzShowExpandChanged) {
            this.showExpand = true;
        }
        if (isFirstChange(checked) && !this.isNzShowCheckboxChanged) {
            this.showCheckbox = true;
        }
    }
}
TDSTdAddOnComponent.ɵfac = function TDSTdAddOnComponent_Factory(t) { return new (t || TDSTdAddOnComponent)(); };
TDSTdAddOnComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSTdAddOnComponent, selectors: [["td", "checked", ""], ["td", "disabled", ""], ["td", "indeterminate", ""], ["td", "indentSize", ""], ["td", "expand", ""], ["td", "showExpand", ""], ["td", "showCheckbox", ""]], hostVars: 4, hostBindings: function TDSTdAddOnComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵclassProp("tds-table-cell-with-append", ctx.showExpand || ctx.indentSize > 0)("tds-table-selection-column", ctx.showCheckbox);
    } }, inputs: { checked: "checked", disabled: "disabled", indeterminate: "indeterminate", indentSize: "indentSize", showExpand: "showExpand", showCheckbox: "showCheckbox", expand: "expand" }, outputs: { checkedChange: "checkedChange", expandChange: "expandChange" }, features: [i0.ɵɵNgOnChangesFeature], attrs: _c0, ngContentSelectors: _c2, decls: 3, vars: 2, consts: [[4, "ngIf"], [3, "disabled", "ngModel", "indeterminate", "ngModelChange", 4, "ngIf"], [3, "indentSize"], ["tds-row-expand-button", "", 1, "p-2", "text-neutral-1-500", "hover:text-primary-1", 3, "expand", "spaceMode", "expandChange"], [1, "flex", "items-center"], [1, "text-base", "leading-4", 3, "ngClass"], [3, "disabled", "ngModel", "indeterminate", "ngModelChange"]], template: function TDSTdAddOnComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵtemplate(0, TDSTdAddOnComponent_ng_container_0_Template, 5, 7, "ng-container", 0);
        i0.ɵɵtemplate(1, TDSTdAddOnComponent_tds_checkbox_1_Template, 1, 3, "tds-checkbox", 1);
        i0.ɵɵprojection(2);
    } if (rf & 2) {
        i0.ɵɵproperty("ngIf", ctx.showExpand || ctx.indentSize > 0);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx.showCheckbox);
    } }, directives: [i1.NgIf, i2.TDSRowIndentDirective, i3.TDSRowExpandButtonDirective, i1.NgClass, i4.TDSCheckbox, i5.NgControlStatus, i5.NgModel], encapsulation: 2, changeDetection: 0 });
__decorate([
    InputBoolean()
], TDSTdAddOnComponent.prototype, "showExpand", void 0);
__decorate([
    InputBoolean()
], TDSTdAddOnComponent.prototype, "showCheckbox", void 0);
__decorate([
    InputBoolean()
], TDSTdAddOnComponent.prototype, "expand", void 0);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSTdAddOnComponent, [{
        type: Component,
        args: [{
                selector: 'td[checked], td[disabled], td[indeterminate], td[indentSize], td[expand], td[showExpand], td[showCheckbox]',
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                encapsulation: ViewEncapsulation.None,
                template: `
    <ng-container *ngIf="showExpand || indentSize > 0">
      <tds-row-indent [indentSize]="indentSize"></tds-row-indent>
      <button
        tds-row-expand-button      
        [expand]="expand"
        (expandChange)="onExpandChange($event)"
        [spaceMode]="!showExpand"
        class="p-2 text-neutral-1-500 hover:text-primary-1"
      >
        <span class="flex items-center">
         <i [ngClass]="{'tdsi-arrow-right-line':!expand,'tdsi-arrow-down-line':expand}" class="text-base leading-4"></i>
        </span>
      </button>
    </ng-container>
    <tds-checkbox     
      *ngIf="showCheckbox"
      [disabled]="disabled"
      [ngModel]="checked"
      [indeterminate]="indeterminate"
      (ngModelChange)="onCheckedChange($event)"
    ></tds-checkbox>
    <ng-content></ng-content>
  `,
                host: {
                    '[class.tds-table-cell-with-append]': `showExpand || indentSize > 0`,
                    '[class.tds-table-selection-column]': `showCheckbox`
                }
            }]
    }], null, { checked: [{
            type: Input
        }], disabled: [{
            type: Input
        }], indeterminate: [{
            type: Input
        }], indentSize: [{
            type: Input
        }], showExpand: [{
            type: Input
        }], showCheckbox: [{
            type: Input
        }], expand: [{
            type: Input
        }], checkedChange: [{
            type: Output
        }], expandChange: [{
            type: Output
        }] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGQtYWRkb24uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvdGRzLXVpL3RhYmxlL3NyYy9jZWxsL3RkLWFkZG9uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBSUEsT0FBTyxFQUNMLHVCQUF1QixFQUN2QixTQUFTLEVBQ1QsWUFBWSxFQUNaLEtBQUssRUFFTCxNQUFNLEVBR04saUJBQWlCLEVBQ2xCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQzs7Ozs7Ozs7Ozs7SUFXakQsNkJBQW1EO0lBQ2pELG9DQUEyRDtJQUMzRCxpQ0FNQztJQUhDLDZMQUFnQiw2QkFBc0IsSUFBQztJQUl2QywrQkFBZ0M7SUFDL0IsdUJBQStHO0lBQ2hILGlCQUFPLEVBQUE7SUFFWCwwQkFBZTs7O0lBWkcsZUFBeUI7SUFBekIsOENBQXlCO0lBR3ZDLGVBQWlCO0lBQWpCLHNDQUFpQixpQ0FBQTtJQU1iLGVBQTJFO0lBQTNFLG1GQUEyRTs7OztJQUluRix1Q0FNQztJQURDLHFNQUFpQiw4QkFBdUIsSUFBQztJQUMxQyxpQkFBZTs7O0lBSmQsMENBQXFCLDJCQUFBLHVDQUFBOzs7QUFZM0IsTUFBTSxPQUFPLG1CQUFtQjtJQW5DaEM7UUF3Q1csWUFBTyxHQUFHLEtBQUssQ0FBQztRQUNoQixhQUFRLEdBQUcsS0FBSyxDQUFDO1FBQ2pCLGtCQUFhLEdBQUcsS0FBSyxDQUFDO1FBQ3RCLGVBQVUsR0FBRyxDQUFDLENBQUM7UUFDQyxlQUFVLEdBQUcsS0FBSyxDQUFDO1FBQ25CLGlCQUFZLEdBQUcsS0FBSyxDQUFDO1FBQ3JCLFdBQU0sR0FBRyxLQUFLLENBQUM7UUFDckIsa0JBQWEsR0FBRyxJQUFJLFlBQVksRUFBVyxDQUFDO1FBQzVDLGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQVcsQ0FBQztRQUN0RCwwQkFBcUIsR0FBRyxLQUFLLENBQUM7UUFDOUIsNEJBQXVCLEdBQUcsS0FBSyxDQUFDO0tBMkJ6QztJQXpCQyxlQUFlLENBQUMsT0FBZ0I7UUFDOUIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7UUFDdkIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVELGNBQWMsQ0FBQyxNQUFlO1FBQzVCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFDRCxXQUFXLENBQUMsT0FBc0I7UUFDaEMsTUFBTSxhQUFhLEdBQUcsQ0FBQyxLQUFtQixFQUFFLEVBQUUsQ0FBQyxLQUFLLElBQUksS0FBSyxDQUFDLFdBQVcsSUFBSSxLQUFLLENBQUMsWUFBWSxLQUFLLFNBQVMsQ0FBQztRQUM5RyxNQUFNLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLEdBQUcsT0FBTyxDQUFDO1FBQzlELElBQUksVUFBVSxFQUFFO1lBQ2QsSUFBSSxDQUFDLHFCQUFxQixHQUFHLElBQUksQ0FBQztTQUNuQztRQUNELElBQUksWUFBWSxFQUFFO1lBQ2hCLElBQUksQ0FBQyx1QkFBdUIsR0FBRyxJQUFJLENBQUM7U0FDckM7UUFDRCxJQUFJLGFBQWEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsRUFBRTtZQUN4RCxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztTQUN4QjtRQUNELElBQUksYUFBYSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLHVCQUF1QixFQUFFO1lBQzNELElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO1NBQzFCO0lBQ0gsQ0FBQzs7c0ZBekNVLG1CQUFtQjtzRUFBbkIsbUJBQW1COzs7O1FBNUI1QixzRkFhZTtRQUNmLHNGQU1nQjtRQUNoQixrQkFBeUI7O1FBckJWLDJEQUFrQztRQWU5QyxlQUFrQjtRQUFsQix1Q0FBa0I7O0FBc0JFO0lBQWYsWUFBWSxFQUFFO3VEQUFvQjtBQUNuQjtJQUFmLFlBQVksRUFBRTt5REFBc0I7QUFDckI7SUFBZixZQUFZLEVBQUU7bURBQWdCO3VGQVg3QixtQkFBbUI7Y0FuQy9CLFNBQVM7ZUFBQztnQkFDVCxRQUFRLEVBQ04sNEdBQTRHO2dCQUM5RyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtnQkFDL0MsbUJBQW1CLEVBQUUsS0FBSztnQkFDMUIsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7Z0JBQ3JDLFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0F1QlQ7Z0JBQ0QsSUFBSSxFQUFFO29CQUNKLG9DQUFvQyxFQUFFLDhCQUE4QjtvQkFDcEUsb0NBQW9DLEVBQUUsY0FBYztpQkFDckQ7YUFDRjtnQkFNVSxPQUFPO2tCQUFmLEtBQUs7WUFDRyxRQUFRO2tCQUFoQixLQUFLO1lBQ0csYUFBYTtrQkFBckIsS0FBSztZQUNHLFVBQVU7a0JBQWxCLEtBQUs7WUFDbUIsVUFBVTtrQkFBbEMsS0FBSztZQUNtQixZQUFZO2tCQUFwQyxLQUFLO1lBQ21CLE1BQU07a0JBQTlCLEtBQUs7WUFDYSxhQUFhO2tCQUEvQixNQUFNO1lBQ1ksWUFBWTtrQkFBOUIsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbIlxyXG4vKiBlc2xpbnQtZGlzYWJsZSBAYW5ndWxhci1lc2xpbnQvY29tcG9uZW50LXNlbGVjdG9yICovXHJcblxyXG5pbXBvcnQgeyBCb29sZWFuSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jZGsvY29lcmNpb24nO1xyXG5pbXBvcnQge1xyXG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxyXG4gIENvbXBvbmVudCxcclxuICBFdmVudEVtaXR0ZXIsXHJcbiAgSW5wdXQsXHJcbiAgT25DaGFuZ2VzLFxyXG4gIE91dHB1dCxcclxuICBTaW1wbGVDaGFuZ2UsXHJcbiAgU2ltcGxlQ2hhbmdlcyxcclxuICBWaWV3RW5jYXBzdWxhdGlvblxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBJbnB1dEJvb2xlYW4gfSBmcm9tICd0ZHMtdWkvc2hhcmVkL3V0aWxpdHknO1xyXG5cclxuXHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjpcclxuICAgICd0ZFtjaGVja2VkXSwgdGRbZGlzYWJsZWRdLCB0ZFtpbmRldGVybWluYXRlXSwgdGRbaW5kZW50U2l6ZV0sIHRkW2V4cGFuZF0sIHRkW3Nob3dFeHBhbmRdLCB0ZFtzaG93Q2hlY2tib3hdJyxcclxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcclxuICBwcmVzZXJ2ZVdoaXRlc3BhY2VzOiBmYWxzZSxcclxuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxyXG4gIHRlbXBsYXRlOiBgXHJcbiAgICA8bmctY29udGFpbmVyICpuZ0lmPVwic2hvd0V4cGFuZCB8fCBpbmRlbnRTaXplID4gMFwiPlxyXG4gICAgICA8dGRzLXJvdy1pbmRlbnQgW2luZGVudFNpemVdPVwiaW5kZW50U2l6ZVwiPjwvdGRzLXJvdy1pbmRlbnQ+XHJcbiAgICAgIDxidXR0b25cclxuICAgICAgICB0ZHMtcm93LWV4cGFuZC1idXR0b24gICAgICBcclxuICAgICAgICBbZXhwYW5kXT1cImV4cGFuZFwiXHJcbiAgICAgICAgKGV4cGFuZENoYW5nZSk9XCJvbkV4cGFuZENoYW5nZSgkZXZlbnQpXCJcclxuICAgICAgICBbc3BhY2VNb2RlXT1cIiFzaG93RXhwYW5kXCJcclxuICAgICAgICBjbGFzcz1cInAtMiB0ZXh0LW5ldXRyYWwtMS01MDAgaG92ZXI6dGV4dC1wcmltYXJ5LTFcIlxyXG4gICAgICA+XHJcbiAgICAgICAgPHNwYW4gY2xhc3M9XCJmbGV4IGl0ZW1zLWNlbnRlclwiPlxyXG4gICAgICAgICA8aSBbbmdDbGFzc109XCJ7J3Rkc2ktYXJyb3ctcmlnaHQtbGluZSc6IWV4cGFuZCwndGRzaS1hcnJvdy1kb3duLWxpbmUnOmV4cGFuZH1cIiBjbGFzcz1cInRleHQtYmFzZSBsZWFkaW5nLTRcIj48L2k+XHJcbiAgICAgICAgPC9zcGFuPlxyXG4gICAgICA8L2J1dHRvbj5cclxuICAgIDwvbmctY29udGFpbmVyPlxyXG4gICAgPHRkcy1jaGVja2JveCAgICAgXHJcbiAgICAgICpuZ0lmPVwic2hvd0NoZWNrYm94XCJcclxuICAgICAgW2Rpc2FibGVkXT1cImRpc2FibGVkXCJcclxuICAgICAgW25nTW9kZWxdPVwiY2hlY2tlZFwiXHJcbiAgICAgIFtpbmRldGVybWluYXRlXT1cImluZGV0ZXJtaW5hdGVcIlxyXG4gICAgICAobmdNb2RlbENoYW5nZSk9XCJvbkNoZWNrZWRDaGFuZ2UoJGV2ZW50KVwiXHJcbiAgICA+PC90ZHMtY2hlY2tib3g+XHJcbiAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XHJcbiAgYCxcclxuICBob3N0OiB7XHJcbiAgICAnW2NsYXNzLnRkcy10YWJsZS1jZWxsLXdpdGgtYXBwZW5kXSc6IGBzaG93RXhwYW5kIHx8IGluZGVudFNpemUgPiAwYCxcclxuICAgICdbY2xhc3MudGRzLXRhYmxlLXNlbGVjdGlvbi1jb2x1bW5dJzogYHNob3dDaGVja2JveGBcclxuICB9XHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBURFNUZEFkZE9uQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcclxuICBzdGF0aWMgbmdBY2NlcHRJbnB1dFR5cGVfc2hvd0V4cGFuZDogQm9vbGVhbklucHV0O1xyXG4gIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9zaG93Q2hlY2tib3g6IEJvb2xlYW5JbnB1dDtcclxuICBzdGF0aWMgbmdBY2NlcHRJbnB1dFR5cGVfZXhwYW5kOiBCb29sZWFuSW5wdXQ7XHJcblxyXG4gIEBJbnB1dCgpIGNoZWNrZWQgPSBmYWxzZTtcclxuICBASW5wdXQoKSBkaXNhYmxlZCA9IGZhbHNlO1xyXG4gIEBJbnB1dCgpIGluZGV0ZXJtaW5hdGUgPSBmYWxzZTtcclxuICBASW5wdXQoKSBpbmRlbnRTaXplID0gMDtcclxuICBASW5wdXQoKSBASW5wdXRCb29sZWFuKCkgc2hvd0V4cGFuZCA9IGZhbHNlO1xyXG4gIEBJbnB1dCgpIEBJbnB1dEJvb2xlYW4oKSBzaG93Q2hlY2tib3ggPSBmYWxzZTtcclxuICBASW5wdXQoKSBASW5wdXRCb29sZWFuKCkgZXhwYW5kID0gZmFsc2U7XHJcbiAgQE91dHB1dCgpIHJlYWRvbmx5IGNoZWNrZWRDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPGJvb2xlYW4+KCk7XHJcbiAgQE91dHB1dCgpIHJlYWRvbmx5IGV4cGFuZENoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4oKTtcclxuICBwcml2YXRlIGlzTnpTaG93RXhwYW5kQ2hhbmdlZCA9IGZhbHNlO1xyXG4gIHByaXZhdGUgaXNOelNob3dDaGVja2JveENoYW5nZWQgPSBmYWxzZTtcclxuXHJcbiAgb25DaGVja2VkQ2hhbmdlKGNoZWNrZWQ6IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgIHRoaXMuY2hlY2tlZCA9IGNoZWNrZWQ7XHJcbiAgICB0aGlzLmNoZWNrZWRDaGFuZ2UuZW1pdChjaGVja2VkKTtcclxuICB9XHJcblxyXG4gIG9uRXhwYW5kQ2hhbmdlKGV4cGFuZDogYm9vbGVhbik6IHZvaWQge1xyXG4gICAgdGhpcy5leHBhbmQgPSBleHBhbmQ7XHJcbiAgICB0aGlzLmV4cGFuZENoYW5nZS5lbWl0KGV4cGFuZCk7XHJcbiAgfVxyXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcclxuICAgIGNvbnN0IGlzRmlyc3RDaGFuZ2UgPSAodmFsdWU6IFNpbXBsZUNoYW5nZSkgPT4gdmFsdWUgJiYgdmFsdWUuZmlyc3RDaGFuZ2UgJiYgdmFsdWUuY3VycmVudFZhbHVlICE9PSB1bmRlZmluZWQ7XHJcbiAgICBjb25zdCB7IGV4cGFuZCwgY2hlY2tlZCwgc2hvd0V4cGFuZCwgc2hvd0NoZWNrYm94IH0gPSBjaGFuZ2VzO1xyXG4gICAgaWYgKHNob3dFeHBhbmQpIHtcclxuICAgICAgdGhpcy5pc056U2hvd0V4cGFuZENoYW5nZWQgPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgaWYgKHNob3dDaGVja2JveCkge1xyXG4gICAgICB0aGlzLmlzTnpTaG93Q2hlY2tib3hDaGFuZ2VkID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIGlmIChpc0ZpcnN0Q2hhbmdlKGV4cGFuZCkgJiYgIXRoaXMuaXNOelNob3dFeHBhbmRDaGFuZ2VkKSB7XHJcbiAgICAgIHRoaXMuc2hvd0V4cGFuZCA9IHRydWU7XHJcbiAgICB9XHJcbiAgICBpZiAoaXNGaXJzdENoYW5nZShjaGVja2VkKSAmJiAhdGhpcy5pc056U2hvd0NoZWNrYm94Q2hhbmdlZCkge1xyXG4gICAgICB0aGlzLnNob3dDaGVja2JveCA9IHRydWU7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==