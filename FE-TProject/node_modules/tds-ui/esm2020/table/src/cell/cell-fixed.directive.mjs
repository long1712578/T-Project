import { Directive, Input } from '@angular/core';
import { Subject } from 'rxjs';
import { isNil } from 'tds-ui/core/util';
import * as i0 from "@angular/core";
export class TDSCellFixedDirective {
    constructor(renderer, elementRef) {
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.tdsRight = false;
        this.tdsLeft = false;
        this.colspan = null;
        this.colSpan = null;
        this.changes$ = new Subject();
        this.isAutoLeft = false;
        this.isAutoRight = false;
        this.isFixedLeft = false;
        this.isFixedRight = false;
        this.isFixed = false;
    }
    setAutoLeftWidth(autoLeft) {
        this.renderer.setStyle(this.elementRef.nativeElement, 'left', autoLeft);
    }
    setAutoRightWidth(autoRight) {
        this.renderer.setStyle(this.elementRef.nativeElement, 'right', autoRight);
    }
    setIsFirstRight(isFirstRight) {
        this.setFixClass(isFirstRight, 'tds-table-cell-fix-right-first');
    }
    setIsLastLeft(isLastLeft) {
        this.setFixClass(isLastLeft, 'tds-table-cell-fix-left-last');
    }
    setFixClass(flag, className) {
        // the setFixClass function may call many times, so remove it first.
        this.renderer.removeClass(this.elementRef.nativeElement, className);
        if (flag) {
            this.renderer.addClass(this.elementRef.nativeElement, className);
        }
    }
    ngOnChanges(changes) {
        const { colspan, colSpan, } = changes;
        this.setIsFirstRight(false);
        this.setIsLastLeft(false);
        this.isAutoLeft = this.tdsLeft === '' || this.tdsLeft === true;
        this.isAutoRight = this.tdsRight === '' || this.tdsRight === true;
        this.isFixedLeft = this.tdsLeft !== false;
        this.isFixedRight = this.tdsRight !== false;
        this.isFixed = this.isFixedLeft || this.isFixedRight;
        const validatePx = (value) => {
            if (typeof value === 'string' && value !== '') {
                return value;
            }
            else {
                return null;
            }
        };
        this.setAutoLeftWidth(validatePx(this.tdsLeft));
        this.setAutoRightWidth(validatePx(this.tdsRight));
        if (colspan || colSpan) {
            const col = this.colspan || this.colSpan;
            if (!isNil(col)) {
                this.renderer.setAttribute(this.elementRef.nativeElement, 'colspan', `${col}`);
            }
            else {
                this.renderer.removeAttribute(this.elementRef.nativeElement, 'colspan');
            }
        }
        this.changes$.next();
    }
}
TDSCellFixedDirective.ɵfac = function TDSCellFixedDirective_Factory(t) { return new (t || TDSCellFixedDirective)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef)); };
TDSCellFixedDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: TDSCellFixedDirective, selectors: [["td", "tdsRight", ""], ["th", "tdsRight", ""], ["td", "tdsLeft", ""], ["th", "tdsLeft", ""]], hostVars: 8, hostBindings: function TDSCellFixedDirective_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵstyleProp("position", ctx.isFixed ? "sticky" : null);
        i0.ɵɵclassProp("tds-table-cell-fix-right", ctx.isFixedRight)("tds-table-cell-fix-left", ctx.isFixedLeft)("z-10", ctx.isFixedLeft || ctx.isFixedRight);
    } }, inputs: { tdsRight: "tdsRight", tdsLeft: "tdsLeft", colspan: "colspan", colSpan: "colSpan" }, features: [i0.ɵɵNgOnChangesFeature] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSCellFixedDirective, [{
        type: Directive,
        args: [{
                selector: 'td[tdsRight],th[tdsRight],td[tdsLeft],th[tdsLeft]',
                host: {
                    '[class.tds-table-cell-fix-right]': `isFixedRight`,
                    '[class.tds-table-cell-fix-left]': `isFixedLeft`,
                    '[class.z-10]': `isFixedLeft || isFixedRight `,
                    // '[class.bg-white]': `isFixedLeft || isFixedRight `,    
                    '[style.position]': `isFixed? 'sticky' : null`
                }
            }]
    }], function () { return [{ type: i0.Renderer2 }, { type: i0.ElementRef }]; }, { tdsRight: [{
            type: Input
        }], tdsLeft: [{
            type: Input
        }], colspan: [{
            type: Input
        }], colSpan: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;base64,