import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { InputBoolean } from 'tds-ui/shared/utility';
import * as i0 from "@angular/core";
import * as i1 from "../addon/selection.component";
const _c0 = ["selections", ""];
const _c1 = ["*"];
export class TDSThSelectionComponent {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.selections = [];
        this.checked = false;
        this.disabled = false;
        this.indeterminate = false;
        this.showCheckbox = false;
        this.showRowSelection = false;
        this.checkedChange = new EventEmitter();
        this.isNzShowExpandChanged = false;
        this.isNzShowCheckboxChanged = false;
        // TODO: move to host after View Engine deprecation
        this.elementRef.nativeElement.classList.add('tds-table-selection-column');
    }
    onCheckedChange(checked) {
        this.checked = checked;
        this.checkedChange.emit(checked);
    }
    ngOnChanges(changes) {
        const isFirstChange = (value) => value && value.firstChange && value.currentValue !== undefined;
        const { checked, selections, showExpand, showCheckbox } = changes;
        if (showExpand) {
            this.isNzShowExpandChanged = true;
        }
        if (showCheckbox) {
            this.isNzShowCheckboxChanged = true;
        }
        if (isFirstChange(selections) && !this.isNzShowExpandChanged) {
            this.showRowSelection = true;
        }
        if (isFirstChange(checked) && !this.isNzShowCheckboxChanged) {
            this.showCheckbox = true;
        }
    }
}
TDSThSelectionComponent.ɵfac = function TDSThSelectionComponent_Factory(t) { return new (t || TDSThSelectionComponent)(i0.ɵɵdirectiveInject(i0.ElementRef)); };
TDSThSelectionComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSThSelectionComponent, selectors: [["th", "selections", ""], ["th", "checked", ""], ["th", "showCheckbox", ""], ["th", "showRowSelection", ""]], inputs: { selections: "selections", checked: "checked", disabled: "disabled", indeterminate: "indeterminate", showCheckbox: "showCheckbox", showRowSelection: "showRowSelection" }, outputs: { checkedChange: "checkedChange" }, features: [i0.ɵɵNgOnChangesFeature], attrs: _c0, ngContentSelectors: _c1, decls: 2, vars: 6, consts: [[3, "checked", "disabled", "indeterminate", "listOfSelections", "showCheckbox", "showRowSelection", "checkedChange"]], template: function TDSThSelectionComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵelementStart(0, "tds-table-selection", 0);
        i0.ɵɵlistener("checkedChange", function TDSThSelectionComponent_Template_tds_table_selection_checkedChange_0_listener($event) { return ctx.onCheckedChange($event); });
        i0.ɵɵelementEnd();
        i0.ɵɵprojection(1);
    } if (rf & 2) {
        i0.ɵɵproperty("checked", ctx.checked)("disabled", ctx.disabled)("indeterminate", ctx.indeterminate)("listOfSelections", ctx.selections)("showCheckbox", ctx.showCheckbox)("showRowSelection", ctx.showRowSelection);
    } }, directives: [i1.TDSTableSelectionComponent], encapsulation: 2, changeDetection: 0 });
__decorate([
    InputBoolean()
], TDSThSelectionComponent.prototype, "showCheckbox", void 0);
__decorate([
    InputBoolean()
], TDSThSelectionComponent.prototype, "showRowSelection", void 0);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSThSelectionComponent, [{
        type: Component,
        args: [{
                selector: 'th[selections],th[checked],th[showCheckbox],th[showRowSelection]',
                preserveWhitespaces: false,
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: `
    <tds-table-selection
      [checked]="checked"
      [disabled]="disabled"
      [indeterminate]="indeterminate"
      [listOfSelections]="selections"
      [showCheckbox]="showCheckbox"
      [showRowSelection]="showRowSelection"
      (checkedChange)="onCheckedChange($event)"
    ></tds-table-selection>
    <ng-content></ng-content>
  `,
            }]
    }], function () { return [{ type: i0.ElementRef }]; }, { selections: [{
            type: Input
        }], checked: [{
            type: Input
        }], disabled: [{
            type: Input
        }], indeterminate: [{
            type: Input
        }], showCheckbox: [{
            type: Input
        }], showRowSelection: [{
            type: Input
        }], checkedChange: [{
            type: Output
        }] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGgtc2VsZWN0aW9uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3Rkcy11aS90YWJsZS9zcmMvY2VsbC90aC1zZWxlY3Rpb24uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFHQSxPQUFPLEVBQ0wsdUJBQXVCLEVBQ3ZCLFNBQVMsRUFFVCxZQUFZLEVBQ1osS0FBSyxFQUVMLE1BQU0sRUFHTixpQkFBaUIsRUFDbEIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLFlBQVksRUFBYyxNQUFNLHVCQUF1QixDQUFDOzs7OztBQXNCakUsTUFBTSxPQUFPLHVCQUF1QjtJQWNsQyxZQUFvQixVQUFzQjtRQUF0QixlQUFVLEdBQVYsVUFBVSxDQUFZO1FBWGpDLGVBQVUsR0FBeUUsRUFBRSxDQUFDO1FBQ3RGLFlBQU8sR0FBRyxLQUFLLENBQUM7UUFDaEIsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUNqQixrQkFBYSxHQUFHLEtBQUssQ0FBQztRQUNOLGlCQUFZLEdBQUcsS0FBSyxDQUFDO1FBQ3JCLHFCQUFnQixHQUFHLEtBQUssQ0FBQztRQUMvQixrQkFBYSxHQUFHLElBQUksWUFBWSxFQUFXLENBQUM7UUFFdkQsMEJBQXFCLEdBQUcsS0FBSyxDQUFDO1FBQzlCLDRCQUF1QixHQUFHLEtBQUssQ0FBQztRQUd0QyxtREFBbUQ7UUFDbkQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO0lBQzVFLENBQUM7SUFFRCxlQUFlLENBQUMsT0FBZ0I7UUFDOUIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7UUFDdkIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVELFdBQVcsQ0FBQyxPQUFzQjtRQUNoQyxNQUFNLGFBQWEsR0FBRyxDQUFDLEtBQW1CLEVBQUUsRUFBRSxDQUFDLEtBQUssSUFBSSxLQUFLLENBQUMsV0FBVyxJQUFJLEtBQUssQ0FBQyxZQUFZLEtBQUssU0FBUyxDQUFDO1FBQzlHLE1BQU0sRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsR0FBRyxPQUFPLENBQUM7UUFDbEUsSUFBSSxVQUFVLEVBQUU7WUFDZCxJQUFJLENBQUMscUJBQXFCLEdBQUcsSUFBSSxDQUFDO1NBQ25DO1FBQ0QsSUFBSSxZQUFZLEVBQUU7WUFDaEIsSUFBSSxDQUFDLHVCQUF1QixHQUFHLElBQUksQ0FBQztTQUNyQztRQUNELElBQUksYUFBYSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLHFCQUFxQixFQUFFO1lBQzVELElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUM7U0FDOUI7UUFDRCxJQUFJLGFBQWEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyx1QkFBdUIsRUFBRTtZQUMzRCxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztTQUMxQjtJQUVILENBQUM7OzhGQXhDVSx1QkFBdUI7MEVBQXZCLHVCQUF1Qjs7UUFiaEMsOENBUUM7UUFEQyx1SUFBaUIsMkJBQXVCLElBQUM7UUFDMUMsaUJBQXNCO1FBQ3ZCLGtCQUF5Qjs7UUFSdkIscUNBQW1CLDBCQUFBLG9DQUFBLG9DQUFBLGtDQUFBLDBDQUFBOztBQW1CRTtJQUFmLFlBQVksRUFBRTs2REFBc0I7QUFDckI7SUFBZixZQUFZLEVBQUU7aUVBQTBCO3VGQVJ2Qyx1QkFBdUI7Y0FuQm5DLFNBQVM7ZUFBQztnQkFDVCxRQUFRLEVBQUUsa0VBQWtFO2dCQUM1RSxtQkFBbUIsRUFBRSxLQUFLO2dCQUMxQixhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTtnQkFDckMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07Z0JBQy9DLFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7R0FXVDthQUVGOzZEQUlVLFVBQVU7a0JBQWxCLEtBQUs7WUFDRyxPQUFPO2tCQUFmLEtBQUs7WUFDRyxRQUFRO2tCQUFoQixLQUFLO1lBQ0csYUFBYTtrQkFBckIsS0FBSztZQUNtQixZQUFZO2tCQUFwQyxLQUFLO1lBQ21CLGdCQUFnQjtrQkFBeEMsS0FBSztZQUNhLGFBQWE7a0JBQS9CLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJcclxuLyogZXNsaW50LWRpc2FibGUgQGFuZ3VsYXItZXNsaW50L2NvbXBvbmVudC1zZWxlY3RvciAqL1xyXG5pbXBvcnQgeyBCb29sZWFuSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jZGsvY29lcmNpb24nO1xyXG5pbXBvcnQge1xyXG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxyXG4gIENvbXBvbmVudCxcclxuICBFbGVtZW50UmVmLFxyXG4gIEV2ZW50RW1pdHRlcixcclxuICBJbnB1dCxcclxuICBPbkNoYW5nZXMsXHJcbiAgT3V0cHV0LFxyXG4gIFNpbXBsZUNoYW5nZSxcclxuICBTaW1wbGVDaGFuZ2VzLFxyXG4gIFZpZXdFbmNhcHN1bGF0aW9uXHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IElucHV0Qm9vbGVhbiwgVERTU2FmZUFueSB9IGZyb20gJ3Rkcy11aS9zaGFyZWQvdXRpbGl0eSc7XHJcblxyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICd0aFtzZWxlY3Rpb25zXSx0aFtjaGVja2VkXSx0aFtzaG93Q2hlY2tib3hdLHRoW3Nob3dSb3dTZWxlY3Rpb25dJyxcclxuICBwcmVzZXJ2ZVdoaXRlc3BhY2VzOiBmYWxzZSxcclxuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxyXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxyXG4gIHRlbXBsYXRlOiBgXHJcbiAgICA8dGRzLXRhYmxlLXNlbGVjdGlvblxyXG4gICAgICBbY2hlY2tlZF09XCJjaGVja2VkXCJcclxuICAgICAgW2Rpc2FibGVkXT1cImRpc2FibGVkXCJcclxuICAgICAgW2luZGV0ZXJtaW5hdGVdPVwiaW5kZXRlcm1pbmF0ZVwiXHJcbiAgICAgIFtsaXN0T2ZTZWxlY3Rpb25zXT1cInNlbGVjdGlvbnNcIlxyXG4gICAgICBbc2hvd0NoZWNrYm94XT1cInNob3dDaGVja2JveFwiXHJcbiAgICAgIFtzaG93Um93U2VsZWN0aW9uXT1cInNob3dSb3dTZWxlY3Rpb25cIlxyXG4gICAgICAoY2hlY2tlZENoYW5nZSk9XCJvbkNoZWNrZWRDaGFuZ2UoJGV2ZW50KVwiXHJcbiAgICA+PC90ZHMtdGFibGUtc2VsZWN0aW9uPlxyXG4gICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxyXG4gIGAsXHJcblxyXG59KVxyXG5leHBvcnQgY2xhc3MgVERTVGhTZWxlY3Rpb25Db21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xyXG4gIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9zaG93Q2hlY2tib3g6IEJvb2xlYW5JbnB1dDtcclxuICBzdGF0aWMgbmdBY2NlcHRJbnB1dFR5cGVfc2hvd1Jvd1NlbGVjdGlvbjogQm9vbGVhbklucHV0O1xyXG4gIEBJbnB1dCgpIHNlbGVjdGlvbnM6IEFycmF5PHsgdGV4dDogc3RyaW5nOyBvblNlbGVjdCguLi5hcmdzOiBURFNTYWZlQW55W10pOiBURFNTYWZlQW55IH0+ID0gW107XHJcbiAgQElucHV0KCkgY2hlY2tlZCA9IGZhbHNlO1xyXG4gIEBJbnB1dCgpIGRpc2FibGVkID0gZmFsc2U7XHJcbiAgQElucHV0KCkgaW5kZXRlcm1pbmF0ZSA9IGZhbHNlO1xyXG4gIEBJbnB1dCgpIEBJbnB1dEJvb2xlYW4oKSBzaG93Q2hlY2tib3ggPSBmYWxzZTtcclxuICBASW5wdXQoKSBASW5wdXRCb29sZWFuKCkgc2hvd1Jvd1NlbGVjdGlvbiA9IGZhbHNlO1xyXG4gIEBPdXRwdXQoKSByZWFkb25seSBjaGVja2VkQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxib29sZWFuPigpO1xyXG5cclxuICBwcml2YXRlIGlzTnpTaG93RXhwYW5kQ2hhbmdlZCA9IGZhbHNlO1xyXG4gIHByaXZhdGUgaXNOelNob3dDaGVja2JveENoYW5nZWQgPSBmYWxzZTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7XHJcbiAgICAvLyBUT0RPOiBtb3ZlIHRvIGhvc3QgYWZ0ZXIgVmlldyBFbmdpbmUgZGVwcmVjYXRpb25cclxuICAgIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ3Rkcy10YWJsZS1zZWxlY3Rpb24tY29sdW1uJyk7XHJcbiAgfVxyXG5cclxuICBvbkNoZWNrZWRDaGFuZ2UoY2hlY2tlZDogYm9vbGVhbik6IHZvaWQge1xyXG4gICAgdGhpcy5jaGVja2VkID0gY2hlY2tlZDtcclxuICAgIHRoaXMuY2hlY2tlZENoYW5nZS5lbWl0KGNoZWNrZWQpO1xyXG4gIH1cclxuXHJcbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xyXG4gICAgY29uc3QgaXNGaXJzdENoYW5nZSA9ICh2YWx1ZTogU2ltcGxlQ2hhbmdlKSA9PiB2YWx1ZSAmJiB2YWx1ZS5maXJzdENoYW5nZSAmJiB2YWx1ZS5jdXJyZW50VmFsdWUgIT09IHVuZGVmaW5lZDtcclxuICAgIGNvbnN0IHsgY2hlY2tlZCwgc2VsZWN0aW9ucywgc2hvd0V4cGFuZCwgc2hvd0NoZWNrYm94IH0gPSBjaGFuZ2VzO1xyXG4gICAgaWYgKHNob3dFeHBhbmQpIHtcclxuICAgICAgdGhpcy5pc056U2hvd0V4cGFuZENoYW5nZWQgPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgaWYgKHNob3dDaGVja2JveCkge1xyXG4gICAgICB0aGlzLmlzTnpTaG93Q2hlY2tib3hDaGFuZ2VkID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIGlmIChpc0ZpcnN0Q2hhbmdlKHNlbGVjdGlvbnMpICYmICF0aGlzLmlzTnpTaG93RXhwYW5kQ2hhbmdlZCkge1xyXG4gICAgICB0aGlzLnNob3dSb3dTZWxlY3Rpb24gPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgaWYgKGlzRmlyc3RDaGFuZ2UoY2hlY2tlZCkgJiYgIXRoaXMuaXNOelNob3dDaGVja2JveENoYW5nZWQpIHtcclxuICAgICAgdGhpcy5zaG93Q2hlY2tib3ggPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgfVxyXG59XHJcbiJdfQ==