import { ContentChildren, Directive, Input, Optional } from '@angular/core';
import { combineLatest, merge, ReplaySubject, Subject } from 'rxjs';
import { map, mergeMap, startWith, switchMap, takeUntil } from 'rxjs/operators';
import { TDSCellFixedDirective } from '../cell/cell-fixed.directive';
import { TDSThMeasureDirective } from '../cell/th-measure.directive';
import * as i0 from "@angular/core";
import * as i1 from "../table-style.service";
export class TDSTrDirective {
    constructor(tdsTableStyleService) {
        this.tdsTableStyleService = tdsTableStyleService;
        this.isTrHeader = false;
        this.destroy$ = new Subject();
        this.listOfFixedColumns$ = new ReplaySubject(1);
        this.listOfColumns$ = new ReplaySubject(1);
        this.listOfFixedColumnsChanges$ = this.listOfFixedColumns$.pipe(switchMap(list => merge(...[this.listOfFixedColumns$, ...list.map((c) => c.changes$)]).pipe(mergeMap(() => this.listOfFixedColumns$))), takeUntil(this.destroy$));
        this.listOfFixedLeftColumnChanges$ = this.listOfFixedColumnsChanges$.pipe(map(list => list.filter(item => item.tdsLeft !== false)));
        this.listOfFixedRightColumnChanges$ = this.listOfFixedColumnsChanges$.pipe(map(list => list.filter(item => item.tdsRight !== false)));
        this.listOfColumnsChanges$ = this.listOfColumns$.pipe(switchMap(list => merge(...[this.listOfColumns$, ...list.map((c) => c.changes$)]).pipe(mergeMap(() => this.listOfColumns$))), takeUntil(this.destroy$));
        this.isInsideTable = false;
        this.isInsideTable = !!tdsTableStyleService;
    }
    ngAfterContentInit() {
        if (this.tdsTableStyleService) {
            this.listOfCellFixedDirective.changes
                .pipe(startWith(this.listOfCellFixedDirective), takeUntil(this.destroy$))
                .subscribe(this.listOfFixedColumns$);
            this.listOfNzThDirective.changes
                .pipe(startWith(this.listOfNzThDirective), takeUntil(this.destroy$))
                .subscribe(this.listOfColumns$);
            /** set last left and first right **/
            this.listOfFixedLeftColumnChanges$.subscribe(listOfFixedLeft => {
                listOfFixedLeft.forEach(cell => cell.setIsLastLeft(cell === listOfFixedLeft[listOfFixedLeft.length - 1]));
            });
            this.listOfFixedRightColumnChanges$.subscribe(listOfFixedRight => {
                listOfFixedRight.forEach(cell => cell.setIsFirstRight(cell === listOfFixedRight[0]));
            });
            /** calculate fixed tdsLeft and tdsRight **/
            combineLatest([this.tdsTableStyleService.listOfListOfThWidth$, this.listOfFixedLeftColumnChanges$])
                .pipe(takeUntil(this.destroy$))
                .subscribe(([listOfAutoWidth, listOfLeftCell]) => {
                listOfLeftCell.forEach((cell, index) => {
                    if (cell.isAutoLeft) {
                        const currentArray = listOfLeftCell.slice(0, index);
                        const count = currentArray.reduce((pre, cur) => pre + (cur.colspan || cur.colSpan || 1), 0);
                        const width = listOfAutoWidth.slice(0, count).reduce((pre, cur) => pre + cur, 0);
                        cell.setAutoLeftWidth(`${width}px`);
                    }
                });
            });
            combineLatest([this.tdsTableStyleService.listOfListOfThWidth$, this.listOfFixedRightColumnChanges$])
                .pipe(takeUntil(this.destroy$))
                .subscribe(([listOfAutoWidth, listOfRightCell]) => {
                listOfRightCell.forEach((_, index) => {
                    const cell = listOfRightCell[listOfRightCell.length - index - 1];
                    if (cell.isAutoRight) {
                        const currentArray = listOfRightCell.slice(listOfRightCell.length - index, listOfRightCell.length);
                        const count = currentArray.reduce((pre, cur) => pre + (cur.colspan || cur.colSpan || 1), 0);
                        const width = listOfAutoWidth
                            .slice(listOfAutoWidth.length - count, listOfAutoWidth.length)
                            .reduce((pre, cur) => pre + cur, 0);
                        cell.setAutoRightWidth(`${width}px`);
                    }
                });
            });
        }
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
}
TDSTrDirective.ɵfac = function TDSTrDirective_Factory(t) { return new (t || TDSTrDirective)(i0.ɵɵdirectiveInject(i1.TDSTableStyleService, 8)); };
TDSTrDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: TDSTrDirective, selectors: [["tr", 3, "mat-row", "", 3, "mat-header-row", "", 3, "tds-table-measure-row", "", 3, "expand", "", 3, "tds-table-fixed-row", "", 3, "tds-table-thead", ""]], contentQueries: function TDSTrDirective_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        i0.ɵɵcontentQuery(dirIndex, TDSThMeasureDirective, 4);
        i0.ɵɵcontentQuery(dirIndex, TDSCellFixedDirective, 4);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.listOfNzThDirective = _t);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.listOfCellFixedDirective = _t);
    } }, hostVars: 4, hostBindings: function TDSTrDirective_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵclassProp("tds-table-row", ctx.isInsideTable)("text-left", ctx.isInsideTable);
    } }, inputs: { isTrHeader: "isTrHeader" } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSTrDirective, [{
        type: Directive,
        args: [{
                selector: 'tr:not([mat-row]):not([mat-header-row]):not([tds-table-measure-row]):not([expand]):not([tds-table-fixed-row]):not([tds-table-thead])',
                host: {
                    '[class.tds-table-row]': 'isInsideTable',
                    // '[class.border-b]': 'isInsideTable && !isTrHeader',
                    // '[class.border-neutral-2-100]': 'isInsideTable',
                    '[class.text-left]': 'isInsideTable',
                }
            }]
    }], function () { return [{ type: i1.TDSTableStyleService, decorators: [{
                type: Optional
            }] }]; }, { isTrHeader: [{
            type: Input
        }], listOfNzThDirective: [{
            type: ContentChildren,
            args: [TDSThMeasureDirective]
        }], listOfCellFixedDirective: [{
            type: ContentChildren,
            args: [TDSCellFixedDirective]
        }] }); })();
//# sourceMappingURL=data:application/json;base64,