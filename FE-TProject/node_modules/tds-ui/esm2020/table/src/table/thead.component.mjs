/* eslint-disable @angular-eslint/component-selector */
import { ChangeDetectionStrategy, Component, ContentChildren, EventEmitter, Optional, Output, ViewChild, ViewEncapsulation } from '@angular/core';
import { EMPTY, merge, of, Subject } from 'rxjs';
import { delay, map, mergeMap, startWith, switchMap, takeUntil } from 'rxjs/operators';
import { TDSThAddOnComponent } from '../cell/th-addon.component';
import { TDSTrDirective } from './tr.directive';
import * as i0 from "@angular/core";
import * as i1 from "../table-style.service";
import * as i2 from "../table-data.service";
import * as i3 from "@angular/common";
const _c0 = ["contentTemplate"];
function TDSTheadComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵprojection(0);
} }
function TDSTheadComponent_ng_container_2_ng_template_1_Template(rf, ctx) { }
function TDSTheadComponent_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtemplate(1, TDSTheadComponent_ng_container_2_ng_template_1_Template, 0, 0, "ng-template", 2);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    i0.ɵɵnextContext();
    const _r0 = i0.ɵɵreference(1);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngTemplateOutlet", _r0);
} }
const _c1 = ["*"];
export class TDSTheadComponent {
    constructor(elementRef, renderer, tdsTableStyleService, tdsTableDataService) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.tdsTableStyleService = tdsTableStyleService;
        this.tdsTableDataService = tdsTableDataService;
        this.destroy$ = new Subject();
        this.isInsideTable = false;
        this.sortOrderChange = new EventEmitter();
        this.isInsideTable = !!this.tdsTableStyleService;
    }
    ngOnInit() {
        if (this.tdsTableStyleService) {
            this.tdsTableStyleService.setTheadTemplate(this.templateRef);
        }
    }
    ngAfterContentInit() {
        if (this.tdsTableStyleService) {
            const firstTableRow$ = this.listOfNzTrDirective.changes.pipe(startWith(this.listOfNzTrDirective), map(item => item && item.first));
            const listOfColumnsChanges$ = firstTableRow$.pipe(switchMap(firstTableRow => (firstTableRow ? firstTableRow.listOfColumnsChanges$ : EMPTY)), takeUntil(this.destroy$));
            listOfColumnsChanges$.subscribe(data => this.tdsTableStyleService.setListOfTh(data));
            /** TODO: need reset the measure row when scrollX change **/
            this.tdsTableStyleService.enableAutoMeasure$
                .pipe(switchMap(enable => (enable ? listOfColumnsChanges$ : of([]))))
                .pipe(takeUntil(this.destroy$))
                .subscribe(data => this.tdsTableStyleService.setListOfMeasureColumn(data));
            const listOfFixedLeftColumnChanges$ = firstTableRow$.pipe(switchMap(firstTr => (firstTr ? firstTr.listOfFixedLeftColumnChanges$ : EMPTY)), takeUntil(this.destroy$));
            const listOfFixedRightColumnChanges$ = firstTableRow$.pipe(switchMap(firstTr => (firstTr ? firstTr.listOfFixedRightColumnChanges$ : EMPTY)), takeUntil(this.destroy$));
            listOfFixedLeftColumnChanges$.subscribe(listOfFixedLeftColumn => {
                this.tdsTableStyleService.setHasFixLeft(listOfFixedLeftColumn.length !== 0);
            });
            listOfFixedRightColumnChanges$.subscribe(listOfFixedRightColumn => {
                this.tdsTableStyleService.setHasFixRight(listOfFixedRightColumn.length !== 0);
            });
        }
        if (this.tdsTableDataService) {
            const listOfColumn$ = this.listOfNzThAddOnComponent.changes.pipe(startWith(this.listOfNzThAddOnComponent));
            const manualSort$ = listOfColumn$.pipe(switchMap(() => merge(...this.listOfNzThAddOnComponent.map(th => th.manualClickOrder$))), takeUntil(this.destroy$));
            manualSort$.subscribe((data) => {
                const emitValue = { key: data.columnKey, value: data._sortOrder };
                this.sortOrderChange.emit(emitValue);
                if (data.sortFn && data.sortPriority === false) {
                    this.listOfNzThAddOnComponent.filter(th => th !== data).forEach(th => th.clearSortOrder());
                }
            });
            const listOfCalcOperator$ = listOfColumn$.pipe(switchMap(list => merge(...[listOfColumn$, ...list.map((c) => c.calcOperatorChange$)]).pipe(mergeMap(() => listOfColumn$))), map(list => list
                .filter(item => !!item.sortFn || !!item.filterFn)
                .map(item => {
                const { sortFn, _sortOrder, filterFn, filterValue, sortPriority, columnKey } = item;
                return {
                    key: columnKey,
                    sortFn: sortFn,
                    sortPriority: sortPriority,
                    sortOrder: _sortOrder,
                    filterFn: filterFn,
                    filterValue: filterValue
                };
            })), 
            // TODO: after checked error here
            delay(0), takeUntil(this.destroy$));
            listOfCalcOperator$.subscribe(list => {
                this.tdsTableDataService.listOfCalcOperator$.next(list);
            });
        }
    }
    ngAfterViewInit() {
        if (this.tdsTableStyleService) {
            this.renderer.removeChild(this.renderer.parentNode(this.elementRef.nativeElement), this.elementRef.nativeElement);
        }
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
}
TDSTheadComponent.ɵfac = function TDSTheadComponent_Factory(t) { return new (t || TDSTheadComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i1.TDSTableStyleService, 8), i0.ɵɵdirectiveInject(i2.TDSTableDataService, 8)); };
TDSTheadComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSTheadComponent, selectors: [["thead", 9, "tds-table-thead"]], contentQueries: function TDSTheadComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        i0.ɵɵcontentQuery(dirIndex, TDSTrDirective, 5);
        i0.ɵɵcontentQuery(dirIndex, TDSThAddOnComponent, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.listOfNzTrDirective = _t);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.listOfNzThAddOnComponent = _t);
    } }, viewQuery: function TDSTheadComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 7);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.templateRef = _t.first);
    } }, outputs: { sortOrderChange: "sortOrderChange" }, ngContentSelectors: _c1, decls: 3, vars: 1, consts: [["contentTemplate", ""], [4, "ngIf"], [3, "ngTemplateOutlet"]], template: function TDSTheadComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵtemplate(0, TDSTheadComponent_ng_template_0_Template, 1, 0, "ng-template", null, 0, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtemplate(2, TDSTheadComponent_ng_container_2_Template, 2, 1, "ng-container", 1);
    } if (rf & 2) {
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx.isInsideTable);
    } }, directives: [i3.NgIf, i3.NgTemplateOutlet], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSTheadComponent, [{
        type: Component,
        args: [{
                selector: 'thead:not(.tds-table-thead)',
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                template: `
    <ng-template #contentTemplate>
      <ng-content></ng-content>
    </ng-template>
    <ng-container *ngIf="!isInsideTable">
      <ng-template [ngTemplateOutlet]="contentTemplate"></ng-template>
    </ng-container>
  `
            }]
    }], function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i1.TDSTableStyleService, decorators: [{
                type: Optional
            }] }, { type: i2.TDSTableDataService, decorators: [{
                type: Optional
            }] }]; }, { templateRef: [{
            type: ViewChild,
            args: ['contentTemplate', { static: true }]
        }], listOfNzTrDirective: [{
            type: ContentChildren,
            args: [TDSTrDirective, { descendants: true }]
        }], listOfNzThAddOnComponent: [{
            type: ContentChildren,
            args: [TDSThAddOnComponent, { descendants: true }]
        }], sortOrderChange: [{
            type: Output
        }] }); })();
//# sourceMappingURL=data:application/json;base64,