import { ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation } from '@angular/core';
import { BehaviorSubject, Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../table-style.service";
import * as i2 from "@angular/common";
const _c0 = ["tdElement"];
const _c1 = ["tds-table-fixed-row", ""];
function TDSTableFixedRowComponent_div_2_ng_template_2_Template(rf, ctx) { }
function TDSTableFixedRowComponent_div_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 4);
    i0.ɵɵpipe(1, "async");
    i0.ɵɵtemplate(2, TDSTableFixedRowComponent_div_2_ng_template_2_Template, 0, 0, "ng-template", 5);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    const _r2 = i0.ɵɵreference(5);
    i0.ɵɵstyleProp("width", i0.ɵɵpipeBind1(1, 3, ctx_r1.hostWidth$), "px");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngTemplateOutlet", _r2);
} }
function TDSTableFixedRowComponent_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵprojection(0);
} }
const _c2 = ["*"];
export class TDSTableFixedRowComponent {
    constructor(tdsTableStyleService, renderer, cdr) {
        this.tdsTableStyleService = tdsTableStyleService;
        this.renderer = renderer;
        this.cdr = cdr;
        this.hostWidth$ = new BehaviorSubject(null);
        this.enableAutoMeasure$ = new BehaviorSubject(false);
        this.destroy$ = new Subject();
    }
    ngOnInit() {
        if (this.tdsTableStyleService) {
            const { enableAutoMeasure$, hostWidth$ } = this.tdsTableStyleService;
            enableAutoMeasure$.pipe(takeUntil(this.destroy$)).subscribe(this.enableAutoMeasure$);
            hostWidth$.subscribe({
                next: (res) => {
                    this.hostWidth$.next(res);
                    this.cdr.markForCheck();
                }
            });
        }
    }
    ngAfterViewInit() {
        this.tdsTableStyleService.columnCount$.pipe(takeUntil(this.destroy$)).subscribe(count => {
            this.renderer.setAttribute(this.tdElement.nativeElement, 'colspan', `${count}`);
        });
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
}
TDSTableFixedRowComponent.ɵfac = function TDSTableFixedRowComponent_Factory(t) { return new (t || TDSTableFixedRowComponent)(i0.ɵɵdirectiveInject(i1.TDSTableStyleService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
TDSTableFixedRowComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSTableFixedRowComponent, selectors: [["tr", "tds-table-fixed-row", ""], ["tr", "expand", ""]], viewQuery: function TDSTableFixedRowComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tdElement = _t.first);
    } }, attrs: _c1, ngContentSelectors: _c2, decls: 6, vars: 4, consts: [[1, "tds-disable-td", "tds-table-cell", "border-b-0"], ["tdElement", ""], ["class", "tds-table-expanded-row-fixed p-0", "style", "position: sticky; left: 0px; overflow: hidden;", 3, "width", 4, "ngIf", "ngIfElse"], ["contentTemplate", ""], [1, "tds-table-expanded-row-fixed", "p-0", 2, "position", "sticky", "left", "0px", "overflow", "hidden"], [3, "ngTemplateOutlet"]], template: function TDSTableFixedRowComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵelementStart(0, "td", 0, 1);
        i0.ɵɵtemplate(2, TDSTableFixedRowComponent_div_2_Template, 3, 5, "div", 2);
        i0.ɵɵpipe(3, "async");
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(4, TDSTableFixedRowComponent_ng_template_4_Template, 1, 0, "ng-template", null, 3, i0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r2 = i0.ɵɵreference(5);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", i0.ɵɵpipeBind1(3, 2, ctx.enableAutoMeasure$))("ngIfElse", _r2);
    } }, directives: [i2.NgIf, i2.NgTemplateOutlet], pipes: [i2.AsyncPipe], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSTableFixedRowComponent, [{
        type: Component,
        args: [{
                selector: 'tr[tds-table-fixed-row], tr[expand]',
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                template: `
    <td class="tds-disable-td tds-table-cell border-b-0" #tdElement>
      <div
        class="tds-table-expanded-row-fixed p-0"
        *ngIf="enableAutoMeasure$ | async; else contentTemplate"
        style="position: sticky; left: 0px; overflow: hidden;"
        [style.width.px]="hostWidth$ | async"
      >
        <ng-template [ngTemplateOutlet]="contentTemplate"></ng-template>
      </div>
    </td>
    <ng-template #contentTemplate><ng-content></ng-content></ng-template>
  `
            }]
    }], function () { return [{ type: i1.TDSTableStyleService }, { type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }]; }, { tdElement: [{
            type: ViewChild,
            args: ['tdElement']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUtZml4ZWQtcm93LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3Rkcy11aS90YWJsZS9zcmMvdGFibGUvdGFibGUtZml4ZWQtcm93LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBRUwsdUJBQXVCLEVBRXZCLFNBQVMsRUFLVCxTQUFTLEVBQ1QsaUJBQWlCLEVBQ2xCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxlQUFlLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ2hELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7Ozs7Ozs7SUFVckMsOEJBS0M7O0lBQ0MsZ0dBQWdFO0lBQ2xFLGlCQUFNOzs7O0lBSEosc0VBQXFDO0lBRXhCLGVBQW9DO0lBQXBDLHNDQUFvQzs7O0lBR3ZCLGtCQUF5Qjs7O0FBRzNELE1BQU0sT0FBTyx5QkFBeUI7SUFLcEMsWUFBb0Isb0JBQTBDLEVBQVUsUUFBbUIsRUFDakYsR0FBc0I7UUFEWix5QkFBb0IsR0FBcEIsb0JBQW9CLENBQXNCO1FBQVUsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQUNqRixRQUFHLEdBQUgsR0FBRyxDQUFtQjtRQUpoQyxlQUFVLEdBQUcsSUFBSSxlQUFlLENBQWdCLElBQUksQ0FBQyxDQUFDO1FBQ3RELHVCQUFrQixHQUFHLElBQUksZUFBZSxDQUFVLEtBQUssQ0FBQyxDQUFDO1FBQ2pELGFBQVEsR0FBRyxJQUFJLE9BQU8sRUFBUSxDQUFDO0lBRUosQ0FBQztJQUNwQyxRQUFRO1FBQ04sSUFBSSxJQUFJLENBQUMsb0JBQW9CLEVBQUU7WUFDN0IsTUFBTSxFQUFFLGtCQUFrQixFQUFFLFVBQVUsRUFBRSxHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQztZQUNyRSxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQztZQUNyRixVQUFVLENBQUMsU0FBUyxDQUFDO2dCQUNuQixJQUFJLEVBQUMsQ0FBQyxHQUFHLEVBQUMsRUFBRTtvQkFDVixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztvQkFDMUIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsQ0FBQztnQkFDMUIsQ0FBQzthQUNGLENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQztJQUNELGVBQWU7UUFDYixJQUFJLENBQUMsb0JBQW9CLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3RGLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsYUFBYSxFQUFFLFNBQVMsRUFBRSxHQUFHLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDbEYsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBQ0QsV0FBVztRQUNULElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDckIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUMzQixDQUFDOztrR0EzQlUseUJBQXlCOzRFQUF6Qix5QkFBeUI7Ozs7Ozs7UUFibEMsZ0NBQWdFO1FBQzlELDBFQU9NOztRQUNSLGlCQUFLO1FBQ0wsMkhBQXFFOzs7UUFQaEUsZUFBa0M7UUFBbEMsbUVBQWtDLGlCQUFBOzt1RkFVOUIseUJBQXlCO2NBbEJyQyxTQUFTO2VBQUM7Z0JBQ1QsUUFBUSxFQUFFLHFDQUFxQztnQkFDL0MsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07Z0JBQy9DLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO2dCQUNyQyxRQUFRLEVBQUU7Ozs7Ozs7Ozs7OztHQVlUO2FBQ0Y7K0hBRXlCLFNBQVM7a0JBQWhDLFNBQVM7bUJBQUMsV0FBVyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5pbXBvcnQge1xyXG4gIEFmdGVyVmlld0luaXQsXHJcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXHJcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXHJcbiAgQ29tcG9uZW50LFxyXG4gIEVsZW1lbnRSZWYsXHJcbiAgT25EZXN0cm95LFxyXG4gIE9uSW5pdCxcclxuICBSZW5kZXJlcjIsXHJcbiAgVmlld0NoaWxkLFxyXG4gIFZpZXdFbmNhcHN1bGF0aW9uXHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyB0YWtlVW50aWwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcblxyXG5pbXBvcnQgeyBURFNUYWJsZVN0eWxlU2VydmljZSB9IGZyb20gJy4uL3RhYmxlLXN0eWxlLnNlcnZpY2UnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICd0clt0ZHMtdGFibGUtZml4ZWQtcm93XSwgdHJbZXhwYW5kXScsXHJcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXHJcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcclxuICB0ZW1wbGF0ZTogYFxyXG4gICAgPHRkIGNsYXNzPVwidGRzLWRpc2FibGUtdGQgdGRzLXRhYmxlLWNlbGwgYm9yZGVyLWItMFwiICN0ZEVsZW1lbnQ+XHJcbiAgICAgIDxkaXZcclxuICAgICAgICBjbGFzcz1cInRkcy10YWJsZS1leHBhbmRlZC1yb3ctZml4ZWQgcC0wXCJcclxuICAgICAgICAqbmdJZj1cImVuYWJsZUF1dG9NZWFzdXJlJCB8IGFzeW5jOyBlbHNlIGNvbnRlbnRUZW1wbGF0ZVwiXHJcbiAgICAgICAgc3R5bGU9XCJwb3NpdGlvbjogc3RpY2t5OyBsZWZ0OiAwcHg7IG92ZXJmbG93OiBoaWRkZW47XCJcclxuICAgICAgICBbc3R5bGUud2lkdGgucHhdPVwiaG9zdFdpZHRoJCB8IGFzeW5jXCJcclxuICAgICAgPlxyXG4gICAgICAgIDxuZy10ZW1wbGF0ZSBbbmdUZW1wbGF0ZU91dGxldF09XCJjb250ZW50VGVtcGxhdGVcIj48L25nLXRlbXBsYXRlPlxyXG4gICAgICA8L2Rpdj5cclxuICAgIDwvdGQ+XHJcbiAgICA8bmctdGVtcGxhdGUgI2NvbnRlbnRUZW1wbGF0ZT48bmctY29udGVudD48L25nLWNvbnRlbnQ+PC9uZy10ZW1wbGF0ZT5cclxuICBgXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBURFNUYWJsZUZpeGVkUm93Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3ksIEFmdGVyVmlld0luaXQge1xyXG4gIEBWaWV3Q2hpbGQoJ3RkRWxlbWVudCcpIHRkRWxlbWVudCE6IEVsZW1lbnRSZWY7XHJcbiAgaG9zdFdpZHRoJCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8bnVtYmVyIHwgbnVsbD4obnVsbCk7XHJcbiAgZW5hYmxlQXV0b01lYXN1cmUkID0gbmV3IEJlaGF2aW9yU3ViamVjdDxib29sZWFuPihmYWxzZSk7XHJcbiAgcHJpdmF0ZSBkZXN0cm95JCA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSB0ZHNUYWJsZVN0eWxlU2VydmljZTogVERTVGFibGVTdHlsZVNlcnZpY2UsIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMixcclxuICAgIHByaXZhdGUgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZikge31cclxuICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLnRkc1RhYmxlU3R5bGVTZXJ2aWNlKSB7XHJcbiAgICAgIGNvbnN0IHsgZW5hYmxlQXV0b01lYXN1cmUkLCBob3N0V2lkdGgkIH0gPSB0aGlzLnRkc1RhYmxlU3R5bGVTZXJ2aWNlO1xyXG4gICAgICBlbmFibGVBdXRvTWVhc3VyZSQucGlwZSh0YWtlVW50aWwodGhpcy5kZXN0cm95JCkpLnN1YnNjcmliZSh0aGlzLmVuYWJsZUF1dG9NZWFzdXJlJCk7XHJcbiAgICAgIGhvc3RXaWR0aCQuc3Vic2NyaWJlKHtcclxuICAgICAgICBuZXh0OihyZXMpPT57XHJcbiAgICAgICAgICB0aGlzLmhvc3RXaWR0aCQubmV4dChyZXMpO1xyXG4gICAgICAgICAgdGhpcy5jZHIubWFya0ZvckNoZWNrKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcbiAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xyXG4gICAgdGhpcy50ZHNUYWJsZVN0eWxlU2VydmljZS5jb2x1bW5Db3VudCQucGlwZSh0YWtlVW50aWwodGhpcy5kZXN0cm95JCkpLnN1YnNjcmliZShjb3VudCA9PiB7XHJcbiAgICAgIHRoaXMucmVuZGVyZXIuc2V0QXR0cmlidXRlKHRoaXMudGRFbGVtZW50Lm5hdGl2ZUVsZW1lbnQsICdjb2xzcGFuJywgYCR7Y291bnR9YCk7XHJcbiAgICB9KTtcclxuICB9XHJcbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XHJcbiAgICB0aGlzLmRlc3Ryb3kkLm5leHQoKTtcclxuICAgIHRoaXMuZGVzdHJveSQuY29tcGxldGUoKTtcclxuICB9XHJcbn1cclxuIl19