import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, ContentChild, EventEmitter, Input, Optional, Output, ViewChild, ViewEncapsulation } from '@angular/core';
import { InputBoolean } from 'tds-ui/shared/utility';
import { BehaviorSubject, combineLatest, of, Subject } from 'rxjs';
import { delay, filter, map, takeUntil } from 'rxjs/operators';
import { TDSTableDataService } from '../table-data.service';
import { TDSTableStyleService } from '../table-style.service';
import { TDSTableInnerScrollComponent } from './table-inner-scroll.component';
import { TDSTableVirtualScrollDirective } from './table-virtual-scroll.directive';
import { WithConfig } from 'tds-ui/core/config';
import { measureScrollbar } from 'tds-ui/core/util';
import * as i0 from "@angular/core";
import * as i1 from "tds-ui/core/resize-observers";
import * as i2 from "tds-ui/core/config";
import * as i3 from "../table-style.service";
import * as i4 from "../table-data.service";
import * as i5 from "@angular/cdk/bidi";
import * as i6 from "tds-ui/progress-spinner";
import * as i7 from "@angular/common";
import * as i8 from "./title-footer.component";
import * as i9 from "./table-inner-scroll.component";
import * as i10 from "./table-inner-default.component";
import * as i11 from "tds-ui/pagination";
function TDSTableComponent_ng_container_1_ng_template_1_Template(rf, ctx) { }
function TDSTableComponent_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtemplate(1, TDSTableComponent_ng_container_1_ng_template_1_Template, 0, 0, "ng-template", 11);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    i0.ɵɵnextContext();
    const _r8 = i0.ɵɵreference(11);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngTemplateOutlet", _r8);
} }
const _c0 = function (a0) { return { "border-b border-neutral-2-200": a0 }; };
function TDSTableComponent_tds_table_title_footer_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "tds-table-title-footer", 12);
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(2, _c0, ctx_r2.bordered || ctx_r2.outerBordered))("title", ctx_r2.title);
} }
function TDSTableComponent_tds_table_inner_scroll_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "tds-table-inner-scroll", 13);
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    const _r10 = i0.ɵɵreference(13);
    const _r1 = i0.ɵɵreference(3);
    i0.ɵɵproperty("data", ctx_r3.data)("scrollX", ctx_r3.scrollX)("scrollY", ctx_r3.scrollY)("contentTemplate", _r10)("listOfColWidth", ctx_r3.listOfAutoColWidth)("theadTemplate", ctx_r3.theadTemplate)("verticalScrollBarWidth", ctx_r3.verticalScrollBarWidth)("virtualTemplate", ctx_r3.virtualScrollDirective ? ctx_r3.virtualScrollDirective.templateRef : null)("virtualItemSize", ctx_r3.virtualItemSize)("virtualMaxBufferPx", ctx_r3.virtualMaxBufferPx)("virtualMinBufferPx", ctx_r3.virtualMinBufferPx)("tableMainElement", _r1)("virtualForTrackBy", ctx_r3.virtualForTrackBy);
} }
function TDSTableComponent_ng_template_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "tds-table-inner-default", 14);
} if (rf & 2) {
    const ctx_r5 = i0.ɵɵnextContext();
    const _r10 = i0.ɵɵreference(13);
    i0.ɵɵproperty("tableLayout", ctx_r5.tableLayout)("listOfColWidth", ctx_r5.listOfManualColWidth)("theadTemplate", ctx_r5.theadTemplate)("contentTemplate", _r10);
} }
function TDSTableComponent_tds_table_title_footer_8_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "tds-table-title-footer", 15);
} if (rf & 2) {
    const ctx_r6 = i0.ɵɵnextContext();
    i0.ɵɵproperty("footer", ctx_r6.footer);
} }
function TDSTableComponent_ng_container_9_ng_template_1_Template(rf, ctx) { }
function TDSTableComponent_ng_container_9_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtemplate(1, TDSTableComponent_ng_container_9_ng_template_1_Template, 0, 0, "ng-template", 11);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    i0.ɵɵnextContext();
    const _r8 = i0.ɵɵreference(11);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngTemplateOutlet", _r8);
} }
function TDSTableComponent_ng_template_10_div_0_Template(rf, ctx) { if (rf & 1) {
    const _r18 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 17)(1, "tds-pagination", 18);
    i0.ɵɵlistener("pageSizeChange", function TDSTableComponent_ng_template_10_div_0_Template_tds_pagination_pageSizeChange_1_listener($event) { i0.ɵɵrestoreView(_r18); const ctx_r17 = i0.ɵɵnextContext(2); return ctx_r17.onPageSizeChange($event); })("pageIndexChange", function TDSTableComponent_ng_template_10_div_0_Template_tds_pagination_pageIndexChange_1_listener($event) { i0.ɵɵrestoreView(_r18); const ctx_r19 = i0.ɵɵnextContext(2); return ctx_r19.onPageIndexChange($event); })("clickRefresh", function TDSTableComponent_ng_template_10_div_0_Template_tds_pagination_clickRefresh_1_listener($event) { i0.ɵɵrestoreView(_r18); const ctx_r20 = i0.ɵɵnextContext(2); return ctx_r20.onClickRefresh($event); });
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r16 = i0.ɵɵnextContext(2);
    const _r12 = i0.ɵɵreference(15);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("hidden", !ctx_r16.isShowPagination)("showSizeChanger", ctx_r16.showSizeChanger)("pageSizeOptions", ctx_r16.pageSizeOptions)("itemRender", ctx_r16.itemRender)("showQuickJumper", ctx_r16.showQuickJumper)("hideOnSinglePage", ctx_r16.hideOnSinglePage)("showTotal", ctx_r16.showTotal || _r12)("showRefresh", ctx_r16.showRefresh)("size", ctx_r16.paginationType)("pageSize", ctx_r16.pageSize)("total", ctx_r16.total)("simple", ctx_r16.simple)("pageIndex", ctx_r16.pageIndex);
} }
function TDSTableComponent_ng_template_10_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, TDSTableComponent_ng_template_10_div_0_Template, 2, 13, "div", 16);
} if (rf & 2) {
    const ctx_r9 = i0.ɵɵnextContext();
    i0.ɵɵproperty("ngIf", ctx_r9.isShowPagination);
} }
function TDSTableComponent_ng_template_12_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵprojection(0);
} }
function TDSTableComponent_ng_template_14_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0);
} if (rf & 2) {
    const range_r21 = ctx.range;
    const total_r22 = ctx.$implicit;
    i0.ɵɵtextInterpolate3(" ", range_r21[0], "-", range_r21[1], " of ", total_r22, " ");
} }
const _c1 = ["*"];
const TDS_CONFIG_MODULE_NAME = 'table';
export class TDSTableComponent {
    constructor(elementRef, tdsResizeObserver, tdsConfigService, cdr, tdsTableStyleService, tdsTableDataService, directionality) {
        this.elementRef = elementRef;
        this.tdsResizeObserver = tdsResizeObserver;
        this.tdsConfigService = tdsConfigService;
        this.cdr = cdr;
        this.tdsTableStyleService = tdsTableStyleService;
        this.tdsTableDataService = tdsTableDataService;
        this.directionality = directionality;
        this._tdsModuleName = TDS_CONFIG_MODULE_NAME;
        this.tableLayout = 'auto';
        this.showTotal = null;
        this.showRefresh = true;
        this.itemRender = null;
        this.title = null;
        this.footer = null;
        this.noResult = undefined;
        this.pageSizeOptions = [10, 20, 30, 40, 50];
        this.virtualItemSize = 0;
        this.virtualMaxBufferPx = 200;
        this.virtualMinBufferPx = 100;
        this.virtualForTrackBy = index => index;
        this.loadingDelay = 0;
        this.pageIndex = 1;
        this.pageSize = 10;
        this.total = 0;
        this.widthConfig = [];
        this.listData = [];
        this.paginationPosition = 'bottom';
        this.scroll = { x: null, y: 'auto' };
        this.paginationType = 'sm';
        this.frontPagination = true;
        this.templateMode = false;
        this.showPagination = true;
        this.loading = false;
        this.outerBordered = false;
        this.loadingIndicator = null;
        this.bordered = false;
        this.size = 'default';
        this.showSizeChanger = false;
        this.hideOnSinglePage = false;
        this.showQuickJumper = false;
        this.simple = false;
        this.pageSizeChange = new EventEmitter();
        this.pageIndexChange = new EventEmitter();
        this.queryParams = new EventEmitter();
        this.currentPageDataChange = new EventEmitter();
        this.clickRefresh = new EventEmitter();
        /** public data for ngFor tr */
        this.data = [];
        this.scrollX = null;
        this.scrollY = null;
        this.theadTemplate = null;
        this.listOfAutoColWidth = [];
        this.listOfManualColWidth = [];
        this.hasFixLeft = false;
        this.hasFixRight = false;
        this.isShowPagination = true;
        this.destroy$ = new Subject();
        this.loading$ = new BehaviorSubject(false);
        this.templateMode$ = new BehaviorSubject(false);
        this.dir = 'ltr';
        this.verticalScrollBarWidth = 0;
        // TODO: move to host after View Engine deprecation
        this.elementRef.nativeElement.classList.add('tds-table-wrapper');
        this.tdsConfigService
            .getConfigChangeEventForComponent(TDS_CONFIG_MODULE_NAME)
            .pipe(takeUntil(this.destroy$))
            .subscribe(() => {
            this.cdr.markForCheck();
        });
    }
    onPageSizeChange(size) {
        this.tdsTableDataService.updatePageSize(size);
    }
    onPageIndexChange(index) {
        this.tdsTableDataService.updatePageIndex(index);
    }
    ngOnInit() {
        const { pageIndexDistinct$, pageSizeDistinct$, listOfCurrentPageData$, total$, queryParams$ } = this.tdsTableDataService;
        const { theadTemplate$, hasFixLeft$, hasFixRight$ } = this.tdsTableStyleService;
        this.dir = this.directionality.value;
        this.directionality.change?.pipe(takeUntil(this.destroy$)).subscribe((direction) => {
            this.dir = direction;
            this.cdr.detectChanges();
        });
        queryParams$.pipe(takeUntil(this.destroy$)).subscribe(this.queryParams);
        pageIndexDistinct$.pipe(takeUntil(this.destroy$)).subscribe(pageIndex => {
            if (pageIndex !== this.pageIndex) {
                this.pageIndex = pageIndex;
                this.pageIndexChange.next(pageIndex);
            }
        });
        pageSizeDistinct$.pipe(takeUntil(this.destroy$)).subscribe(pageSize => {
            if (pageSize !== this.pageSize) {
                this.pageSize = pageSize;
                this.pageSizeChange.next(pageSize);
            }
        });
        total$
            .pipe(takeUntil(this.destroy$), filter(() => this.frontPagination))
            .subscribe(total => {
            if (total !== this.total) {
                this.total = total;
                this.cdr.markForCheck();
            }
        });
        listOfCurrentPageData$.pipe(takeUntil(this.destroy$)).subscribe(data => {
            this.data = data;
            this.currentPageDataChange.next(data);
            this.cdr.markForCheck();
        });
        theadTemplate$.pipe(takeUntil(this.destroy$)).subscribe(theadTemplate => {
            this.theadTemplate = theadTemplate;
            this.cdr.markForCheck();
        });
        hasFixLeft$.pipe(takeUntil(this.destroy$)).subscribe(hasFixLeft => {
            this.hasFixLeft = hasFixLeft;
            this.cdr.markForCheck();
        });
        hasFixRight$.pipe(takeUntil(this.destroy$)).subscribe(hasFixRight => {
            this.hasFixRight = hasFixRight;
            this.cdr.markForCheck();
        });
        combineLatest([total$, this.loading$, this.templateMode$])
            .pipe(map(([total, loading, templateMode]) => total === 0 && !loading && !templateMode), takeUntil(this.destroy$))
            .subscribe(empty => {
            this.tdsTableStyleService.setShowEmpty(empty);
        });
        this.verticalScrollBarWidth = measureScrollbar('vertical');
        this.tdsTableStyleService.listOfListOfThWidthPx$.pipe(takeUntil(this.destroy$)).subscribe(listOfWidth => {
            this.listOfAutoColWidth = listOfWidth;
            this.cdr.markForCheck();
        });
        this.tdsTableStyleService.manualWidthConfigPx$.pipe(takeUntil(this.destroy$)).subscribe(listOfWidth => {
            this.listOfManualColWidth = listOfWidth;
            this.cdr.markForCheck();
        });
    }
    ngOnChanges(changes) {
        const { scroll, pageIndex, pageSize, frontPagination, listData, widthConfig, noResult, loading, templateMode } = changes;
        if (pageIndex) {
            this.tdsTableDataService.updatePageIndex(this.pageIndex);
        }
        if (pageSize) {
            this.tdsTableDataService.updatePageSize(this.pageSize);
        }
        if (listData) {
            this.listData = this.listData || [];
            this.tdsTableDataService.updateListOfData(this.listData);
        }
        if (frontPagination) {
            this.tdsTableDataService.updateFrontPagination(this.frontPagination);
        }
        if (scroll) {
            this.setScrollOnChanges();
        }
        if (widthConfig) {
            this.tdsTableStyleService.setTableWidthConfig(this.widthConfig);
        }
        if (loading) {
            this.loading$.next(this.loading);
        }
        if (templateMode) {
            this.templateMode$.next(this.templateMode);
        }
        if (noResult) {
            this.tdsTableStyleService.setNoResult(this.noResult);
        }
        this.updateShowPagination();
    }
    ngAfterViewInit() {
        //fix lỗi expand ko lấy dc host width
        of(this.getWidthHost()).pipe(delay(10), takeUntil(this.destroy$)).subscribe(this.tdsTableStyleService.hostWidth$);
        this.tdsResizeObserver
            .observe(this.elementRef)
            .pipe(map(([entry]) => {
            const { width } = entry.target.getBoundingClientRect();
            const scrollBarWidth = this.scrollY ? this.verticalScrollBarWidth : 0;
            return Math.floor(width - scrollBarWidth);
        }), takeUntil(this.destroy$))
            .subscribe(this.tdsTableStyleService.hostWidth$);
        if (this.tdsTableInnerScrollComponent && this.tdsTableInnerScrollComponent.cdkVirtualScrollViewport) {
            this.cdkVirtualScrollViewport = this.tdsTableInnerScrollComponent.cdkVirtualScrollViewport;
        }
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    onClickRefresh(e) {
        this.clickRefresh.emit(e);
    }
    setScrollOnChanges() {
        this.scrollX = (this.scroll && this.scroll.x) || null;
        this.scrollY = (this.scroll && this.scroll.y) || null;
        this.tdsTableStyleService.setScroll(this.scrollX, this.scrollY);
    }
    updateShowPagination() {
        this.isShowPagination =
            this.showPagination && ((this.hideOnSinglePage && this.listData.length > this.pageSize) ||
                (this.listData.length > 0 && !this.hideOnSinglePage) ||
                (!this.frontPagination && this.total > this.pageSize));
    }
    getWidthHost() {
        const { width } = this.elementRef.nativeElement.getBoundingClientRect();
        const scrollBarWidth = this.scrollY ? this.verticalScrollBarWidth : 0;
        return Math.floor(width - scrollBarWidth);
    }
}
TDSTableComponent.ɵfac = function TDSTableComponent_Factory(t) { return new (t || TDSTableComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.TDSResizeObserver), i0.ɵɵdirectiveInject(i2.TDSConfigService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i3.TDSTableStyleService), i0.ɵɵdirectiveInject(i4.TDSTableDataService), i0.ɵɵdirectiveInject(i5.Directionality, 8)); };
TDSTableComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSTableComponent, selectors: [["tds-table"]], contentQueries: function TDSTableComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        i0.ɵɵcontentQuery(dirIndex, TDSTableVirtualScrollDirective, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.virtualScrollDirective = _t.first);
    } }, viewQuery: function TDSTableComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(TDSTableInnerScrollComponent, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tdsTableInnerScrollComponent = _t.first);
    } }, hostAttrs: [1, "w-full", "h-full"], hostVars: 2, hostBindings: function TDSTableComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵclassProp("tds-table-wrapper-rtl", ctx.dir === "rtl");
    } }, inputs: { tableLayout: "tableLayout", showTotal: "showTotal", showRefresh: "showRefresh", itemRender: "itemRender", title: "title", footer: "footer", noResult: "noResult", pageSizeOptions: "pageSizeOptions", virtualItemSize: "virtualItemSize", virtualMaxBufferPx: "virtualMaxBufferPx", virtualMinBufferPx: "virtualMinBufferPx", virtualForTrackBy: "virtualForTrackBy", loadingDelay: "loadingDelay", pageIndex: "pageIndex", pageSize: "pageSize", total: "total", widthConfig: "widthConfig", listData: "listData", paginationPosition: "paginationPosition", scroll: "scroll", paginationType: "paginationType", frontPagination: "frontPagination", templateMode: "templateMode", showPagination: "showPagination", loading: "loading", outerBordered: "outerBordered", loadingIndicator: "loadingIndicator", bordered: "bordered", size: "size", showSizeChanger: "showSizeChanger", hideOnSinglePage: "hideOnSinglePage", showQuickJumper: "showQuickJumper", simple: "simple" }, outputs: { pageSizeChange: "pageSizeChange", pageIndexChange: "pageIndexChange", queryParams: "queryParams", currentPageDataChange: "currentPageDataChange", clickRefresh: "clickRefresh" }, exportAs: ["tdsTable"], features: [i0.ɵɵProvidersFeature([TDSTableStyleService, TDSTableDataService]), i0.ɵɵNgOnChangesFeature], ngContentSelectors: _c1, decls: 16, vars: 31, consts: [[1, "h-full", "relative", "w-full", 3, "delay", "spinning", "indicator"], [4, "ngIf"], [1, "tds-table", "flex", "flex-col", "flex-auto", "w-full"], ["tableMainElement", ""], ["class", "text-neutral-1-900 text-header-1 font-semibold", 3, "ngClass", "title", 4, "ngIf"], ["class", "flex flex-col h-full w-full", 3, "data", "scrollX", "scrollY", "contentTemplate", "listOfColWidth", "theadTemplate", "verticalScrollBarWidth", "virtualTemplate", "virtualItemSize", "virtualMaxBufferPx", "virtualMinBufferPx", "tableMainElement", "virtualForTrackBy", 4, "ngIf", "ngIfElse"], ["defaultTemplate", ""], [3, "footer", 4, "ngIf"], ["paginationTemplate", ""], ["contentTemplate", ""], ["rangeTemplate", ""], [3, "ngTemplateOutlet"], [1, "text-neutral-1-900", "text-header-1", "font-semibold", 3, "ngClass", "title"], [1, "flex", "flex-col", "h-full", "w-full", 3, "data", "scrollX", "scrollY", "contentTemplate", "listOfColWidth", "theadTemplate", "verticalScrollBarWidth", "virtualTemplate", "virtualItemSize", "virtualMaxBufferPx", "virtualMinBufferPx", "tableMainElement", "virtualForTrackBy"], [1, "w-full", 3, "tableLayout", "listOfColWidth", "theadTemplate", "contentTemplate"], [3, "footer"], ["class", "w-full pt-2.5", 4, "ngIf"], [1, "w-full", "pt-2.5"], [1, "tds-table-pagination", "tds-table-pagination-right", 3, "hidden", "showSizeChanger", "pageSizeOptions", "itemRender", "showQuickJumper", "hideOnSinglePage", "showTotal", "showRefresh", "size", "pageSize", "total", "simple", "pageIndex", "pageSizeChange", "pageIndexChange", "clickRefresh"]], template: function TDSTableComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵelementStart(0, "tds-spin", 0);
        i0.ɵɵtemplate(1, TDSTableComponent_ng_container_1_Template, 2, 1, "ng-container", 1);
        i0.ɵɵelementStart(2, "div", 2, 3);
        i0.ɵɵtemplate(4, TDSTableComponent_tds_table_title_footer_4_Template, 1, 4, "tds-table-title-footer", 4);
        i0.ɵɵtemplate(5, TDSTableComponent_tds_table_inner_scroll_5_Template, 1, 13, "tds-table-inner-scroll", 5);
        i0.ɵɵtemplate(6, TDSTableComponent_ng_template_6_Template, 1, 4, "ng-template", null, 6, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtemplate(8, TDSTableComponent_tds_table_title_footer_8_Template, 1, 1, "tds-table-title-footer", 7);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(9, TDSTableComponent_ng_container_9_Template, 2, 1, "ng-container", 1);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(10, TDSTableComponent_ng_template_10_Template, 1, 1, "ng-template", null, 8, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtemplate(12, TDSTableComponent_ng_template_12_Template, 1, 0, "ng-template", null, 9, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtemplate(14, TDSTableComponent_ng_template_14_Template, 1, 3, "ng-template", null, 10, i0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r4 = i0.ɵɵreference(7);
        i0.ɵɵproperty("delay", ctx.loadingDelay)("spinning", ctx.loading)("indicator", ctx.loadingIndicator);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx.paginationPosition === "both" || ctx.paginationPosition === "top");
        i0.ɵɵadvance(1);
        i0.ɵɵclassProp("tds-table-rtl", ctx.dir === "rtl")("tds-table-fixed-header", ctx.data.length && ctx.scrollY)("tds-table-fixed-column", ctx.scrollX)("tds-table-has-fix-left", ctx.hasFixLeft)("tds-table-has-fix-right", ctx.hasFixRight)("tds-table-bordered", ctx.bordered)("border-neutral-2-200", ctx.bordered || ctx.outerBordered)("border", ctx.bordered || ctx.outerBordered)("tds-table-out-bordered", ctx.outerBordered && !ctx.bordered)("tds-table-middle", ctx.size === "middle")("tds-table-small", ctx.size === "small");
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.title);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx.scrollY || ctx.scrollX)("ngIfElse", _r4);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx.footer);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx.paginationPosition === "both" || ctx.paginationPosition === "bottom");
    } }, directives: [i6.TDSSpinComponent, i7.NgIf, i7.NgTemplateOutlet, i8.TDSTableTitleFooterComponent, i7.NgClass, i9.TDSTableInnerScrollComponent, i10.TDSTableInnerDefaultComponent, i11.TDSPaginationComponent], encapsulation: 2, changeDetection: 0 });
__decorate([
    InputBoolean()
], TDSTableComponent.prototype, "frontPagination", void 0);
__decorate([
    InputBoolean()
], TDSTableComponent.prototype, "templateMode", void 0);
__decorate([
    InputBoolean()
], TDSTableComponent.prototype, "showPagination", void 0);
__decorate([
    InputBoolean()
], TDSTableComponent.prototype, "loading", void 0);
__decorate([
    InputBoolean()
], TDSTableComponent.prototype, "outerBordered", void 0);
__decorate([
    WithConfig()
], TDSTableComponent.prototype, "loadingIndicator", void 0);
__decorate([
    WithConfig(),
    InputBoolean()
], TDSTableComponent.prototype, "bordered", void 0);
__decorate([
    WithConfig()
], TDSTableComponent.prototype, "size", void 0);
__decorate([
    WithConfig(),
    InputBoolean()
], TDSTableComponent.prototype, "showSizeChanger", void 0);
__decorate([
    WithConfig(),
    InputBoolean()
], TDSTableComponent.prototype, "hideOnSinglePage", void 0);
__decorate([
    WithConfig(),
    InputBoolean()
], TDSTableComponent.prototype, "showQuickJumper", void 0);
__decorate([
    WithConfig(),
    InputBoolean()
], TDSTableComponent.prototype, "simple", void 0);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSTableComponent, [{
        type: Component,
        args: [{
                selector: 'tds-table',
                exportAs: 'tdsTable',
                providers: [TDSTableStyleService, TDSTableDataService],
                preserveWhitespaces: false,
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                template: `
    <tds-spin [delay]="loadingDelay" [spinning]="loading" [indicator]="loadingIndicator" class="h-full relative w-full">
      <ng-container *ngIf="paginationPosition === 'both' || paginationPosition === 'top'">
        <ng-template [ngTemplateOutlet]="paginationTemplate"></ng-template>
      </ng-container>
      <div
        #tableMainElement
        class="tds-table flex flex-col flex-auto w-full"
        [class.tds-table-rtl]="dir === 'rtl'"
        [class.tds-table-fixed-header]="data.length && scrollY"
        [class.tds-table-fixed-column]="scrollX"
        [class.tds-table-has-fix-left]="hasFixLeft"
        [class.tds-table-has-fix-right]="hasFixRight"
        [class.tds-table-bordered]="bordered"
        [class.border-neutral-2-200]="bordered || outerBordered"
        [class.border]="bordered || outerBordered"
        [class.tds-table-out-bordered]="outerBordered && !bordered"
        [class.tds-table-middle]="size === 'middle'"
        [class.tds-table-small]="size === 'small'"
      >
        <tds-table-title-footer 
        class="text-neutral-1-900 text-header-1 font-semibold"
        [ngClass]="{'border-b border-neutral-2-200':bordered || outerBordered}"              
        [title]="title" 
        *ngIf="title">        
        </tds-table-title-footer>
        <tds-table-inner-scroll
         class="flex flex-col h-full w-full"
          *ngIf="scrollY || scrollX; else defaultTemplate"
          [data]="data"
          [scrollX]="scrollX"
          [scrollY]="scrollY"
          [contentTemplate]="contentTemplate"
          [listOfColWidth]="listOfAutoColWidth"
          [theadTemplate]="theadTemplate"
          [verticalScrollBarWidth]="verticalScrollBarWidth"
          [virtualTemplate]="virtualScrollDirective ? virtualScrollDirective.templateRef : null"
          [virtualItemSize]="virtualItemSize"
          [virtualMaxBufferPx]="virtualMaxBufferPx"
          [virtualMinBufferPx]="virtualMinBufferPx"
          [tableMainElement]="tableMainElement"
          [virtualForTrackBy]="virtualForTrackBy"
        ></tds-table-inner-scroll>
        <ng-template #defaultTemplate>
          <tds-table-inner-default
            class="w-full"
            [tableLayout]="tableLayout"
            [listOfColWidth]="listOfManualColWidth"
            [theadTemplate]="theadTemplate"
            [contentTemplate]="contentTemplate"
          ></tds-table-inner-default>
        </ng-template>
        <tds-table-title-footer [footer]="footer" *ngIf="footer"></tds-table-title-footer>
      </div>
      <ng-container *ngIf="paginationPosition === 'both' || paginationPosition === 'bottom'">
        <ng-template [ngTemplateOutlet]="paginationTemplate"></ng-template>
      </ng-container>
    </tds-spin>
    <ng-template #paginationTemplate>
    <div class="w-full pt-2.5" *ngIf="isShowPagination">
    <tds-pagination
    [hidden]="!isShowPagination"
    class="tds-table-pagination tds-table-pagination-right "
    [showSizeChanger]="showSizeChanger"
    [pageSizeOptions]="pageSizeOptions"
    [itemRender]="itemRender!"
    [showQuickJumper]="showQuickJumper"
    [hideOnSinglePage]="hideOnSinglePage"
    [showTotal]="showTotal || rangeTemplate"
    [showRefresh]="showRefresh"
    [size]="paginationType"
    [pageSize]="pageSize"
    [total]="total"
    [simple]="simple"
    [pageIndex]="pageIndex"
    (pageSizeChange)="onPageSizeChange($event)"
    (pageIndexChange)="onPageIndexChange($event)"
    (clickRefresh)="onClickRefresh($event)"
  ></tds-pagination>
    </div>
      
    </ng-template>
    <ng-template #contentTemplate>
      <ng-content></ng-content>
    </ng-template>
    <ng-template #rangeTemplate let-range="range" let-total>
      {{ range[0] }}-{{ range[1] }} of {{ total }}
    </ng-template>
  `,
                host: {
                    '[class.tds-table-wrapper-rtl]': 'dir === "rtl"',
                    class: "w-full h-full "
                }
            }]
    }], function () { return [{ type: i0.ElementRef }, { type: i1.TDSResizeObserver }, { type: i2.TDSConfigService }, { type: i0.ChangeDetectorRef }, { type: i3.TDSTableStyleService }, { type: i4.TDSTableDataService }, { type: i5.Directionality, decorators: [{
                type: Optional
            }] }]; }, { tableLayout: [{
            type: Input
        }], showTotal: [{
            type: Input
        }], showRefresh: [{
            type: Input
        }], itemRender: [{
            type: Input
        }], title: [{
            type: Input
        }], footer: [{
            type: Input
        }], noResult: [{
            type: Input
        }], pageSizeOptions: [{
            type: Input
        }], virtualItemSize: [{
            type: Input
        }], virtualMaxBufferPx: [{
            type: Input
        }], virtualMinBufferPx: [{
            type: Input
        }], virtualForTrackBy: [{
            type: Input
        }], loadingDelay: [{
            type: Input
        }], pageIndex: [{
            type: Input
        }], pageSize: [{
            type: Input
        }], total: [{
            type: Input
        }], widthConfig: [{
            type: Input
        }], listData: [{
            type: Input
        }], paginationPosition: [{
            type: Input
        }], scroll: [{
            type: Input
        }], paginationType: [{
            type: Input
        }], frontPagination: [{
            type: Input
        }], templateMode: [{
            type: Input
        }], showPagination: [{
            type: Input
        }], loading: [{
            type: Input
        }], outerBordered: [{
            type: Input
        }], loadingIndicator: [{
            type: Input
        }], bordered: [{
            type: Input
        }], size: [{
            type: Input
        }], showSizeChanger: [{
            type: Input
        }], hideOnSinglePage: [{
            type: Input
        }], showQuickJumper: [{
            type: Input
        }], simple: [{
            type: Input
        }], pageSizeChange: [{
            type: Output
        }], pageIndexChange: [{
            type: Output
        }], queryParams: [{
            type: Output
        }], currentPageDataChange: [{
            type: Output
        }], clickRefresh: [{
            type: Output
        }], virtualScrollDirective: [{
            type: ContentChild,
            args: [TDSTableVirtualScrollDirective, { static: false }]
        }], tdsTableInnerScrollComponent: [{
            type: ViewChild,
            args: [TDSTableInnerScrollComponent]
        }] }); })();
//# sourceMappingURL=data:application/json;base64,