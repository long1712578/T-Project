/* eslint-disable @angular-eslint/component-selector */
import { ChangeDetectionStrategy, Component, Optional, ViewEncapsulation } from '@angular/core';
import { BehaviorSubject, Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../table-style.service";
import * as i2 from "@angular/common";
import * as i3 from "./tr-measure.component";
import * as i4 from "./table-fixed-row.component";
import * as i5 from "tds-ui/empty";
function TDSTbodyComponent_ng_container_0_tr_1_Template(rf, ctx) { if (rf & 1) {
    const _r5 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "tr", 3);
    i0.ɵɵlistener("listOfAutoWidth", function TDSTbodyComponent_ng_container_0_tr_1_Template_tr_listOfAutoWidth_0_listener($event) { i0.ɵɵrestoreView(_r5); const ctx_r4 = i0.ɵɵnextContext(2); return ctx_r4.onListOfAutoWidthChange($event); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const listOfMeasureColumn_r2 = i0.ɵɵnextContext().ngIf;
    i0.ɵɵproperty("listOfMeasureColumn", listOfMeasureColumn_r2);
} }
function TDSTbodyComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtemplate(1, TDSTbodyComponent_ng_container_0_tr_1_Template, 1, 1, "tr", 2);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const listOfMeasureColumn_r2 = ctx.ngIf;
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r0.isInsideTable && listOfMeasureColumn_r2.length);
} }
function TDSTbodyComponent_tr_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tr", 4);
    i0.ɵɵelement(1, "tds-embed-empty", 5);
    i0.ɵɵpipe(2, "async");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("specificContent", i0.ɵɵpipeBind1(2, 1, ctx_r1.noResult$));
} }
const _c0 = ["*"];
export class TDSTbodyComponent {
    constructor(tdsTableStyleService) {
        this.tdsTableStyleService = tdsTableStyleService;
        this.isInsideTable = false;
        this.showEmpty$ = new BehaviorSubject(false);
        this.noResult$ = new BehaviorSubject(undefined);
        this.listOfMeasureColumn$ = new BehaviorSubject([]);
        this.destroy$ = new Subject();
        this.isInsideTable = !!this.tdsTableStyleService;
        if (this.tdsTableStyleService) {
            const { showEmpty$, noResult$, listOfMeasureColumn$ } = this.tdsTableStyleService;
            noResult$.pipe(takeUntil(this.destroy$)).subscribe(this.noResult$);
            listOfMeasureColumn$.pipe(takeUntil(this.destroy$)).subscribe(this.listOfMeasureColumn$);
            showEmpty$.pipe(takeUntil(this.destroy$)).subscribe(this.showEmpty$);
        }
    }
    onListOfAutoWidthChange(listOfAutoWidth) {
        this.tdsTableStyleService.setListOfAutoWidth(listOfAutoWidth);
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
}
TDSTbodyComponent.ɵfac = function TDSTbodyComponent_Factory(t) { return new (t || TDSTbodyComponent)(i0.ɵɵdirectiveInject(i1.TDSTableStyleService, 8)); };
TDSTbodyComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSTbodyComponent, selectors: [["tbody"]], hostVars: 2, hostBindings: function TDSTbodyComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵclassProp("tds-table-tbody", ctx.isInsideTable);
    } }, ngContentSelectors: _c0, decls: 5, vars: 6, consts: [[4, "ngIf"], ["class", "tds-table-placeholder", "tds-table-fixed-row", "", 4, "ngIf"], ["tds-table-measure-row", "", 3, "listOfMeasureColumn", "listOfAutoWidth", 4, "ngIf"], ["tds-table-measure-row", "", 3, "listOfMeasureColumn", "listOfAutoWidth"], ["tds-table-fixed-row", "", 1, "tds-table-placeholder"], ["componentName", "table", 3, "specificContent"]], template: function TDSTbodyComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵtemplate(0, TDSTbodyComponent_ng_container_0_Template, 2, 1, "ng-container", 0);
        i0.ɵɵpipe(1, "async");
        i0.ɵɵprojection(2);
        i0.ɵɵtemplate(3, TDSTbodyComponent_tr_3_Template, 3, 3, "tr", 1);
        i0.ɵɵpipe(4, "async");
    } if (rf & 2) {
        i0.ɵɵproperty("ngIf", i0.ɵɵpipeBind1(1, 2, ctx.listOfMeasureColumn$));
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", i0.ɵɵpipeBind1(4, 4, ctx.showEmpty$));
    } }, directives: [i2.NgIf, i3.TDSTrMeasureComponent, i4.TDSTableFixedRowComponent, i5.TDSEmbedEmptyComponent], pipes: [i2.AsyncPipe], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSTbodyComponent, [{
        type: Component,
        args: [{
                selector: 'tbody',
                preserveWhitespaces: false,
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                template: `
    <ng-container *ngIf="listOfMeasureColumn$ | async as listOfMeasureColumn">
      <tr
        tds-table-measure-row
        *ngIf="isInsideTable && listOfMeasureColumn.length"
        [listOfMeasureColumn]="listOfMeasureColumn"
        (listOfAutoWidth)="onListOfAutoWidthChange($event)"
      ></tr>
    </ng-container>
    <ng-content></ng-content>   
    <tr class="tds-table-placeholder" tds-table-fixed-row *ngIf="showEmpty$ | async">
     <tds-embed-empty componentName="table" [specificContent]="(noResult$ | async)!"></tds-embed-empty>
    </tr>
  `,
                host: {
                    '[class.tds-table-tbody]': 'isInsideTable'
                }
            }]
    }], function () { return [{ type: i1.TDSTableStyleService, decorators: [{
                type: Optional
            }] }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGJvZHkuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvdGRzLXVpL3RhYmxlL3NyYy90YWJsZS90Ym9keS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsdURBQXVEO0FBRXZELE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQWEsUUFBUSxFQUFlLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hILE9BQU8sRUFBRSxlQUFlLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ2hELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7Ozs7Ozs7O0lBYXJDLDZCQUtDO0lBREMsbU1BQW1CLHNDQUErQixJQUFDO0lBQ3BELGlCQUFLOzs7SUFGSiw0REFBMkM7OztJQUovQyw2QkFBMEU7SUFDeEUsK0VBS007SUFDUiwwQkFBZTs7OztJQUpWLGVBQWlEO0lBQWpELDRFQUFpRDs7O0lBTXRELDZCQUFpRjtJQUNoRixxQ0FBa0c7O0lBQ25HLGlCQUFLOzs7SUFEbUMsZUFBd0M7SUFBeEMsd0VBQXdDOzs7QUFPcEYsTUFBTSxPQUFPLGlCQUFpQjtJQU81QixZQUFnQyxvQkFBMEM7UUFBMUMseUJBQW9CLEdBQXBCLG9CQUFvQixDQUFzQjtRQU4xRSxrQkFBYSxHQUFHLEtBQUssQ0FBQztRQUN0QixlQUFVLEdBQUcsSUFBSSxlQUFlLENBQVUsS0FBSyxDQUFDLENBQUM7UUFDakQsY0FBUyxHQUFHLElBQUksZUFBZSxDQUErQyxTQUFTLENBQUMsQ0FBQztRQUN6Rix5QkFBb0IsR0FBRyxJQUFJLGVBQWUsQ0FBb0IsRUFBRSxDQUFDLENBQUM7UUFDMUQsYUFBUSxHQUFHLElBQUksT0FBTyxFQUFRLENBQUM7UUFHckMsSUFBSSxDQUFDLGFBQWEsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDO1FBQ2pELElBQUksSUFBSSxDQUFDLG9CQUFvQixFQUFFO1lBQzdCLE1BQU0sRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLG9CQUFvQixFQUFFLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUFDO1lBQ2xGLFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDbkUsb0JBQW9CLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLENBQUM7WUFDekYsVUFBVSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUN0RTtJQUNILENBQUM7SUFFRCx1QkFBdUIsQ0FBQyxlQUF5QjtRQUMvQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsa0JBQWtCLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDaEUsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDM0IsQ0FBQzs7a0ZBeEJVLGlCQUFpQjtvRUFBakIsaUJBQWlCOzs7O1FBakIxQixvRkFPZTs7UUFDZixrQkFBeUI7UUFDekIsZ0VBRUs7OztRQVhVLHFFQUFtQztRQVNLLGVBQXdCO1FBQXhCLDJEQUF3Qjs7dUZBUXRFLGlCQUFpQjtjQXZCN0IsU0FBUztlQUFDO2dCQUNULFFBQVEsRUFBRSxPQUFPO2dCQUNqQixtQkFBbUIsRUFBRSxLQUFLO2dCQUMxQixlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtnQkFDL0MsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7Z0JBQ3JDLFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7OztHQWFUO2dCQUNELElBQUksRUFBRTtvQkFDSix5QkFBeUIsRUFBRSxlQUFlO2lCQUMzQzthQUNGOztzQkFRYyxRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiXHJcblxyXG4vKiBlc2xpbnQtZGlzYWJsZSBAYW5ndWxhci1lc2xpbnQvY29tcG9uZW50LXNlbGVjdG9yICovXHJcblxyXG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBPbkRlc3Ryb3ksIE9wdGlvbmFsLCBUZW1wbGF0ZVJlZiwgVmlld0VuY2Fwc3VsYXRpb24gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IHRha2VVbnRpbCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuXHJcbmltcG9ydCB7IFREU1NhZmVBbnkgfSBmcm9tICd0ZHMtdWkvc2hhcmVkL3V0aWxpdHknO1xyXG5cclxuaW1wb3J0IHsgVERTVGFibGVTdHlsZVNlcnZpY2UgfSBmcm9tICcuLi90YWJsZS1zdHlsZS5zZXJ2aWNlJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAndGJvZHknLFxyXG4gIHByZXNlcnZlV2hpdGVzcGFjZXM6IGZhbHNlLFxyXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxyXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXHJcbiAgdGVtcGxhdGU6IGBcclxuICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJsaXN0T2ZNZWFzdXJlQ29sdW1uJCB8IGFzeW5jIGFzIGxpc3RPZk1lYXN1cmVDb2x1bW5cIj5cclxuICAgICAgPHRyXHJcbiAgICAgICAgdGRzLXRhYmxlLW1lYXN1cmUtcm93XHJcbiAgICAgICAgKm5nSWY9XCJpc0luc2lkZVRhYmxlICYmIGxpc3RPZk1lYXN1cmVDb2x1bW4ubGVuZ3RoXCJcclxuICAgICAgICBbbGlzdE9mTWVhc3VyZUNvbHVtbl09XCJsaXN0T2ZNZWFzdXJlQ29sdW1uXCJcclxuICAgICAgICAobGlzdE9mQXV0b1dpZHRoKT1cIm9uTGlzdE9mQXV0b1dpZHRoQ2hhbmdlKCRldmVudClcIlxyXG4gICAgICA+PC90cj5cclxuICAgIDwvbmctY29udGFpbmVyPlxyXG4gICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PiAgIFxyXG4gICAgPHRyIGNsYXNzPVwidGRzLXRhYmxlLXBsYWNlaG9sZGVyXCIgdGRzLXRhYmxlLWZpeGVkLXJvdyAqbmdJZj1cInNob3dFbXB0eSQgfCBhc3luY1wiPlxyXG4gICAgIDx0ZHMtZW1iZWQtZW1wdHkgY29tcG9uZW50TmFtZT1cInRhYmxlXCIgW3NwZWNpZmljQ29udGVudF09XCIobm9SZXN1bHQkIHwgYXN5bmMpIVwiPjwvdGRzLWVtYmVkLWVtcHR5PlxyXG4gICAgPC90cj5cclxuICBgLFxyXG4gIGhvc3Q6IHtcclxuICAgICdbY2xhc3MudGRzLXRhYmxlLXRib2R5XSc6ICdpc0luc2lkZVRhYmxlJ1xyXG4gIH1cclxufSlcclxuZXhwb3J0IGNsYXNzIFREU1Rib2R5Q29tcG9uZW50IGltcGxlbWVudHMgT25EZXN0cm95IHtcclxuICBpc0luc2lkZVRhYmxlID0gZmFsc2U7XHJcbiAgc2hvd0VtcHR5JCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8Ym9vbGVhbj4oZmFsc2UpO1xyXG4gIG5vUmVzdWx0JCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8c3RyaW5nIHwgVGVtcGxhdGVSZWY8VERTU2FmZUFueT4gfCB1bmRlZmluZWQ+KHVuZGVmaW5lZCk7XHJcbiAgbGlzdE9mTWVhc3VyZUNvbHVtbiQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PHJlYWRvbmx5IHN0cmluZ1tdPihbXSk7XHJcbiAgcHJpdmF0ZSBkZXN0cm95JCA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIHByaXZhdGUgdGRzVGFibGVTdHlsZVNlcnZpY2U6IFREU1RhYmxlU3R5bGVTZXJ2aWNlKSB7XHJcbiAgICB0aGlzLmlzSW5zaWRlVGFibGUgPSAhIXRoaXMudGRzVGFibGVTdHlsZVNlcnZpY2U7XHJcbiAgICBpZiAodGhpcy50ZHNUYWJsZVN0eWxlU2VydmljZSkge1xyXG4gICAgICBjb25zdCB7IHNob3dFbXB0eSQsIG5vUmVzdWx0JCwgbGlzdE9mTWVhc3VyZUNvbHVtbiQgfSA9IHRoaXMudGRzVGFibGVTdHlsZVNlcnZpY2U7XHJcbiAgICAgIG5vUmVzdWx0JC5waXBlKHRha2VVbnRpbCh0aGlzLmRlc3Ryb3kkKSkuc3Vic2NyaWJlKHRoaXMubm9SZXN1bHQkKTtcclxuICAgICAgbGlzdE9mTWVhc3VyZUNvbHVtbiQucGlwZSh0YWtlVW50aWwodGhpcy5kZXN0cm95JCkpLnN1YnNjcmliZSh0aGlzLmxpc3RPZk1lYXN1cmVDb2x1bW4kKTtcclxuICAgICAgc2hvd0VtcHR5JC5waXBlKHRha2VVbnRpbCh0aGlzLmRlc3Ryb3kkKSkuc3Vic2NyaWJlKHRoaXMuc2hvd0VtcHR5JCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBvbkxpc3RPZkF1dG9XaWR0aENoYW5nZShsaXN0T2ZBdXRvV2lkdGg6IG51bWJlcltdKTogdm9pZCB7XHJcbiAgICB0aGlzLnRkc1RhYmxlU3R5bGVTZXJ2aWNlLnNldExpc3RPZkF1dG9XaWR0aChsaXN0T2ZBdXRvV2lkdGgpO1xyXG4gIH1cclxuXHJcbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XHJcbiAgICB0aGlzLmRlc3Ryb3kkLm5leHQoKTtcclxuICAgIHRoaXMuZGVzdHJveSQuY29tcGxldGUoKTtcclxuICB9XHJcbn1cclxuIl19