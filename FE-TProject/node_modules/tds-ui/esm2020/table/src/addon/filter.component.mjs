import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { arraysEqual } from 'tds-ui/core/util';
import * as i0 from "@angular/core";
import * as i1 from "tds-ui/i18n";
import * as i2 from "@angular/common";
import * as i3 from "./filter-trigger.component";
import * as i4 from "tds-ui/dropdown";
import * as i5 from "tds-ui/radio";
import * as i6 from "@angular/forms";
import * as i7 from "tds-ui/tds-checkbox";
import * as i8 from "tds-ui/button";
function TDSTableFilterComponent_ng_template_1_Template(rf, ctx) { }
function TDSTableFilterComponent_ng_container_2_div_7_label_1_Template(rf, ctx) { if (rf & 1) {
    const _r9 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "label", 15);
    i0.ɵɵlistener("ngModelChange", function TDSTableFilterComponent_ng_container_2_div_7_label_1_Template_label_ngModelChange_0_listener() { i0.ɵɵrestoreView(_r9); const f_r4 = i0.ɵɵnextContext().$implicit; const ctx_r7 = i0.ɵɵnextContext(2); return ctx_r7.check(f_r4); });
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const f_r4 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵproperty("ngModel", f_r4.checked);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" ", f_r4.text, " ");
} }
function TDSTableFilterComponent_ng_container_2_div_7_tds_checkbox_2_Template(rf, ctx) { if (rf & 1) {
    const _r13 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "tds-checkbox", 16);
    i0.ɵɵlistener("change", function TDSTableFilterComponent_ng_container_2_div_7_tds_checkbox_2_Template_tds_checkbox_change_0_listener() { i0.ɵɵrestoreView(_r13); const f_r4 = i0.ɵɵnextContext().$implicit; const ctx_r11 = i0.ɵɵnextContext(2); return ctx_r11.check(f_r4); });
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const f_r4 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵproperty("checked", f_r4.checked);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("", f_r4.text, " ");
} }
function TDSTableFilterComponent_ng_container_2_div_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 12);
    i0.ɵɵtemplate(1, TDSTableFilterComponent_ng_container_2_div_7_label_1_Template, 2, 2, "label", 13);
    i0.ɵɵtemplate(2, TDSTableFilterComponent_ng_container_2_div_7_tds_checkbox_2_Template, 2, 2, "tds-checkbox", 14);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", !ctx_r3.filterMultiple);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r3.filterMultiple);
} }
const _c0 = function (a0, a1) { return { "text-white bg-primary-1 ": a0, "text-neutral-1-200 group-hover:bg-neutral-3-50": a1 }; };
function TDSTableFilterComponent_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    const _r16 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "tds-filter-trigger", 3);
    i0.ɵɵlistener("visibleChange", function TDSTableFilterComponent_ng_container_2_Template_tds_filter_trigger_visibleChange_1_listener($event) { i0.ɵɵrestoreView(_r16); const ctx_r15 = i0.ɵɵnextContext(); return ctx_r15.onVisibleChange($event); });
    i0.ɵɵelementStart(2, "span", 4);
    i0.ɵɵelement(3, "span", 5);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(4, "tds-dropdown-menu", null, 6)(6, "div", 7);
    i0.ɵɵtemplate(7, TDSTableFilterComponent_ng_container_2_div_7_Template, 3, 2, "div", 8);
    i0.ɵɵelementStart(8, "div", 9)(9, "button", 10);
    i0.ɵɵlistener("click", function TDSTableFilterComponent_ng_container_2_Template_button_click_9_listener() { i0.ɵɵrestoreView(_r16); const ctx_r17 = i0.ɵɵnextContext(); return ctx_r17.reset(); });
    i0.ɵɵtext(10);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(11, "button", 11);
    i0.ɵɵlistener("click", function TDSTableFilterComponent_ng_container_2_Template_button_click_11_listener() { i0.ɵɵrestoreView(_r16); const ctx_r18 = i0.ɵɵnextContext(); return ctx_r18.confirm(); });
    i0.ɵɵtext(12);
    i0.ɵɵelementEnd()()()();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const _r2 = i0.ɵɵreference(5);
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("visible", ctx_r1.isVisible)("active", ctx_r1.isChecked)("dropdownMenu", _r2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction2(9, _c0, ctx_r1.isChecked, !ctx_r1.isChecked));
    i0.ɵɵadvance(5);
    i0.ɵɵproperty("ngForOf", ctx_r1.listOfParsedFilter)("ngForTrackBy", ctx_r1.trackByValue);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("disabled", !ctx_r1.isChecked);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" ", ctx_r1.locale.filterReset, " ");
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(ctx_r1.locale.filterConfirm);
} }
export class TDSTableFilterComponent {
    constructor(cdr, i18n, elementRef) {
        this.cdr = cdr;
        this.i18n = i18n;
        this.elementRef = elementRef;
        this.contentTemplate = null;
        this.customFilter = false;
        this.extraTemplate = null;
        this.filterMultiple = true;
        this.listOfFilter = [];
        this.filterChange = new EventEmitter();
        this.destroy$ = new Subject();
        this.isChecked = false;
        this.isVisible = false;
        this.listOfParsedFilter = [];
        this.listOfChecked = [];
        // TODO: move to host after View Engine deprecation
        this.elementRef.nativeElement.classList.add('tds-table-filter-column');
    }
    trackByValue(_, item) {
        return item.value;
    }
    check(filter) {
        if (this.filterMultiple) {
            this.listOfParsedFilter = this.listOfParsedFilter.map(item => {
                if (item === filter) {
                    return { ...item, checked: !filter.checked };
                }
                else {
                    return item;
                }
            });
            filter.checked = !filter.checked;
        }
        else {
            this.listOfParsedFilter = this.listOfParsedFilter.map(item => ({ ...item, checked: item === filter }));
        }
        this.isChecked = this.getCheckedStatus(this.listOfParsedFilter);
    }
    confirm() {
        this.isVisible = false;
        this.emitFilterData();
    }
    reset() {
        this.isVisible = false;
        this.listOfParsedFilter = this.parseListOfFilter(this.listOfFilter, true);
        this.isChecked = this.getCheckedStatus(this.listOfParsedFilter);
        this.emitFilterData();
    }
    onVisibleChange(value) {
        this.isVisible = value;
        if (!value) {
            this.emitFilterData();
        }
        else {
            this.listOfChecked = this.listOfParsedFilter.filter(item => item.checked).map(item => item.value);
        }
    }
    emitFilterData() {
        const listOfChecked = this.listOfParsedFilter.filter(item => item.checked).map(item => item.value);
        if (!arraysEqual(this.listOfChecked, listOfChecked)) {
            if (this.filterMultiple) {
                this.filterChange.emit(listOfChecked);
            }
            else {
                this.filterChange.emit(listOfChecked.length > 0 ? listOfChecked[0] : null);
            }
        }
    }
    parseListOfFilter(listOfFilter, reset) {
        return listOfFilter.map(item => {
            const checked = reset ? false : !!item.byDefault;
            return { text: item.text, value: item.value, checked };
        });
    }
    getCheckedStatus(listOfParsedFilter) {
        return listOfParsedFilter.some(item => item.checked);
    }
    ngOnInit() {
        this.i18n.localeChange.pipe(takeUntil(this.destroy$)).subscribe(() => {
            this.locale = this.i18n.getLocaleData('Table');
            this.cdr.markForCheck();
        });
    }
    ngOnChanges(changes) {
        const { listOfFilter } = changes;
        if (listOfFilter && this.listOfFilter && this.listOfFilter.length) {
            this.listOfParsedFilter = this.parseListOfFilter(this.listOfFilter);
            this.isChecked = this.getCheckedStatus(this.listOfParsedFilter);
        }
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
}
TDSTableFilterComponent.ɵfac = function TDSTableFilterComponent_Factory(t) { return new (t || TDSTableFilterComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.TDSI18nService), i0.ɵɵdirectiveInject(i0.ElementRef)); };
TDSTableFilterComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSTableFilterComponent, selectors: [["tds-table-filter"]], hostAttrs: [1, "flex", "justify-between", "cursor-pointer", "items-center"], inputs: { contentTemplate: "contentTemplate", customFilter: "customFilter", extraTemplate: "extraTemplate", filterMultiple: "filterMultiple", listOfFilter: "listOfFilter" }, outputs: { filterChange: "filterChange" }, features: [i0.ɵɵNgOnChangesFeature], decls: 3, vars: 3, consts: [[1, "tds-table-column-title", "flex-auto", "flex", "justify-between", "pr-1"], [3, "ngTemplateOutlet"], [4, "ngIf", "ngIfElse"], [3, "visible", "active", "dropdownMenu", "visibleChange"], [1, "p-0.5", "rounded-md", "flex", "items-center", 3, "ngClass"], [1, "tdsi-filter-2-fill", "text-base", "leading-4"], ["filterMenu", "tdsDropdownMenu"], [1, "w-full", "py-2"], ["tds-dropdown-item", "", 4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "tds-table-filter-dropdown-btns", "px-2"], ["tds-flat-button", "", "color", "primary", "size", "sm", 1, "mr-2", 3, "disabled", "click"], ["tds-button", "", "color", "primary", "size", "sm", 1, "max-w-max", 2, "min-width", "50px", 3, "click"], ["tds-dropdown-item", ""], ["tds-radio", "", 3, "ngModel", "ngModelChange", 4, "ngIf"], [3, "checked", "change", 4, "ngIf"], ["tds-radio", "", 3, "ngModel", "ngModelChange"], [3, "checked", "change"]], template: function TDSTableFilterComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 0);
        i0.ɵɵtemplate(1, TDSTableFilterComponent_ng_template_1_Template, 0, 0, "ng-template", 1);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(2, TDSTableFilterComponent_ng_container_2_Template, 13, 12, "ng-container", 2);
    } if (rf & 2) {
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngTemplateOutlet", ctx.contentTemplate);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx.customFilter)("ngIfElse", ctx.extraTemplate);
    } }, directives: [i2.NgTemplateOutlet, i2.NgIf, i3.TDSFilterTriggerComponent, i2.NgClass, i4.TDSDropdownMenuComponent, i2.NgForOf, i4.TDSDropDownItemDirective, i5.TDSRadioComponent, i6.NgControlStatus, i6.NgModel, i7.TDSCheckbox, i8.TDSButtonComponent], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSTableFilterComponent, [{
        type: Component,
        args: [{ selector: 'tds-table-filter', preserveWhitespaces: false, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, host: {
                    class: "flex justify-between cursor-pointer items-center"
                }, template: "<span class=\"tds-table-column-title flex-auto flex justify-between pr-1 \">\r\n    <ng-template [ngTemplateOutlet]=\"contentTemplate\"></ng-template>\r\n</span>\r\n<ng-container *ngIf=\"!customFilter; else extraTemplate\">\r\n    <tds-filter-trigger [visible]=\"isVisible\" [active]=\"isChecked\" [dropdownMenu]=\"filterMenu\"\r\n        (visibleChange)=\"onVisibleChange($event)\">\r\n        <span class=\"p-0.5 rounded-md flex items-center\" [ngClass]=\"{'text-white bg-primary-1 ':isChecked,'text-neutral-1-200 group-hover:bg-neutral-3-50':!isChecked}\">\r\n            <span class=\"tdsi-filter-2-fill text-base leading-4\" ></span>\r\n        </span>\r\n        \r\n    </tds-filter-trigger>\r\n\r\n    <tds-dropdown-menu #filterMenu=\"tdsDropdownMenu\">\r\n        <div class=\"w-full py-2\">\r\n            <div tds-dropdown-item *ngFor=\"let f of listOfParsedFilter; trackBy: trackByValue\" >\r\n                <label tds-radio *ngIf=\"!filterMultiple\" [ngModel]=\"f.checked\" (ngModelChange)=\"check(f)\">\r\n                    {{ f.text}}\r\n                </label>\r\n                <tds-checkbox *ngIf=\"filterMultiple\" [checked]=\"f.checked\" (change)=\"check(f)\">{{ f.text }}\r\n                </tds-checkbox>\r\n            </div>\r\n            <div class=\"tds-table-filter-dropdown-btns px-2\">\r\n                <button class=\"mr-2\" tds-flat-button color=\"primary\" size=\"sm\" (click)=\"reset()\" [disabled]=\"!isChecked\">\r\n                  {{ locale.filterReset }}\r\n                </button>\r\n                <button tds-button color=\"primary\" size=\"sm\" (click)=\"confirm()\" class=\"max-w-max\" style=\"min-width: 50px;\">{{ locale.filterConfirm }}</button>\r\n              </div>\r\n        </div>\r\n    </tds-dropdown-menu>\r\n  </ng-container>" }]
    }], function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.TDSI18nService }, { type: i0.ElementRef }]; }, { contentTemplate: [{
            type: Input
        }], customFilter: [{
            type: Input
        }], extraTemplate: [{
            type: Input
        }], filterMultiple: [{
            type: Input
        }], listOfFilter: [{
            type: Input
        }], filterChange: [{
            type: Output
        }] }); })();
//# sourceMappingURL=data:application/json;base64,