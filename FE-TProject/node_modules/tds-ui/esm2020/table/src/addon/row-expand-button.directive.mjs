import { Directive, EventEmitter, Input, Output } from '@angular/core';
import * as i0 from "@angular/core";
export class TDSRowExpandButtonDirective {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.expand = false;
        this.spaceMode = false;
        this.expandChange = new EventEmitter();
        // TODO: move to host after View Engine deprecation
        this.elementRef.nativeElement.classList.add('tds-table-row-expand-icon');
    }
    onHostClick() {
        if (!this.spaceMode) {
            this.expand = !this.expand;
            this.expandChange.next(this.expand);
        }
    }
}
TDSRowExpandButtonDirective.ɵfac = function TDSRowExpandButtonDirective_Factory(t) { return new (t || TDSRowExpandButtonDirective)(i0.ɵɵdirectiveInject(i0.ElementRef)); };
TDSRowExpandButtonDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: TDSRowExpandButtonDirective, selectors: [["button", "tds-row-expand-button", ""]], hostVars: 11, hostBindings: function TDSRowExpandButtonDirective_HostBindings(rf, ctx) { if (rf & 1) {
        i0.ɵɵlistener("click", function TDSRowExpandButtonDirective_click_HostBindingHandler() { return ctx.onHostClick(); });
    } if (rf & 2) {
        i0.ɵɵhostProperty("type", "button");
        i0.ɵɵclassProp("tds-table-row-expand-icon-expanded", !ctx.spaceMode && ctx.expand === true)("tds-table-row-expand-icon-collapsed", !ctx.spaceMode && ctx.expand === false)("bg-transparent", ctx.spaceMode)("border-0", ctx.spaceMode)("invisible", ctx.spaceMode);
    } }, inputs: { expand: "expand", spaceMode: "spaceMode" }, outputs: { expandChange: "expandChange" } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSRowExpandButtonDirective, [{
        type: Directive,
        args: [{
                selector: 'button[tds-row-expand-button]',
                host: {
                    '[type]': `'button'`,
                    '[class.tds-table-row-expand-icon-expanded]': `!spaceMode && expand === true`,
                    '[class.tds-table-row-expand-icon-collapsed]': `!spaceMode && expand === false`,
                    '[class.bg-transparent]': 'spaceMode',
                    '[class.border-0]': 'spaceMode',
                    '[class.invisible]': 'spaceMode',
                    '(click)': 'onHostClick()',
                }
            }]
    }], function () { return [{ type: i0.ElementRef }]; }, { expand: [{
            type: Input
        }], spaceMode: [{
            type: Input
        }], expandChange: [{
            type: Output
        }] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm93LWV4cGFuZC1idXR0b24uZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvdGRzLXVpL3RhYmxlL3NyYy9hZGRvbi9yb3ctZXhwYW5kLWJ1dHRvbi5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFNBQVMsRUFBYyxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQzs7QUFjbkYsTUFBTSxPQUFPLDJCQUEyQjtJQUt0QyxZQUFvQixVQUFzQjtRQUF0QixlQUFVLEdBQVYsVUFBVSxDQUFZO1FBSmpDLFdBQU0sR0FBRyxLQUFLLENBQUM7UUFDZixjQUFTLEdBQUcsS0FBSyxDQUFDO1FBQ1IsaUJBQVksR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBR25ELG1EQUFtRDtRQUNuRCxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLDJCQUEyQixDQUFDLENBQUM7SUFDM0UsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNuQixJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztZQUMzQixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDckM7SUFDSCxDQUFDOztzR0FmVSwyQkFBMkI7OEVBQTNCLDJCQUEyQjt3R0FBM0IsaUJBQWE7Ozs7O3VGQUFiLDJCQUEyQjtjQVp2QyxTQUFTO2VBQUM7Z0JBQ1QsUUFBUSxFQUFFLCtCQUErQjtnQkFDekMsSUFBSSxFQUFFO29CQUNKLFFBQVEsRUFBRSxVQUFVO29CQUNwQiw0Q0FBNEMsRUFBRSwrQkFBK0I7b0JBQzdFLDZDQUE2QyxFQUFFLGdDQUFnQztvQkFDL0Usd0JBQXdCLEVBQUUsV0FBVztvQkFDckMsa0JBQWtCLEVBQUUsV0FBVztvQkFDL0IsbUJBQW1CLEVBQUUsV0FBVztvQkFDaEMsU0FBUyxFQUFFLGVBQWU7aUJBQzNCO2FBQ0Y7NkRBRVUsTUFBTTtrQkFBZCxLQUFLO1lBQ0csU0FBUztrQkFBakIsS0FBSztZQUNhLFlBQVk7a0JBQTlCLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJcclxuaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnYnV0dG9uW3Rkcy1yb3ctZXhwYW5kLWJ1dHRvbl0nLFxyXG4gIGhvc3Q6IHtcclxuICAgICdbdHlwZV0nOiBgJ2J1dHRvbidgLFxyXG4gICAgJ1tjbGFzcy50ZHMtdGFibGUtcm93LWV4cGFuZC1pY29uLWV4cGFuZGVkXSc6IGAhc3BhY2VNb2RlICYmIGV4cGFuZCA9PT0gdHJ1ZWAsXHJcbiAgICAnW2NsYXNzLnRkcy10YWJsZS1yb3ctZXhwYW5kLWljb24tY29sbGFwc2VkXSc6IGAhc3BhY2VNb2RlICYmIGV4cGFuZCA9PT0gZmFsc2VgLFxyXG4gICAgJ1tjbGFzcy5iZy10cmFuc3BhcmVudF0nOiAnc3BhY2VNb2RlJyxcclxuICAgICdbY2xhc3MuYm9yZGVyLTBdJzogJ3NwYWNlTW9kZScsXHJcbiAgICAnW2NsYXNzLmludmlzaWJsZV0nOiAnc3BhY2VNb2RlJywgICAgXHJcbiAgICAnKGNsaWNrKSc6ICdvbkhvc3RDbGljaygpJywgIFxyXG4gIH1cclxufSlcclxuZXhwb3J0IGNsYXNzIFREU1Jvd0V4cGFuZEJ1dHRvbkRpcmVjdGl2ZSB7XHJcbiAgQElucHV0KCkgZXhwYW5kID0gZmFsc2U7XHJcbiAgQElucHV0KCkgc3BhY2VNb2RlID0gZmFsc2U7XHJcbiAgQE91dHB1dCgpIHJlYWRvbmx5IGV4cGFuZENoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7XHJcbiAgICAvLyBUT0RPOiBtb3ZlIHRvIGhvc3QgYWZ0ZXIgVmlldyBFbmdpbmUgZGVwcmVjYXRpb25cclxuICAgIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ3Rkcy10YWJsZS1yb3ctZXhwYW5kLWljb24nKTtcclxuICB9XHJcblxyXG4gIG9uSG9zdENsaWNrKCk6IHZvaWQge1xyXG4gICAgaWYgKCF0aGlzLnNwYWNlTW9kZSkge1xyXG4gICAgICB0aGlzLmV4cGFuZCA9ICF0aGlzLmV4cGFuZDtcclxuICAgICAgdGhpcy5leHBhbmRDaGFuZ2UubmV4dCh0aGlzLmV4cGFuZCk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==