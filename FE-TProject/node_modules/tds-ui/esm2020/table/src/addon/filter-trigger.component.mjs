import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { InputBoolean } from 'tds-ui/shared/utility';
import * as i0 from "@angular/core";
import * as i1 from "tds-ui/dropdown";
const _c0 = ["*"];
export class TDSFilterTriggerComponent {
    constructor(cdr) {
        this.cdr = cdr;
        this.active = false;
        this.visible = false;
        /**
         * @deprecated Not supported, use `backdrop` instead.
         * @breaking-change 13.0.0
         */
        this.hasBackdrop = false;
        this.backdrop = false;
        this.visibleChange = new EventEmitter();
    }
    onVisibleChange(visible) {
        this.visible = visible;
        this.visibleChange.next(visible);
    }
    onFilterClick($event) {
        $event.stopPropagation();
    }
    hide() {
        this.visible = false;
        this.cdr.markForCheck();
    }
    show() {
        this.visible = true;
        this.cdr.markForCheck();
    }
    ngOnChanges(changes) {
        const { hasBackdrop } = changes;
        // if (hasBackdrop) {
        //   console.warn(
        //     '`hasBackdrop` in tds-filter-trigger component will be removed in 13.0.0, please use `backdrop` instead.'
        //   );
        // }
    }
}
TDSFilterTriggerComponent.ɵfac = function TDSFilterTriggerComponent_Factory(t) { return new (t || TDSFilterTriggerComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
TDSFilterTriggerComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSFilterTriggerComponent, selectors: [["tds-filter-trigger"]], inputs: { active: "active", dropdownMenu: "dropdownMenu", visible: "visible", hasBackdrop: "hasBackdrop", backdrop: "backdrop" }, outputs: { visibleChange: "visibleChange" }, exportAs: ["tdsFilterTrigger"], features: [i0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0, decls: 2, vars: 8, consts: [["tds-dropdown", "", "trigger", "click", "placement", "bottomRight", 1, "tds-table-filter-trigger", 3, "backdrop", "clickHide", "tdsDropdownMenu", "visible", "visibleChange", "click"]], template: function TDSFilterTriggerComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵelementStart(0, "span", 0);
        i0.ɵɵlistener("visibleChange", function TDSFilterTriggerComponent_Template_span_visibleChange_0_listener($event) { return ctx.onVisibleChange($event); })("click", function TDSFilterTriggerComponent_Template_span_click_0_listener($event) { return ctx.onFilterClick($event); });
        i0.ɵɵprojection(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵclassProp("active", ctx.active)("tds-table-filter-open", ctx.visible);
        i0.ɵɵproperty("backdrop", ctx.backdrop || ctx.hasBackdrop)("clickHide", false)("tdsDropdownMenu", ctx.dropdownMenu)("visible", ctx.visible);
    } }, directives: [i1.TDSDropDownDirective], encapsulation: 2, changeDetection: 0 });
__decorate([
    InputBoolean()
], TDSFilterTriggerComponent.prototype, "hasBackdrop", void 0);
__decorate([
    InputBoolean()
], TDSFilterTriggerComponent.prototype, "backdrop", void 0);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSFilterTriggerComponent, [{
        type: Component,
        args: [{
                selector: 'tds-filter-trigger',
                exportAs: `tdsFilterTrigger`,
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                encapsulation: ViewEncapsulation.None,
                template: `
    <span
      tds-dropdown
      class="tds-table-filter-trigger"
      trigger="click"
      placement="bottomRight"
      [backdrop]="backdrop || hasBackdrop"
      [clickHide]="false"
      [tdsDropdownMenu]="dropdownMenu"
      [class.active]="active"
      [class.tds-table-filter-open]="visible"
      [visible]="visible"
      (visibleChange)="onVisibleChange($event)"
      (click)="onFilterClick($event)"
    >
      <ng-content></ng-content>
    </span>
  `
            }]
    }], function () { return [{ type: i0.ChangeDetectorRef }]; }, { active: [{
            type: Input
        }], dropdownMenu: [{
            type: Input
        }], visible: [{
            type: Input
        }], hasBackdrop: [{
            type: Input
        }], backdrop: [{
            type: Input
        }], visibleChange: [{
            type: Output
        }] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLXRyaWdnZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvdGRzLXVpL3RhYmxlL3NyYy9hZGRvbi9maWx0ZXItdHJpZ2dlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUVBLE9BQU8sRUFDTCx1QkFBdUIsRUFFdkIsU0FBUyxFQUNULFlBQVksRUFDWixLQUFLLEVBRUwsTUFBTSxFQUVOLGlCQUFpQixFQUNsQixNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7Ozs7QUE0QnJELE1BQU0sT0FBTyx5QkFBeUI7SUFvQ3BDLFlBQW9CLEdBQXNCO1FBQXRCLFFBQUcsR0FBSCxHQUFHLENBQW1CO1FBaENqQyxXQUFNLEdBQUcsS0FBSyxDQUFDO1FBRWYsWUFBTyxHQUFHLEtBQUssQ0FBQztRQUV6Qjs7O1dBR0c7UUFDc0IsZ0JBQVcsR0FBRyxLQUFLLENBQUM7UUFDcEIsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUV2QixrQkFBYSxHQUFHLElBQUksWUFBWSxFQUFXLENBQUM7SUFxQmxCLENBQUM7SUFuQjlDLGVBQWUsQ0FBQyxPQUFnQjtRQUM5QixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztRQUN2QixJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBRUQsYUFBYSxDQUFDLE1BQWtCO1FBQzlCLE1BQU0sQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUMzQixDQUFDO0lBRUQsSUFBSTtRQUNGLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ3JCLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDMUIsQ0FBQztJQUVELElBQUk7UUFDRixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztRQUNwQixJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQzFCLENBQUM7SUFJRCxXQUFXLENBQUMsT0FBc0I7UUFDaEMsTUFBTSxFQUFFLFdBQVcsRUFBRSxHQUFHLE9BQU8sQ0FBQztRQUNoQyxxQkFBcUI7UUFDckIsa0JBQWtCO1FBQ2xCLGdIQUFnSDtRQUNoSCxPQUFPO1FBQ1AsSUFBSTtJQUNOLENBQUM7O2tHQTdDVSx5QkFBeUI7NEVBQXpCLHlCQUF5Qjs7UUFsQmxDLCtCQWFDO1FBRkMsMEhBQWlCLDJCQUF1QixJQUFDLDZGQUNoQyx5QkFBcUIsSUFEVztRQUd6QyxrQkFBeUI7UUFDM0IsaUJBQU87O1FBUEwsb0NBQXVCLHNDQUFBO1FBSHZCLDBEQUFvQyxvQkFBQSxxQ0FBQSx3QkFBQTs7QUF5QmY7SUFBZixZQUFZLEVBQUU7OERBQXFCO0FBQ3BCO0lBQWYsWUFBWSxFQUFFOzJEQUFrQjt1RkFiL0IseUJBQXlCO2NBekJyQyxTQUFTO2VBQUM7Z0JBQ1QsUUFBUSxFQUFFLG9CQUFvQjtnQkFDOUIsUUFBUSxFQUFFLGtCQUFrQjtnQkFDNUIsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07Z0JBQy9DLG1CQUFtQixFQUFFLEtBQUs7Z0JBQzFCLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO2dCQUNyQyxRQUFRLEVBQUU7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBaUJUO2FBQ0Y7b0VBS1UsTUFBTTtrQkFBZCxLQUFLO1lBQ0csWUFBWTtrQkFBcEIsS0FBSztZQUNHLE9BQU87a0JBQWYsS0FBSztZQU1tQixXQUFXO2tCQUFuQyxLQUFLO1lBQ21CLFFBQVE7a0JBQWhDLEtBQUs7WUFFYSxhQUFhO2tCQUEvQixNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbmltcG9ydCB7IEJvb2xlYW5JbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9jb2VyY2lvbic7XHJcbmltcG9ydCB7XHJcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXHJcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXHJcbiAgQ29tcG9uZW50LFxyXG4gIEV2ZW50RW1pdHRlcixcclxuICBJbnB1dCxcclxuICBPbkNoYW5nZXMsXHJcbiAgT3V0cHV0LFxyXG4gIFNpbXBsZUNoYW5nZXMsXHJcbiAgVmlld0VuY2Fwc3VsYXRpb25cclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgVERTRHJvcGRvd25NZW51Q29tcG9uZW50IH0gZnJvbSAndGRzLXVpL2Ryb3Bkb3duJztcclxuaW1wb3J0IHsgSW5wdXRCb29sZWFuIH0gZnJvbSAndGRzLXVpL3NoYXJlZC91dGlsaXR5JztcclxuXHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ3Rkcy1maWx0ZXItdHJpZ2dlcicsXHJcbiAgZXhwb3J0QXM6IGB0ZHNGaWx0ZXJUcmlnZ2VyYCxcclxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcclxuICBwcmVzZXJ2ZVdoaXRlc3BhY2VzOiBmYWxzZSxcclxuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxyXG4gIHRlbXBsYXRlOiBgXHJcbiAgICA8c3BhblxyXG4gICAgICB0ZHMtZHJvcGRvd25cclxuICAgICAgY2xhc3M9XCJ0ZHMtdGFibGUtZmlsdGVyLXRyaWdnZXJcIlxyXG4gICAgICB0cmlnZ2VyPVwiY2xpY2tcIlxyXG4gICAgICBwbGFjZW1lbnQ9XCJib3R0b21SaWdodFwiXHJcbiAgICAgIFtiYWNrZHJvcF09XCJiYWNrZHJvcCB8fCBoYXNCYWNrZHJvcFwiXHJcbiAgICAgIFtjbGlja0hpZGVdPVwiZmFsc2VcIlxyXG4gICAgICBbdGRzRHJvcGRvd25NZW51XT1cImRyb3Bkb3duTWVudVwiXHJcbiAgICAgIFtjbGFzcy5hY3RpdmVdPVwiYWN0aXZlXCJcclxuICAgICAgW2NsYXNzLnRkcy10YWJsZS1maWx0ZXItb3Blbl09XCJ2aXNpYmxlXCJcclxuICAgICAgW3Zpc2libGVdPVwidmlzaWJsZVwiXHJcbiAgICAgICh2aXNpYmxlQ2hhbmdlKT1cIm9uVmlzaWJsZUNoYW5nZSgkZXZlbnQpXCJcclxuICAgICAgKGNsaWNrKT1cIm9uRmlsdGVyQ2xpY2soJGV2ZW50KVwiXHJcbiAgICA+XHJcbiAgICAgIDxuZy1jb250ZW50PjwvbmctY29udGVudD5cclxuICAgIDwvc3Bhbj5cclxuICBgXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBURFNGaWx0ZXJUcmlnZ2VyQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcclxuICBzdGF0aWMgbmdBY2NlcHRJbnB1dFR5cGVfYmFja2Ryb3A6IEJvb2xlYW5JbnB1dDtcclxuICBzdGF0aWMgbmdBY2NlcHRJbnB1dFR5cGVfaGFzQmFja2Ryb3A6IEJvb2xlYW5JbnB1dDtcclxuXHJcbiAgQElucHV0KCkgYWN0aXZlID0gZmFsc2U7XHJcbiAgQElucHV0KCkgZHJvcGRvd25NZW51ITogVERTRHJvcGRvd25NZW51Q29tcG9uZW50O1xyXG4gIEBJbnB1dCgpIHZpc2libGUgPSBmYWxzZTtcclxuXHJcbiAgLyoqXHJcbiAgICogQGRlcHJlY2F0ZWQgTm90IHN1cHBvcnRlZCwgdXNlIGBiYWNrZHJvcGAgaW5zdGVhZC5cclxuICAgKiBAYnJlYWtpbmctY2hhbmdlIDEzLjAuMFxyXG4gICAqL1xyXG4gIEBJbnB1dCgpIEBJbnB1dEJvb2xlYW4oKSBoYXNCYWNrZHJvcCA9IGZhbHNlO1xyXG4gIEBJbnB1dCgpIEBJbnB1dEJvb2xlYW4oKSBiYWNrZHJvcCA9IGZhbHNlO1xyXG5cclxuICBAT3V0cHV0KCkgcmVhZG9ubHkgdmlzaWJsZUNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4oKTtcclxuXHJcbiAgb25WaXNpYmxlQ2hhbmdlKHZpc2libGU6IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgIHRoaXMudmlzaWJsZSA9IHZpc2libGU7XHJcbiAgICB0aGlzLnZpc2libGVDaGFuZ2UubmV4dCh2aXNpYmxlKTtcclxuICB9XHJcblxyXG4gIG9uRmlsdGVyQ2xpY2soJGV2ZW50OiBNb3VzZUV2ZW50KTogdm9pZCB7XHJcbiAgICAkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgfVxyXG5cclxuICBoaWRlKCk6IHZvaWQge1xyXG4gICAgdGhpcy52aXNpYmxlID0gZmFsc2U7XHJcbiAgICB0aGlzLmNkci5tYXJrRm9yQ2hlY2soKTtcclxuICB9XHJcblxyXG4gIHNob3coKTogdm9pZCB7XHJcbiAgICB0aGlzLnZpc2libGUgPSB0cnVlO1xyXG4gICAgdGhpcy5jZHIubWFya0ZvckNoZWNrKCk7XHJcbiAgfVxyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYpIHt9XHJcblxyXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcclxuICAgIGNvbnN0IHsgaGFzQmFja2Ryb3AgfSA9IGNoYW5nZXM7XHJcbiAgICAvLyBpZiAoaGFzQmFja2Ryb3ApIHtcclxuICAgIC8vICAgY29uc29sZS53YXJuKFxyXG4gICAgLy8gICAgICdgaGFzQmFja2Ryb3BgIGluIHRkcy1maWx0ZXItdHJpZ2dlciBjb21wb25lbnQgd2lsbCBiZSByZW1vdmVkIGluIDEzLjAuMCwgcGxlYXNlIHVzZSBgYmFja2Ryb3BgIGluc3RlYWQuJ1xyXG4gICAgLy8gICApO1xyXG4gICAgLy8gfVxyXG4gIH1cclxufVxyXG4iXX0=