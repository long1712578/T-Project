import { ChangeDetectionStrategy, Component, Input, ViewEncapsulation } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
function TDSTableSortersComponent_ng_template_1_Template(rf, ctx) { }
function TDSTableSortersComponent_span_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 5);
    i0.ɵɵelement(1, "i", 6);
    i0.ɵɵelementEnd();
} }
function TDSTableSortersComponent_span_4_i_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "i", 9);
} }
function TDSTableSortersComponent_span_4_i_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "i", 10);
} }
function TDSTableSortersComponent_span_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 5);
    i0.ɵɵtemplate(1, TDSTableSortersComponent_span_4_i_1_Template, 1, 0, "i", 7);
    i0.ɵɵtemplate(2, TDSTableSortersComponent_span_4_i_2_Template, 1, 0, "i", 8);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r2.sortOrder === "ascend");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r2.sortOrder === "descend");
} }
export class TDSTableSortersComponent {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this._sortDirections = ['ascend', 'descend', null];
        this.sortOrder = null;
        this.contentTemplate = null;
        this.isUp = false;
        this.isDown = false;
        // TODO: move to host after View Engine deprecation
        this.elementRef.nativeElement.classList.add('tds-table-column-sorters');
    }
    ngOnChanges(changes) {
        const { _sortDirections } = changes;
        if (_sortDirections) {
            this.isUp = this._sortDirections.indexOf('ascend') !== -1;
            this.isDown = this._sortDirections.indexOf('descend') !== -1;
        }
    }
}
TDSTableSortersComponent.ɵfac = function TDSTableSortersComponent_Factory(t) { return new (t || TDSTableSortersComponent)(i0.ɵɵdirectiveInject(i0.ElementRef)); };
TDSTableSortersComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSTableSortersComponent, selectors: [["tds-table-sorters"]], hostAttrs: [1, "w-full", "flex", "items-center"], inputs: { _sortDirections: "_sortDirections", sortOrder: "sortOrder", contentTemplate: "contentTemplate" }, features: [i0.ɵɵNgOnChangesFeature], decls: 5, vars: 3, consts: [[1, "tds-table-column-title"], [3, "ngTemplateOutlet"], [1, "tds-table-column-sorter", "text-base", "ml-2"], ["class", "tds-table-column-sorter-inner flex flex-col p-0.5", 4, "ngIf"], ["class", "tds-table-column-sorter-inner flex flex-col  p-0.5", 4, "ngIf"], [1, "tds-table-column-sorter-inner", "flex", "flex-col", "p-0.5"], [1, "tds-table-column-sorter", "tdsi-sort-up-down-fill", "text-neutral-1-500", "active", "text-base", "leading-4", "hidden", "group-hover:inline-block"], ["class", "tds-table-column-sorter-up tdsi-sort-arrow-up-fill text-primary-1 active text-base leading-4", 4, "ngIf"], ["class", "tds-table-column-sorter-down tdsi-sort-arrow-down-fill text-primary-1 active text-base leading-4", 4, "ngIf"], [1, "tds-table-column-sorter-up", "tdsi-sort-arrow-up-fill", "text-primary-1", "active", "text-base", "leading-4"], [1, "tds-table-column-sorter-down", "tdsi-sort-arrow-down-fill", "text-primary-1", "active", "text-base", "leading-4"]], template: function TDSTableSortersComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 0);
        i0.ɵɵtemplate(1, TDSTableSortersComponent_ng_template_1_Template, 0, 0, "ng-template", 1);
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(2, "span", 2);
        i0.ɵɵtemplate(3, TDSTableSortersComponent_span_3_Template, 2, 0, "span", 3);
        i0.ɵɵtemplate(4, TDSTableSortersComponent_span_4_Template, 3, 2, "span", 4);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngTemplateOutlet", ctx.contentTemplate);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.sortOrder !== "ascend" && ctx.sortOrder !== "descend");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx.sortOrder === "ascend" || ctx.sortOrder === "descend");
    } }, directives: [i1.NgTemplateOutlet, i1.NgIf], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSTableSortersComponent, [{
        type: Component,
        args: [{
                selector: 'tds-table-sorters',
                preserveWhitespaces: false,
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                template: `
    <span class="tds-table-column-title">   
      <ng-template [ngTemplateOutlet]="contentTemplate"></ng-template>
    </span>
    <span class="tds-table-column-sorter  text-base ml-2">
      <span class="tds-table-column-sorter-inner flex flex-col p-0.5" *ngIf="sortOrder !== 'ascend' && sortOrder !== 'descend'">    
        <i  class="tds-table-column-sorter  tdsi-sort-up-down-fill text-neutral-1-500 active text-base leading-4 hidden group-hover:inline-block"
        ></i>
      </span>
      <span class="tds-table-column-sorter-inner flex flex-col  p-0.5" *ngIf="sortOrder === 'ascend' || sortOrder === 'descend'">
        <i         
          *ngIf="sortOrder === 'ascend'"
          class="tds-table-column-sorter-up tdsi-sort-arrow-up-fill text-primary-1 active text-base leading-4"
        ></i>
        <i         
          *ngIf="sortOrder === 'descend'"
          class="tds-table-column-sorter-down tdsi-sort-arrow-down-fill text-primary-1 active text-base leading-4"></i>
      </span>
    </span>
  `,
                host: {
                    class: "w-full flex  items-center "
                }
            }]
    }], function () { return [{ type: i0.ElementRef }]; }, { _sortDirections: [{
            type: Input
        }], sortOrder: [{
            type: Input
        }], contentTemplate: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29ydGVycy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy90ZHMtdWkvdGFibGUvc3JjL2FkZG9uL3NvcnRlcnMuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFDTCx1QkFBdUIsRUFDdkIsU0FBUyxFQUVULEtBQUssRUFJTCxpQkFBaUIsRUFDbEIsTUFBTSxlQUFlLENBQUM7Ozs7O0lBZWpCLCtCQUEwSDtJQUN4SCx1QkFDSztJQUNQLGlCQUFPOzs7SUFFTCx1QkFHSzs7O0lBQ0wsd0JBRStHOzs7SUFQakgsK0JBQTJIO0lBQ3pILDRFQUdLO0lBQ0wsNEVBRStHO0lBQ2pILGlCQUFPOzs7SUFORixlQUE0QjtJQUE1QixvREFBNEI7SUFJNUIsZUFBNkI7SUFBN0IscURBQTZCOztBQVN4QyxNQUFNLE9BQU8sd0JBQXdCO0lBT25DLFlBQW9CLFVBQXNCO1FBQXRCLGVBQVUsR0FBVixVQUFVLENBQVk7UUFOakMsb0JBQWUsR0FBd0IsQ0FBQyxRQUFRLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ25FLGNBQVMsR0FBc0IsSUFBSSxDQUFDO1FBQ3BDLG9CQUFlLEdBQW1DLElBQUksQ0FBQztRQUNoRSxTQUFJLEdBQUcsS0FBSyxDQUFDO1FBQ2IsV0FBTSxHQUFHLEtBQUssQ0FBQztRQUdiLG1EQUFtRDtRQUNuRCxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLDBCQUEwQixDQUFDLENBQUM7SUFDMUUsQ0FBQztJQUVELFdBQVcsQ0FBQyxPQUFzQjtRQUNoQyxNQUFNLEVBQUUsZUFBZSxFQUFFLEdBQUcsT0FBTyxDQUFDO1FBQ3BDLElBQUksZUFBZSxFQUFFO1lBQ25CLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDMUQsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztTQUM5RDtJQUNILENBQUM7O2dHQWxCVSx3QkFBd0I7MkVBQXhCLHdCQUF3QjtRQXZCakMsK0JBQXFDO1FBQ25DLHlGQUFnRTtRQUNsRSxpQkFBTztRQUNQLCtCQUFzRDtRQUNwRCwyRUFHTztRQUNQLDJFQVFPO1FBQ1QsaUJBQU87O1FBaEJRLGVBQW9DO1FBQXBDLHNEQUFvQztRQUdnQixlQUF1RDtRQUF2RCxnRkFBdUQ7UUFJdEQsZUFBdUQ7UUFBdkQsZ0ZBQXVEOzt1RkFlbEgsd0JBQXdCO2NBN0JwQyxTQUFTO2VBQUM7Z0JBQ1QsUUFBUSxFQUFFLG1CQUFtQjtnQkFDN0IsbUJBQW1CLEVBQUUsS0FBSztnQkFDMUIsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07Z0JBQy9DLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO2dCQUNyQyxRQUFRLEVBQUU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FtQlQ7Z0JBQ0QsSUFBSSxFQUFDO29CQUNILEtBQUssRUFBQyw0QkFBNEI7aUJBQ25DO2FBQ0Y7NkRBRVUsZUFBZTtrQkFBdkIsS0FBSztZQUNHLFNBQVM7a0JBQWpCLEtBQUs7WUFDRyxlQUFlO2tCQUF2QixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbmltcG9ydCB7XHJcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXHJcbiAgQ29tcG9uZW50LFxyXG4gIEVsZW1lbnRSZWYsXHJcbiAgSW5wdXQsXHJcbiAgT25DaGFuZ2VzLFxyXG4gIFNpbXBsZUNoYW5nZXMsXHJcbiAgVGVtcGxhdGVSZWYsXHJcbiAgVmlld0VuY2Fwc3VsYXRpb25cclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgVERTU2FmZUFueSB9IGZyb20gJ3Rkcy11aS9zaGFyZWQvdXRpbGl0eSc7XHJcblxyXG5pbXBvcnQgeyBURFNUYWJsZVNvcnRPcmRlciB9IGZyb20gJy4uL3RhYmxlLnR5cGVzJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAndGRzLXRhYmxlLXNvcnRlcnMnLFxyXG4gIHByZXNlcnZlV2hpdGVzcGFjZXM6IGZhbHNlLFxyXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxyXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXHJcbiAgdGVtcGxhdGU6IGBcclxuICAgIDxzcGFuIGNsYXNzPVwidGRzLXRhYmxlLWNvbHVtbi10aXRsZVwiPiAgIFxyXG4gICAgICA8bmctdGVtcGxhdGUgW25nVGVtcGxhdGVPdXRsZXRdPVwiY29udGVudFRlbXBsYXRlXCI+PC9uZy10ZW1wbGF0ZT5cclxuICAgIDwvc3Bhbj5cclxuICAgIDxzcGFuIGNsYXNzPVwidGRzLXRhYmxlLWNvbHVtbi1zb3J0ZXIgIHRleHQtYmFzZSBtbC0yXCI+XHJcbiAgICAgIDxzcGFuIGNsYXNzPVwidGRzLXRhYmxlLWNvbHVtbi1zb3J0ZXItaW5uZXIgZmxleCBmbGV4LWNvbCBwLTAuNVwiICpuZ0lmPVwic29ydE9yZGVyICE9PSAnYXNjZW5kJyAmJiBzb3J0T3JkZXIgIT09ICdkZXNjZW5kJ1wiPiAgICBcclxuICAgICAgICA8aSAgY2xhc3M9XCJ0ZHMtdGFibGUtY29sdW1uLXNvcnRlciAgdGRzaS1zb3J0LXVwLWRvd24tZmlsbCB0ZXh0LW5ldXRyYWwtMS01MDAgYWN0aXZlIHRleHQtYmFzZSBsZWFkaW5nLTQgaGlkZGVuIGdyb3VwLWhvdmVyOmlubGluZS1ibG9ja1wiXHJcbiAgICAgICAgPjwvaT5cclxuICAgICAgPC9zcGFuPlxyXG4gICAgICA8c3BhbiBjbGFzcz1cInRkcy10YWJsZS1jb2x1bW4tc29ydGVyLWlubmVyIGZsZXggZmxleC1jb2wgIHAtMC41XCIgKm5nSWY9XCJzb3J0T3JkZXIgPT09ICdhc2NlbmQnIHx8IHNvcnRPcmRlciA9PT0gJ2Rlc2NlbmQnXCI+XHJcbiAgICAgICAgPGkgICAgICAgICBcclxuICAgICAgICAgICpuZ0lmPVwic29ydE9yZGVyID09PSAnYXNjZW5kJ1wiXHJcbiAgICAgICAgICBjbGFzcz1cInRkcy10YWJsZS1jb2x1bW4tc29ydGVyLXVwIHRkc2ktc29ydC1hcnJvdy11cC1maWxsIHRleHQtcHJpbWFyeS0xIGFjdGl2ZSB0ZXh0LWJhc2UgbGVhZGluZy00XCJcclxuICAgICAgICA+PC9pPlxyXG4gICAgICAgIDxpICAgICAgICAgXHJcbiAgICAgICAgICAqbmdJZj1cInNvcnRPcmRlciA9PT0gJ2Rlc2NlbmQnXCJcclxuICAgICAgICAgIGNsYXNzPVwidGRzLXRhYmxlLWNvbHVtbi1zb3J0ZXItZG93biB0ZHNpLXNvcnQtYXJyb3ctZG93bi1maWxsIHRleHQtcHJpbWFyeS0xIGFjdGl2ZSB0ZXh0LWJhc2UgbGVhZGluZy00XCI+PC9pPlxyXG4gICAgICA8L3NwYW4+XHJcbiAgICA8L3NwYW4+XHJcbiAgYCxcclxuICBob3N0OntcclxuICAgIGNsYXNzOlwidy1mdWxsIGZsZXggIGl0ZW1zLWNlbnRlciBcIlxyXG4gIH1cclxufSlcclxuZXhwb3J0IGNsYXNzIFREU1RhYmxlU29ydGVyc0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XHJcbiAgQElucHV0KCkgX3NvcnREaXJlY3Rpb25zOiBURFNUYWJsZVNvcnRPcmRlcltdID0gWydhc2NlbmQnLCAnZGVzY2VuZCcsIG51bGxdO1xyXG4gIEBJbnB1dCgpIHNvcnRPcmRlcjogVERTVGFibGVTb3J0T3JkZXIgPSBudWxsO1xyXG4gIEBJbnB1dCgpIGNvbnRlbnRUZW1wbGF0ZTogVGVtcGxhdGVSZWY8VERTU2FmZUFueT4gfCBudWxsID0gbnVsbDtcclxuICBpc1VwID0gZmFsc2U7XHJcbiAgaXNEb3duID0gZmFsc2U7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZikge1xyXG4gICAgLy8gVE9ETzogbW92ZSB0byBob3N0IGFmdGVyIFZpZXcgRW5naW5lIGRlcHJlY2F0aW9uXHJcbiAgICB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5jbGFzc0xpc3QuYWRkKCd0ZHMtdGFibGUtY29sdW1uLXNvcnRlcnMnKTtcclxuICB9XHJcblxyXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcclxuICAgIGNvbnN0IHsgX3NvcnREaXJlY3Rpb25zIH0gPSBjaGFuZ2VzO1xyXG4gICAgaWYgKF9zb3J0RGlyZWN0aW9ucykge1xyXG4gICAgICB0aGlzLmlzVXAgPSB0aGlzLl9zb3J0RGlyZWN0aW9ucy5pbmRleE9mKCdhc2NlbmQnKSAhPT0gLTE7XHJcbiAgICAgIHRoaXMuaXNEb3duID0gdGhpcy5fc29ydERpcmVjdGlvbnMuaW5kZXhPZignZGVzY2VuZCcpICE9PSAtMTtcclxuICAgIH1cclxuICB9XHJcbiAgXHJcbn1cclxuIl19