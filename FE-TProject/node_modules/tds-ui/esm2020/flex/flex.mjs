import { Component, ChangeDetectionStrategy } from "@angular/core";
import * as i0 from "@angular/core";
const _c0 = ["*"];
const DEFAULT_JUSTIFY_CONTENT = "start";
const DEFAULT_FLEX_DIRECTION = "row";
const DEFAULT_ALIGN_ITEMS = "stretch";
function mixinFlexDirection(base, defaultFlexDirection) {
    return class extends base {
        constructor(...args) {
            super(...args);
            this.defaultFlexDirection = defaultFlexDirection;
            this._flexDirection = null;
            this.flex = defaultFlexDirection;
        }
        set flex(val) {
            const flexDirection = val || this.defaultFlexDirection;
            if (flexDirection !== this._flexDirection) {
                if (this._flexDirection) {
                    this._elementRef.nativeElement.classList.remove("flex-" + this._flexDirection);
                }
                if (flexDirection) {
                    this._elementRef.nativeElement.classList.add("flex-" + val);
                }
                this._flexDirection = flexDirection;
            }
        }
        get flex() {
            return this._flexDirection;
        }
    };
}
function mixinJustifyContent(base, defaultJustifyContent) {
    return class extends base {
        constructor(...args) {
            super(...args);
            this.defaultJustifyContent = defaultJustifyContent;
            this._justifyContent = null;
            this.justifyContent = defaultJustifyContent;
        }
        set justifyContent(val) {
            const justifyContent = val || this.defaultJustifyContent;
            if (justifyContent !== this._justifyContent) {
                if (this._justifyContent) {
                    this._elementRef.nativeElement.classList.remove("justify-" + this._justifyContent);
                }
                if (justifyContent) {
                    this._elementRef.nativeElement.classList.add("justify-" + val);
                }
                this._justifyContent = justifyContent;
            }
        }
        get justifyContent() {
            return this._justifyContent;
        }
    };
}
function mixinAlignItems(base, defaultAlignItems) {
    return class extends base {
        constructor(...args) {
            super(...args);
            this.defaultAlignItems = defaultAlignItems;
            this._alignItems = null;
            this.alignItems = defaultAlignItems;
        }
        set alignItems(val) {
            const align_Items = val || this.defaultAlignItems;
            if (align_Items !== this._alignItems) {
                if (this._alignItems) {
                    this._elementRef.nativeElement.classList.remove("items-" + this._alignItems);
                }
                if (align_Items) {
                    this._elementRef.nativeElement.classList.add("items-" + val);
                }
                this._alignItems = align_Items;
            }
        }
        get alignItems() {
            return this._alignItems;
        }
    };
}
//#endregion 
class TFlexBase {
    constructor(_elementRef) {
        this._elementRef = _elementRef;
    }
}
const _TFlexMixinBase = mixinAlignItems(mixinJustifyContent(mixinFlexDirection(TFlexBase, DEFAULT_FLEX_DIRECTION), DEFAULT_JUSTIFY_CONTENT), DEFAULT_ALIGN_ITEMS);
export class TDSFlexComponent extends _TFlexMixinBase {
    // flex: FLEX_DIRECTION
    //justifyContent: JUSTIFY_CONTENT
    //alignItems: ALIGN_ITEMS
    constructor(elementRef) {
        super(elementRef);
    }
}
TDSFlexComponent.ɵfac = function TDSFlexComponent_Factory(t) { return new (t || TDSFlexComponent)(i0.ɵɵdirectiveInject(i0.ElementRef)); };
TDSFlexComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSFlexComponent, selectors: [["tds-flex"]], hostAttrs: [1, "flex"], inputs: { flex: "flex", justifyContent: "justifyContent", alignItems: "alignItems" }, features: [i0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function TDSFlexComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSFlexComponent, [{
        type: Component,
        args: [{
                selector: 'tds-flex',
                template: `
        <ng-content></ng-content>
    `,
                host: {
                    class: 'flex',
                },
                inputs: ['flex', "justifyContent", "alignItems"],
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: i0.ElementRef }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxleC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL3Rkcy11aS9mbGV4L2ZsZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSx1QkFBdUIsRUFBYyxNQUFNLGVBQWUsQ0FBQzs7O0FBRy9FLE1BQU0sdUJBQXVCLEdBQUcsT0FBTyxDQUFDO0FBQ3hDLE1BQU0sc0JBQXNCLEdBQUUsS0FBSyxDQUFDO0FBQ3BDLE1BQU0sbUJBQW1CLEdBQUUsU0FBUyxDQUFDO0FBU3JDLFNBQVMsa0JBQWtCLENBQ3ZCLElBQU8sRUFBRSxvQkFBb0M7SUFDN0MsT0FBTyxLQUFNLFNBQVEsSUFBSTtRQWtCckIsWUFBWSxHQUFHLElBQVc7WUFDdEIsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUM7WUFsQm5CLHlCQUFvQixHQUFHLG9CQUFvQixDQUFDO1lBQ3BDLG1CQUFjLEdBQW1CLElBQUksQ0FBQztZQWtCMUMsSUFBSSxDQUFDLElBQUksR0FBRyxvQkFBb0IsQ0FBQTtRQUNwQyxDQUFDO1FBbEJELElBQUksSUFBSSxDQUFDLEdBQW1CO1lBQ3hCLE1BQU0sYUFBYSxHQUFHLEdBQUcsSUFBSSxJQUFJLENBQUMsb0JBQW9CLENBQUM7WUFDdkQsSUFBSSxhQUFhLEtBQUssSUFBSSxDQUFDLGNBQWMsRUFBRTtnQkFDdkMsSUFBSSxJQUFJLENBQUMsY0FBYyxFQUFFO29CQUNyQixJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7aUJBQ2xGO2dCQUNELElBQUksYUFBYSxFQUFFO29CQUNmLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsT0FBTyxHQUFHLEdBQUcsQ0FBQyxDQUFDO2lCQUMvRDtnQkFDRCxJQUFJLENBQUMsY0FBYyxHQUFHLGFB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QztJQUNqQyx5QkFBeUI7SUFDekIsWUFBWSxVQUFzQjtRQUM5QixLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDdEIsQ0FBQzs7Z0ZBTlEsZ0JBQWdCO21FQUFoQixnQkFBZ0I7O1FBVHJCLGtCQUF5Qjs7dUZBU3BCLGdCQUFnQjtjQVo1QixTQUFTO2VBQUM7Z0JBQ1AsUUFBUSxFQUFFLFVBQVU7Z0JBQ3BCLFFBQVEsRUFBRTs7S0FFVDtnQkFDRCxJQUFJLEVBQUU7b0JBQ0YsS0FBSyxFQUFFLE1BQU07aUJBQ2hCO2dCQUNELE1BQU0sRUFBRSxDQUFDLE1BQU0sRUFBQyxnQkFBZ0IsRUFBQyxZQUFZLENBQUM7Z0JBQzlDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2FBQ2xEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgRWxlbWVudFJlZiB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IENvbnN0cnVjdG9yLCBIYXNFbGVtZW50UmVmIH0gZnJvbSBcInRkcy11aS9zaGFyZWQvY29tbW9uXCI7XHJcbmltcG9ydCB7IEFMSUdOX0lURU1TLCBGTEVYX0RJUkVDVElPTiwgSlVTVElGWV9DT05URU5UIH0gZnJvbSBcIi4vY29uZmlnXCI7XHJcbmNvbnN0IERFRkFVTFRfSlVTVElGWV9DT05URU5UID0gXCJzdGFydFwiO1xyXG5jb25zdCBERUZBVUxUX0ZMRVhfRElSRUNUSU9OID1cInJvd1wiO1xyXG5jb25zdCBERUZBVUxUX0FMSUdOX0lURU1TID1cInN0cmV0Y2hcIjtcclxuLy8jcmVnaW9uIEZsZXhEaXJlY3Rpb25cclxuaW50ZXJmYWNlIEZsZXhEaXJlY3Rpb24ge1xyXG4gICAgZmxleDogRkxFWF9ESVJFQ1RJT04sXHJcbiAgICAvL0RlZmF1bHQgZmxleC1kaXJlY3Rpb25cclxuICAgIGRlZmF1bHRGbGV4RGlyZWN0aW9uOiBGTEVYX0RJUkVDVElPTixcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgRmxleERpcmVjdGlvbkN0b3IgPSBDb25zdHJ1Y3RvcjxGbGV4RGlyZWN0aW9uPjtcclxuZnVuY3Rpb24gbWl4aW5GbGV4RGlyZWN0aW9uPFQgZXh0ZW5kcyBDb25zdHJ1Y3RvcjxIYXNFbGVtZW50UmVmPj4oXHJcbiAgICBiYXNlOiBULCBkZWZhdWx0RmxleERpcmVjdGlvbjogRkxFWF9ESVJFQ1RJT04pOiBGbGV4RGlyZWN0aW9uQ3RvciAmIFQge1xyXG4gICAgcmV0dXJuIGNsYXNzIGV4dGVuZHMgYmFzZSB7XHJcbiAgICAgICAgZGVmYXVsdEZsZXhEaXJlY3Rpb24gPSBkZWZhdWx0RmxleERpcmVjdGlvbjtcclxuICAgICAgICBwcml2YXRlIF9mbGV4RGlyZWN0aW9uOiBGTEVYX0RJUkVDVElPTiA9IG51bGw7XHJcbiAgICAgICAgc2V0IGZsZXgodmFsOiBGTEVYX0RJUkVDVElPTikge1xyXG4gICAgICAgICAgICBjb25zdCBmbGV4RGlyZWN0aW9uID0gdmFsIHx8IHRoaXMuZGVmYXVsdEZsZXhEaXJlY3Rpb247XHJcbiAgICAgICAgICAgIGlmIChmbGV4RGlyZWN0aW9uICE9PSB0aGlzLl9mbGV4RGlyZWN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fZmxleERpcmVjdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2VsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwiZmxleC1cIiArIHRoaXMuX2ZsZXhEaXJlY3Rpb24pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGZsZXhEaXJlY3Rpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImZsZXgtXCIgKyB2YWwpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5fZmxleERpcmVjdGlvbiA9IGZsZXhEaXJlY3Rpb247XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZ2V0IGZsZXgoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9mbGV4RGlyZWN0aW9uO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdHJ1Y3RvciguLi5hcmdzOiBhbnlbXSkge1xyXG4gICAgICAgICAgICBzdXBlciguLi5hcmdzKTtcclxuICAgICAgICAgICAgdGhpcy5mbGV4ID0gZGVmYXVsdEZsZXhEaXJlY3Rpb25cclxuICAgICAgICB9XHJcblxyXG4gICAgfTtcclxufVxyXG4vLyNlbmRyZWdpb25cclxuLy8jcmVnaW9uICBqdXN0aWZ5LWNvbnRlbnRcclxuaW50ZXJmYWNlIEp1c3RpZnlDb250ZW50IHtcclxuICAgIGp1c3RpZnlDb250ZW50OiBKVVNUSUZZX0NPTlRFTlQsXHJcbiAgICAvL0RlZmF1bHQgZmxleC1kaXJlY3Rpb25cclxuICAgIGRlZmF1bHRKdXN0aWZ5Q29udGVudDogSlVTVElGWV9DT05URU5ULFxyXG59XHJcbmV4cG9ydCB0eXBlIEp1c3RpZnlDb250ZW50Q3RvciA9IENvbnN0cnVjdG9yPEp1c3RpZnlDb250ZW50PjtcclxuZnVuY3Rpb24gbWl4aW5KdXN0aWZ5Q29udGVudDxUIGV4dGVuZHMgQ29uc3RydWN0b3I8SGFzRWxlbWVudFJlZj4+KFxyXG4gICAgYmFzZTogVCwgZGVmYXVsdEp1c3RpZnlDb250ZW50OiBKVVNUSUZZX0NPTlRFTlQpOiBKdXN0aWZ5Q29udGVudEN0b3IgJiBUIHtcclxuICAgIHJldHVybiBjbGFzcyBleHRlbmRzIGJhc2Uge1xyXG4gICAgICAgIGRlZmF1bHRKdXN0aWZ5Q29udGVudCA9IGRlZmF1bHRKdXN0aWZ5Q29udGVudDtcclxuICAgICAgICBwcml2YXRlIF9qdXN0aWZ5Q29udGVudDogSlVTVElGWV9DT05URU5UID0gbnVsbDtcclxuICAgICAgICBzZXQganVzdGlmeUNvbnRlbnQodmFsOiBKVVNUSUZZX0NPTlRFTlQpIHtcclxuICAgICAgICAgICAgY29uc3QganVzdGlmeUNvbnRlbnQgPSB2YWwgfHwgdGhpcy5kZWZhdWx0SnVzdGlmeUNvbnRlbnQ7XHJcbiAgICAgICAgICAgIGlmIChqdXN0aWZ5Q29udGVudCAhPT0gdGhpcy5fanVzdGlmeUNvbnRlbnQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9qdXN0aWZ5Q29udGVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2VsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwianVzdGlmeS1cIiArIHRoaXMuX2p1c3RpZnlDb250ZW50KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChqdXN0aWZ5Q29udGVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2VsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwianVzdGlmeS1cIiArIHZhbCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9qdXN0aWZ5Q29udGVudCA9IGp1c3RpZnlDb250ZW50O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGdldCBqdXN0aWZ5Q29udGVudCgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2p1c3RpZnlDb250ZW50O1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdHJ1Y3RvciguLi5hcmdzOiBhbnlbXSkge1xyXG4gICAgICAgICAgICBzdXBlciguLi5hcmdzKTtcclxuICAgICAgICAgICAgdGhpcy5qdXN0aWZ5Q29udGVudCA9IGRlZmF1bHRKdXN0aWZ5Q29udGVudFxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9O1xyXG59XHJcbi8vI2VuZHJlZ2lvbiBcclxuLy8jcmVnaW9uIEFsaWduSXRlbXNcclxuaW50ZXJmYWNlIEFsaWduSXRlbXMge1xyXG4gICAgYWxpZ25JdGVtczogQUxJR05fSVRFTVMsXHJcbiAgICAvL0RlZmF1bHQgZmxleC1kaXJlY3Rpb25cclxuICAgIGRlZmF1bHRBbGlnbkl0ZW1zOiBBTElHTl9JVEVNUyxcclxufVxyXG5leHBvcnQgdHlwZSBBbGlnbkl0ZW1zQ3RvciA9IENvbnN0cnVjdG9yPEFsaWduSXRlbXM+O1xyXG5mdW5jdGlvbiBtaXhpbkFsaWduSXRlbXM8VCBleHRlbmRzIENvbnN0cnVjdG9yPEhhc0VsZW1lbnRSZWY+PihcclxuICAgIGJhc2U6IFQsIGRlZmF1bHRBbGlnbkl0ZW1zOiBBTElHTl9JVEVNUyk6IEFsaWduSXRlbXNDdG9yICYgVCB7XHJcbiAgICByZXR1cm4gY2xhc3MgZXh0ZW5kcyBiYXNlIHtcclxuICAgICAgICBkZWZhdWx0QWxpZ25JdGVtcyA9IGRlZmF1bHRBbGlnbkl0ZW1zO1xyXG4gICAgICAgIHByaXZhdGUgX2FsaWduSXRlbXM6IEFMSUdOX0lURU1TID0gbnVsbDtcclxuICAgICAgICBzZXQgYWxpZ25JdGVtcyh2YWw6IEFMSUdOX0lURU1TKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGFsaWduX0l0ZW1zID0gdmFsIHx8IHRoaXMuZGVmYXVsdEFsaWduSXRlbXM7XHJcbiAgICAgICAgICAgIGlmIChhbGlnbl9JdGVtcyAhPT0gdGhpcy5fYWxpZ25JdGVtcykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2FsaWduSXRlbXMpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcIml0ZW1zLVwiICsgdGhpcy5fYWxpZ25JdGVtcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoYWxpZ25fSXRlbXMpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LmFkZChcIml0ZW1zLVwiICsgdmFsKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuX2FsaWduSXRlbXMgPSBhbGlnbl9JdGVtcztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBnZXQgYWxpZ25JdGVtcygpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2FsaWduSXRlbXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0cnVjdG9yKC4uLmFyZ3M6IGFueVtdKSB7XHJcbiAgICAgICAgICAgIHN1cGVyKC4uLmFyZ3MpO1xyXG4gICAgICAgICAgICB0aGlzLmFsaWduSXRlbXMgPSBkZWZhdWx0QWxpZ25JdGVtc1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9O1xyXG59XHJcbi8vI2VuZHJlZ2lvbiBcclxuXHJcblxyXG5cclxuXHJcbmNsYXNzIFRGbGV4QmFzZSB7XHJcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgX2VsZW1lbnRSZWY6IEVsZW1lbnRSZWYpIHsgfVxyXG59XHJcbmNvbnN0IF9URmxleE1peGluQmFzZTogRmxleERpcmVjdGlvbkN0b3IgJiBKdXN0aWZ5Q29udGVudEN0b3IgJiBBbGlnbkl0ZW1zQ3RvciAgJlxyXG4gICAgdHlwZW9mIFRGbGV4QmFzZSA9bWl4aW5BbGlnbkl0ZW1zKG1peGluSnVzdGlmeUNvbnRlbnQobWl4aW5GbGV4RGlyZWN0aW9uKFRGbGV4QmFzZSwgREVGQVVMVF9GTEVYX0RJUkVDVElPTiksREVGQVVMVF9KVVNUSUZZX0NPTlRFTlQpLERFRkFVTFRfQUxJR05fSVRFTVMpIDtcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICd0ZHMtZmxleCcsXHJcbiAgICB0ZW1wbGF0ZTogYFxyXG4gICAgICAgIDxuZy1jb250ZW50PjwvbmctY29udGVudD5cclxuICAgIGAsXHJcbiAgICBob3N0OiB7XHJcbiAgICAgICAgY2xhc3M6ICdmbGV4JyxcclxuICAgIH0sXHJcbiAgICBpbnB1dHM6IFsnZmxleCcsXCJqdXN0aWZ5Q29udGVudFwiLFwiYWxpZ25JdGVtc1wiXSxcclxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXHJcbn0pXHJcblxyXG5leHBvcnQgY2xhc3MgVERTRmxleENvbXBvbmVudCBleHRlbmRzIF9URmxleE1peGluQmFzZSB7XHJcbiAgICAvLyBmbGV4OiBGTEVYX0RJUkVDVElPTlxyXG4gICAgLy9qdXN0aWZ5Q29udGVudDogSlVTVElGWV9DT05URU5UXHJcbiAgICAvL2FsaWduSXRlbXM6IEFMSUdOX0lURU1TXHJcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7XHJcbiAgICAgICAgc3VwZXIoZWxlbWVudFJlZik7XHJcbiAgICB9XHJcbn1cclxuXHJcbiJdfQ==