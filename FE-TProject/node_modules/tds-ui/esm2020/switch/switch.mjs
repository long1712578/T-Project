import { coerceBooleanProperty } from "@angular/cdk/coercion";
import { Attribute, Component, EventEmitter, forwardRef, Input, Output, ViewChild, ViewEncapsulation } from "@angular/core";
import { NG_VALUE_ACCESSOR } from "@angular/forms";
import { mixinDisabled, mixinTabIndex } from "tds-ui/shared/common";
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/a11y";
import * as i2 from "@angular/common";
const _c0 = ["input"];
const _c1 = function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) { return { "pr-4": a0, "pl-4": a1, "pr-5": a2, "pl-5": a3, "pl-6": a4, "pr-6": a5, "border-neutral-2-200 bg-white dark:bg-d-neutral-3-50 dark:border-d-neutral-2-200": a6, "bg-primary-1 border-primary-1": a7, "pl-0.5": a8, "pr-0.5": a9 }; };
const _c2 = function (a0, a1, a2, a3, a4) { return { "h-3 w-3": a0, "h-3.5 w-3.5": a1, "h-2.5 w-2.5": a2, "bg-neutral-1-300 dark:bg-d-neutral-1-300": a3, "bg-white ": a4 }; };
function TDSSwitch_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    const _r6 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "label", 2, 3)(3, "div", 4)(4, "input", 5, 6);
    i0.ɵɵlistener("change", function TDSSwitch_ng_container_0_Template_input_change_4_listener($event) { i0.ɵɵrestoreView(_r6); const ctx_r5 = i0.ɵɵnextContext(); return ctx_r5._onChangeEvent($event); })("click", function TDSSwitch_ng_container_0_Template_input_click_4_listener($event) { i0.ɵɵrestoreView(_r6); const ctx_r7 = i0.ɵɵnextContext(); return ctx_r7._onInputClick($event); });
    i0.ɵɵelementEnd();
    i0.ɵɵelement(6, "div", 7);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunctionV(5, _c1, [ctx_r0.size == "sm" && !ctx_r0.checked, ctx_r0.size == "sm" && ctx_r0.checked, ctx_r0.size == "md" && !ctx_r0.checked, ctx_r0.size == "md" && ctx_r0.checked, ctx_r0.size == "lg" && ctx_r0.checked, ctx_r0.size == "lg" && !ctx_r0.checked, !ctx_r0.checked, ctx_r0.checked, !ctx_r0.checked, ctx_r0.checked]))("tabindex", ctx_r0.tabIndex);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("checked", ctx_r0.checked)("disabled", ctx_r0.disabled);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction5(16, _c2, ctx_r0.size == "md", ctx_r0.size == "lg", ctx_r0.size == "sm", !ctx_r0.checked, ctx_r0.checked));
} }
const _c3 = function (a0, a1, a2, a3, a4, a5, a6, a7) { return { "pr-4": a0, "pl-4": a1, "pr-5": a2, "pl-5": a3, "pl-6": a4, "pr-6": a5, "pl-0.5": a6, "pr-0.5 bg-neutral-1-200  dark:bg-d-neutral-1-200 ": a7 }; };
const _c4 = function (a0, a1, a2, a3, a4) { return { "h-3 w-3": a0, "h-3.5 w-3.5": a1, "h-2.5 w-2.5": a2, "bg-white dark:bg-d-neutral-3-50": a3, "bg-neutral-1-200  dark:bg-d-neutral-1-200": a4 }; };
function TDSSwitch_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    const _r11 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "label", 8, 3)(2, "div", 9)(3, "input", 5, 6);
    i0.ɵɵlistener("change", function TDSSwitch_ng_template_1_Template_input_change_3_listener($event) { i0.ɵɵrestoreView(_r11); const ctx_r10 = i0.ɵɵnextContext(); return ctx_r10._onChangeEvent($event); })("click", function TDSSwitch_ng_template_1_Template_input_click_3_listener($event) { i0.ɵɵrestoreView(_r11); const ctx_r12 = i0.ɵɵnextContext(); return ctx_r12._onInputClick($event); });
    i0.ɵɵelementEnd();
    i0.ɵɵelement(5, "div", 7);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction8(5, _c3, ctx_r2.size == "sm" && !ctx_r2.checked, ctx_r2.size == "sm" && ctx_r2.checked, ctx_r2.size == "md" && !ctx_r2.checked, ctx_r2.size == "md" && ctx_r2.checked, ctx_r2.size == "lg" && ctx_r2.checked, ctx_r2.size == "lg" && !ctx_r2.checked, !ctx_r2.checked, ctx_r2.checked))("tabindex", ctx_r2.tabIndex);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("checked", ctx_r2.checked)("disabled", ctx_r2.disabled);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction5(14, _c4, ctx_r2.size == "md", ctx_r2.size == "lg", ctx_r2.size == "sm", ctx_r2.checked, !ctx_r2.checked));
} }
let nextUniqueId = 0;
export const TDS_SWITCH_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => TDSSwitch),
    multi: true
};
export class TdsSwitchChange {
    constructor(source, checked) {
        this.source = source;
        this.checked = checked;
    }
}
export class TdsSwitchBase {
    constructor(_elementRef) {
        this._elementRef = _elementRef;
    }
}
export const _TdsSwitchMixinBase = mixinTabIndex(mixinDisabled(TdsSwitchBase));
export class TDSSwitch extends _TdsSwitchMixinBase {
    constructor(elementRef, _focusMonitor, _changeDetectorRef, tabIndex) {
        super(elementRef);
        this._focusMonitor = _focusMonitor;
        this._changeDetectorRef = _changeDetectorRef;
        this._size = 'md';
        this._disabled = false;
        this.active = false;
        this.onChange = (_) => { };
        this.onTouched = () => { };
        this._checked = false;
        this.change = new EventEmitter();
        this._onTouched = () => { };
        this.tabIndex = parseInt(tabIndex) || 0;
    }
    //     @Output() checkedA = new EventEmitter<any>();
    //    inputCheck = true;
    get size() { return this._size; }
    set size(value) {
        if (value !== this._size) {
            this._size = value;
            this._changeDetectorRef.markForCheck();
        }
    }
    get checked() { return this._checked; }
    set checked(value) {
        if (value != this.checked) {
            this._checked = value;
            this._changeDetectorRef.markForCheck();
        }
    }
    get disabled() { return this._disabled; }
    set disabled(value) {
        const newValue = coerceBooleanProperty(value);
        if (newValue !== this.disabled) {
            this._disabled = newValue;
            this._changeDetectorRef.markForCheck();
        }
    }
    ngOnInit() {
        // this.inputCheck; debugger
    }
    _onChangeEvent(event) {
        event.stopPropagation();
        this.checked = this._inputElement.nativeElement.checked;
        this._emitChangeEvent();
    }
    _onInputClick(event) {
        event.stopPropagation();
    }
    writeValue(value) {
        this.checked = !!value;
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this._changeDetectorRef.markForCheck();
    }
    focus() {
        this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');
    }
    toggle() {
        if (!this.disabled) {
            this.checked = !this.checked;
            //   this.checkedA.emit(this.checked);
        }
    }
    _emitChangeEvent() {
        this.onChange(this.checked);
        this.change.emit(new TdsSwitchChange(this, this.checked));
    }
}
TDSSwitch.ɵfac = function TDSSwitch_Factory(t) { return new (t || TDSSwitch)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.FocusMonitor), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵinjectAttribute('tabindex')); };
TDSSwitch.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSSwitch, selectors: [["tds-switch"]], viewQuery: function TDSSwitch_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);
    } }, hostAttrs: [1, "inline-block"], hostVars: 1, hostBindings: function TDSSwitch_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵhostProperty("id", ctx.id);
    } }, inputs: { size: "size", checked: "checked", disabled: "disabled" }, outputs: { change: "change" }, exportAs: ["tdsSwitch"], features: [i0.ɵɵProvidersFeature([TDS_SWITCH_VALUE_ACCESSOR]), i0.ɵɵInheritDefinitionFeature], decls: 3, vars: 2, consts: [[4, "ngIf", "ngIfElse"], ["switchDisable", ""], [1, "cursor-pointer"], ["label", ""], [1, "border", "focus:outline-none", "switch", "py-0.5", "rounded-full", "block", "focus:border-primary-1", "focus:ring-3", "focus:ring-primary-1", "focus:ring-opacity-20", 3, "ngClass", "tabindex"], ["type", "checkbox", 1, "hidden", 3, "checked", "disabled", "change", "click"], ["input", ""], [1, "rounded-full", "block", 3, "ngClass"], [1, "cursor-not-allowed"], [1, "border", "focus:outline-none", "switch", "py-0.5", "rounded-full", "block", "border-neutral-2-200", "dark:border-d-neutral-2-200", 3, "ngClass", "tabindex"]], template: function TDSSwitch_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtemplate(0, TDSSwitch_ng_container_0_Template, 7, 22, "ng-container", 0);
        i0.ɵɵtemplate(1, TDSSwitch_ng_template_1_Template, 6, 20, "ng-template", null, 1, i0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r1 = i0.ɵɵreference(2);
        i0.ɵɵproperty("ngIf", !ctx.disabled)("ngIfElse", _r1);
    } }, directives: [i2.NgIf, i2.NgClass], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSSwitch, [{
        type: Component,
        args: [{ moduleId: 'module.id', selector: 'tds-switch', exportAs: 'tdsSwitch', providers: [TDS_SWITCH_VALUE_ACCESSOR], encapsulation: ViewEncapsulation.None, host: {
                    '[id]': 'id',
                    class: "inline-block"
                }, template: "<ng-container *ngIf=\"!disabled;else switchDisable\">\r\n  <label #label class=\"cursor-pointer\">\r\n    <div class=\"border focus:outline-none switch py-0.5 rounded-full block focus:border-primary-1 focus:ring-3 focus:ring-primary-1 focus:ring-opacity-20\"\r\n    [ngClass]=\"{'pr-4':size == 'sm' && !checked,'pl-4':size == 'sm' && checked,\r\n    'pr-5':size == 'md' && !checked ,\r\n    'pl-5':size == 'md' && checked,\r\n    'pl-6':size == 'lg' && checked,\r\n    'pr-6':size == 'lg' && !checked,\r\n    'border-neutral-2-200 bg-white dark:bg-d-neutral-3-50 dark:border-d-neutral-2-200':!checked ,\r\n    'bg-primary-1 border-primary-1':checked ,\r\n    'pl-0.5':!checked,'pr-0.5':checked\r\n  }\" [tabindex]=\"tabIndex\">\r\n      <input #input class=\"hidden\" type=\"checkbox\" [checked]=\"checked\" [disabled]=\"disabled\"\r\n        (change)=\"_onChangeEvent($event)\" (click)=\"_onInputClick($event)\">\r\n      <div [ngClass]=\"{'h-3 w-3':size == 'md',\r\n    'h-3.5 w-3.5':size == 'lg',\r\n    'h-2.5 w-2.5':size == 'sm',\r\n    'bg-neutral-1-300 dark:bg-d-neutral-1-300':!checked ,\r\n    'bg-white ': checked}\" class=\"rounded-full block\">\r\n      </div>\r\n    </div>\r\n  </label>\r\n</ng-container>\r\n<ng-template #switchDisable>\r\n  <label #label class=\"cursor-not-allowed\">\r\n    <div class=\"border focus:outline-none switch py-0.5 rounded-full block border-neutral-2-200 dark:border-d-neutral-2-200\" \r\n    [ngClass]=\"{'pr-4':size == 'sm' && !checked,\r\n    'pl-4':size == 'sm' && checked,\r\n    'pr-5':size == 'md' && !checked,\r\n    'pl-5':size == 'md' && checked,\r\n    'pl-6':size == 'lg' && checked,\r\n    'pr-6':size == 'lg' && !checked,    \r\n    'pl-0.5':!checked,\r\n    'pr-0.5 bg-neutral-1-200  dark:bg-d-neutral-1-200 ':checked\r\n    \r\n  }\" [tabindex]=\"tabIndex\">\r\n      <input #input class=\"hidden\" type=\"checkbox\" [checked]=\"checked\" [disabled]=\"disabled\"\r\n        (change)=\"_onChangeEvent($event)\" (click)=\"_onInputClick($event)\">\r\n      <div [ngClass]=\"{'h-3 w-3':size == 'md',\r\n    'h-3.5 w-3.5':size == 'lg',\r\n    'h-2.5 w-2.5':size == 'sm',\r\n    'bg-white dark:bg-d-neutral-3-50': checked, \r\n    'bg-neutral-1-200  dark:bg-d-neutral-1-200': !checked}\" class=\"rounded-full block\">\r\n      </div>\r\n    </div>\r\n  </label>\r\n</ng-template>" }]
    }], function () { return [{ type: i0.ElementRef }, { type: i1.FocusMonitor }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{
                type: Attribute,
                args: ['tabindex']
            }] }]; }, { size: [{
            type: Input
        }], checked: [{
            type: Input
        }], disabled: [{
            type: Input
        }], change: [{
            type: Output
        }], _inputElement: [{
            type: ViewChild,
            args: ['input']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3dpdGNoLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvdGRzLXVpL3N3aXRjaC9zd2l0Y2gudHMiLCIuLi8uLi8uLi8uLi9wcm9qZWN0cy90ZHMtdWkvc3dpdGNoL3N3aXRjaC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzlELE9BQU8sRUFBRSxTQUFTLEVBQXFCLFNBQVMsRUFBYyxZQUFZLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBNkIsTUFBTSxFQUFFLFNBQVMsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN0TCxPQUFPLEVBQXdCLGlCQUFpQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDekUsT0FBTyxFQUFtQyxhQUFhLEVBQUUsYUFBYSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7Ozs7Ozs7OztJQ0xyRyw2QkFBbUQ7SUFDakQsbUNBQXFDLGFBQUEsa0JBQUE7SUFZL0Isc0tBQVUsNkJBQXNCLElBQUMsdUpBQVUsNEJBQXFCLElBQS9CO0lBRG5DLGlCQUNvRTtJQUNwRSx5QkFLTTtJQUNSLGlCQUFNLEVBQUE7SUFFViwwQkFBZTs7O0lBbkJYLGVBUUE7SUFSQSxxV0FRQSw2QkFBQTtJQUMrQyxlQUFtQjtJQUFuQix3Q0FBbUIsNkJBQUE7SUFFM0QsZUFJZTtJQUpmLHFKQUllOzs7Ozs7SUFNeEIsbUNBQXlDLGFBQUEsa0JBQUE7SUFhbkMsdUtBQVUsOEJBQXNCLElBQUMsd0pBQVUsNkJBQXFCLElBQS9CO0lBRG5DLGlCQUNvRTtJQUNwRSx5QkFLTTtJQUNSLGlCQUFNLEVBQUE7OztJQWxCTixlQVNBO0lBVEEsa1VBU0EsNkJBQUE7SUFDK0MsZUFBbUI7SUFBbkIsd0NBQW1CLDZCQUFBO0lBRTNELGVBSWdEO0lBSmhELHFKQUlnRDs7QURsQzNELElBQUksWUFBWSxHQUFHLENBQUMsQ0FBQztBQUVyQixN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QzFDLDZFQXNCZTtRQUNmLDRHQXVCYzs7O1FBOUNDLG9DQUFnQixpQkFBQTs7dUZEeUNsQixTQUFTO2NBYnJCLFNBQVM7MkJBRUksV0FBVyxZQUNYLFlBQVksWUFDWixXQUFXLGFBRVYsQ0FBQyx5QkFBeUIsQ0FBQyxpQkFDdkIsaUJBQWlCLENBQUMsSUFBSSxRQUMvQjtvQkFDRixNQUFNLEVBQUUsSUFBSTtvQkFDWixLQUFLLEVBQUMsY0FBYztpQkFDdkI7O3NCQWlESSxTQUFTO3VCQUFDLFVBQVU7d0JBdENyQixJQUFJO2tCQURQLEtBQUs7WUFjRixPQUFPO2tCQURWLEtBQUs7WUFVRixRQUFRO2tCQURYLEtBQUs7WUFVYSxNQUFNO2tCQUF4QixNQUFNO1lBRWEsYUFBYTtrQkFBaEMsU0FBUzttQkFBQyxPQUFPIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbmltcG9ydCB7IEZvY3VzTW9uaXRvciB9IGZyb20gXCJAYW5ndWxhci9jZGsvYTExeVwiO1xyXG5pbXBvcnQgeyBjb2VyY2VCb29sZWFuUHJvcGVydHkgfSBmcm9tIFwiQGFuZ3VsYXIvY2RrL2NvZXJjaW9uXCI7XHJcbmltcG9ydCB7IEF0dHJpYnV0ZSwgQ2hhbmdlRGV0ZWN0b3JSZWYsIENvbXBvbmVudCwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBmb3J3YXJkUmVmLCBJbnB1dCwgTmdab25lLCBPbkRlc3Ryb3ksIE9uSW5pdCwgT3V0cHV0LCBWaWV3Q2hpbGQsIFZpZXdFbmNhcHN1bGF0aW9uIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE5HX1ZBTFVFX0FDQ0VTU09SIH0gZnJvbSBcIkBhbmd1bGFyL2Zvcm1zXCI7XHJcbmltcG9ydCB7IENhbkRpc2FibGVDdG9yLCBIYXNUYWJJbmRleEN0b3IsIG1peGluRGlzYWJsZWQsIG1peGluVGFiSW5kZXggfSBmcm9tIFwidGRzLXVpL3NoYXJlZC9jb21tb25cIjtcclxuaW1wb3J0IHsgdHlwZVN3aXRjaCB9IGZyb20gXCIuL3R5cGVcIjtcclxuXHJcbmxldCBuZXh0VW5pcXVlSWQgPSAwO1xyXG5cclxuZXhwb3J0IGNvbnN0IFREU19TV0lUQ0hfVkFMVUVfQUNDRVNTT1I6IGFueSA9IHtcclxuICAgIHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLFxyXG4gICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gVERTU3dpdGNoKSxcclxuICAgIG11bHRpOiB0cnVlXHJcbn07XHJcblxyXG5leHBvcnQgY2xhc3MgVGRzU3dpdGNoQ2hhbmdlIHtcclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHB1YmxpYyBzb3VyY2U6IFREU1N3aXRjaCxcclxuICAgICAgICBwdWJsaWMgY2hlY2tlZDogYm9vbGVhbikgeyB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBUZHNTd2l0Y2hCYXNlIHtcclxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBfZWxlbWVudFJlZjogRWxlbWVudFJlZikgeyB9XHJcbn1cclxuZXhwb3J0IGNvbnN0IF9UZHNTd2l0Y2hNaXhpbkJhc2U6IEhhc1RhYkluZGV4Q3RvciAmIENhbkRpc2FibGVDdG9yICYgdHlwZW9mIFRkc1N3aXRjaEJhc2UgPSBtaXhpblRhYkluZGV4KG1peGluRGlzYWJsZWQoVGRzU3dpdGNoQmFzZSkpXHJcblxyXG5cclxuQENvbXBvbmVudCh7XHJcblxyXG4gICAgbW9kdWxlSWQ6ICdtb2R1bGUuaWQnLFxyXG4gICAgc2VsZWN0b3I6ICd0ZHMtc3dpdGNoJyxcclxuICAgIGV4cG9ydEFzOiAndGRzU3dpdGNoJywgICAgXHJcbiAgICB0ZW1wbGF0ZVVybDogJ3N3aXRjaC5odG1sJyxcclxuICAgIHByb3ZpZGVyczogW1REU19TV0lUQ0hfVkFMVUVfQUNDRVNTT1JdLFxyXG4gICAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcclxuICAgIGhvc3Q6IHtcclxuICAgICAgICAnW2lkXSc6ICdpZCcsXHJcbiAgICAgICAgY2xhc3M6XCJpbmxpbmUtYmxvY2tcIlxyXG4gICAgfSxcclxufSlcclxuZXhwb3J0IGNsYXNzIFREU1N3aXRjaCBleHRlbmRzIF9UZHNTd2l0Y2hNaXhpbkJhc2UgaW1wbGVtZW50cyBPbkluaXQsIENvbnRyb2xWYWx1ZUFjY2Vzc29yIHtcclxuICAgIHByaXZhdGUgX3NpemU6IHR5cGVTd2l0Y2ggPSAnbWQnXHJcbiAgICBwcml2YXRlIF9kaXNhYmxlZDogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuLy8gICAgIEBPdXRwdXQoKSBjaGVja2VkQSA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xyXG4vLyAgICBpbnB1dENoZWNrID0gdHJ1ZTtcclxuXHJcblxyXG4gICAgQElucHV0KClcclxuICAgIGdldCBzaXplKCk6IHR5cGVTd2l0Y2ggeyByZXR1cm4gdGhpcy5fc2l6ZSB9XHJcbiAgICBzZXQgc2l6ZSh2YWx1ZTogdHlwZVN3aXRjaCkge1xyXG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdGhpcy5fc2l6ZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9zaXplID0gdmFsdWU7XHJcbiAgICAgICAgICAgIHRoaXMuX2NoYW5nZURldGVjdG9yUmVmLm1hcmtGb3JDaGVjaygpO1xyXG5cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBhY3RpdmUgPSBmYWxzZTtcclxuICAgIHByaXZhdGUgb25DaGFuZ2UgPSAoXzogYW55KSA9PiB7IH07XHJcbiAgICBwcml2YXRlIG9uVG91Y2hlZCA9ICgpID0+IHsgfTtcclxuICAgIHByaXZhdGUgX2NoZWNrZWQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIEBJbnB1dCgpXHJcbiAgICBnZXQgY2hlY2tlZCgpOiBib29sZWFuIHsgcmV0dXJuIHRoaXMuX2NoZWNrZWQ7IH1cclxuICAgIHNldCBjaGVja2VkKHZhbHVlOmJvb2xlYW4pIHtcclxuICAgICAgICBpZiAodmFsdWUhPXRoaXMuY2hlY2tlZCkge1xyXG4gICAgICAgICAgICB0aGlzLl9jaGVja2VkPXZhbHVlO1xyXG4gICAgICAgICAgICB0aGlzLl9jaGFuZ2VEZXRlY3RvclJlZi5tYXJrRm9yQ2hlY2soKVxyXG4gICAgICAgICAgICBcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBASW5wdXQoKVxyXG4gICAgZ2V0IGRpc2FibGVkKCkgeyByZXR1cm4gdGhpcy5fZGlzYWJsZWQgfVxyXG4gICAgc2V0IGRpc2FibGVkKHZhbHVlOiBhbnkpIHtcclxuICAgICAgICBjb25zdCBuZXdWYWx1ZSA9IGNvZXJjZUJvb2xlYW5Qcm9wZXJ0eSh2YWx1ZSk7XHJcbiAgICAgICAgaWYgKG5ld1ZhbHVlICE9PSB0aGlzLmRpc2FibGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2Rpc2FibGVkID0gbmV3VmFsdWU7XHJcbiAgICAgICAgICAgIHRoaXMuX2NoYW5nZURldGVjdG9yUmVmLm1hcmtGb3JDaGVjaygpO1xyXG5cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBAT3V0cHV0KCkgcmVhZG9ubHkgY2hhbmdlOiBFdmVudEVtaXR0ZXI8VGRzU3dpdGNoQ2hhbmdlPiA9XHJcbiAgICAgICAgbmV3IEV2ZW50RW1pdHRlcjxUZHNTd2l0Y2hDaGFuZ2U+KCk7XHJcbiAgICBAVmlld0NoaWxkKCdpbnB1dCcpIF9pbnB1dEVsZW1lbnQhOiBFbGVtZW50UmVmO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXHJcbiAgICAgICAgcHJpdmF0ZSBfZm9jdXNNb25pdG9yOiBGb2N1c01vbml0b3IsXHJcbiAgICAgICAgcHJpdmF0ZSBfY2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmLFxyXG4gICAgICAgIEBBdHRyaWJ1dGUoJ3RhYmluZGV4JykgdGFiSW5kZXg6IHN0cmluZyxcclxuICAgICkge1xyXG4gICAgICAgIHN1cGVyKGVsZW1lbnRSZWYpO1xyXG4gICAgICAgIHRoaXMudGFiSW5kZXggPSBwYXJzZUludCh0YWJJbmRleCkgfHwgMDtcclxuICAgIH1cclxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgICAgIC8vIHRoaXMuaW5wdXRDaGVjazsgZGVidWdnZXJcclxuICAgIH1cclxuXHJcbiAgICBfb25Ub3VjaGVkOiAoKSA9PiBhbnkgPSAoKSA9PiB7IH07XHJcblxyXG4gICAgX29uQ2hhbmdlRXZlbnQoZXZlbnQ6IGFueSkge1xyXG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIHRoaXMuY2hlY2tlZCA9IHRoaXMuX2lucHV0RWxlbWVudC5uYXRpdmVFbGVtZW50LmNoZWNrZWQ7XHJcbiAgICAgICAgdGhpcy5fZW1pdENoYW5nZUV2ZW50KCk7XHJcbiAgICB9XHJcblxyXG4gICAgX29uSW5wdXRDbGljayhldmVudDogRXZlbnQpIHtcclxuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgIH1cclxuXHJcbiAgICB3cml0ZVZhbHVlKHZhbHVlOiBhbnkpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmNoZWNrZWQgPSAhIXZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIHJlZ2lzdGVyT25DaGFuZ2UoZm46IGFueSk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMub25DaGFuZ2UgPSBmbjtcclxuICAgIH1cclxuXHJcbiAgICByZWdpc3Rlck9uVG91Y2hlZChmbjogYW55KTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5vblRvdWNoZWQgPSBmbjtcclxuICAgIH1cclxuXHJcbiAgICBzZXREaXNhYmxlZFN0YXRlKGlzRGlzYWJsZWQ6IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmRpc2FibGVkID0gaXNEaXNhYmxlZDtcclxuICAgICAgICB0aGlzLl9jaGFuZ2VEZXRlY3RvclJlZi5tYXJrRm9yQ2hlY2soKTtcclxuICAgIH1cclxuXHJcbiAgICBmb2N1cygpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9mb2N1c01vbml0b3IuZm9jdXNWaWEodGhpcy5faW5wdXRFbGVtZW50Lm5hdGl2ZUVsZW1lbnQsICdrZXlib2FyZCcpO1xyXG4gICAgfVxyXG5cclxuICAgIHRvZ2dsZSgpOiB2b2lkIHtcclxuICAgICAgICBpZiAoIXRoaXMuZGlzYWJsZWQpIHtcclxuICAgICAgICAgIHRoaXMuY2hlY2tlZCA9ICF0aGlzLmNoZWNrZWQ7XHJcbiAgICAgICAgLy8gICB0aGlzLmNoZWNrZWRBLmVtaXQodGhpcy5jaGVja2VkKTtcclxuICAgICAgICB9IFxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX2VtaXRDaGFuZ2VFdmVudCgpIHtcclxuICAgICAgICB0aGlzLm9uQ2hhbmdlKHRoaXMuY2hlY2tlZCk7XHJcbiAgICAgICAgdGhpcy5jaGFuZ2UuZW1pdChuZXcgVGRzU3dpdGNoQ2hhbmdlKHRoaXMsIHRoaXMuY2hlY2tlZCkpO1xyXG4gICAgfVxyXG5cclxuXHJcbn1cclxuXHJcbiIsIjxuZy1jb250YWluZXIgKm5nSWY9XCIhZGlzYWJsZWQ7ZWxzZSBzd2l0Y2hEaXNhYmxlXCI+XHJcbiAgPGxhYmVsICNsYWJlbCBjbGFzcz1cImN1cnNvci1wb2ludGVyXCI+XHJcbiAgICA8ZGl2IGNsYXNzPVwiYm9yZGVyIGZvY3VzOm91dGxpbmUtbm9uZSBzd2l0Y2ggcHktMC41IHJvdW5kZWQtZnVsbCBibG9jayBmb2N1czpib3JkZXItcHJpbWFyeS0xIGZvY3VzOnJpbmctMyBmb2N1czpyaW5nLXByaW1hcnktMSBmb2N1czpyaW5nLW9wYWNpdHktMjBcIlxyXG4gICAgW25nQ2xhc3NdPVwieydwci00JzpzaXplID09ICdzbScgJiYgIWNoZWNrZWQsJ3BsLTQnOnNpemUgPT0gJ3NtJyAmJiBjaGVja2VkLFxyXG4gICAgJ3ByLTUnOnNpemUgPT0gJ21kJyAmJiAhY2hlY2tlZCAsXHJcbiAgICAncGwtNSc6c2l6ZSA9PSAnbWQnICYmIGNoZWNrZWQsXHJcbiAgICAncGwtNic6c2l6ZSA9PSAnbGcnICYmIGNoZWNrZWQsXHJcbiAgICAncHItNic6c2l6ZSA9PSAnbGcnICYmICFjaGVja2VkLFxyXG4gICAgJ2JvcmRlci1uZXV0cmFsLTItMjAwIGJnLXdoaXRlIGRhcms6YmctZC1uZXV0cmFsLTMtNTAgZGFyazpib3JkZXItZC1uZXV0cmFsLTItMjAwJzohY2hlY2tlZCAsXHJcbiAgICAnYmctcHJpbWFyeS0xIGJvcmRlci1wcmltYXJ5LTEnOmNoZWNrZWQgLFxyXG4gICAgJ3BsLTAuNSc6IWNoZWNrZWQsJ3ByLTAuNSc6Y2hlY2tlZFxyXG4gIH1cIiBbdGFiaW5kZXhdPVwidGFiSW5kZXhcIj5cclxuICAgICAgPGlucHV0ICNpbnB1dCBjbGFzcz1cImhpZGRlblwiIHR5cGU9XCJjaGVja2JveFwiIFtjaGVja2VkXT1cImNoZWNrZWRcIiBbZGlzYWJsZWRdPVwiZGlzYWJsZWRcIlxyXG4gICAgICAgIChjaGFuZ2UpPVwiX29uQ2hhbmdlRXZlbnQoJGV2ZW50KVwiIChjbGljayk9XCJfb25JbnB1dENsaWNrKCRldmVudClcIj5cclxuICAgICAgPGRpdiBbbmdDbGFzc109XCJ7J2gtMyB3LTMnOnNpemUgPT0gJ21kJyxcclxuICAgICdoLTMuNSB3LTMuNSc6c2l6ZSA9PSAnbGcnLFxyXG4gICAgJ2gtMi41IHctMi41JzpzaXplID09ICdzbScsXHJcbiAgICAnYmctbmV1dHJhbC0xLTMwMCBkYXJrOmJnLWQtbmV1dHJhbC0xLTMwMCc6IWNoZWNrZWQgLFxyXG4gICAgJ2JnLXdoaXRlICc6IGNoZWNrZWR9XCIgY2xhc3M9XCJyb3VuZGVkLWZ1bGwgYmxvY2tcIj5cclxuICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuICA8L2xhYmVsPlxyXG48L25nLWNvbnRhaW5lcj5cclxuPG5nLXRlbXBsYXRlICNzd2l0Y2hEaXNhYmxlPlxyXG4gIDxsYWJlbCAjbGFiZWwgY2xhc3M9XCJjdXJzb3Itbm90LWFsbG93ZWRcIj5cclxuICAgIDxkaXYgY2xhc3M9XCJib3JkZXIgZm9jdXM6b3V0bGluZS1ub25lIHN3aXRjaCBweS0wLjUgcm91bmRlZC1mdWxsIGJsb2NrIGJvcmRlci1uZXV0cmFsLTItMjAwIGRhcms6Ym9yZGVyLWQtbmV1dHJhbC0yLTIwMFwiIFxyXG4gICAgW25nQ2xhc3NdPVwieydwci00JzpzaXplID09ICdzbScgJiYgIWNoZWNrZWQsXHJcbiAgICAncGwtNCc6c2l6ZSA9PSAnc20nICYmIGNoZWNrZWQsXHJcbiAgICAncHItNSc6c2l6ZSA9PSAnbWQnICYmICFjaGVja2VkLFxyXG4gICAgJ3BsLTUnOnNpemUgPT0gJ21kJyAmJiBjaGVja2VkLFxyXG4gICAgJ3BsLTYnOnNpemUgPT0gJ2xnJyAmJiBjaGVja2VkLFxyXG4gICAgJ3ByLTYnOnNpemUgPT0gJ2xnJyAmJiAhY2hlY2tlZCwgICAgXHJcbiAgICAncGwtMC41JzohY2hlY2tlZCxcclxuICAgICdwci0wLjUgYmctbmV1dHJhbC0xLTIwMCAgZGFyazpiZy1kLW5ldXRyYWwtMS0yMDAgJzpjaGVja2VkXHJcbiAgICBcclxuICB9XCIgW3RhYmluZGV4XT1cInRhYkluZGV4XCI+XHJcbiAgICAgIDxpbnB1dCAjaW5wdXQgY2xhc3M9XCJoaWRkZW5cIiB0eXBlPVwiY2hlY2tib3hcIiBbY2hlY2tlZF09XCJjaGVja2VkXCIgW2Rpc2FibGVkXT1cImRpc2FibGVkXCJcclxuICAgICAgICAoY2hhbmdlKT1cIl9vbkNoYW5nZUV2ZW50KCRldmVudClcIiAoY2xpY2spPVwiX29uSW5wdXRDbGljaygkZXZlbnQpXCI+XHJcbiAgICAgIDxkaXYgW25nQ2xhc3NdPVwieydoLTMgdy0zJzpzaXplID09ICdtZCcsXHJcbiAgICAnaC0zLjUgdy0zLjUnOnNpemUgPT0gJ2xnJyxcclxuICAgICdoLTIuNSB3LTIuNSc6c2l6ZSA9PSAnc20nLFxyXG4gICAgJ2JnLXdoaXRlIGRhcms6YmctZC1uZXV0cmFsLTMtNTAnOiBjaGVja2VkLCBcclxuICAgICdiZy1uZXV0cmFsLTEtMjAwICBkYXJrOmJnLWQtbmV1dHJhbC0xLTIwMCc6ICFjaGVja2VkfVwiIGNsYXNzPVwicm91bmRlZC1mdWxsIGJsb2NrXCI+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbiAgPC9sYWJlbD5cclxuPC9uZy10ZW1wbGF0ZT4iXX0=