import { ChangeDetectionStrategy, Component, ContentChildren, EventEmitter, Input, Optional, Output, TemplateRef, ViewEncapsulation } from '@angular/core';
import { merge, Subject } from 'rxjs';
import { startWith, takeUntil } from 'rxjs/operators';
import { TDSStepComponent } from './step.component';
import { toBoolean } from 'tds-ui/shared/utility';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/bidi";
const _c0 = ["*"];
export class TDSStepsComponent {
    constructor(cdr, directionality, elementRef) {
        this.cdr = cdr;
        this.directionality = directionality;
        this.elementRef = elementRef;
        this.mode = 'default';
        this.current = 0;
        this.direction = 'horizontal';
        this.labelPlacement = 'horizontal';
        this.type = 'default';
        this.size = 'md';
        this.startIndex = 0;
        this.status = 'process';
        this.showStep = false;
        this.borderStyle = 'border-solid';
        this.tdsClss = 'bg-white dark:bg-d-neutral-3-50';
        this.indexChange = new EventEmitter();
        this.destroy$ = new Subject();
        this.showProcessDot = false;
        this.classMap = {};
        this.dir = 'ltr';
        this.setClassMap();
    }
    set progressDot(value) {
        if (value instanceof TemplateRef) {
            this.showProcessDot = true;
            this.customProcessDotTemplate = value;
        }
        else {
            this.showProcessDot = toBoolean(value);
        }
        this.updateChildrenSteps();
    }
    ngOnChanges(changes) {
        if (changes.startIndex || changes.direction || changes.status || changes.current || changes.size || changes.labelPlacement || changes.showStep) {
            this.updateChildrenSteps();
        }
        if (changes.progressDot || changes.direction) {
            this.setClassMap();
        }
    }
    ngOnInit() {
        this.directionality.change?.pipe(takeUntil(this.destroy$)).subscribe((direction) => {
            this.dir = direction;
            this.setClassMap();
            this.cdr.detectChanges();
        });
        this.dir = this.directionality.value;
        this.setClassMap();
        this.updateChildrenSteps();
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
        if (this.indexChangeSubscription) {
            this.indexChangeSubscription.unsubscribe();
        }
    }
    ngAfterContentInit() {
        if (this.steps) {
            this.steps.changes.pipe(startWith(null), takeUntil(this.destroy$)).subscribe(() => {
                this.updateChildrenSteps();
            });
        }
    }
    updateChildrenSteps() {
        if (this.steps) {
            const length = this.steps.length;
            this.steps.toArray().forEach((step, index) => {
                Promise.resolve().then(() => {
                    step.outStatus = this.status;
                    step.showProcessDot = this.showProcessDot;
                    if (this.customProcessDotTemplate) {
                        step.customProcessTemplate = this.customProcessDotTemplate;
                    }
                    step.clickable = this.indexChange.observers.length > 0;
                    step.direction = this.direction;
                    step.index = index + this.startIndex;
                    step.currentIndex = this.current;
                    step.last = length === index + 1;
                    step.size = this.size;
                    step.labelPlacement = this.labelPlacement;
                    step.showStep = this.showStep;
                    step.mode = this.mode;
                    step.first = index == 0;
                    step.borderStyle = this.borderStyle;
                    step.backgroundColor = this.tdsClss;
                    step.markForCheck();
                });
            });
            if (this.indexChangeSubscription) {
                this.indexChangeSubscription.unsubscribe();
            }
            this.indexChangeSubscription = merge(...this.steps.map(step => step.click$)).subscribe(index => this.indexChange.emit(index));
        }
    }
    setClassMap() {
        this.classMap = {
            [`tds-steps`]: true,
            [`flex`]: true,
            [`w-full`]: true,
            [`tds-steps-${this.direction}`]: true,
            [`flex-col`]: this.direction === 'vertical',
            [`h-full`]: this.direction === 'vertical',
            [`tds-steps-label-horizontal`]: this.direction === 'horizontal',
            [`tds-steps-label-vertical`]: (this.showProcessDot || this.labelPlacement === 'vertical') && this.direction === 'horizontal',
            [`tds-steps-dot`]: this.showProcessDot,
            ['tds-steps-navigation']: this.type === 'navigation',
            ['tds-steps-rtl']: this.dir === 'rtl',
            [`tds-steps-bar`]: this.mode === 'bar',
            [`tds-steps-sm`]: this.size === 'sm',
            [`tds-steps-md`]: this.size === 'md',
            // [`tds-steps-xl`]: this.size === 'xl',
            [`tds-steps-lg`]: this.size === 'lg',
        };
    }
}
TDSStepsComponent.ɵfac = function TDSStepsComponent_Factory(t) { return new (t || TDSStepsComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.Directionality, 8), i0.ɵɵdirectiveInject(i0.ElementRef)); };
TDSStepsComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSStepsComponent, selectors: [["tds-steps"]], contentQueries: function TDSStepsComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        i0.ɵɵcontentQuery(dirIndex, TDSStepComponent, 4);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.steps = _t);
    } }, hostVars: 2, hostBindings: function TDSStepsComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵclassMap(ctx.classMap);
    } }, inputs: { mode: "mode", current: "current", direction: "direction", labelPlacement: "labelPlacement", type: "type", size: "size", startIndex: "startIndex", status: "status", showStep: "showStep", borderStyle: "borderStyle", tdsClss: "tdsClss", progressDot: "progressDot" }, outputs: { indexChange: "indexChange" }, exportAs: ["tdsSteps"], features: [i0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function TDSStepsComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSStepsComponent, [{
        type: Component,
        args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                preserveWhitespaces: false,
                selector: 'tds-steps',
                exportAs: 'tdsSteps',
                template: `
    <ng-content></ng-content>
  `,
                host: {
                    '[class]': "classMap",
                }
            }]
    }], function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.Directionality, decorators: [{
                type: Optional
            }] }, { type: i0.ElementRef }]; }, { steps: [{
            type: ContentChildren,
            args: [TDSStepComponent]
        }], mode: [{
            type: Input
        }], current: [{
            type: Input
        }], direction: [{
            type: Input
        }], labelPlacement: [{
            type: Input
        }], type: [{
            type: Input
        }], size: [{
            type: Input
        }], startIndex: [{
            type: Input
        }], status: [{
            type: Input
        }], showStep: [{
            type: Input
        }], borderStyle: [{
            type: Input
        }], tdsClss: [{
            type: Input
        }], progressDot: [{
            type: Input
        }], indexChange: [{
            type: Output
        }] }); })();
//# sourceMappingURL=data:application/json;base64,