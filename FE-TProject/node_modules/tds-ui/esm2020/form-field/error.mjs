/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { Attribute, ChangeDetectionStrategy, Component, InjectionToken, Input, ViewEncapsulation } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
const _c0 = ["*"];
let nextUniqueId = 0;
/**
 * Injection token that can be used to reference instances of `TDSError`. It serves as
 * alternative token to the actual `TDSError` class which could cause unnecessary
 * retention of the class and its directive metadata.
 */
export const TDS_ERROR = new InjectionToken('TDSError');
/** Single error message to be shown underneath the form field. */
export class TDSError {
    constructor(ariaLive, elementRef) {
        this.id = `tds-error-${nextUniqueId++}`;
        this.icon = 'tdsi-warning-2-fill text-base leading-4';
        if (!ariaLive) {
            elementRef.nativeElement.setAttribute('aria-live', 'polite');
        }
    }
}
TDSError.ɵfac = function TDSError_Factory(t) { return new (t || TDSError)(i0.ɵɵinjectAttribute('aria-live'), i0.ɵɵdirectiveInject(i0.ElementRef)); };
TDSError.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSError, selectors: [["tds-error"]], hostAttrs: ["aria-atomic", "true", 1, "tds-error", "text-xs", "leading-4", "font-normal", "text-error-500", "dark:text-d-error-500", "mt-1", "inline-flex", "items-center"], hostVars: 1, hostBindings: function TDSError_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵattribute("id", ctx.id);
    } }, inputs: { id: "id", icon: "icon" }, features: [i0.ɵɵProvidersFeature([{ provide: TDS_ERROR, useExisting: TDSError }])], ngContentSelectors: _c0, decls: 2, vars: 1, consts: [[1, "mr-2", 3, "ngClass"]], template: function TDSError_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵelement(0, "i", 0);
        i0.ɵɵprojection(1);
    } if (rf & 2) {
        i0.ɵɵproperty("ngClass", ctx.icon);
    } }, directives: [i1.NgClass], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSError, [{
        type: Component,
        args: [{
                selector: 'tds-error',
                template: `
    <i class='mr-2' [ngClass]="icon"> 
    </i>
    <ng-content></ng-content>
  `,
                host: {
                    'class': 'tds-error text-xs leading-4 font-normal text-error-500  dark:text-d-error-500 mt-1 inline-flex items-center',
                    '[attr.id]': 'id',
                    'aria-atomic': 'true',
                },
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [{ provide: TDS_ERROR, useExisting: TDSError }],
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Attribute,
                args: ['aria-live']
            }] }, { type: i0.ElementRef }]; }, { id: [{
            type: Input
        }], icon: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy90ZHMtdWkvZm9ybS1maWVsZC9lcnJvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFFSCxPQUFPLEVBQUMsU0FBUyxFQUFFLHVCQUF1QixFQUFFLFNBQVMsRUFBeUIsY0FBYyxFQUFFLEtBQUssRUFBRSxpQkFBaUIsRUFBQyxNQUFNLGVBQWUsQ0FBQzs7OztBQUU3SSxJQUFJLFlBQVksR0FBRyxDQUFDLENBQUM7QUFFckI7Ozs7R0FJRztBQUNILE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRyxJQUFJLGNBQWMsQ0FBVyxVQUFVLENBQUMsQ0FBQztBQUVsRSxrRUFBa0U7QUFpQmxFLE1BQU0sT0FBTyxRQUFRO0lBR25CLFlBQW9DLFFBQWdCLEVBQUUsVUFBc0I7UUFGbkUsT0FBRSxHQUFXLGFBQWEsWUFBWSxFQUFFLEVBQUUsQ0FBQztRQUMzQyxTQUFJLEdBQVUseUNBQXlDLENBQUM7UUFFL0QsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNiLFVBQVUsQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxRQUFRLENBQUMsQ0FBQztTQUM5RDtJQUNILENBQUM7O2dFQVBVLFFBQVEsdUJBR0ksV0FBVzsyREFIdkIsUUFBUTs7OEVBRlIsQ0FBQyxFQUFDLE9BQU8sRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLFFBQVEsRUFBQyxDQUFDOztRQVh0RCx1QkFDSTtRQUNKLGtCQUF5Qjs7UUFGVCxrQ0FBZ0I7O3VGQWF2QixRQUFRO2NBaEJwQixTQUFTO2VBQUM7Z0JBQ1QsUUFBUSxFQUFFLFdBQVc7Z0JBQ3JCLFFBQVEsRUFBQzs7OztHQUlSO2dCQUNELElBQUksRUFBRTtvQkFDSixPQUFPLEVBQUUsNkdBQTZHO29CQUN0SCxXQUFXLEVBQUUsSUFBSTtvQkFDakIsYUFBYSxFQUFFLE1BQU07aUJBQ3RCO2dCQUNELGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO2dCQUNyQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtnQkFDL0MsU0FBUyxFQUFFLENBQUMsRUFBQyxPQUFPLEVBQUUsU0FBUyxFQUFFLFdBQVcsVUFBVSxFQUFDLENBQUM7YUFDekQ7O3NCQUljLFNBQVM7dUJBQUMsV0FBVztpREFGekIsRUFBRTtrQkFBVixLQUFLO1lBQ0csSUFBSTtrQkFBWixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXHJcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcclxuICovXHJcblxyXG5pbXBvcnQge0F0dHJpYnV0ZSwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbmplY3Rpb25Ub2tlbiwgSW5wdXQsIFZpZXdFbmNhcHN1bGF0aW9ufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmxldCBuZXh0VW5pcXVlSWQgPSAwO1xyXG5cclxuLyoqXHJcbiAqIEluamVjdGlvbiB0b2tlbiB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlZmVyZW5jZSBpbnN0YW5jZXMgb2YgYFREU0Vycm9yYC4gSXQgc2VydmVzIGFzXHJcbiAqIGFsdGVybmF0aXZlIHRva2VuIHRvIHRoZSBhY3R1YWwgYFREU0Vycm9yYCBjbGFzcyB3aGljaCBjb3VsZCBjYXVzZSB1bm5lY2Vzc2FyeVxyXG4gKiByZXRlbnRpb24gb2YgdGhlIGNsYXNzIGFuZCBpdHMgZGlyZWN0aXZlIG1ldGFkYXRhLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IFREU19FUlJPUiA9IG5ldyBJbmplY3Rpb25Ub2tlbjxURFNFcnJvcj4oJ1REU0Vycm9yJyk7XHJcblxyXG4vKiogU2luZ2xlIGVycm9yIG1lc3NhZ2UgdG8gYmUgc2hvd24gdW5kZXJuZWF0aCB0aGUgZm9ybSBmaWVsZC4gKi9cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICd0ZHMtZXJyb3InLFxyXG4gIHRlbXBsYXRlOmBcclxuICAgIDxpIGNsYXNzPSdtci0yJyBbbmdDbGFzc109XCJpY29uXCI+IFxyXG4gICAgPC9pPlxyXG4gICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxyXG4gIGAsXHJcbiAgaG9zdDoge1xyXG4gICAgJ2NsYXNzJzogJ3Rkcy1lcnJvciB0ZXh0LXhzIGxlYWRpbmctNCBmb250LW5vcm1hbCB0ZXh0LWVycm9yLTUwMCAgZGFyazp0ZXh0LWQtZXJyb3ItNTAwIG10LTEgaW5saW5lLWZsZXggaXRlbXMtY2VudGVyJyxcclxuICAgICdbYXR0ci5pZF0nOiAnaWQnLFxyXG4gICAgJ2FyaWEtYXRvbWljJzogJ3RydWUnLFxyXG4gIH0sXHJcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcclxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcclxuICBwcm92aWRlcnM6IFt7cHJvdmlkZTogVERTX0VSUk9SLCB1c2VFeGlzdGluZzogVERTRXJyb3J9XSxcclxufSlcclxuZXhwb3J0IGNsYXNzIFREU0Vycm9yIHtcclxuICBASW5wdXQoKSBpZDogc3RyaW5nID0gYHRkcy1lcnJvci0ke25leHRVbmlxdWVJZCsrfWA7XHJcbiAgQElucHV0KCkgaWNvbjpzdHJpbmcgPSAndGRzaS13YXJuaW5nLTItZmlsbCB0ZXh0LWJhc2UgbGVhZGluZy00JztcclxuICBjb25zdHJ1Y3RvcihAQXR0cmlidXRlKCdhcmlhLWxpdmUnKSBhcmlhTGl2ZTogc3RyaW5nLCBlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7XHJcbiAgICBpZiAoIWFyaWFMaXZlKSB7XHJcbiAgICAgIGVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGl2ZScsICdwb2xpdGUnKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19