/** Mixin to augment a directive with a `color` property. */
export function mixinInputColor(base, defaultColor) {
    return class extends base {
        constructor(...args) {
            super(...args);
            this.defaultColor = defaultColor;
            this._clsByColor = "";
            this._clsFocusByColor = "";
            // Set the default color that can be specified from the mixin.            
            this.color = defaultColor;
        }
        get color() { return this._color; }
        set color(value) {
            const colorPalette = value || this.defaultColor;
            if (colorPalette !== this._color) {
                // this._elementRef.nativeElement
                this._color = colorPalette;
                this.p_updateClass(this._color);
            }
        }
        get clsByColor() {
            return this._clsByColor;
        }
        set clsByColor(val) {
            this._clsByColor = val;
        }
        get clsFocusByColor() {
            return this._clsFocusByColor;
        }
        set clsFocusByColor(val) {
            this._clsFocusByColor = val;
        }
        p_updateClass(color) {
            switch (color) {
                case "dark":
                    this.clsByColor = 'border-transparent',
                        this.clsFocusByColor = 'outline-none ring-opacity-20 ring  ring-primary-1 dark:ring-d-primary-1 border-primary-1 dark:border-d-primary-1';
                    break;
                case "success":
                    this.clsByColor = `border-success-400 dark:border-d-success-400`,
                        this.clsFocusByColor = `outline-none ring-opacity-20 ring ring-success-400 dark:ring-d-success-400 border-success-400 dark:border-d-success-400`;
                    break;
                case "error":
                    this.clsByColor = `border-error-400 dark:border-d-error-400`,
                        this.clsFocusByColor = `outline-none ring-opacity-20 ring ring-error-400 dark:ring-d-error-400 border-error-400 dark:border-d-error-400`;
                    break;
                case "warning":
                    this.clsByColor = `border-warning-400 dark:border-d-warning-400`,
                        this.clsFocusByColor = `outline-none ring-opacity-20 ring ring-warning-400 dark:ring-d-warning-400 border-warning-400 dark:border-d-warning-400`;
                    break;
                default:
                    this.clsByColor = 'border-neutral-2-200',
                        this.clsFocusByColor = 'outline-none ring-opacity-20 ring  ring-primary-1 dark:ring-d-primary-1 border-primary-1 dark:border-d-primary-1';
                    break;
            }
            // if (color == "default") {
            //     this.clsByColor = 'border-neutral-2-200',
            //         this.clsFocusByColor = 'outline-none ring-opacity-20 ring  ring-primary-1 dark:ring-d-primary-1 border-primary-1 dark:border-d-primary-1';
            // }
            // else if (color == 'dark') {
            //     this.clsByColor = 'border-transparent',
            //         this.clsFocusByColor = 'outline-none ring-opacity-20 ring  ring-primary-1 dark:ring-d-primary-1 border-primary-1 dark:border-d-primary-1';
            // }
            // else {
            //     this.clsByColor = `border-${color}-400`,
            //         this.clsFocusByColor = `outline-none ring-opacity-20 ring ring-${color}-400 border-${color}-400`;
            // }
        }
    };
}
//# sourceMappingURL=data:application/json;base64,