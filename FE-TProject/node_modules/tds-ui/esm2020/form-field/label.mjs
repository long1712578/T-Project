import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, Input, ViewEncapsulation } from '@angular/core';
import { InputBoolean } from 'tds-ui/shared/utility';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
function TDSLabel_span_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 2);
    i0.ɵɵtext(1, "*");
    i0.ɵɵelementEnd();
} }
const _c0 = ["*"];
// /** The floating label for a `tds-form-field`. */
// @Directive({
//   selector: 'tds-label',
//   host:{
//     class:"text-body-2 font-semibold text-neutral-1-900  block dark:text-d-neutral-1-900 "
//   }
// })
// export class TDSLabel {}
export class TDSLabel {
    constructor(cdr) {
        this.cdr = cdr;
        this.tdsRequired = false;
    }
    ngOnChanges(changes) {
        const { tdsFor, tdsRequired } = changes;
        if (tdsFor || tdsRequired) {
            this.cdr.markForCheck();
        }
    }
    updateRequired(required) {
        this.tdsRequired = required;
        this.cdr.detectChanges();
    }
}
TDSLabel.ɵfac = function TDSLabel_Factory(t) { return new (t || TDSLabel)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
TDSLabel.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSLabel, selectors: [["tds-label"]], inputs: { tdsFor: "tdsFor", tdsRequired: "tdsRequired" }, exportAs: ["tdsLabel"], features: [i0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0, decls: 3, vars: 2, consts: [[1, "text-body-2", "font-semibold", "text-neutral-1-900", "block", "dark:text-d-neutral-1-900"], ["class", "ml-1 text-error-500 dark:text-d-error-500 text-body-2 font-semibold", 4, "ngIf"], [1, "ml-1", "text-error-500", "dark:text-d-error-500", "text-body-2", "font-semibold"]], template: function TDSLabel_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵelementStart(0, "label", 0);
        i0.ɵɵprojection(1);
        i0.ɵɵtemplate(2, TDSLabel_span_2_Template, 2, 0, "span", 1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵattribute("for", ctx.tdsFor);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.tdsRequired);
    } }, directives: [i1.NgIf], encapsulation: 2, changeDetection: 0 });
__decorate([
    InputBoolean()
], TDSLabel.prototype, "tdsRequired", void 0);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSLabel, [{
        type: Component,
        args: [{
                selector: 'tds-label',
                exportAs: 'tdsLabel',
                preserveWhitespaces: false,
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: `
    <label [attr.for]="tdsFor" class="text-body-2 font-semibold text-neutral-1-900  block dark:text-d-neutral-1-900">
      <ng-content></ng-content>
      <span class="ml-1 text-error-500 dark:text-d-error-500 text-body-2 font-semibold"
                *ngIf="tdsRequired">*</span>
    </label>
  `
            }]
    }], function () { return [{ type: i0.ChangeDetectorRef }]; }, { tdsFor: [{
            type: Input
        }], tdsRequired: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFiZWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy90ZHMtdWkvZm9ybS1maWVsZC9sYWJlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBRUEsT0FBTyxFQUFFLHVCQUF1QixFQUFxQixTQUFTLEVBQWEsS0FBSyxFQUE0QixpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNySixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7Ozs7SUFxQi9DLCtCQUM4QjtJQUFBLGlCQUFDO0lBQUEsaUJBQU87OztBQW5CNUMsb0RBQW9EO0FBQ3BELGVBQWU7QUFDZiwyQkFBMkI7QUFDM0IsV0FBVztBQUNYLDZGQUE2RjtBQUM3RixNQUFNO0FBQ04sS0FBSztBQUNMLDJCQUEyQjtBQWdCM0IsTUFBTSxPQUFPLFFBQVE7SUFLbkIsWUFDVSxHQUFzQjtRQUF0QixRQUFHLEdBQUgsR0FBRyxDQUFtQjtRQUZQLGdCQUFXLEdBQUcsS0FBSyxDQUFDO0lBSzdDLENBQUM7SUFDRCxXQUFXLENBQUMsT0FBc0I7UUFDaEMsTUFBTSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsR0FBRyxPQUFPLENBQUM7UUFDeEMsSUFBSSxNQUFNLElBQUksV0FBVyxFQUFFO1lBQ3pCLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLENBQUM7U0FDekI7SUFDSCxDQUFDO0lBQ0QsY0FBYyxDQUFDLFFBQWdCO1FBRTdCLElBQUksQ0FBQyxXQUFXLEdBQUcsUUFBUSxDQUFDO1FBQzVCLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDM0IsQ0FBQzs7Z0VBcEJVLFFBQVE7MkRBQVIsUUFBUTs7UUFQakIsZ0NBQWlIO1FBQy9HLGtCQUF5QjtRQUN6QiwyREFDc0M7UUFDeEMsaUJBQVE7O1FBSkQsaUNBQW1CO1FBR2IsZUFBaUI7UUFBakIsc0NBQWlCOztBQVFQO0lBQWYsWUFBWSxFQUFFOzZDQUFxQjt1RkFKbEMsUUFBUTtjQWRwQixTQUFTO2VBQUM7Z0JBQ1QsUUFBUSxFQUFFLFdBQVc7Z0JBQ3JCLFFBQVEsRUFBRSxVQUFVO2dCQUNwQixtQkFBbUIsRUFBRSxLQUFLO2dCQUMxQixhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTtnQkFDckMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07Z0JBQy9DLFFBQVEsRUFBRTs7Ozs7O0dBTVQ7YUFDRjtvRUFJVSxNQUFNO2tCQUFkLEtBQUs7WUFDbUIsV0FBVztrQkFBbkMsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJvb2xlYW5JbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9jb2VyY2lvbic7XHJcbmltcG9ydCB7IEkgfSBmcm9tICdAYW5ndWxhci9jZGsva2V5Y29kZXMnO1xyXG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ2hhbmdlRGV0ZWN0b3JSZWYsIENvbXBvbmVudCwgRGlyZWN0aXZlLCBJbnB1dCwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzLCBWaWV3RW5jYXBzdWxhdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBJbnB1dEJvb2xlYW4gfSBmcm9tICd0ZHMtdWkvc2hhcmVkL3V0aWxpdHknO1xyXG5cclxuXHJcbi8vIC8qKiBUaGUgZmxvYXRpbmcgbGFiZWwgZm9yIGEgYHRkcy1mb3JtLWZpZWxkYC4gKi9cclxuLy8gQERpcmVjdGl2ZSh7XHJcbi8vICAgc2VsZWN0b3I6ICd0ZHMtbGFiZWwnLFxyXG4vLyAgIGhvc3Q6e1xyXG4vLyAgICAgY2xhc3M6XCJ0ZXh0LWJvZHktMiBmb250LXNlbWlib2xkIHRleHQtbmV1dHJhbC0xLTkwMCAgYmxvY2sgZGFyazp0ZXh0LWQtbmV1dHJhbC0xLTkwMCBcIlxyXG4vLyAgIH1cclxuLy8gfSlcclxuLy8gZXhwb3J0IGNsYXNzIFREU0xhYmVsIHt9XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ3Rkcy1sYWJlbCcsXHJcbiAgZXhwb3J0QXM6ICd0ZHNMYWJlbCcsXHJcbiAgcHJlc2VydmVXaGl0ZXNwYWNlczogZmFsc2UsXHJcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcclxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcclxuICB0ZW1wbGF0ZTogYFxyXG4gICAgPGxhYmVsIFthdHRyLmZvcl09XCJ0ZHNGb3JcIiBjbGFzcz1cInRleHQtYm9keS0yIGZvbnQtc2VtaWJvbGQgdGV4dC1uZXV0cmFsLTEtOTAwICBibG9jayBkYXJrOnRleHQtZC1uZXV0cmFsLTEtOTAwXCI+XHJcbiAgICAgIDxuZy1jb250ZW50PjwvbmctY29udGVudD5cclxuICAgICAgPHNwYW4gY2xhc3M9XCJtbC0xIHRleHQtZXJyb3ItNTAwIGRhcms6dGV4dC1kLWVycm9yLTUwMCB0ZXh0LWJvZHktMiBmb250LXNlbWlib2xkXCJcclxuICAgICAgICAgICAgICAgICpuZ0lmPVwidGRzUmVxdWlyZWRcIj4qPC9zcGFuPlxyXG4gICAgPC9sYWJlbD5cclxuICBgXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBURFNMYWJlbCBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XHJcbiAgc3RhdGljIG5nQWNjZXB0SW5wdXRUeXBlX3Rkc1JlcXVpcmVkOiBCb29sZWFuSW5wdXQ7XHJcblxyXG4gIEBJbnB1dCgpIHRkc0Zvcj86IHN0cmluZztcclxuICBASW5wdXQoKSBASW5wdXRCb29sZWFuKCkgdGRzUmVxdWlyZWQgPSBmYWxzZTtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZixcclxuICApIHtcclxuXHJcbiAgfVxyXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcclxuICAgIGNvbnN0IHsgdGRzRm9yLCB0ZHNSZXF1aXJlZCB9ID0gY2hhbmdlcztcclxuICAgIGlmICh0ZHNGb3IgfHwgdGRzUmVxdWlyZWQpIHtcclxuICAgICAgdGhpcy5jZHIubWFya0ZvckNoZWNrKCk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHVwZGF0ZVJlcXVpcmVkKHJlcXVpcmVkOmJvb2xlYW4pXHJcbiAge1xyXG4gICAgdGhpcy50ZHNSZXF1aXJlZCA9IHJlcXVpcmVkO1xyXG4gICAgdGhpcy5jZHIuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gIH1cclxufVxyXG4iXX0=