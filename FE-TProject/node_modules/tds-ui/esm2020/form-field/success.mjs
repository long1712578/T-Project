/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { Attribute, ChangeDetectionStrategy, Component, InjectionToken, Input, ViewEncapsulation } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
const _c0 = ["*"];
let nextUniqueId = 0;
/**
 * Injection token that can be used to reference instances of `TDSError`. It serves as
 * alternative token to the actual `TDSError` class which could cause unnecessary
 * retention of the class and its directive metadata.
 */
export const TA_SUCCESS = new InjectionToken('TDSSuccess');
/** Single success message to be shown underneath the form field. */
export class TDSSuccess {
    constructor(ariaLive, elementRef) {
        this.id = `tds-success-${nextUniqueId++}`;
        this.icon = 'tdsi-success-fill text-base leading-4';
        // If no aria-live value is set add 'polite' as a default. This is preferred over setting
        // role='alert' so that screen readers do not interrupt the current task to read this aloud.
        if (!ariaLive) {
            elementRef.nativeElement.setAttribute('aria-live', 'polite');
        }
    }
}
TDSSuccess.ɵfac = function TDSSuccess_Factory(t) { return new (t || TDSSuccess)(i0.ɵɵinjectAttribute('aria-live'), i0.ɵɵdirectiveInject(i0.ElementRef)); };
TDSSuccess.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSSuccess, selectors: [["tds-success"]], hostAttrs: ["aria-atomic", "true", 1, "tds-success", "text-success-400", "text-xs", "leading-4", "font-normal", "mt-1", "inline-flex", "items-center"], hostVars: 1, hostBindings: function TDSSuccess_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵattribute("id", ctx.id);
    } }, inputs: { id: "id", icon: "icon" }, features: [i0.ɵɵProvidersFeature([{ provide: TA_SUCCESS, useExisting: TDSSuccess }])], ngContentSelectors: _c0, decls: 2, vars: 1, consts: [[1, "mr-2", 3, "ngClass"]], template: function TDSSuccess_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵelement(0, "i", 0);
        i0.ɵɵprojection(1);
    } if (rf & 2) {
        i0.ɵɵproperty("ngClass", ctx.icon);
    } }, directives: [i1.NgClass], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSSuccess, [{
        type: Component,
        args: [{
                selector: 'tds-success',
                template: `
    <i class='mr-2' [ngClass]="icon"> 
    </i>
    <ng-content></ng-content>
  `,
                host: {
                    'class': 'tds-success text-success-400 text-xs leading-4 font-normal mt-1 inline-flex items-center',
                    '[attr.id]': 'id',
                    'aria-atomic': 'true',
                },
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [{ provide: TA_SUCCESS, useExisting: TDSSuccess }],
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Attribute,
                args: ['aria-live']
            }] }, { type: i0.ElementRef }]; }, { id: [{
            type: Input
        }], icon: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3VjY2Vzcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL3Rkcy11aS9mb3JtLWZpZWxkL3N1Y2Nlc3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBR0gsT0FBTyxFQUFDLFNBQVMsRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQWMsY0FBYyxFQUFFLEtBQUssRUFBRSxpQkFBaUIsRUFBQyxNQUFNLGVBQWUsQ0FBQzs7OztBQUVsSSxJQUFJLFlBQVksR0FBRyxDQUFDLENBQUM7QUFFckI7Ozs7R0FJRztBQUNILE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxJQUFJLGNBQWMsQ0FBYSxZQUFZLENBQUMsQ0FBQztBQUV2RSxvRUFBb0U7QUFpQnBFLE1BQU0sT0FBTyxVQUFVO0lBR3JCLFlBQW9DLFFBQWdCLEVBQUUsVUFBc0I7UUFGbkUsT0FBRSxHQUFXLGVBQWUsWUFBWSxFQUFFLEVBQUUsQ0FBQztRQUM3QyxTQUFJLEdBQVUsdUNBQXVDLENBQUM7UUFFN0QseUZBQXlGO1FBQ3pGLDRGQUE0RjtRQUM1RixJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2IsVUFBVSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1NBRTlEO0lBQ0gsQ0FBQzs7b0VBVlUsVUFBVSx1QkFHRSxXQUFXOzZEQUh2QixVQUFVOzs4RUFGVixDQUFDLEVBQUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsVUFBVSxFQUFDLENBQUM7O1FBWHpELHVCQUNJO1FBQ0osa0JBQXlCOztRQUZULGtDQUFnQjs7dUZBYXZCLFVBQVU7Y0FoQnRCLFNBQVM7ZUFBQztnQkFDVCxRQUFRLEVBQUUsYUFBYTtnQkFDdkIsUUFBUSxFQUFDOzs7O0dBSVI7Z0JBQ0QsSUFBSSxFQUFFO29CQUNKLE9BQU8sRUFBRSwwRkFBMEY7b0JBQ25HLFdBQVcsRUFBRSxJQUFJO29CQUNqQixhQUFhLEVBQUUsTUFBTTtpQkFDdEI7Z0JBQ0QsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7Z0JBQ3JDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2dCQUMvQyxTQUFTLEVBQUUsQ0FBQyxFQUFDLE9BQU8sRUFBRSxVQUFVLEVBQUUsV0FBVyxZQUFZLEVBQUMsQ0FBQzthQUM1RDs7c0JBSWMsU0FBUzt1QkFBQyxXQUFXO2lEQUZ6QixFQUFFO2tCQUFWLEtBQUs7WUFDRyxJQUFJO2tCQUFaLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuICpcclxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcclxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxyXG4gKi9cclxuXHJcblxyXG5pbXBvcnQge0F0dHJpYnV0ZSwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgRWxlbWVudFJlZiwgSW5qZWN0aW9uVG9rZW4sIElucHV0LCBWaWV3RW5jYXBzdWxhdGlvbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5sZXQgbmV4dFVuaXF1ZUlkID0gMDtcclxuXHJcbi8qKlxyXG4gKiBJbmplY3Rpb24gdG9rZW4gdGhhdCBjYW4gYmUgdXNlZCB0byByZWZlcmVuY2UgaW5zdGFuY2VzIG9mIGBURFNFcnJvcmAuIEl0IHNlcnZlcyBhc1xyXG4gKiBhbHRlcm5hdGl2ZSB0b2tlbiB0byB0aGUgYWN0dWFsIGBURFNFcnJvcmAgY2xhc3Mgd2hpY2ggY291bGQgY2F1c2UgdW5uZWNlc3NhcnlcclxuICogcmV0ZW50aW9uIG9mIHRoZSBjbGFzcyBhbmQgaXRzIGRpcmVjdGl2ZSBtZXRhZGF0YS5cclxuICovXHJcbmV4cG9ydCBjb25zdCBUQV9TVUNDRVNTID0gbmV3IEluamVjdGlvblRva2VuPFREU1N1Y2Nlc3M+KCdURFNTdWNjZXNzJyk7XHJcblxyXG4vKiogU2luZ2xlIHN1Y2Nlc3MgbWVzc2FnZSB0byBiZSBzaG93biB1bmRlcm5lYXRoIHRoZSBmb3JtIGZpZWxkLiAqL1xyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ3Rkcy1zdWNjZXNzJyxcclxuICB0ZW1wbGF0ZTpgXHJcbiAgICA8aSBjbGFzcz0nbXItMicgW25nQ2xhc3NdPVwiaWNvblwiPiBcclxuICAgIDwvaT5cclxuICAgIDxuZy1jb250ZW50PjwvbmctY29udGVudD5cclxuICBgLFxyXG4gIGhvc3Q6IHtcclxuICAgICdjbGFzcyc6ICd0ZHMtc3VjY2VzcyB0ZXh0LXN1Y2Nlc3MtNDAwIHRleHQteHMgbGVhZGluZy00IGZvbnQtbm9ybWFsIG10LTEgaW5saW5lLWZsZXggaXRlbXMtY2VudGVyJyxcclxuICAgICdbYXR0ci5pZF0nOiAnaWQnLFxyXG4gICAgJ2FyaWEtYXRvbWljJzogJ3RydWUnLFxyXG4gIH0sXHJcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcclxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcclxuICBwcm92aWRlcnM6IFt7cHJvdmlkZTogVEFfU1VDQ0VTUywgdXNlRXhpc3Rpbmc6IFREU1N1Y2Nlc3N9XSxcclxufSlcclxuZXhwb3J0IGNsYXNzIFREU1N1Y2Nlc3Mge1xyXG4gIEBJbnB1dCgpIGlkOiBzdHJpbmcgPSBgdGRzLXN1Y2Nlc3MtJHtuZXh0VW5pcXVlSWQrK31gO1xyXG4gIEBJbnB1dCgpIGljb246c3RyaW5nID0gJ3Rkc2ktc3VjY2Vzcy1maWxsIHRleHQtYmFzZSBsZWFkaW5nLTQnO1xyXG4gIGNvbnN0cnVjdG9yKEBBdHRyaWJ1dGUoJ2FyaWEtbGl2ZScpIGFyaWFMaXZlOiBzdHJpbmcsIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYpIHtcclxuICAgIC8vIElmIG5vIGFyaWEtbGl2ZSB2YWx1ZSBpcyBzZXQgYWRkICdwb2xpdGUnIGFzIGEgZGVmYXVsdC4gVGhpcyBpcyBwcmVmZXJyZWQgb3ZlciBzZXR0aW5nXHJcbiAgICAvLyByb2xlPSdhbGVydCcgc28gdGhhdCBzY3JlZW4gcmVhZGVycyBkbyBub3QgaW50ZXJydXB0IHRoZSBjdXJyZW50IHRhc2sgdG8gcmVhZCB0aGlzIGFsb3VkLlxyXG4gICAgaWYgKCFhcmlhTGl2ZSkge1xyXG4gICAgICBlbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWxpdmUnLCAncG9saXRlJyk7XHJcbiAgICAgIFxyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=