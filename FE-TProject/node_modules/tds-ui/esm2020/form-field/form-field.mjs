import { ContentChild, ContentChildren, InjectionToken, Input, ViewChild, ViewEncapsulation } from "@angular/core";
import { Component, ChangeDetectionStrategy } from "@angular/core";
import { merge, Subject } from "rxjs";
import { startWith, takeUntil } from "rxjs/operators";
import { TDSHelperArray } from "tds-ui/shared/utility";
import { TDS_ADDONLEFT, TA_ADDONRIGHT } from "./add-on";
import { TDS_ERROR } from "./error";
import { tdsFormFieldAnimations } from "./form-field-animations";
import { mixinInputColor } from "./form-field-color";
import { TDSFormFieldControl } from "./form-field-control";
import { TDSLabel } from "./label";
import { TDS_PREFIX } from "./prefix";
import { TDS_SUFFIX } from "./suffix";
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "./form-field-container";
const _c0 = ["connectionContainer"];
const _c1 = ["inputContainer"];
function TDSFormField_div_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 13);
    i0.ɵɵprojection(1, 5);
    i0.ɵɵelementEnd();
} }
const _c2 = function (a0, a1, a2) { return { "px-2": a0, "px-2.5": a1, "bg-neutral-3-50 adrk:bg-d-neutral-3-50 rounded-l": a2 }; };
function TDSFormField_div_8_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 14);
    i0.ɵɵprojection(1, 6);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction3(1, _c2, ctx_r2.size === "sm", ctx_r2.size !== "sm", ctx_r2._control.disabled));
} }
const _c3 = function (a0, a1, a2, a3, a4) { return { "px-1.5": a0, "px-2": a1, "px-1": a2, "group-hover:bg-neutral-3-50 group-hover:rounded-r cursor-pointer dark:group-hover:bg-d-neutral-3-200 dark:bg-d-neutral-3-50 bg-white ": a3, "bg-neutral-3-50 adrk:bg-d-neutral-3-50 rounded-r ": a4 }; };
function TDSFormField_div_12_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 15);
    i0.ɵɵprojection(1, 7);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext();
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction5(1, _c3, ctx_r4.size === "md", ctx_r4.size === "lg", ctx_r4.size === "sm", !ctx_r4._control.disabled, ctx_r4._control.disabled));
} }
function TDSFormField_div_14_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div");
    i0.ɵɵprojection(1, 8);
    i0.ɵɵelementEnd();
} }
const _c4 = [[["", "tdsAddOnLeft", ""]], "*", [["tds-warning"]], [["tds-success"]], [["", "tdsAddOnRight", ""]], [["tds-label"]], [["", "tdsPrefix", ""]], [["", "tdsSuffix", ""]], [["tds-error"]]];
const _c5 = function (a0) { return { "opacity-65": a0 }; };
const _c6 = function (a0) { return { "w-full": a0 }; };
const _c7 = ["[tdsAddOnLeft]", "*", "tds-warning", "tds-success", "[tdsAddOnRight]", "tds-label", "[tdsPrefix]", "[tdsSuffix]", "tds-error"];
let nextUniqueId = 0;
/**
 * Boilerplate for applying mixins to TDSFormField.
 * @docs-private
 */
class TAFormFieldBase {
    constructor(_elementRef) {
        this._elementRef = _elementRef;
    }
}
/**
* Base class to which we're applying the form field mixins.
* @docs-private
*/
const _TAFormFieldMixinBase = mixinInputColor(TAFormFieldBase, 'default');
export const TDS_FORM_FIELD = new InjectionToken('TDSFormField');
export class TDSFormField {
    constructor(_elementRef, _changeDetectorRef) {
        this._elementRef = _elementRef;
        this._changeDetectorRef = _changeDetectorRef;
        this._destroyed = new Subject();
        this._color = "default";
        this._size = "md";
        this._tdsClass = 'dark:bg-d-neutral-3-50 border bg-white ';
        this._tdsClassDefault = 'dark:border-d-neutral-2-200 border-neutral-2-200';
        this.clsContainer = '';
        this.tdsClass = '';
        this._labelId = `tds-form-field-label-${nextUniqueId++}`;
    }
    get color() {
        return this._color;
    }
    set color(val) {
        this._color = val;
    }
    // @Input()
    get size() {
        return (this._control && this._control.size) ? this._control.size : this._size;
    }
    get _control() {
        // TODO(crisbeto): we need this workaround in order to support both Ivy and ViewEngine.
        //  We should clean this up once Ivy is the default renderer.
        return this._explicitFormFieldControl || this._controlNonStatic || this._controlStatic;
    }
    set _control(value) {
        this._explicitFormFieldControl = value;
    }
    /**
  * Gets an ElementRef for the element that a overlay attached to the form-field should be
  * positioned relative to.
  */
    getConnectedOverlayOrigin() {
        return this._connectionContainerRef || this._elementRef;
    }
    ngAfterContentInit() {
        this._validateControlChild();
        const control = this._control;
        if (control.controlType) {
            this._elementRef.nativeElement.classList.add(`tds-form-field-type-${control.controlType}`);
        }
        // Subscribe to changes in the child control state in order to update the form field UI.
        control.stateChanges.pipe(startWith(null)).subscribe(() => {
            this.updateCssContainer();
            this._syncDescribedByIds();
            this._changeDetectorRef.markForCheck();
        });
        // Run change detection if the value changes.
        if (control.ngControl && control.ngControl.valueChanges) {
            control.ngControl.valueChanges
                .pipe(takeUntil(this._destroyed))
                .subscribe(() => {
                this.updateCssContainer();
                this._changeDetectorRef.markForCheck();
            });
        }
        // Run change detection and update the outline if the suffix or prefix changes.
        merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(() => {
            this._changeDetectorRef.markForCheck();
        });
        // Update the aria-described by when the number of errors changes.
        this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {
            this._syncDescribedByIds();
            this.updateCssContainer();
            this._changeDetectorRef.markForCheck();
        });
    }
    ngAfterContentChecked() {
        this._validateControlChild();
    }
    ngAfterViewInit() {
        if (TDSHelperArray.hasListValue(this._labelChildChildren) && this.hasRequired)
            this._labelChildChildren.forEach(el => {
                el.updateRequired(this.hasRequired);
            });
        this._changeDetectorRef.detectChanges();
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
    }
    /**
      * Gets the id of the label element. If no label is present, returns `null`.
      */
    getLabelId() {
        return this._hasLabel() ? this._labelId : null;
    }
    /** Determines whether a class from the NgControl should be forwarded to the host element. */
    _shouldForward(prop) {
        const ngControl = this._control ? this._control.ngControl : null;
        return ngControl && ngControl[prop];
    }
    _hasPlaceholder() {
        return !!(this._control && this._control.placeholder);
    }
    _hasLabel() {
        return !!(this._labelChildNonStatic || this._labelChildStatic);
    }
    /** Determines whether to display hints or errors. */
    _getDisplayedMessages() {
        return (this._control.errorState) ? 'error' : this.color;
    }
    _hasAddOnRightChildren() {
        return this._addOnRightChildren && this._addOnRightChildren.length > 0;
    }
    _hasAddOnLeftChildren() {
        return this._addOnLeftChildren && this._addOnLeftChildren.length > 0;
    }
    _hasSuffixChildren() {
        return this._suffixChildren && this._suffixChildren.length > 0;
    }
    _hasPrefixChildren() {
        return this._prefixChildren && this._prefixChildren.length > 0;
    }
    get hasRequired() {
        return (this._control.required || this.hasRequiredValidator(this._control.ngControl?.control)) && !this._control.disabled;
    }
    hasRequiredValidator(control) {
        if (control?.validator) {
            const validator = control?.validator({});
            if (validator && validator.required) {
                return true;
            }
        }
        return false;
    }
    /**
     * Sets the list of element IDs that describe the child control. This allows the control to update
     * its `aria-describedby` attribute accordingly.
     */
    _syncDescribedByIds() {
        if (this._control) {
            let ids = [];
            // TODO(wagnermaciel): Remove the type check when we find the root cause of this bug.
            if (this._control.userAriaDescribedBy &&
                typeof this._control.userAriaDescribedBy === 'string') {
                ids.push(...this._control.userAriaDescribedBy.split(' '));
            }
            if (this._errorChildren) {
                ids.push(...this._errorChildren.map(error => error.id));
            }
            this._control.setDescribedByIds(ids);
        }
    }
    /** Throws an error if the form field's control is missing. */
    _validateControlChild() {
        if (!this._control) {
            throw 'tds-form-field must contain a TDSFormFieldControl.';
        }
    }
    updateCssContainer() {
        // console.log('updateCssContainer');
        let cls = this._tdsClass;
        if (this._control.disabled) {
            cls = 'dark:bg-d-neutral-3-50 border bg-neutral-3-50 cursor-not-allowed';
        }
        else if (this._control.focused) {
            cls += ` ${this.p_ClassFocus()}`;
        }
        else if (this._control.errorState) {
            cls += ` outline-none ring-opacity-20 dark:ring-opacity-20 ring ring-error-400 dark:ring-d-error-400 border-error-400`;
        }
        else {
            if (this.color == "default" || this.color == 'dark')
                cls += ` ${this._tdsClassDefault} `;
            else {
                cls += this.p_getClassBorderByColor(this.color);
            }
        }
        this.clsContainer = cls + ` ${this.p_GetBorderRadius()}` + ` ${this.tdsClass}`;
    }
    p_GetBorderRadius() {
        let rounded = 'rounded';
        if (this._addOnLeftChildren.length > 0) {
            rounded = "rounded-r";
        }
        else if (this._addOnRightChildren.length > 0) {
            rounded = 'rounded-l';
        }
        return rounded;
    }
    p_ClassFocus() {
        let result = '';
        if (this.color == "default" || this.color == 'dark') {
            result = 'outline-none ring-opacity-20 dark:ring-opacity-20 ring ring-primary-1 border-primary-1 dark:ring-d-primary-1 dark:border-d-primary-1';
        }
        else {
            result = this.p_getClassFocusByColor(this.color);
        }
        return result;
    }
    p_getClassBorderByColor(color) {
        let result = '';
        switch (color) {
            case "dark":
                result = `border-transparent`,
                    result = 'outline-none ring-opacity-20 dark:ring-opacity-20 ring  ring-primary-1 dark:ring-d-primary-1 border-primary-1 dark:border-d-primary-1';
                break;
            case "success":
                result = `border-success-400 dark:border-d-success-400`,
                    result = `outline-none ring-opacity-20 dark:ring-opacity-20 ring ring-success-400 dark:ring-d-success-400 border-success-400 dark:border-d-success-400`;
                break;
            case "error":
                result = `border-error-400 dark:border-d-error-400`,
                    result = `outline-none ring-opacity-20 dark:ring-opacity-20 ring ring-error-400 dark:ring-d-error-400 border-error-400 dark:border-d-error-400`;
                break;
            case "warning":
                result = `border-warning-400 dark:border-d-warning-400`,
                    result = `outline-none ring-opacity-20 dark:ring-opacity-20 ring ring-warning-400 dark:ring-d-warning-400 border-warning-400 dark:border-d-warning-400`;
                break;
            default:
                result = 'border-neutral-2-200 dark:border-d-neutral-2-200',
                    result = 'outline-none ring-opacity-20 dark:ring-opacity-20 ring  ring-primary-1 dark:ring-d-primary-1 border-primary-1 dark:border-d-primary-1';
                break;
        }
        return result;
    }
    p_getClassFocusByColor(color) {
        let result = '';
        switch (color) {
            case "dark":
                result = 'outline-none ring-opacity-20 dark:ring-opacity-20 ring  ring-primary-1 dark:ring-d-primary-1 border-primary-1 dark:border-d-primary-1';
                break;
            case "success":
                result = `outline-none ring-opacity-20 dark:ring-opacity-20 ring ring-success-400 dark:ring-d-success-400 border-success-400 dark:border-d-success-400`;
                break;
            case "error":
                result = `outline-none ring-opacity-20 dark:ring-opacity-20 ring ring-error-400 dark:ring-d-error-400 border-error-400 dark:border-d-error-400`;
                break;
            case "warning":
                result = `outline-none ring-opacity-20 dark:ring-opacity-20 ring ring-warning-400 dark:ring-d-warning-400 border-warning-400 dark:border-d-warning-400`;
                break;
            default:
                result = 'outline-none ring-opacity-20 dark:ring-opacity-20 ring  ring-primary-1 dark:ring-d-primary-1 border-primary-1 dark:border-d-primary-1';
                break;
        }
        return result;
    }
}
TDSFormField.ɵfac = function TDSFormField_Factory(t) { return new (t || TDSFormField)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
TDSFormField.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSFormField, selectors: [["tds-form-field"]], contentQueries: function TDSFormField_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        i0.ɵɵcontentQuery(dirIndex, TDSFormFieldControl, 5);
        i0.ɵɵcontentQuery(dirIndex, TDSFormFieldControl, 7);
        i0.ɵɵcontentQuery(dirIndex, TDSLabel, 5);
        i0.ɵɵcontentQuery(dirIndex, TDSLabel, 7);
        i0.ɵɵcontentQuery(dirIndex, TDSLabel, 4);
        i0.ɵɵcontentQuery(dirIndex, TDS_ERROR, 5);
        i0.ɵɵcontentQuery(dirIndex, TDS_PREFIX, 5);
        i0.ɵɵcontentQuery(dirIndex, TDS_SUFFIX, 5);
        i0.ɵɵcontentQuery(dirIndex, TDS_ADDONLEFT, 5);
        i0.ɵɵcontentQuery(dirIndex, TA_ADDONRIGHT, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._controlNonStatic = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._controlStatic = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._labelChildNonStatic = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._labelChildStatic = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._labelChildChildren = _t);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._errorChildren = _t);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._prefixChildren = _t);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._suffixChildren = _t);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._addOnLeftChildren = _t);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._addOnRightChildren = _t);
    } }, viewQuery: function TDSFormField_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 7);
        i0.ɵɵviewQuery(_c1, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._connectionContainerRef = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._inputContainerRef = _t.first);
    } }, hostAttrs: [1, "block", "relative", "text-left"], hostVars: 22, hostBindings: function TDSFormField_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵclassProp("tds-form-field-invalid", ctx._control.errorState)("tds-form-field-disabled", ctx._control.disabled)("tds-form-field-autofilled", ctx._control.autofilled)("ta-focused", ctx._control.focused)("ng-untouched", ctx._shouldForward("untouched"))("ng-touched", ctx._shouldForward("touched"))("ng-pristine", ctx._shouldForward("pristine"))("ng-dirty", ctx._shouldForward("dirty"))("ng-valid", ctx._shouldForward("valid"))("ng-invalid", ctx._shouldForward("invalid"))("ng-pending", ctx._shouldForward("pending"));
    } }, inputs: { tdsClass: "tdsClass", color: "color" }, exportAs: ["taFormField"], features: [i0.ɵɵProvidersFeature([
            { provide: TDS_FORM_FIELD, useExisting: TDSFormField },
        ])], ngContentSelectors: _c7, decls: 18, vars: 13, consts: [[1, "w-full"], [1, "flex", "flex-col", "w-full"], ["class", "flex w-full mb-2", 4, "ngIf"], [1, "flex", "w-full", 3, "ngClass", "click"], [1, "flex", "flex-auto", "flex-col", 3, "ngClass"], ["tds-form-field-container", "", 1, "flex", "items-end", "relative", "tds-form-field-control", "w-full", "max-w-full", "form-field-connection-container", 3, "tdsClass"], ["connectionContainer", ""], ["class", "tds-form-field-prefix text-xl leading-none self-center", 3, "ngClass", 4, "ngIf"], [1, "tds-form-field-infix", "flex-auto", "max-w-full", 3, "id"], ["inputContainer", ""], ["class", "tds-form-field-suffix h-full flex  items-center text-xl leading-none text-neutral-1-300 dark:text-d-neutral-1-900", 3, "ngClass", 4, "ngIf"], [1, "tds-form-field-subscript-wrapper", 3, "ngSwitch"], [4, "ngSwitchCase"], [1, "flex", "w-full", "mb-2"], [1, "tds-form-field-prefix", "text-xl", "leading-none", "self-center", 3, "ngClass"], [1, "tds-form-field-suffix", "h-full", "flex", "items-center", "text-xl", "leading-none", "text-neutral-1-300", "dark:text-d-neutral-1-900", 3, "ngClass"]], template: function TDSFormField_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef(_c4);
        i0.ɵɵelementStart(0, "div", 0)(1, "div", 1);
        i0.ɵɵtemplate(2, TDSFormField_div_2_Template, 2, 0, "div", 2);
        i0.ɵɵelementStart(3, "div", 3);
        i0.ɵɵlistener("click", function TDSFormField_Template_div_click_3_listener($event) { return ctx._control.onContainerClick && ctx._control.onContainerClick($event); });
        i0.ɵɵprojection(4, 0, ["[size]", "size"]);
        i0.ɵɵelementStart(5, "div", 4)(6, "div", 5, 6);
        i0.ɵɵtemplate(8, TDSFormField_div_8_Template, 2, 5, "div", 7);
        i0.ɵɵelementStart(9, "div", 8, 9);
        i0.ɵɵprojection(11, 1);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(12, TDSFormField_div_12_Template, 2, 7, "div", 10);
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(13, "div", 11);
        i0.ɵɵtemplate(14, TDSFormField_div_14_Template, 2, 0, "div", 12);
        i0.ɵɵprojection(15, 2);
        i0.ɵɵprojection(16, 3);
        i0.ɵɵelementEnd()();
        i0.ɵɵprojection(17, 4);
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx._labelChildChildren.length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(9, _c5, ctx._control.disabled));
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(11, _c6, !ctx._addOnRightChildren.length && !ctx._addOnLeftChildren.length));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("tdsClass", ctx.clsContainer);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx._prefixChildren.length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("id", ctx._labelId);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx._suffixChildren.length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngSwitch", ctx._getDisplayedMessages());
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngSwitchCase", "error");
    } }, directives: [i1.NgIf, i1.NgClass, i2.TDSFormFieldContainer, i1.NgSwitch, i1.NgSwitchCase], encapsulation: 2, data: { animation: [tdsFormFieldAnimations.transitionMessages] }, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSFormField, [{
        type: Component,
        args: [{ selector: 'tds-form-field', exportAs: 'taFormField', host: {
                    'class': 'block relative text-left',
                    '[class.tds-form-field-invalid]': '_control.errorState',
                    '[class.tds-form-field-disabled]': '_control.disabled',
                    '[class.tds-form-field-autofilled]': '_control.autofilled',
                    '[class.ta-focused]': '_control.focused',
                    '[class.ng-untouched]': '_shouldForward("untouched")',
                    '[class.ng-touched]': '_shouldForward("touched")',
                    '[class.ng-pristine]': '_shouldForward("pristine")',
                    '[class.ng-dirty]': '_shouldForward("dirty")',
                    '[class.ng-valid]': '_shouldForward("valid")',
                    '[class.ng-invalid]': '_shouldForward("invalid")',
                    '[class.ng-pending]': '_shouldForward("pending")',
                }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                    { provide: TDS_FORM_FIELD, useExisting: TDSFormField },
                ], animations: [tdsFormFieldAnimations.transitionMessages], template: "<div class=\"w-full\">\r\n    <div class=\"flex flex-col w-full\">\r\n        <div class=\"flex w-full mb-2\" *ngIf=\"_labelChildChildren.length\">\r\n            <ng-content select=\"tds-label\"></ng-content>\r\n        </div>\r\n        <div class=\"flex w-full\" [ngClass]=\"{'opacity-65':_control.disabled}\"\r\n            (click)=\"_control.onContainerClick && _control.onContainerClick($event)\">\r\n            <ng-content select=\"[tdsAddOnLeft]\" [size]=\"size\"></ng-content>\r\n            <div class=\"flex flex-auto flex-col\"\r\n                [ngClass]=\"{'w-full':!_addOnRightChildren.length && !_addOnLeftChildren.length}\">\r\n                <div #connectionContainer\r\n                    class=\"flex items-end relative tds-form-field-control w-full max-w-full form-field-connection-container\"\r\n                    tds-form-field-container [tdsClass]=\"clsContainer\">\r\n                    <div class=\"tds-form-field-prefix text-xl leading-none self-center\" *ngIf=\"_prefixChildren.length\"\r\n                        [ngClass]=\"{\r\n                            'px-2':size ==='sm',\r\n                            'px-2.5':size !=='sm',\r\n                            'bg-neutral-3-50 adrk:bg-d-neutral-3-50 rounded-l':_control.disabled\r\n                        }\">\r\n                        <ng-content select=\"[tdsPrefix]\"></ng-content>\r\n                    </div>\r\n                    <div class=\"tds-form-field-infix flex-auto max-w-full\" #inputContainer [id]=\"_labelId\">\r\n                        <ng-content></ng-content>\r\n                    </div>\r\n                    <div class=\"tds-form-field-suffix h-full flex  items-center text-xl leading-none text-neutral-1-300 dark:text-d-neutral-1-900\"\r\n                        *ngIf=\"_suffixChildren.length\" [ngClass]=\"{\r\n                            'px-1.5':size ==='md',\r\n                            'px-2':size ==='lg',\r\n                            'px-1':size ==='sm',\r\n                            'group-hover:bg-neutral-3-50 group-hover:rounded-r cursor-pointer dark:group-hover:bg-d-neutral-3-200 dark:bg-d-neutral-3-50 bg-white ':!_control.disabled,\r\n                            'bg-neutral-3-50 adrk:bg-d-neutral-3-50 rounded-r ':_control.disabled\r\n                        }\">\r\n                        <ng-content select=\"[tdsSuffix]\"></ng-content>\r\n                    </div>\r\n                </div>\r\n                <div class=\"tds-form-field-subscript-wrapper \" [ngSwitch]=\"_getDisplayedMessages()\">\r\n\r\n                    <div *ngSwitchCase=\"'error'\">\r\n                        <ng-content select=\"tds-error\"></ng-content>\r\n                    </div>\r\n                    <ng-content select=\"tds-warning\"></ng-content>\r\n                    <ng-content select=\"tds-success\"></ng-content>\r\n                </div>\r\n            </div>\r\n            <ng-content select=\"[tdsAddOnRight]\"></ng-content>\r\n\r\n        </div>\r\n\r\n    </div>\r\n\r\n</div>" }]
    }], function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, { tdsClass: [{
            type: Input
        }], color: [{
            type: Input
        }], _connectionContainerRef: [{
            type: ViewChild,
            args: ['connectionContainer', { static: true }]
        }], _inputContainerRef: [{
            type: ViewChild,
            args: ['inputContainer']
        }], _controlNonStatic: [{
            type: ContentChild,
            args: [TDSFormFieldControl]
        }], _controlStatic: [{
            type: ContentChild,
            args: [TDSFormFieldControl, { static: true }]
        }], _labelChildNonStatic: [{
            type: ContentChild,
            args: [TDSLabel]
        }], _labelChildStatic: [{
            type: ContentChild,
            args: [TDSLabel, { static: true }]
        }], _labelChildChildren: [{
            type: ContentChildren,
            args: [TDSLabel, { descendants: false }]
        }], _errorChildren: [{
            type: ContentChildren,
            args: [TDS_ERROR, { descendants: true }]
        }], _prefixChildren: [{
            type: ContentChildren,
            args: [TDS_PREFIX, { descendants: true }]
        }], _suffixChildren: [{
            type: ContentChildren,
            args: [TDS_SUFFIX, { descendants: true }]
        }], _addOnLeftChildren: [{
            type: ContentChildren,
            args: [TDS_ADDONLEFT, { descendants: true }]
        }], _addOnRightChildren: [{
            type: ContentChildren,
            args: [TA_ADDONRIGHT, { descendants: true }]
        }] }); })();
//# sourceMappingURL=data:application/json;base64,