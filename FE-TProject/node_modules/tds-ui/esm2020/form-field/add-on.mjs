/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { Directive, InjectionToken } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Injection token that can be used to reference instances of `TDSAddOnLeft`. It serves as
 * alternative token to the actual `TDSAddOnLeft` class which could cause unnecessary
 * retention of the class and its directive metadata.
 */
export const TDS_ADDONLEFT = new InjectionToken('TDSAddOnLeft');
export function mixinAddOnSize(base, defaultSize) {
    return class extends base {
        constructor(...args) {
            super(...args);
            this.defaultSize = defaultSize;
            // Set the default color that can be specified from the mixin.
            this.size = defaultSize;
        }
        get size() { return this._size; }
        set size(value) {
            const _size = value || this.defaultSize;
            if (_size !== this._size) {
                if (this._size) {
                    const lstClass = this.getClassbySize(this._size);
                    lstClass.forEach(cl => {
                        this._elementRef.nativeElement.classList.remove(cl);
                    });
                }
                if (_size) {
                    const lstClass = this.getClassbySize(_size);
                    lstClass.forEach(cl => {
                        this._elementRef.nativeElement.classList.add(cl);
                    });
                }
                this._size = defaultSize;
            }
        }
        getClassbySize(size) {
            let result = [];
            switch (size) {
                case "sm":
                    result = ['p-1'];
                    break;
                case "md":
                    result = ['p-1.5',];
                    break;
                case "lg":
                    result = ['p-2',];
                    break;
            }
            return result;
        }
    };
}
class TDSAddOnBase {
    constructor(_elementRef) {
        this._elementRef = _elementRef;
    }
}
const _TDSAddOnMixinBase = mixinAddOnSize(TDSAddOnBase, 'md');
/** AddOnLeft to be placed in front of the form field. */
export class TDSAddOnLeft extends _TDSAddOnMixinBase {
    constructor(elementRef) {
        super(elementRef);
    }
}
TDSAddOnLeft.ɵfac = function TDSAddOnLeft_Factory(t) { return new (t || TDSAddOnLeft)(i0.ɵɵdirectiveInject(i0.ElementRef)); };
TDSAddOnLeft.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: TDSAddOnLeft, selectors: [["", "tdsAddOnLeft", ""]], hostAttrs: [1, "h-full", "border-neutral-2-200", "dark:border-d-neutral-2-200", "border", "rounded-l", "border-r-0", "flex"], inputs: { size: "size" }, features: [i0.ɵɵProvidersFeature([{ provide: TDS_ADDONLEFT, useExisting: TDSAddOnLeft }]), i0.ɵɵInheritDefinitionFeature] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSAddOnLeft, [{
        type: Directive,
        args: [{
                selector: '[tdsAddOnLeft]',
                providers: [{ provide: TDS_ADDONLEFT, useExisting: TDSAddOnLeft }],
                host: {
                    class: "h-full border-neutral-2-200 dark:border-d-neutral-2-200 border rounded-l border-r-0 flex",
                },
                inputs: ['size']
            }]
    }], function () { return [{ type: i0.ElementRef }]; }, null); })();
export const TA_ADDONRIGHT = new InjectionToken('TDSAddOnRight');
/** AddOnLeft to be placed in front of the form field. */
export class TDSAddOnRight extends _TDSAddOnMixinBase {
    constructor(elementRef) {
        super(elementRef);
    }
}
TDSAddOnRight.ɵfac = function TDSAddOnRight_Factory(t) { return new (t || TDSAddOnRight)(i0.ɵɵdirectiveInject(i0.ElementRef)); };
TDSAddOnRight.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: TDSAddOnRight, selectors: [["", "tdsAddOnRight", ""]], hostAttrs: [1, "h-full", "border-neutral-2-200", "dark:border-d-neutral-2-200", "border", "rounded-r", "border-l-0", "flex"], inputs: { size: "size" }, features: [i0.ɵɵProvidersFeature([{ provide: TA_ADDONRIGHT, useExisting: TDSAddOnRight }]), i0.ɵɵInheritDefinitionFeature] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSAddOnRight, [{
        type: Directive,
        args: [{
                selector: '[tdsAddOnRight]',
                providers: [{ provide: TA_ADDONRIGHT, useExisting: TDSAddOnRight }],
                host: {
                    class: "h-full border-neutral-2-200 dark:border-d-neutral-2-200 border rounded-r border-l-0 flex"
                },
                inputs: ['size']
            }]
    }], function () { return [{ type: i0.ElementRef }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,