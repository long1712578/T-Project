/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { Attribute, ChangeDetectionStrategy, Component, InjectionToken, Input, ViewEncapsulation } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
const _c0 = ["*"];
let nextUniqueId = 0;
/**
 * Injection token that can be used to reference instances of `TDSError`. It serves as
 * alternative token to the actual `TDSError` class which could cause unnecessary
 * retention of the class and its directive metadata.
 */
export const TDS_WARNING = new InjectionToken('TDSWarning');
/** Single success message to be shown underneath the form field. */
export class TDSWarning {
    constructor(ariaLive, elementRef) {
        this.id = `tds-warning-${nextUniqueId++}`;
        this.icon = 'tdsi-warning-fill text-base leading-4';
        // If no aria-live value is set add 'polite' as a default. This is preferred over setting
        // role='alert' so that screen readers do not interrupt the current task to read this aloud.
        if (!ariaLive) {
            elementRef.nativeElement.setAttribute('aria-live', 'polite');
        }
    }
}
TDSWarning.ɵfac = function TDSWarning_Factory(t) { return new (t || TDSWarning)(i0.ɵɵinjectAttribute('aria-live'), i0.ɵɵdirectiveInject(i0.ElementRef)); };
TDSWarning.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSWarning, selectors: [["tds-warning"]], hostAttrs: ["aria-atomic", "true", 1, "tds-warning", "text-warning-500", "text-xs", "leading-4", "font-normal", "mt-1", "inline-flex", "items-center"], hostVars: 1, hostBindings: function TDSWarning_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵattribute("id", ctx.id);
    } }, inputs: { id: "id", icon: "icon" }, features: [i0.ɵɵProvidersFeature([{ provide: TDS_WARNING, useExisting: TDSWarning }])], ngContentSelectors: _c0, decls: 2, vars: 1, consts: [[1, "mr-2", 3, "ngClass"]], template: function TDSWarning_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵelement(0, "i", 0);
        i0.ɵɵprojection(1);
    } if (rf & 2) {
        i0.ɵɵproperty("ngClass", ctx.icon);
    } }, directives: [i1.NgClass], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSWarning, [{
        type: Component,
        args: [{
                selector: 'tds-warning',
                template: `
    <i class='mr-2' [ngClass]="icon"> 
    </i>
    <ng-content></ng-content>
  `,
                host: {
                    'class': 'tds-warning text-warning-500 text-xs leading-4 font-normal mt-1 inline-flex items-center',
                    '[attr.id]': 'id',
                    'aria-atomic': 'true',
                },
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [{ provide: TDS_WARNING, useExisting: TDSWarning }],
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Attribute,
                args: ['aria-live']
            }] }, { type: i0.ElementRef }]; }, { id: [{
            type: Input
        }], icon: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2FybmluZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL3Rkcy11aS9mb3JtLWZpZWxkL3dhcm5pbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBRUgsT0FBTyxFQUFDLFNBQVMsRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQXlCLGNBQWMsRUFBRSxLQUFLLEVBQUUsaUJBQWlCLEVBQUMsTUFBTSxlQUFlLENBQUM7Ozs7QUFFN0ksSUFBSSxZQUFZLEdBQUcsQ0FBQyxDQUFDO0FBRXJCOzs7O0dBSUc7QUFDSCxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsSUFBSSxjQUFjLENBQWEsWUFBWSxDQUFDLENBQUM7QUFFeEUsb0VBQW9FO0FBaUJwRSxNQUFNLE9BQU8sVUFBVTtJQUdyQixZQUFvQyxRQUFnQixFQUFFLFVBQXNCO1FBRm5FLE9BQUUsR0FBVyxlQUFlLFlBQVksRUFBRSxFQUFFLENBQUM7UUFDN0MsU0FBSSxHQUFVLHVDQUF1QyxDQUFDO1FBRTdELHlGQUF5RjtRQUN6Riw0RkFBNEY7UUFDNUYsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNiLFVBQVUsQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxRQUFRLENBQUMsQ0FBQztTQUM5RDtJQUNILENBQUM7O29FQVRVLFVBQVUsdUJBR0UsV0FBVzs2REFIdkIsVUFBVTs7OEVBRlYsQ0FBQyxFQUFDLE9BQU8sRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFBQyxDQUFDOztRQVgxRCx1QkFDSTtRQUNKLGtCQUF5Qjs7UUFGVCxrQ0FBZ0I7O3VGQWF2QixVQUFVO2NBaEJ0QixTQUFTO2VBQUM7Z0JBQ1QsUUFBUSxFQUFFLGFBQWE7Z0JBQ3ZCLFFBQVEsRUFBQzs7OztHQUlSO2dCQUNELElBQUksRUFBRTtvQkFDSixPQUFPLEVBQUUsMEZBQTBGO29CQUNuRyxXQUFXLEVBQUUsSUFBSTtvQkFDakIsYUFBYSxFQUFFLE1BQU07aUJBQ3RCO2dCQUNELGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO2dCQUNyQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtnQkFDL0MsU0FBUyxFQUFFLENBQUMsRUFBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsWUFBWSxFQUFDLENBQUM7YUFDN0Q7O3NCQUljLFNBQVM7dUJBQUMsV0FBVztpREFGekIsRUFBRTtrQkFBVixLQUFLO1lBQ0csSUFBSTtrQkFBWixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXHJcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcclxuICovXHJcblxyXG5pbXBvcnQge0F0dHJpYnV0ZSwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbmplY3Rpb25Ub2tlbiwgSW5wdXQsIFZpZXdFbmNhcHN1bGF0aW9ufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmxldCBuZXh0VW5pcXVlSWQgPSAwO1xyXG5cclxuLyoqXHJcbiAqIEluamVjdGlvbiB0b2tlbiB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlZmVyZW5jZSBpbnN0YW5jZXMgb2YgYFREU0Vycm9yYC4gSXQgc2VydmVzIGFzXHJcbiAqIGFsdGVybmF0aXZlIHRva2VuIHRvIHRoZSBhY3R1YWwgYFREU0Vycm9yYCBjbGFzcyB3aGljaCBjb3VsZCBjYXVzZSB1bm5lY2Vzc2FyeVxyXG4gKiByZXRlbnRpb24gb2YgdGhlIGNsYXNzIGFuZCBpdHMgZGlyZWN0aXZlIG1ldGFkYXRhLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IFREU19XQVJOSU5HID0gbmV3IEluamVjdGlvblRva2VuPFREU1dhcm5pbmc+KCdURFNXYXJuaW5nJyk7XHJcblxyXG4vKiogU2luZ2xlIHN1Y2Nlc3MgbWVzc2FnZSB0byBiZSBzaG93biB1bmRlcm5lYXRoIHRoZSBmb3JtIGZpZWxkLiAqL1xyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ3Rkcy13YXJuaW5nJyxcclxuICB0ZW1wbGF0ZTpgXHJcbiAgICA8aSBjbGFzcz0nbXItMicgW25nQ2xhc3NdPVwiaWNvblwiPiBcclxuICAgIDwvaT5cclxuICAgIDxuZy1jb250ZW50PjwvbmctY29udGVudD5cclxuICBgLFxyXG4gIGhvc3Q6IHtcclxuICAgICdjbGFzcyc6ICd0ZHMtd2FybmluZyB0ZXh0LXdhcm5pbmctNTAwIHRleHQteHMgbGVhZGluZy00IGZvbnQtbm9ybWFsIG10LTEgaW5saW5lLWZsZXggaXRlbXMtY2VudGVyJyxcclxuICAgICdbYXR0ci5pZF0nOiAnaWQnLFxyXG4gICAgJ2FyaWEtYXRvbWljJzogJ3RydWUnLFxyXG4gIH0sXHJcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcclxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcclxuICBwcm92aWRlcnM6IFt7cHJvdmlkZTogVERTX1dBUk5JTkcsIHVzZUV4aXN0aW5nOiBURFNXYXJuaW5nfV0sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBURFNXYXJuaW5nIHtcclxuICBASW5wdXQoKSBpZDogc3RyaW5nID0gYHRkcy13YXJuaW5nLSR7bmV4dFVuaXF1ZUlkKyt9YDtcclxuICBASW5wdXQoKSBpY29uOnN0cmluZyA9ICd0ZHNpLXdhcm5pbmctZmlsbCB0ZXh0LWJhc2UgbGVhZGluZy00JztcclxuICBjb25zdHJ1Y3RvcihAQXR0cmlidXRlKCdhcmlhLWxpdmUnKSBhcmlhTGl2ZTogc3RyaW5nLCBlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7XHJcbiAgICAvLyBJZiBubyBhcmlhLWxpdmUgdmFsdWUgaXMgc2V0IGFkZCAncG9saXRlJyBhcyBhIGRlZmF1bHQuIFRoaXMgaXMgcHJlZmVycmVkIG92ZXIgc2V0dGluZ1xyXG4gICAgLy8gcm9sZT0nYWxlcnQnIHNvIHRoYXQgc2NyZWVuIHJlYWRlcnMgZG8gbm90IGludGVycnVwdCB0aGUgY3VycmVudCB0YXNrIHRvIHJlYWQgdGhpcyBhbG91ZC5cclxuICAgIGlmICghYXJpYUxpdmUpIHtcclxuICAgICAgZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1saXZlJywgJ3BvbGl0ZScpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=