/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Throws an exception for the case when menu trigger doesn't have a valid tbutton-menu instance
 * @docs-private
 */
export function throwTDSMenuMissingError() {
    throw Error(`tdsbuttonMenuTriggerFor: must pass in an tbutton-menu instance.

    Example:
      <tbutton-menu #menu="TDSButtonMenu"></tbutton-menu>
      <button [tdsbuttonMenuTriggerFor]="menu"></button>`);
}
/**
 * Throws an exception for the case when menu's x-position value isn't valid.
 * In other words, it doesn't match 'before' or 'after'.
 * @docs-private
 */
export function throwTDSButtonMenuInvalidPositionX() {
    throw Error(`xPosition value must be either 'before' or after'.
      Example: <tbutton-menu xPosition="before" #menu="TDSButtonMenu"></tbutton-menu>`);
}
/**
 * Throws an exception for the case when menu's y-position value isn't valid.
 * In other words, it doesn't match 'above' or 'below'.
 * @docs-private
 */
export function throwTDSMenuInvalidPositionY() {
    throw Error(`yPosition value must be either 'above' or below'.
      Example: <tbutton-menu yPosition="above" #menu="TDSButtonMenu"></tbutton-menu>`);
}
/**
 * Throws an exception for the case when a menu is assigned
 * to a trigger that is placed inside the same menu.
 * @docs-private
 */
export function throwTDSMenuRecursiveError() {
    throw Error(`tdsbuttonMenuTriggerFor: menu cannot contain its own trigger. Assign a menu that is ` +
        `not a parent of the trigger or move the trigger outside of the menu.`);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVudS1lcnJvcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy90ZHMtdWkvYnV0dG9uLW1lbnUvbWVudS1lcnJvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBRUg7OztHQUdHO0FBQ0gsTUFBTSxVQUFVLHdCQUF3QjtJQUN0QyxNQUFNLEtBQUssQ0FBQzs7Ozt5REFJMkMsQ0FBQyxDQUFDO0FBQzNELENBQUM7QUFFRDs7OztHQUlHO0FBQ0gsTUFBTSxVQUFVLGtDQUFrQztJQUNoRCxNQUFNLEtBQUssQ0FBQztzRkFDd0UsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRDs7OztHQUlHO0FBQ0gsTUFBTSxVQUFVLDRCQUE0QjtJQUMxQyxNQUFNLEtBQUssQ0FBQztxRkFDdUUsQ0FBQyxDQUFDO0FBQ3ZGLENBQUM7QUFHRDs7OztHQUlHO0FBQ0gsTUFBTSxVQUFVLDBCQUEwQjtJQUN4QyxNQUFNLEtBQUssQ0FBQyxzRkFBc0Y7UUFDdEYsc0VBQXNFLENBQUMsQ0FBQztBQUN0RixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXHJcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcclxuICovXHJcblxyXG4vKipcclxuICogVGhyb3dzIGFuIGV4Y2VwdGlvbiBmb3IgdGhlIGNhc2Ugd2hlbiBtZW51IHRyaWdnZXIgZG9lc24ndCBoYXZlIGEgdmFsaWQgdGJ1dHRvbi1tZW51IGluc3RhbmNlXHJcbiAqIEBkb2NzLXByaXZhdGVcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB0aHJvd1REU01lbnVNaXNzaW5nRXJyb3IoKSB7XHJcbiAgdGhyb3cgRXJyb3IoYHRkc2J1dHRvbk1lbnVUcmlnZ2VyRm9yOiBtdXN0IHBhc3MgaW4gYW4gdGJ1dHRvbi1tZW51IGluc3RhbmNlLlxyXG5cclxuICAgIEV4YW1wbGU6XHJcbiAgICAgIDx0YnV0dG9uLW1lbnUgI21lbnU9XCJURFNCdXR0b25NZW51XCI+PC90YnV0dG9uLW1lbnU+XHJcbiAgICAgIDxidXR0b24gW3Rkc2J1dHRvbk1lbnVUcmlnZ2VyRm9yXT1cIm1lbnVcIj48L2J1dHRvbj5gKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFRocm93cyBhbiBleGNlcHRpb24gZm9yIHRoZSBjYXNlIHdoZW4gbWVudSdzIHgtcG9zaXRpb24gdmFsdWUgaXNuJ3QgdmFsaWQuXHJcbiAqIEluIG90aGVyIHdvcmRzLCBpdCBkb2Vzbid0IG1hdGNoICdiZWZvcmUnIG9yICdhZnRlcicuXHJcbiAqIEBkb2NzLXByaXZhdGVcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB0aHJvd1REU0J1dHRvbk1lbnVJbnZhbGlkUG9zaXRpb25YKCkge1xyXG4gIHRocm93IEVycm9yKGB4UG9zaXRpb24gdmFsdWUgbXVzdCBiZSBlaXRoZXIgJ2JlZm9yZScgb3IgYWZ0ZXInLlxyXG4gICAgICBFeGFtcGxlOiA8dGJ1dHRvbi1tZW51IHhQb3NpdGlvbj1cImJlZm9yZVwiICNtZW51PVwiVERTQnV0dG9uTWVudVwiPjwvdGJ1dHRvbi1tZW51PmApO1xyXG59XHJcblxyXG4vKipcclxuICogVGhyb3dzIGFuIGV4Y2VwdGlvbiBmb3IgdGhlIGNhc2Ugd2hlbiBtZW51J3MgeS1wb3NpdGlvbiB2YWx1ZSBpc24ndCB2YWxpZC5cclxuICogSW4gb3RoZXIgd29yZHMsIGl0IGRvZXNuJ3QgbWF0Y2ggJ2Fib3ZlJyBvciAnYmVsb3cnLlxyXG4gKiBAZG9jcy1wcml2YXRlXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdGhyb3dURFNNZW51SW52YWxpZFBvc2l0aW9uWSgpIHtcclxuICB0aHJvdyBFcnJvcihgeVBvc2l0aW9uIHZhbHVlIG11c3QgYmUgZWl0aGVyICdhYm92ZScgb3IgYmVsb3cnLlxyXG4gICAgICBFeGFtcGxlOiA8dGJ1dHRvbi1tZW51IHlQb3NpdGlvbj1cImFib3ZlXCIgI21lbnU9XCJURFNCdXR0b25NZW51XCI+PC90YnV0dG9uLW1lbnU+YCk7XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogVGhyb3dzIGFuIGV4Y2VwdGlvbiBmb3IgdGhlIGNhc2Ugd2hlbiBhIG1lbnUgaXMgYXNzaWduZWRcclxuICogdG8gYSB0cmlnZ2VyIHRoYXQgaXMgcGxhY2VkIGluc2lkZSB0aGUgc2FtZSBtZW51LlxyXG4gKiBAZG9jcy1wcml2YXRlXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdGhyb3dURFNNZW51UmVjdXJzaXZlRXJyb3IoKSB7XHJcbiAgdGhyb3cgRXJyb3IoYHRkc2J1dHRvbk1lbnVUcmlnZ2VyRm9yOiBtZW51IGNhbm5vdCBjb250YWluIGl0cyBvd24gdHJpZ2dlci4gQXNzaWduIGEgbWVudSB0aGF0IGlzIGAgK1xyXG4gICAgICAgICAgICAgIGBub3QgYSBwYXJlbnQgb2YgdGhlIHRyaWdnZXIgb3IgbW92ZSB0aGUgdHJpZ2dlciBvdXRzaWRlIG9mIHRoZSBtZW51LmApO1xyXG59XHJcbiJdfQ==