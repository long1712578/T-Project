import { ChangeDetectionStrategy, Component, ViewEncapsulation, Inject, Optional, Input, HostListener, } from '@angular/core';
import { Subject } from 'rxjs';
import { DOCUMENT } from '@angular/common';
import { TDSBUTTON_MENU_PANEL } from './menu-panel';
import { mixinDisabled } from 'tds-ui/shared/common';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/a11y";
const _c0 = ["tds-button-menu-item", ""];
const _c1 = ["*"];
// Boilerplate for applying mixins to TDSButtonMenuItem.
/** @docs-private */
class TDSButtonMenuItemBase {
}
const _TDSButtonMenuItemMixinBase = mixinDisabled(TDSButtonMenuItemBase);
/**
 * Single item inside of a `tbutton-menu`. Provides the menu item styling and accessibility treatment.
 */
export class TDSButtonMenuItem extends _TDSButtonMenuItemMixinBase {
    constructor(_cdr, _elementRef, _document, _focusMonitor, _parentMenu) {
        // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.
        super();
        this._cdr = _cdr;
        this._elementRef = _elementRef;
        this._focusMonitor = _focusMonitor;
        this._parentMenu = _parentMenu;
        this.size = 'md';
        /** ARIA role for the menu item. */
        this.role = 'menuitem';
        /** Stream that emits when the menu item is hovered. */
        this._hovered = new Subject();
        /** Stream that emits when the menu item is focused. */
        this._focused = new Subject();
        /** Whether the menu item is highlighted. */
        this._highlighted = false;
        /** Whether the menu item acts as a trigger for a sub-menu. */
        this._triggersSubmenu = false;
        if (_parentMenu && _parentMenu.addItem) {
            _parentMenu.addItem(this);
        }
    }
    ngOnChanges(changes) {
        const { size } = changes;
        if (size) {
            this._cdr.markForCheck();
        }
    }
    /** Focuses the menu item. */
    focus(origin, options) {
        if (this._focusMonitor && origin) {
            this._focusMonitor.focusVia(this._getHostElement(), origin, options);
        }
        else {
            this._getHostElement().focus(options);
        }
        this._focused.next(this);
    }
    ngAfterViewInit() {
        if (this._focusMonitor) {
            // Start monitoring the element so it gets the appropriate focused classes. We want
            // to show the focus style for menu items only when the focus was not caused by a
            // mouse or touch interaction.
            this._focusMonitor.monitor(this._elementRef, false);
        }
    }
    ngOnDestroy() {
        if (this._focusMonitor) {
            this._focusMonitor.stopMonitoring(this._elementRef);
        }
        if (this._parentMenu && this._parentMenu.removeItem) {
            this._parentMenu.removeItem(this);
        }
        this._hovered.complete();
        this._focused.complete();
    }
    /** Used to set the `tabindex`. */
    _getTabIndex() {
        return this.disabled ? '-1' : '0';
    }
    /** Returns the host DOM element. */
    _getHostElement() {
        return this._elementRef.nativeElement;
    }
    /** Prevents the default element actions if it is disabled. */
    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.
    // In Ivy the `host` bindings will be merged when this class is extended, whereas in
    // ViewEngine they're overwritten.
    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.
    // tslint:disable-next-line:no-host-decorator-in-concrete
    _checkDisabled(event) {
        if (this.disabled) {
            event.preventDefault();
            event.stopPropagation();
        }
    }
    /** Emits to the hover stream. */
    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.
    // In Ivy the `host` bindings will be merged when this class is extended, whereas in
    // ViewEngine they're overwritten.
    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.
    // tslint:disable-next-line:no-host-decorator-in-concrete
    _handleMouseEnter() {
        this._hovered.next(this);
    }
    /** Gets the label to be used when determining whether the option should be focused. */
    getLabel() {
        const clone = this._elementRef.nativeElement.cloneNode(true);
        const icons = clone.querySelectorAll('tds-icon, .tds-icons');
        // Strip away icons so they don't show up in the text.
        for (let i = 0; i < icons.length; i++) {
            const icon = icons[i];
            icon.parentNode?.removeChild(icon);
        }
        return clone.textContent?.trim() || '';
    }
    p_updateClsSize() {
        this.ngcls = {};
    }
}
TDSButtonMenuItem.ɵfac = function TDSButtonMenuItem_Factory(t) { return new (t || TDSButtonMenuItem)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(i1.FocusMonitor), i0.ɵɵdirectiveInject(TDSBUTTON_MENU_PANEL, 8)); };
TDSButtonMenuItem.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSButtonMenuItem, selectors: [["", "tds-button-menu-item", ""]], hostAttrs: [1, "flex", "flex-col", "justify-center", "w-full", "text-body-2", "font-regular", "hover:bg-neutral-3-50", "focus:outline-none", "px-3", "dark:hover:bg-d-neutral-3-300"], hostVars: 18, hostBindings: function TDSButtonMenuItem_HostBindings(rf, ctx) { if (rf & 1) {
        i0.ɵɵlistener("click", function TDSButtonMenuItem_click_HostBindingHandler($event) { return ctx._checkDisabled($event); })("mouseenter", function TDSButtonMenuItem_mouseenter_HostBindingHandler() { return ctx._handleMouseEnter(); });
    } if (rf & 2) {
        i0.ɵɵattribute("role", ctx.role)("tabindex", ctx._getTabIndex())("aria-disabled", ctx.disabled.toString())("disabled", ctx.disabled || null);
        i0.ɵɵclassProp("tds-button-menu-item", true)("tds-button-menu-item-highlighted", ctx._highlighted)("tds-button-menu-item-submenu-trigger", ctx._triggersSubmenu)("px-3", true)("py-2", ctx.size == "md")("py-1", ctx.size == "sm")("py-3", ctx.size == "lg");
    } }, inputs: { disabled: "disabled", disableRipple: "disableRipple", size: "size", role: "role" }, exportAs: ["TDSButtonMenuItem"], features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature], attrs: _c0, ngContentSelectors: _c1, decls: 1, vars: 0, template: function TDSButtonMenuItem_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSButtonMenuItem, [{
        type: Component,
        args: [{ selector: '[tds-button-menu-item]', exportAs: 'TDSButtonMenuItem', inputs: ['disabled', 'disableRipple'], host: {
                    '[attr.role]': 'role',
                    '[class.tds-button-menu-item]': 'true',
                    '[class.tds-button-menu-item-highlighted]': '_highlighted',
                    '[class.tds-button-menu-item-submenu-trigger]': '_triggersSubmenu',
                    '[attr.tabindex]': '_getTabIndex()',
                    '[attr.aria-disabled]': 'disabled.toString()',
                    '[attr.disabled]': 'disabled || null',
                    'class': 'flex  flex-col justify-center w-full text-body-2 font-regular  hover:bg-neutral-3-50 focus:outline-none px-3 dark:hover:bg-d-neutral-3-300',
                    '[class.px-3]': "true",
                    "[class.py-2]": "size == 'md'",
                    "[class.py-1.5]": "size == 'sm'",
                    '[class.py-3]': "size == 'lg'",
                }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: "<ng-content></ng-content>\r\n\r\n" }]
    }], function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }, { type: i1.FocusMonitor }, { type: undefined, decorators: [{
                type: Inject,
                args: [TDSBUTTON_MENU_PANEL]
            }, {
                type: Optional
            }] }]; }, { size: [{
            type: Input
        }], role: [{
            type: Input
        }], _checkDisabled: [{
            type: HostListener,
            args: ['click', ['$event']]
        }], _handleMouseEnter: [{
            type: HostListener,
            args: ['mouseenter']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,