import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, forwardRef, Input, Optional, ViewEncapsulation } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
//import { ButtonSize } from 'tds-ui';
import { InputBoolean } from 'tds-ui/shared/utility';
import { TDSRadioService } from './radio.service';
import * as i0 from "@angular/core";
import * as i1 from "./radio.service";
import * as i2 from "@angular/cdk/bidi";
const _c0 = ["*"];
export class TDSRadioGroupComponent {
    constructor(cdr, tdsRadioService, elementRef, directionality) {
        this.cdr = cdr;
        this.tdsRadioService = tdsRadioService;
        this.elementRef = elementRef;
        this.directionality = directionality;
        this.value = null;
        this.destroy$ = new Subject();
        this.onChange = () => { };
        this.onTouched = () => { };
        this.disabled = false;
        this.buttonStyle = 'outline';
        this.size = 'md';
        this.tdsName = null;
        this.dir = 'ltr';
        // TODO: move to host after View Engine deprecation
        this.elementRef.nativeElement.classList.add('tds-radio-group');
    }
    ngOnInit() {
        this.tdsRadioService.selected$.pipe(takeUntil(this.destroy$)).subscribe(value => {
            if (this.value !== value) {
                this.value = value;
                this.onChange(this.value);
            }
        });
        this.tdsRadioService.touched$.pipe(takeUntil(this.destroy$)).subscribe(() => {
            Promise.resolve().then(() => this.onTouched());
        });
        this.directionality.change?.pipe(takeUntil(this.destroy$)).subscribe((direction) => {
            this.dir = direction;
            this.cdr.detectChanges();
        });
        this.dir = this.directionality.value;
    }
    ngOnChanges(changes) {
        const { disabled, tdsName, size } = changes;
        if (disabled) {
            this.tdsRadioService.setDisabled(this.disabled);
        }
        if (tdsName) {
            this.tdsRadioService.setName(this.tdsName);
        }
        if (size) {
            this.tdsRadioService.setSize(this.size);
        }
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    writeValue(value) {
        this.value = value;
        this.tdsRadioService.select(value);
        this.cdr.markForCheck();
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this.tdsRadioService.setDisabled(isDisabled);
        this.cdr.markForCheck();
    }
}
TDSRadioGroupComponent.ɵfac = function TDSRadioGroupComponent_Factory(t) { return new (t || TDSRadioGroupComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.TDSRadioService), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i2.Directionality, 8)); };
TDSRadioGroupComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSRadioGroupComponent, selectors: [["tds-radio-group"]], hostVars: 8, hostBindings: function TDSRadioGroupComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵclassProp("tds-radio-group-lg", ctx.size === "lg")("tds-radio-group-sm", ctx.size === "sm")("tds-radio-group-solid", ctx.buttonStyle === "solid")("tds-radio-group-rtl", ctx.dir === "rtl");
    } }, inputs: { disabled: "disabled", buttonStyle: "buttonStyle", size: "size", tdsName: "tdsName" }, exportAs: ["tdsRadioGroup"], features: [i0.ɵɵProvidersFeature([
            TDSRadioService,
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => TDSRadioGroupComponent),
                multi: true
            }
        ]), i0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function TDSRadioGroupComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
__decorate([
    InputBoolean()
], TDSRadioGroupComponent.prototype, "disabled", void 0);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSRadioGroupComponent, [{
        type: Component,
        args: [{
                selector: 'tds-radio-group',
                exportAs: 'tdsRadioGroup',
                preserveWhitespaces: false,
                template: ` <ng-content></ng-content> `,
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [
                    TDSRadioService,
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => TDSRadioGroupComponent),
                        multi: true
                    }
                ],
                host: {
                    '[class.tds-radio-group-lg]': `size === 'lg'`,
                    '[class.tds-radio-group-sm]': `size === 'sm'`,
                    '[class.tds-radio-group-solid]': `buttonStyle === 'solid'`,
                    '[class.tds-radio-group-rtl]': `dir === 'rtl'`
                }
            }]
    }], function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.TDSRadioService }, { type: i0.ElementRef }, { type: i2.Directionality, decorators: [{
                type: Optional
            }] }]; }, { disabled: [{
            type: Input
        }], buttonStyle: [{
            type: Input
        }], size: [{
            type: Input
        }], tdsName: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;base64,