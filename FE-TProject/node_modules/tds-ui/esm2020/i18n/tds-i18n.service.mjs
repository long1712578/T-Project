import { Inject, Injectable, Optional } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import en_US from './languages/en_US';
import vi_VN from './languages/vi_VN';
import { TDS_DATE_LOCALE, TDS_I18N } from './tds-i18n.token';
import * as i0 from "@angular/core";
export class TDSI18nService {
    constructor(locale, dateLocale) {
        this._change = new BehaviorSubject(this._locale);
        this.setLocale(locale || vi_VN);
        this.setDateLocale(dateLocale || null);
    }
    get localeChange() {
        return this._change.asObservable();
    }
    // [NOTE] Performance issue: this method may called by every change detections
    // TODO: cache more deeply paths for performance
    translate(path, data) {
        // this._logger.debug(`[TDSI18nService] Translating(${this._locale.locale}): ${path}`);
        let content = this._getObjectPath(this._locale, path);
        if (typeof content === 'string') {
            if (data) {
                Object.keys(data).forEach(key => (content = content.replace(new RegExp(`%${key}%`, 'g'), data[key])));
            }
            return content;
        }
        return path;
    }
    /**
     * Set/Change current locale globally throughout the WHOLE application
     * NOTE: If called at runtime, rendered interface may not change along with the locale change,
     * because this do not trigger another render schedule.
     *
     * @param locale The translating letters
     */
    setLocale(locale) {
        if (this._locale && this._locale.locale === locale.locale) {
            return;
        }
        this._locale = locale;
        this._change.next(locale);
    }
    getLocale() {
        return this._locale;
    }
    getLocaleId() {
        return this._locale ? this._locale.locale : '';
    }
    setDateLocale(dateLocale) {
        this.dateLocale = dateLocale;
    }
    getDateLocale() {
        return this.dateLocale;
    }
    /**
     * Get locale data
     * @param path dot paths for finding exist value from locale data, eg. "a.b.c"
     * @param defaultValue default value if the result is not "truthy"
     */
    getLocaleData(path, defaultValue) {
        const result = path ? this._getObjectPath(this._locale, path) : this._locale;
        if (!result && !defaultValue) {
            console.warn(`Missing translations for "${path}" in language "${this._locale.locale}".
You can use "TDSI18nService.setLocale" as a temporary fix.`);
        }
        return result || defaultValue || this._getObjectPath(en_US, path) || {};
    }
    _getObjectPath(obj, path) {
        let res = obj;
        const paths = path.split('.');
        const depth = paths.length;
        let index = 0;
        while (res && index < depth) {
            res = res[paths[index++]];
        }
        return index === depth ? res : null;
    }
}
TDSI18nService.ɵfac = function TDSI18nService_Factory(t) { return new (t || TDSI18nService)(i0.ɵɵinject(TDS_I18N, 8), i0.ɵɵinject(TDS_DATE_LOCALE, 8)); };
TDSI18nService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: TDSI18nService, factory: TDSI18nService.ɵfac, providedIn: 'root' });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSI18nService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [TDS_I18N]
            }] }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [TDS_DATE_LOCALE]
            }] }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,