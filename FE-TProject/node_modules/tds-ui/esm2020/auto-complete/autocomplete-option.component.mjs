import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, EventEmitter, Input, Optional, Output, ViewEncapsulation } from '@angular/core';
import { InputBoolean } from 'tds-ui/shared/utility';
import { scrollIntoView } from 'tds-ui/core/util';
import * as i0 from "@angular/core";
import * as i1 from "./autocomplete-optgroup.component";
import * as i2 from "@angular/common";
const _c0 = function (a0, a1, a2) { return { "py-2": a0, "py-1.5": a1, "py-2.5": a2 }; };
const _c1 = ["*"];
export class TDSAutoOptionSelectionChange {
    constructor(source, isUserInput = false) {
        this.source = source;
        this.isUserInput = isUserInput;
    }
}
export class TDSAutocompleteOptionComponent {
    constructor(changeDetectorRef, element, TDSAutocompleteOptgroupComponent) {
        this.changeDetectorRef = changeDetectorRef;
        this.element = element;
        this.TDSAutocompleteOptgroupComponent = TDSAutocompleteOptgroupComponent;
        this.size = 'md';
        this.disabled = false;
        this.selectionChange = new EventEmitter();
        this.mouseEntered = new EventEmitter();
        this.active = false;
        this.selected = false;
    }
    select(emit = true) {
        this.selected = true;
        this.changeDetectorRef.markForCheck();
        if (emit) {
            this.emitSelectionChangeEvent();
        }
    }
    onMouseEnter() {
        this.mouseEntered.emit(this);
    }
    deselect() {
        this.selected = false;
        this.changeDetectorRef.markForCheck();
        this.emitSelectionChangeEvent();
    }
    /** Git display label */
    getLabel() {
        return this.label || this.value.toString();
    }
    /** Set active (only styles) */
    setActiveStyles() {
        if (!this.active) {
            this.active = true;
            this.changeDetectorRef.markForCheck();
        }
    }
    /** Unset active (only styles) */
    setInactiveStyles() {
        if (this.active) {
            this.active = false;
            this.changeDetectorRef.markForCheck();
        }
    }
    scrollIntoViewIfNeeded() {
        scrollIntoView(this.element.nativeElement);
    }
    selectViaInteraction() {
        if (!this.disabled) {
            this.selected = !this.selected;
            if (this.selected) {
                this.setActiveStyles();
            }
            else {
                this.setInactiveStyles();
            }
            this.emitSelectionChangeEvent(true);
            this.changeDetectorRef.markForCheck();
        }
    }
    emitSelectionChangeEvent(isUserInput = false) {
        this.selectionChange.emit(new TDSAutoOptionSelectionChange(this, isUserInput));
    }
}
TDSAutocompleteOptionComponent.ɵfac = function TDSAutocompleteOptionComponent_Factory(t) { return new (t || TDSAutocompleteOptionComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.TDSAutocompleteOptgroupComponent, 8)); };
TDSAutocompleteOptionComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSAutocompleteOptionComponent, selectors: [["tds-auto-option"]], hostAttrs: ["role", "menuitem", 1, "tds-select-item", "tds-select-item-option", "px-3", "text-neutral-1-900", "dark:text-d-neutral-1-900", "text-body-2", "font-regular", "hover:bg-neutral-3-50", "dark:hover:bg-d-neutral-3-300", "flex", "w-full"], hostVars: 18, hostBindings: function TDSAutocompleteOptionComponent_HostBindings(rf, ctx) { if (rf & 1) {
        i0.ɵɵlistener("click", function TDSAutocompleteOptionComponent_click_HostBindingHandler() { return ctx.selectViaInteraction(); })("mouseenter", function TDSAutocompleteOptionComponent_mouseenter_HostBindingHandler() { return ctx.onMouseEnter(); })("mousedown", function TDSAutocompleteOptionComponent_mousedown_HostBindingHandler($event) { return $event.preventDefault(); });
    } if (rf & 2) {
        i0.ɵɵattribute("aria-selected", ctx.selected.toString())("aria-disabled", ctx.disabled.toString());
        i0.ɵɵclassProp("tds-select-item-option-grouped", ctx.TDSAutocompleteOptgroupComponent)("tds-select-item-option-selected", ctx.selected)("bg-neutral-3-50", (ctx.selected || ctx.active) && !ctx.disabled)("dark:bg-d-neutral-3-300", (ctx.selected || ctx.active) && !ctx.disabled)("tds-select-item-option-active", ctx.active)("cursor-pointer", !ctx.disabled)("cursor-not-allowed", ctx.disabled)("tds-select-item-option-disabled", ctx.disabled);
    } }, inputs: { size: "size", value: "value", label: "label", disabled: "disabled" }, outputs: { selectionChange: "selectionChange", mouseEntered: "mouseEntered" }, exportAs: ["tdsAutoOption"], ngContentSelectors: _c1, decls: 2, vars: 5, consts: [[1, "tds-select-item-option-content", "w-full", "flex", "break-words", 3, "ngClass"]], template: function TDSAutocompleteOptionComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵelementStart(0, "div", 0);
        i0.ɵɵprojection(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction3(1, _c0, ctx.size === "md", ctx.size === "sm", ctx.size === "lg"));
    } }, directives: [i2.NgClass], encapsulation: 2, changeDetection: 0 });
__decorate([
    InputBoolean()
], TDSAutocompleteOptionComponent.prototype, "disabled", void 0);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSAutocompleteOptionComponent, [{
        type: Component,
        args: [{
                selector: 'tds-auto-option',
                exportAs: 'tdsAutoOption',
                // preserveWhitespaces: false,
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                template: `
    <div class="tds-select-item-option-content w-full flex break-words" [ngClass]="{'py-2': size === 'md',
    'py-1.5': size === 'sm',
    'py-2.5': size === 'lg'}">    
      <ng-content></ng-content>
    </div>
  `,
                host: {
                    role: 'menuitem',
                    class: 'tds-select-item tds-select-item-option px-3  text-neutral-1-900 dark:text-d-neutral-1-900 text-body-2 font-regular hover:bg-neutral-3-50 dark:hover:bg-d-neutral-3-300 flex w-full',
                    '[class.tds-select-item-option-grouped]': 'TDSAutocompleteOptgroupComponent',
                    '[class.tds-select-item-option-selected]': 'selected',
                    '[class.bg-neutral-3-50]': '(selected ||active) && !disabled',
                    '[class.dark:bg-d-neutral-3-300]': '(selected ||active) && !disabled',
                    '[class.tds-select-item-option-active]': 'active',
                    '[class.cursor-pointer]': "!disabled",
                    '[class.cursor-not-allowed]': "disabled",
                    '[class.tds-select-item-option-disabled]': 'disabled',
                    '[attr.aria-selected]': 'selected.toString()',
                    '[attr.aria-disabled]': 'disabled.toString()',
                    '(click)': 'selectViaInteraction()',
                    '(mouseenter)': 'onMouseEnter()',
                    '(mousedown)': '$event.preventDefault()'
                }
            }]
    }], function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i1.TDSAutocompleteOptgroupComponent, decorators: [{
                type: Optional
            }] }]; }, { size: [{
            type: Input
        }], value: [{
            type: Input
        }], label: [{
            type: Input
        }], disabled: [{
            type: Input
        }], selectionChange: [{
            type: Output
        }], mouseEntered: [{
            type: Output
        }] }); })();
//# sourceMappingURL=data:application/json;base64,