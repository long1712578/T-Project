import { __decorate } from "tslib";
import { normalizePassiveListenerOptions } from '@angular/cdk/platform';
import { DOCUMENT } from '@angular/common';
import { ChangeDetectionStrategy, Component, EventEmitter, Inject, Input, Output, ViewChild, ViewEncapsulation } from '@angular/core';
import { fromEvent, Subject } from 'rxjs';
import { takeUntil, throttleTime } from 'rxjs/operators';
import { WithConfig } from 'tds-ui/core/config';
import { InputBoolean, InputNumber } from 'tds-ui/shared/utility';
import { getOffsetTop } from './util';
import * as i0 from "@angular/core";
import * as i1 from "tds-ui/core/config";
import * as i2 from "tds-ui/core/services";
import * as i3 from "@angular/cdk/platform";
import * as i4 from "@angular/common";
import * as i5 from "tds-ui/affix";
const _c0 = ["ink"];
function TDSAnchorComponent_tds_affix_0_ng_template_1_Template(rf, ctx) { }
function TDSAnchorComponent_tds_affix_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tds-affix", 2);
    i0.ɵɵtemplate(1, TDSAnchorComponent_tds_affix_0_ng_template_1_Template, 0, 0, "ng-template", 3);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    const _r1 = i0.ɵɵreference(2);
    i0.ɵɵproperty("offsetTop", ctx_r0.tdsOffsetTop)("tdsTarget", ctx_r0.container);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngTemplateOutlet", _r1);
} }
const _c1 = function (a0) { return { fixed: a0 }; };
function TDSAnchorComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 4)(1, "div", 5)(2, "div", 6);
    i0.ɵɵelement(3, "div", 7, 8);
    i0.ɵɵelementEnd();
    i0.ɵɵprojection(5);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵproperty("ngStyle", ctx_r2.wrapperStyle);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(2, _c1, !ctx_r2.tdsAffix && !ctx_r2.tdsShowInkInFixed));
} }
const _c2 = ["*"];
const TDS_CONFIG_MODULE_NAME = 'anchor';
const sharpMatcherRegx = /#([^#]+)$/;
const passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });
export class TDSAnchorComponent {
    constructor(doc, tdsConfigService, scrollSrv, cdr, platform, zone, renderer) {
        this.doc = doc;
        this.tdsConfigService = tdsConfigService;
        this.scrollSrv = scrollSrv;
        this.cdr = cdr;
        this.platform = platform;
        this.zone = zone;
        this.renderer = renderer;
        this._tdsModuleName = TDS_CONFIG_MODULE_NAME;
        this.tdsAffix = true;
        this.tdsShowInkInFixed = false;
        this.tdsBounds = 5;
        this.tdsOffsetTop = undefined;
        this.tdsTargetOffset = undefined;
        this.tdsClick = new EventEmitter();
        this.tdsChange = new EventEmitter();
        this.tdsScroll = new EventEmitter();
        this.visible = false;
        this.wrapperStyle = { 'max-height': '100vh' };
        this.links = [];
        this.animating = false;
        this.destroy$ = new Subject();
        this.handleScrollTimeoutID = -1;
    }
    registerLink(link) {
        this.links.push(link);
    }
    unregisterLink(link) {
        this.links.splice(this.links.indexOf(link), 1);
    }
    getContainer() {
        return this.container || window;
    }
    ngAfterViewInit() {
        this.registerScrollEvent();
    }
    ngOnDestroy() {
        clearTimeout(this.handleScrollTimeoutID);
        this.destroy$.next();
        this.destroy$.complete();
    }
    registerScrollEvent() {
        if (!this.platform.isBrowser) {
            return;
        }
        this.destroy$.next();
        this.zone.runOutsideAngular(() => {
            fromEvent(this.getContainer(), 'scroll', passiveEventListenerOptions)
                .pipe(throttleTime(50), takeUntil(this.destroy$))
                .subscribe(() => this.handleScroll());
        });
        // Browser would maintain the scrolling position when refreshing.
        // So we have to delay calculation in avoid of getting a incorrect result.
        this.handleScrollTimeoutID = setTimeout(() => this.handleScroll());
    }
    handleScroll() {
        if (typeof document === 'undefined' || this.animating) {
            return;
        }
        const sections = [];
        const offsetTop = this.tdsTargetOffset ? this.tdsTargetOffset : this.tdsOffsetTop || 0;
        const scope = offsetTop + this.tdsBounds;
        this.links.forEach(comp => {
            const sharpLinkMatch = sharpMatcherRegx.exec(comp.tdsHref.toString());
            if (!sharpLinkMatch) {
                return;
            }
            const target = this.doc.getElementById(sharpLinkMatch[1]);
            if (target) {
                const top = getOffsetTop(target, this.getContainer());
                if (top < scope) {
                    sections.push({
                        top,
                        comp
                    });
                }
            }
        });
        this.visible = !!sections.length;
        if (!this.visible) {
            this.clearActive();
            this.cdr.detectChanges();
        }
        else {
            const maxSection = sections.reduce((prev, curr) => (curr.top > prev.top ? curr : prev));
            this.handleActive(maxSection.comp);
        }
        this.setVisible();
    }
    clearActive() {
        this.links.forEach(i => {
            i.unsetActive();
        });
    }
    setActive(comp) {
        const originalActiveLink = this.activeLink;
        const targetComp = (this.tdsCurrentAnchor && this.links.find(n => n.tdsHref === this.tdsCurrentAnchor)) || comp;
        if (!targetComp)
            return;
        targetComp.setActive();
        const linkNode = targetComp.getLinkTitleElement();
        this.ink.nativeElement.style.top = `${linkNode.offsetTop + linkNode.clientHeight / 2 - 4.5}px`;
        this.activeLink = (comp || targetComp).tdsHref;
        if (originalActiveLink !== this.activeLink) {
            this.tdsChange.emit(this.activeLink);
        }
    }
    handleActive(comp) {
        this.clearActive();
        this.setActive(comp);
        this.visible = true;
        this.setVisible();
        this.tdsScroll.emit(comp);
    }
    setVisible() {
        const visible = this.visible;
        const visibleClassname = 'visible';
        if (this.ink) {
            if (visible) {
                this.renderer.addClass(this.ink.nativeElement, visibleClassname);
            }
            else {
                this.renderer.removeClass(this.ink.nativeElement, visibleClassname);
            }
        }
    }
    handleScrollTo(linkComp) {
        const el = this.doc.querySelector(linkComp.tdsHref);
        if (!el) {
            return;
        }
        this.animating = true;
        const containerScrollTop = this.scrollSrv.getScroll(this.getContainer());
        const elOffsetTop = getOffsetTop(el, this.getContainer());
        let targetScrollTop = containerScrollTop + elOffsetTop;
        targetScrollTop -= this.tdsTargetOffset !== undefined ? this.tdsTargetOffset : this.tdsOffsetTop || 0;
        this.scrollSrv.scrollTo(this.getContainer(), targetScrollTop, {
            callback: () => {
                this.animating = false;
                this.handleActive(linkComp);
            }
        });
        this.tdsClick.emit(linkComp.tdsHref);
    }
    ngOnChanges(changes) {
        const { tdsOffsetTop, tdsContainer, tdsCurrentAnchor } = changes;
        if (tdsOffsetTop) {
            this.wrapperStyle = {
                'max-height': `calc(100vh - ${this.tdsOffsetTop}px)`
            };
        }
        if (tdsContainer) {
            const container = this.tdsContainer;
            this.container = typeof container === 'string' ? this.doc.querySelector(container) : container;
            this.registerScrollEvent();
        }
        if (tdsCurrentAnchor) {
            this.setActive();
        }
    }
}
TDSAnchorComponent.ɵfac = function TDSAnchorComponent_Factory(t) { return new (t || TDSAnchorComponent)(i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(i1.TDSConfigService), i0.ɵɵdirectiveInject(i2.TDSScrollService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i3.Platform), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.Renderer2)); };
TDSAnchorComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSAnchorComponent, selectors: [["tds-anchor"]], viewQuery: function TDSAnchorComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.ink = _t.first);
    } }, inputs: { tdsAffix: "tdsAffix", tdsShowInkInFixed: "tdsShowInkInFixed", tdsBounds: "tdsBounds", tdsOffsetTop: "tdsOffsetTop", tdsTargetOffset: "tdsTargetOffset", tdsContainer: "tdsContainer", tdsCurrentAnchor: "tdsCurrentAnchor" }, outputs: { tdsClick: "tdsClick", tdsChange: "tdsChange", tdsScroll: "tdsScroll" }, exportAs: ["tdsAnchor"], features: [i0.ɵɵNgOnChangesFeature], ngContentSelectors: _c2, decls: 3, vars: 2, consts: [[3, "offsetTop", "tdsTarget", 4, "ngIf", "ngIfElse"], ["content", ""], [3, "offsetTop", "tdsTarget"], [3, "ngTemplateOutlet"], [1, "tds-anchor-wrapper", 3, "ngStyle"], [1, "tds-anchor", "flex", "flex-col", "border-l", "border-neutral-2-100", "dark:border-d-neutral-2-100", 3, "ngClass"], [1, "tds-anchor-ink"], [1, "tds-anchor-ink-ball"], ["ink", ""]], template: function TDSAnchorComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵtemplate(0, TDSAnchorComponent_tds_affix_0_Template, 2, 3, "tds-affix", 0);
        i0.ɵɵtemplate(1, TDSAnchorComponent_ng_template_1_Template, 6, 4, "ng-template", null, 1, i0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r1 = i0.ɵɵreference(2);
        i0.ɵɵproperty("ngIf", ctx.tdsAffix)("ngIfElse", _r1);
    } }, directives: [i4.NgIf, i5.TDSAffixComponent, i4.NgTemplateOutlet, i4.NgStyle, i4.NgClass], encapsulation: 2, changeDetection: 0 });
__decorate([
    InputBoolean()
], TDSAnchorComponent.prototype, "tdsAffix", void 0);
__decorate([
    WithConfig(),
    InputBoolean()
], TDSAnchorComponent.prototype, "tdsShowInkInFixed", void 0);
__decorate([
    WithConfig(),
    InputNumber()
], TDSAnchorComponent.prototype, "tdsBounds", void 0);
__decorate([
    InputNumber(undefined),
    WithConfig()
], TDSAnchorComponent.prototype, "tdsOffsetTop", void 0);
__decorate([
    InputNumber(undefined),
    WithConfig()
], TDSAnchorComponent.prototype, "tdsTargetOffset", void 0);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSAnchorComponent, [{
        type: Component,
        args: [{
                selector: 'tds-anchor',
                exportAs: 'tdsAnchor',
                preserveWhitespaces: false,
                template: `
    <tds-affix *ngIf="tdsAffix; else content" [offsetTop]="tdsOffsetTop!" [tdsTarget]="container">
      <ng-template [ngTemplateOutlet]="content"></ng-template>
    </tds-affix>
    <ng-template #content>
      <div class="tds-anchor-wrapper " [ngStyle]="wrapperStyle">
        <div class="tds-anchor flex flex-col border-l border-neutral-2-100 dark:border-d-neutral-2-100" [ngClass]="{ fixed: !tdsAffix && !tdsShowInkInFixed }">
          <div class="tds-anchor-ink">
            <div class="tds-anchor-ink-ball" #ink></div>
          </div>
          <ng-content></ng-content>
        </div>
      </div>
    </ng-template>
   
   `,
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }, { type: i1.TDSConfigService }, { type: i2.TDSScrollService }, { type: i0.ChangeDetectorRef }, { type: i3.Platform }, { type: i0.NgZone }, { type: i0.Renderer2 }]; }, { ink: [{
            type: ViewChild,
            args: ['ink', { static: false }]
        }], tdsAffix: [{
            type: Input
        }], tdsShowInkInFixed: [{
            type: Input
        }], tdsBounds: [{
            type: Input
        }], tdsOffsetTop: [{
            type: Input
        }], tdsTargetOffset: [{
            type: Input
        }], tdsContainer: [{
            type: Input
        }], tdsCurrentAnchor: [{
            type: Input
        }], tdsClick: [{
            type: Output
        }], tdsChange: [{
            type: Output
        }], tdsScroll: [{
            type: Output
        }] }); })();
//# sourceMappingURL=data:application/json;base64,