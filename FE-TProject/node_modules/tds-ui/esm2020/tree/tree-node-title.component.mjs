import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "./tree-drop-indicator.component";
import * as i3 from "tds-ui/core/highlight";
function TDSTreeNodeTitleComponent_ng_template_0_Template(rf, ctx) { }
function TDSTreeNodeTitleComponent_ng_container_1_span_1_i_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "i", 6);
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext(3);
    i0.ɵɵproperty("ngClass", ctx_r4.icon);
} }
function TDSTreeNodeTitleComponent_ng_container_1_span_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span")(1, "span");
    i0.ɵɵtemplate(2, TDSTreeNodeTitleComponent_ng_container_1_span_1_i_2_Template, 1, 1, "i", 5);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext(2);
    i0.ɵɵclassProp("tds-tree-icon__open", ctx_r2.isSwitcherOpen)("tds-tree-icon__close", ctx_r2.isSwitcherClose)("tds-tree-icon_loading", ctx_r2.isLoading)("tds-select-tree-iconEle", ctx_r2.selectMode)("tds-tree-iconEle", !ctx_r2.selectMode);
    i0.ɵɵadvance(1);
    i0.ɵɵclassProp("tds-select-tree-iconEle", ctx_r2.selectMode)("tds-select-tree-icon__customize", ctx_r2.selectMode)("tds-tree-iconEle", !ctx_r2.selectMode)("tds-tree-icon__customize", !ctx_r2.selectMode);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r2.icon);
} }
function TDSTreeNodeTitleComponent_ng_container_1_tds_tree_drop_indicator_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "tds-tree-drop-indicator", 7);
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("dropPosition", ctx_r3.dragPosition)("level", ctx_r3.context.level);
} }
function TDSTreeNodeTitleComponent_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtemplate(1, TDSTreeNodeTitleComponent_ng_container_1_span_1_Template, 3, 19, "span", 2);
    i0.ɵɵelement(2, "span", 3);
    i0.ɵɵpipe(3, "tdsHighlight");
    i0.ɵɵtemplate(4, TDSTreeNodeTitleComponent_ng_container_1_tds_tree_drop_indicator_4_Template, 1, 2, "tds-tree-drop-indicator", 4);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r1.icon && ctx_r1.showIcon);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("innerHTML", i0.ɵɵpipeBind4(3, 3, ctx_r1.title, ctx_r1.matchedValue, "i", "font-semibold"), i0.ɵɵsanitizeHtml);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r1.showIndicator);
} }
const _c0 = function (a0, a1) { return { $implicit: a0, origin: a1 }; };
export class TDSTreeNodeTitleComponent {
    constructor(cdr) {
        this.cdr = cdr;
        this.treeTemplate = null;
        this.selectMode = false;
        // Drag indicator
        this.showIndicator = true;
    }
    get canDraggable() {
        return this.draggable && !this.isDisabled ? true : null;
    }
    get matchedValue() {
        return this.isMatched ? this.searchValue : '';
    }
    get isSwitcherOpen() {
        return this.isExpanded && !this.isLeaf;
    }
    get isSwitcherClose() {
        return !this.isExpanded && !this.isLeaf;
    }
    ngOnChanges(changes) {
        const { showIndicator, dragPosition } = changes;
        if (showIndicator || dragPosition) {
            this.cdr.markForCheck();
        }
    }
}
TDSTreeNodeTitleComponent.ɵfac = function TDSTreeNodeTitleComponent_Factory(t) { return new (t || TDSTreeNodeTitleComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
TDSTreeNodeTitleComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSTreeNodeTitleComponent, selectors: [["tds-tree-node-title"]], hostAttrs: [1, "flex", "items-center"], hostVars: 21, hostBindings: function TDSTreeNodeTitleComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵattribute("title", ctx.title)("draggable", ctx.canDraggable)("aria-grabbed", ctx.canDraggable);
        i0.ɵɵclassProp("draggable", ctx.canDraggable)("tds-select-tree-node-content-wrapper", ctx.selectMode)("tds-select-tree-node-content-wrapper-open", ctx.selectMode && ctx.isSwitcherOpen)("tds-select-tree-node-content-wrapper-close", ctx.selectMode && ctx.isSwitcherClose)("tds-select-tree-node-selected", ctx.selectMode && ctx.isSelected)("tds-tree-node-content-wrapper", !ctx.selectMode)("tds-tree-node-content-wrapper-open", !ctx.selectMode && ctx.isSwitcherOpen)("tds-tree-node-content-wrapper-close", !ctx.selectMode && ctx.isSwitcherClose)("tds-tree-node-selected", !ctx.selectMode && ctx.isSelected);
    } }, inputs: { searchValue: "searchValue", treeTemplate: "treeTemplate", draggable: "draggable", showIcon: "showIcon", selectMode: "selectMode", context: "context", icon: "icon", title: "title", isLoading: "isLoading", isSelected: "isSelected", isDisabled: "isDisabled", isMatched: "isMatched", isExpanded: "isExpanded", isLeaf: "isLeaf", showIndicator: "showIndicator", dragPosition: "dragPosition" }, features: [i0.ɵɵNgOnChangesFeature], decls: 2, vars: 6, consts: [[3, "ngTemplateOutlet", "ngTemplateOutletContext"], [4, "ngIf"], [3, "tds-tree-icon__open", "tds-tree-icon__close", "tds-tree-icon_loading", "tds-select-tree-iconEle", "tds-tree-iconEle", 4, "ngIf"], [1, "tds-tree-title", "text-body-2", "font-regular", "text-neutral-1-900", 3, "innerHTML"], [3, "dropPosition", "level", 4, "ngIf"], ["class", "text-neutral-1-900 text-xl leading-none mr-2", 3, "ngClass", 4, "ngIf"], [1, "text-neutral-1-900", "text-xl", "leading-none", "mr-2", 3, "ngClass"], [3, "dropPosition", "level"]], template: function TDSTreeNodeTitleComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtemplate(0, TDSTreeNodeTitleComponent_ng_template_0_Template, 0, 0, "ng-template", 0);
        i0.ɵɵtemplate(1, TDSTreeNodeTitleComponent_ng_container_1_Template, 5, 8, "ng-container", 1);
    } if (rf & 2) {
        i0.ɵɵproperty("ngTemplateOutlet", ctx.treeTemplate)("ngTemplateOutletContext", i0.ɵɵpureFunction2(3, _c0, ctx.context, ctx.context.origin));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx.treeTemplate);
    } }, directives: [i1.NgTemplateOutlet, i1.NgIf, i1.NgClass, i2.TDSTreeDropIndicatorComponent], pipes: [i3.TDSHighlightPipe], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSTreeNodeTitleComponent, [{
        type: Component,
        args: [{
                selector: 'tds-tree-node-title',
                template: `
    <ng-template
      [ngTemplateOutlet]="treeTemplate"
      [ngTemplateOutletContext]="{ $implicit: context, origin: context.origin }"
    ></ng-template>
    <ng-container *ngIf="!treeTemplate">
      <span
        *ngIf="icon && showIcon"
        [class.tds-tree-icon__open]="isSwitcherOpen"
        [class.tds-tree-icon__close]="isSwitcherClose"
        [class.tds-tree-icon_loading]="isLoading"
        [class.tds-select-tree-iconEle]="selectMode"
        [class.tds-tree-iconEle]="!selectMode"
      >
        <span
          [class.tds-select-tree-iconEle]="selectMode"
          [class.tds-select-tree-icon__customize]="selectMode"
          [class.tds-tree-iconEle]="!selectMode"
          [class.tds-tree-icon__customize]="!selectMode"
        >
          <i  *ngIf="icon" [ngClass]="icon" class="text-neutral-1-900 text-xl leading-none mr-2"></i>
        </span>
      </span>
      <span class="tds-tree-title text-body-2 font-regular text-neutral-1-900" [innerHTML]="title | tdsHighlight: matchedValue:'i':'font-semibold'"></span>
      <tds-tree-drop-indicator
        *ngIf="showIndicator"
        [dropPosition]="dragPosition"
        [level]="context.level"
      ></tds-tree-drop-indicator>
    </ng-container>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                host: {
                    '[attr.title]': 'title',
                    '[attr.draggable]': 'canDraggable',
                    '[attr.aria-grabbed]': 'canDraggable',
                    '[class.draggable]': 'canDraggable',
                    '[class.tds-select-tree-node-content-wrapper]': `selectMode`,
                    '[class.tds-select-tree-node-content-wrapper-open]': `selectMode && isSwitcherOpen`,
                    '[class.tds-select-tree-node-content-wrapper-close]': `selectMode && isSwitcherClose`,
                    '[class.tds-select-tree-node-selected]': `selectMode && isSelected`,
                    '[class.tds-tree-node-content-wrapper]': `!selectMode`,
                    '[class.tds-tree-node-content-wrapper-open]': `!selectMode && isSwitcherOpen`,
                    '[class.tds-tree-node-content-wrapper-close]': `!selectMode && isSwitcherClose`,
                    '[class.tds-tree-node-selected]': `!selectMode && isSelected`,
                    'class': "flex items-center"
                }
            }]
    }], function () { return [{ type: i0.ChangeDetectorRef }]; }, { searchValue: [{
            type: Input
        }], treeTemplate: [{
            type: Input
        }], draggable: [{
            type: Input
        }], showIcon: [{
            type: Input
        }], selectMode: [{
            type: Input
        }], context: [{
            type: Input
        }], icon: [{
            type: Input
        }], title: [{
            type: Input
        }], isLoading: [{
            type: Input
        }], isSelected: [{
            type: Input
        }], isDisabled: [{
            type: Input
        }], isMatched: [{
            type: Input
        }], isExpanded: [{
            type: Input
        }], isLeaf: [{
            type: Input
        }], showIndicator: [{
            type: Input
        }], dragPosition: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;base64,