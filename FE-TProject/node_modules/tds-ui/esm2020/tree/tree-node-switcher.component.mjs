import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "tds-ui/core/outlet";
import * as i3 from "tds-ui/progress-spinner";
const _c0 = function (a0, a1) { return { "tdsi-arrow-down-fill": a0, "tdsi-arrow-right-fill": a1 }; };
function TDSTreeNodeSwitcherComponent_ng_container_0_ng_container_1_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelement(1, "span", 4);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r5 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction2(1, _c0, !ctx_r5.selectMode && ctx_r5.isSwitcherOpen, !(!ctx_r5.selectMode && ctx_r5.isSwitcherOpen)));
} }
const _c1 = function (a0, a1) { return { $implicit: a0, origin: a1 }; };
function TDSTreeNodeSwitcherComponent_ng_container_0_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtemplate(1, TDSTreeNodeSwitcherComponent_ng_container_0_ng_container_1_ng_container_1_Template, 2, 4, "ng-container", 3);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("tdsStringTemplateOutlet", ctx_r4.expandedIcon)("tdsStringTemplateOutletContext", i0.ɵɵpureFunction2(2, _c1, ctx_r4.context, ctx_r4.context.origin));
} }
function TDSTreeNodeSwitcherComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtemplate(1, TDSTreeNodeSwitcherComponent_ng_container_0_ng_container_1_Template, 2, 5, "ng-container", 2);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    const _r2 = i0.ɵɵreference(3);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", !ctx_r0.isLoading)("ngIfElse", _r2);
} }
function TDSTreeNodeSwitcherComponent_ng_container_1_ng_container_1_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function TDSTreeNodeSwitcherComponent_ng_container_1_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtemplate(1, TDSTreeNodeSwitcherComponent_ng_container_1_ng_container_1_ng_container_1_Template, 1, 0, "ng-container", 3);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r6 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("tdsStringTemplateOutlet", ctx_r6.expandedIcon)("tdsStringTemplateOutletContext", i0.ɵɵpureFunction2(2, _c1, ctx_r6.context, ctx_r6.context.origin));
} }
function TDSTreeNodeSwitcherComponent_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtemplate(1, TDSTreeNodeSwitcherComponent_ng_container_1_ng_container_1_Template, 2, 5, "ng-container", 2);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    const _r2 = i0.ɵɵreference(3);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", !ctx_r1.isLoading)("ngIfElse", _r2);
} }
function TDSTreeNodeSwitcherComponent_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "tds-spinner", 5);
} }
export class TDSTreeNodeSwitcherComponent {
    constructor() {
        this.selectMode = false;
    }
    get isShowLineIcon() {
        return !this.isLeaf && !!this.showLine;
    }
    get isShowSwitchIcon() {
        return !this.isLeaf && !this.showLine;
    }
    get isSwitcherOpen() {
        return !!this.isExpanded && !this.isLeaf;
    }
    get isSwitcherClose() {
        return !this.isExpanded && !this.isLeaf;
    }
}
TDSTreeNodeSwitcherComponent.ɵfac = function TDSTreeNodeSwitcherComponent_Factory(t) { return new (t || TDSTreeNodeSwitcherComponent)(); };
TDSTreeNodeSwitcherComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSTreeNodeSwitcherComponent, selectors: [["tds-tree-node-switcher"]], hostAttrs: [1, "flex", "items-center"], hostVars: 16, hostBindings: function TDSTreeNodeSwitcherComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵclassProp("tds-select-tree-switcher", ctx.selectMode)("tds-select-tree-switcher-noop", ctx.selectMode && ctx.isLeaf)("tds-select-tree-switcher_open", ctx.selectMode && ctx.isSwitcherOpen)("tds-select-tree-switcher_close", ctx.selectMode && ctx.isSwitcherClose)("tds-tree-switcher", !ctx.selectMode)("tds-tree-switcher-noop", !ctx.selectMode && ctx.isLeaf)("tds-tree-switcher_open", !ctx.selectMode && ctx.isSwitcherOpen)("tds-tree-switcher_close", !ctx.selectMode && ctx.isSwitcherClose);
    } }, inputs: { showExpand: "showExpand", showLine: "showLine", expandedIcon: "expandedIcon", selectMode: "selectMode", context: "context", isLeaf: "isLeaf", isLoading: "isLoading", isExpanded: "isExpanded" }, decls: 4, vars: 2, consts: [[4, "ngIf"], ["loadingTemplate", ""], [4, "ngIf", "ngIfElse"], [4, "tdsStringTemplateOutlet", "tdsStringTemplateOutletContext"], [1, "text-neutral-1-900", "text-xl", "leading-none", "mr-2", "cursor-pointer", 3, "ngClass"], [1, "mr-2", "w-4", "h-4"]], template: function TDSTreeNodeSwitcherComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtemplate(0, TDSTreeNodeSwitcherComponent_ng_container_0_Template, 2, 2, "ng-container", 0);
        i0.ɵɵtemplate(1, TDSTreeNodeSwitcherComponent_ng_container_1_Template, 2, 2, "ng-container", 0);
        i0.ɵɵtemplate(2, TDSTreeNodeSwitcherComponent_ng_template_2_Template, 1, 0, "ng-template", null, 1, i0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        i0.ɵɵproperty("ngIf", ctx.isShowSwitchIcon);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx.showLine);
    } }, directives: [i1.NgIf, i2.TDSStringTemplateOutletDirective, i1.NgClass, i3.TDSProgressSpinnerComponent], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSTreeNodeSwitcherComponent, [{
        type: Component,
        args: [{ selector: 'tds-tree-node-switcher', changeDetection: ChangeDetectionStrategy.OnPush, preserveWhitespaces: false, host: {
                    '[class.tds-select-tree-switcher]': 'selectMode',
                    '[class.tds-select-tree-switcher-noop]': 'selectMode && isLeaf',
                    '[class.tds-select-tree-switcher_open]': 'selectMode && isSwitcherOpen',
                    '[class.tds-select-tree-switcher_close]': 'selectMode && isSwitcherClose',
                    '[class.tds-tree-switcher]': '!selectMode',
                    '[class.tds-tree-switcher-noop]': '!selectMode && isLeaf',
                    '[class.tds-tree-switcher_open]': '!selectMode && isSwitcherOpen',
                    '[class.tds-tree-switcher_close]': '!selectMode && isSwitcherClose',
                    'class': 'flex items-center'
                }, template: "<ng-container *ngIf=\"isShowSwitchIcon\">\r\n    <ng-container *ngIf=\"!isLoading; else loadingTemplate\">\r\n      <ng-container *tdsStringTemplateOutlet=\"expandedIcon; context: { $implicit: context, origin: context.origin }\">\r\n        <!-- <i\r\n          nz-icon\r\n          nzType=\"caret-down\"\r\n          [class.tds-select-tree-switcher-icon]=\"selectMode\"\r\n          [class.tds-tree-switcher-icon]=\"!selectMode\"\r\n        ></i> -->\r\n        <span class=\"text-neutral-1-900 text-xl leading-none mr-2 cursor-pointer\" [ngClass]=\"{'tdsi-arrow-down-fill':!selectMode && isSwitcherOpen,'tdsi-arrow-right-fill':!(!selectMode && isSwitcherOpen)}\"></span>\r\n      </ng-container>\r\n    </ng-container>\r\n  </ng-container>\r\n  <ng-container *ngIf=\"showLine\">\r\n    <ng-container *ngIf=\"!isLoading; else loadingTemplate\">\r\n      <ng-container *tdsStringTemplateOutlet=\"expandedIcon; context: { $implicit: context, origin: context.origin }\">\r\n        <!-- <i\r\n          *ngIf=\"isShowLineIcon\"\r\n          nz-icon\r\n          [nzType]=\"isSwitcherOpen ? 'minus-square' : 'plus-square'\"\r\n          class=\"tds-tree-switcher-line-icon\"\r\n        ></i>\r\n        <i *ngIf=\"!isShowLineIcon\" nz-icon nzType=\"file\" class=\"tds-tree-switcher-line-icon\"></i> -->\r\n      </ng-container>\r\n    </ng-container>\r\n  </ng-container>\r\n  <ng-template #loadingTemplate>\r\n    <tds-spinner class=\"mr-2 w-4 h-4\">                          \r\n    </tds-spinner>\r\n    \r\n  </ng-template>" }]
    }], null, { showExpand: [{
            type: Input
        }], showLine: [{
            type: Input
        }], expandedIcon: [{
            type: Input
        }], selectMode: [{
            type: Input
        }], context: [{
            type: Input
        }], isLeaf: [{
            type: Input
        }], isLoading: [{
            type: Input
        }], isExpanded: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1ub2RlLXN3aXRjaGVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL3Rkcy11aS90cmVlL3RyZWUtbm9kZS1zd2l0Y2hlci5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi9wcm9qZWN0cy90ZHMtdWkvdHJlZS90cmVlLW5vZGUtc3dpdGNoZXIuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQWUsTUFBTSxlQUFlLENBQUM7Ozs7Ozs7SUNBakYsNkJBQStHO0lBTzdHLDBCQUE2TTtJQUMvTSwwQkFBZTs7O0lBRDZELGVBQTJIO0lBQTNILGlKQUEySDs7OztJQVJ6TSw2QkFBdUQ7SUFDckQsNkhBUWU7SUFDakIsMEJBQWU7OztJQVRFLGVBQXVDO0lBQXZDLDZEQUF1QyxxR0FBQTs7O0lBRjVELDZCQUF1QztJQUNuQyw4R0FVZTtJQUNqQiwwQkFBZTs7OztJQVhFLGVBQWtCO0lBQWxCLHdDQUFrQixpQkFBQTs7O0lBYy9CLHdCQVFlOzs7SUFUakIsNkJBQXVEO0lBQ3JELDZIQVFlO0lBQ2pCLDBCQUFlOzs7SUFURSxlQUF1QztJQUF2Qyw2REFBdUMscUdBQUE7OztJQUYxRCw2QkFBK0I7SUFDN0IsOEdBVWU7SUFDakIsMEJBQWU7Ozs7SUFYRSxlQUFrQjtJQUFsQix3Q0FBa0IsaUJBQUE7OztJQWFqQyxpQ0FDYzs7QURKbEIsTUFBTSxPQUFPLDRCQUE0QjtJQWxCekM7UUFzQlcsZUFBVSxHQUFHLEtBQUssQ0FBQztLQXFCN0I7SUFmQyxJQUFJLGNBQWM7UUFDaEIsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDekMsQ0FBQztJQUVELElBQUksZ0JBQWdCO1FBQ2xCLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN4QyxDQUFDO0lBRUQsSUFBSSxjQUFjO1FBQ2hCLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQzNDLENBQUM7SUFFRCxJQUFJLGVBQWU7UUFDakIsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQzFDLENBQUM7O3dHQXhCVSw0QkFBNEI7K0VBQTVCLDRCQUE0Qjs7O1FDeEJ6QywrRkFZaUI7UUFDZiwrRkFZZTtRQUNmLDhIQUljOztRQTlCRCwyQ0FBc0I7UUFhcEIsZUFBYztRQUFkLG1DQUFjOzt1RkRXbEIsNEJBQTRCO2NBbEJ4QyxTQUFTOzJCQUNFLHdCQUF3QixtQkFFakIsdUJBQXVCLENBQUMsTUFBTSx1QkFDMUIsS0FBSyxRQUNwQjtvQkFDSixrQ0FBa0MsRUFBRSxZQUFZO29CQUNoRCx1Q0FBdUMsRUFBRSxzQkFBc0I7b0JBQy9ELHVDQUF1QyxFQUFFLDhCQUE4QjtvQkFDdkUsd0NBQXdDLEVBQUUsK0JBQStCO29CQUN6RSwyQkFBMkIsRUFBRSxhQUFhO29CQUMxQyxnQ0FBZ0MsRUFBRSx1QkFBdUI7b0JBQ3pELGdDQUFnQyxFQUFFLCtCQUErQjtvQkFDakUsaUNBQWlDLEVBQUUsZ0NBQWdDO29CQUNuRSxPQUFPLEVBQUMsbUJBQW1CO2lCQUU1QjtnQkFHUSxVQUFVO2tCQUFsQixLQUFLO1lBQ0csUUFBUTtrQkFBaEIsS0FBSztZQUNHLFlBQVk7a0JBQXBCLEtBQUs7WUFDRyxVQUFVO2tCQUFsQixLQUFLO1lBQ0csT0FBTztrQkFBZixLQUFLO1lBQ0csTUFBTTtrQkFBZCxLQUFLO1lBQ0csU0FBUztrQkFBakIsS0FBSztZQUNHLFVBQVU7a0JBQWxCLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuXHJcbmltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIElucHV0LCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBURFNUcmVlTm9kZSwgVERTVHJlZU5vZGVPcHRpb25zIH0gZnJvbSAndGRzLXVpL2NvcmUvdHJlZSc7XHJcblxyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICd0ZHMtdHJlZS1ub2RlLXN3aXRjaGVyJyxcclxuICB0ZW1wbGF0ZVVybDogJy4vdHJlZS1ub2RlLXN3aXRjaGVyLmNvbXBvbmVudC5odG1sJyxcclxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcclxuICBwcmVzZXJ2ZVdoaXRlc3BhY2VzOiBmYWxzZSxcclxuICBob3N0OiB7XHJcbiAgICAnW2NsYXNzLnRkcy1zZWxlY3QtdHJlZS1zd2l0Y2hlcl0nOiAnc2VsZWN0TW9kZScsXHJcbiAgICAnW2NsYXNzLnRkcy1zZWxlY3QtdHJlZS1zd2l0Y2hlci1ub29wXSc6ICdzZWxlY3RNb2RlICYmIGlzTGVhZicsXHJcbiAgICAnW2NsYXNzLnRkcy1zZWxlY3QtdHJlZS1zd2l0Y2hlcl9vcGVuXSc6ICdzZWxlY3RNb2RlICYmIGlzU3dpdGNoZXJPcGVuJyxcclxuICAgICdbY2xhc3MudGRzLXNlbGVjdC10cmVlLXN3aXRjaGVyX2Nsb3NlXSc6ICdzZWxlY3RNb2RlICYmIGlzU3dpdGNoZXJDbG9zZScsXHJcbiAgICAnW2NsYXNzLnRkcy10cmVlLXN3aXRjaGVyXSc6ICchc2VsZWN0TW9kZScsXHJcbiAgICAnW2NsYXNzLnRkcy10cmVlLXN3aXRjaGVyLW5vb3BdJzogJyFzZWxlY3RNb2RlICYmIGlzTGVhZicsXHJcbiAgICAnW2NsYXNzLnRkcy10cmVlLXN3aXRjaGVyX29wZW5dJzogJyFzZWxlY3RNb2RlICYmIGlzU3dpdGNoZXJPcGVuJyxcclxuICAgICdbY2xhc3MudGRzLXRyZWUtc3dpdGNoZXJfY2xvc2VdJzogJyFzZWxlY3RNb2RlICYmIGlzU3dpdGNoZXJDbG9zZScsXHJcbiAgICAnY2xhc3MnOidmbGV4IGl0ZW1zLWNlbnRlcidcclxuXHJcbiAgfVxyXG59KVxyXG5leHBvcnQgY2xhc3MgVERTVHJlZU5vZGVTd2l0Y2hlckNvbXBvbmVudCB7XHJcbiAgQElucHV0KCkgc2hvd0V4cGFuZD86IGJvb2xlYW47XHJcbiAgQElucHV0KCkgc2hvd0xpbmU/OiBib29sZWFuO1xyXG4gIEBJbnB1dCgpIGV4cGFuZGVkSWNvbj86IFRlbXBsYXRlUmVmPHsgJGltcGxpY2l0OiBURFNUcmVlTm9kZTsgb3JpZ2luOiBURFNUcmVlTm9kZU9wdGlvbnMgfT47XHJcbiAgQElucHV0KCkgc2VsZWN0TW9kZSA9IGZhbHNlO1xyXG4gIEBJbnB1dCgpIGNvbnRleHQhOiBURFNUcmVlTm9kZTtcclxuICBASW5wdXQoKSBpc0xlYWY/OiBib29sZWFuO1xyXG4gIEBJbnB1dCgpIGlzTG9hZGluZz86IGJvb2xlYW47XHJcbiAgQElucHV0KCkgaXNFeHBhbmRlZD86IGJvb2xlYW47XHJcblxyXG4gIGdldCBpc1Nob3dMaW5lSWNvbigpOiBib29sZWFuIHtcclxuICAgIHJldHVybiAhdGhpcy5pc0xlYWYgJiYgISF0aGlzLnNob3dMaW5lO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGlzU2hvd1N3aXRjaEljb24oKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gIXRoaXMuaXNMZWFmICYmICF0aGlzLnNob3dMaW5lO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGlzU3dpdGNoZXJPcGVuKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuICEhdGhpcy5pc0V4cGFuZGVkICYmICF0aGlzLmlzTGVhZjtcclxuICB9XHJcblxyXG4gIGdldCBpc1N3aXRjaGVyQ2xvc2UoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gIXRoaXMuaXNFeHBhbmRlZCAmJiAhdGhpcy5pc0xlYWY7XHJcbiAgfVxyXG59XHJcbiIsIjxuZy1jb250YWluZXIgKm5nSWY9XCJpc1Nob3dTd2l0Y2hJY29uXCI+XHJcbiAgICA8bmctY29udGFpbmVyICpuZ0lmPVwiIWlzTG9hZGluZzsgZWxzZSBsb2FkaW5nVGVtcGxhdGVcIj5cclxuICAgICAgPG5nLWNvbnRhaW5lciAqdGRzU3RyaW5nVGVtcGxhdGVPdXRsZXQ9XCJleHBhbmRlZEljb247IGNvbnRleHQ6IHsgJGltcGxpY2l0OiBjb250ZXh0LCBvcmlnaW46IGNvbnRleHQub3JpZ2luIH1cIj5cclxuICAgICAgICA8IS0tIDxpXHJcbiAgICAgICAgICBuei1pY29uXHJcbiAgICAgICAgICBuelR5cGU9XCJjYXJldC1kb3duXCJcclxuICAgICAgICAgIFtjbGFzcy50ZHMtc2VsZWN0LXRyZWUtc3dpdGNoZXItaWNvbl09XCJzZWxlY3RNb2RlXCJcclxuICAgICAgICAgIFtjbGFzcy50ZHMtdHJlZS1zd2l0Y2hlci1pY29uXT1cIiFzZWxlY3RNb2RlXCJcclxuICAgICAgICA+PC9pPiAtLT5cclxuICAgICAgICA8c3BhbiBjbGFzcz1cInRleHQtbmV1dHJhbC0xLTkwMCB0ZXh0LXhsIGxlYWRpbmctbm9uZSBtci0yIGN1cnNvci1wb2ludGVyXCIgW25nQ2xhc3NdPVwieyd0ZHNpLWFycm93LWRvd24tZmlsbCc6IXNlbGVjdE1vZGUgJiYgaXNTd2l0Y2hlck9wZW4sJ3Rkc2ktYXJyb3ctcmlnaHQtZmlsbCc6ISghc2VsZWN0TW9kZSAmJiBpc1N3aXRjaGVyT3Blbil9XCI+PC9zcGFuPlxyXG4gICAgICA8L25nLWNvbnRhaW5lcj5cclxuICAgIDwvbmctY29udGFpbmVyPlxyXG4gIDwvbmctY29udGFpbmVyPlxyXG4gIDxuZy1jb250YWluZXIgKm5nSWY9XCJzaG93TGluZVwiPlxyXG4gICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cIiFpc0xvYWRpbmc7IGVsc2UgbG9hZGluZ1RlbXBsYXRlXCI+XHJcbiAgICAgIDxuZy1jb250YWluZXIgKnRkc1N0cmluZ1RlbXBsYXRlT3V0bGV0PVwiZXhwYW5kZWRJY29uOyBjb250ZXh0OiB7ICRpbXBsaWNpdDogY29udGV4dCwgb3JpZ2luOiBjb250ZXh0Lm9yaWdpbiB9XCI+XHJcbiAgICAgICAgPCEtLSA8aVxyXG4gICAgICAgICAgKm5nSWY9XCJpc1Nob3dMaW5lSWNvblwiXHJcbiAgICAgICAgICBuei1pY29uXHJcbiAgICAgICAgICBbbnpUeXBlXT1cImlzU3dpdGNoZXJPcGVuID8gJ21pbnVzLXNxdWFyZScgOiAncGx1cy1zcXVhcmUnXCJcclxuICAgICAgICAgIGNsYXNzPVwidGRzLXRyZWUtc3dpdGNoZXItbGluZS1pY29uXCJcclxuICAgICAgICA+PC9pPlxyXG4gICAgICAgIDxpICpuZ0lmPVwiIWlzU2hvd0xpbmVJY29uXCIgbnotaWNvbiBuelR5cGU9XCJmaWxlXCIgY2xhc3M9XCJ0ZHMtdHJlZS1zd2l0Y2hlci1saW5lLWljb25cIj48L2k+IC0tPlxyXG4gICAgICA8L25nLWNvbnRhaW5lcj5cclxuICAgIDwvbmctY29udGFpbmVyPlxyXG4gIDwvbmctY29udGFpbmVyPlxyXG4gIDxuZy10ZW1wbGF0ZSAjbG9hZGluZ1RlbXBsYXRlPlxyXG4gICAgPHRkcy1zcGlubmVyIGNsYXNzPVwibXItMiB3LTQgaC00XCI+ICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgIDwvdGRzLXNwaW5uZXI+XHJcbiAgICBcclxuICA8L25nLXRlbXBsYXRlPiJdfQ==