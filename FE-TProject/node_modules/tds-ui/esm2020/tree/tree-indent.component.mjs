import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
function TDSTreeIndentComponent_span_0_span_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 3);
    i0.ɵɵtext(1, " \u00A0 ");
    i0.ɵɵelementEnd();
} }
const _c0 = function (a0) { return { "inline-block w-7": a0 }; };
function TDSTreeIndentComponent_span_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 1);
    i0.ɵɵtemplate(1, TDSTreeIndentComponent_span_0_span_1_Template, 2, 0, "span", 2);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const i_r2 = ctx.index;
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵclassProp("tds-tree-indent-unit", !ctx_r0.selectMode)("tds-select-tree-indent-unit", ctx_r0.selectMode)("tds-select-tree-indent-unit-start", ctx_r0.selectMode && ctx_r0.isStart[i_r2])("tds-tree-indent-unit-start", !ctx_r0.selectMode && ctx_r0.isStart[i_r2])("tds-select-tree-indent-unit-end", ctx_r0.selectMode && ctx_r0.isEnd[i_r2])("tds-tree-indent-unit-end", !ctx_r0.selectMode && ctx_r0.isEnd[i_r2]);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(14, _c0, !ctx_r0.selectMode));
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", !(!ctx_r0.selectMode && ctx_r0.isEnd[i_r2]));
} }
export class TDSTreeIndentComponent {
    constructor() {
        this.treeLevel = 0;
        this.isStart = [];
        this.isEnd = [];
        this.selectMode = false;
        this.listOfUnit = [];
    }
    ngOnChanges(changes) {
        const { treeLevel } = changes;
        if (treeLevel) {
            this.listOfUnit = [...new Array(treeLevel.currentValue || 0)];
        }
    }
}
TDSTreeIndentComponent.ɵfac = function TDSTreeIndentComponent_Factory(t) { return new (t || TDSTreeIndentComponent)(); };
TDSTreeIndentComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSTreeIndentComponent, selectors: [["tds-tree-indent"]], hostAttrs: [1, "items-stretch", "whitespace-nowrap", "select-none", "flex"], hostVars: 5, hostBindings: function TDSTreeIndentComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵattribute("aria-hidden", true);
        i0.ɵɵclassProp("tds-tree-indent", !ctx.selectMode)("tds-select-tree-indent", ctx.selectMode);
    } }, inputs: { treeLevel: "treeLevel", isStart: "isStart", isEnd: "isEnd", selectMode: "selectMode" }, exportAs: ["tdsTreeIndent"], features: [i0.ɵɵNgOnChangesFeature], decls: 1, vars: 1, consts: [["class", "relative ", 3, "tds-tree-indent-unit", "tds-select-tree-indent-unit", "tds-select-tree-indent-unit-start", "tds-tree-indent-unit-start", "tds-select-tree-indent-unit-end", "tds-tree-indent-unit-end", "ngClass", 4, "ngFor", "ngForOf"], [1, "relative", 3, "ngClass"], ["class", "absolute inset-0  -inset-y-1.5 border-l border-neutral-2-200", "style", "left:10px", 4, "ngIf"], [1, "absolute", "inset-0", "-inset-y-1.5", "border-l", "border-neutral-2-200", 2, "left", "10px"]], template: function TDSTreeIndentComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtemplate(0, TDSTreeIndentComponent_span_0_Template, 2, 16, "span", 0);
    } if (rf & 2) {
        i0.ɵɵproperty("ngForOf", ctx.listOfUnit);
    } }, directives: [i1.NgForOf, i1.NgClass, i1.NgIf], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSTreeIndentComponent, [{
        type: Component,
        args: [{
                selector: 'tds-tree-indent',
                exportAs: 'tdsTreeIndent',
                template: `
    <span      
      [class.tds-tree-indent-unit]="!selectMode"
      [class.tds-select-tree-indent-unit]="selectMode"
      [class.tds-select-tree-indent-unit-start]="selectMode && isStart[i]"
      [class.tds-tree-indent-unit-start]="!selectMode && isStart[i]"
      [class.tds-select-tree-indent-unit-end]="selectMode && isEnd[i]"
      [class.tds-tree-indent-unit-end]="!selectMode && isEnd[i]"
      [ngClass] ="{'inline-block w-7':!selectMode}"
      class="relative "
      *ngFor="let _ of listOfUnit; let i = index"
    >    
      <span class="absolute inset-0  -inset-y-1.5 border-l border-neutral-2-200" style="left:10px" *ngIf="!(!selectMode && isEnd[i])">
        &nbsp;        
      </span>
    </span>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                host: {
                    '[attr.aria-hidden]': 'true',
                    '[class.tds-tree-indent]': '!selectMode',
                    '[class.tds-select-tree-indent]': 'selectMode',
                    'class': "items-stretch whitespace-nowrap select-none flex"
                }
            }]
    }], null, { treeLevel: [{
            type: Input
        }], isStart: [{
            type: Input
        }], isEnd: [{
            type: Input
        }], selectMode: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1pbmRlbnQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvdGRzLXVpL3RyZWUvdHJlZS1pbmRlbnQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUE0QixNQUFNLGVBQWUsQ0FBQzs7OztJQWlCOUYsK0JBQWdJO0lBQzlILHdCQUNGO0lBQUEsaUJBQU87Ozs7SUFiVCwrQkFVQztJQUNDLGdGQUVPO0lBQ1QsaUJBQU87Ozs7SUFiTCwwREFBMEMsa0RBQUEsZ0ZBQUEsMEVBQUEsNEVBQUEsc0VBQUE7SUFNMUMseUVBQTZDO0lBSWlELGVBQWdDO0lBQWhDLGtFQUFnQzs7QUFjcEksTUFBTSxPQUFPLHNCQUFzQjtJQTdCbkM7UUE4QlcsY0FBUyxHQUFHLENBQUMsQ0FBQztRQUNkLFlBQU8sR0FBYyxFQUFFLENBQUM7UUFDeEIsVUFBSyxHQUFjLEVBQUUsQ0FBQztRQUN0QixlQUFVLEdBQUcsS0FBSyxDQUFDO1FBRTVCLGVBQVUsR0FBYSxFQUFFLENBQUM7S0FRM0I7SUFOQyxXQUFXLENBQUMsT0FBc0I7UUFDaEMsTUFBTSxFQUFFLFNBQVMsRUFBRSxHQUFHLE9BQU8sQ0FBQztRQUM5QixJQUFJLFNBQVMsRUFBRTtZQUNiLElBQUksQ0FBQyxVQUFVLEdBQUcsQ0FBQyxHQUFHLElBQUksS0FBSyxDQUFDLFNBQVMsQ0FBQyxZQUFZLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUMvRDtJQUNILENBQUM7OzRGQWJVLHNCQUFzQjt5RUFBdEIsc0JBQXNCOzs7O1FBekIvQiwwRUFjTzs7UUFMUyx3Q0FBZTs7dUZBZ0J0QixzQkFBc0I7Y0E3QmxDLFNBQVM7ZUFBQztnQkFDVCxRQUFRLEVBQUUsaUJBQWlCO2dCQUMzQixRQUFRLEVBQUUsZUFBZTtnQkFDekIsUUFBUSxFQUFFOzs7Ozs7Ozs7Ozs7Ozs7O0dBZ0JUO2dCQUNELGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2dCQUMvQyxtQkFBbUIsRUFBRSxLQUFLO2dCQUMxQixJQUFJLEVBQUU7b0JBQ0osb0JBQW9CLEVBQUUsTUFBTTtvQkFDNUIseUJBQXlCLEVBQUUsYUFBYTtvQkFDeEMsZ0NBQWdDLEVBQUUsWUFBWTtvQkFDOUMsT0FBTyxFQUFFLGtEQUFrRDtpQkFDNUQ7YUFDRjtnQkFFVSxTQUFTO2tCQUFqQixLQUFLO1lBQ0csT0FBTztrQkFBZixLQUFLO1lBQ0csS0FBSztrQkFBYixLQUFLO1lBQ0csVUFBVTtrQkFBbEIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5cclxuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgSW5wdXQsIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICd0ZHMtdHJlZS1pbmRlbnQnLFxyXG4gIGV4cG9ydEFzOiAndGRzVHJlZUluZGVudCcsXHJcbiAgdGVtcGxhdGU6IGBcclxuICAgIDxzcGFuICAgICAgXHJcbiAgICAgIFtjbGFzcy50ZHMtdHJlZS1pbmRlbnQtdW5pdF09XCIhc2VsZWN0TW9kZVwiXHJcbiAgICAgIFtjbGFzcy50ZHMtc2VsZWN0LXRyZWUtaW5kZW50LXVuaXRdPVwic2VsZWN0TW9kZVwiXHJcbiAgICAgIFtjbGFzcy50ZHMtc2VsZWN0LXRyZWUtaW5kZW50LXVuaXQtc3RhcnRdPVwic2VsZWN0TW9kZSAmJiBpc1N0YXJ0W2ldXCJcclxuICAgICAgW2NsYXNzLnRkcy10cmVlLWluZGVudC11bml0LXN0YXJ0XT1cIiFzZWxlY3RNb2RlICYmIGlzU3RhcnRbaV1cIlxyXG4gICAgICBbY2xhc3MudGRzLXNlbGVjdC10cmVlLWluZGVudC11bml0LWVuZF09XCJzZWxlY3RNb2RlICYmIGlzRW5kW2ldXCJcclxuICAgICAgW2NsYXNzLnRkcy10cmVlLWluZGVudC11bml0LWVuZF09XCIhc2VsZWN0TW9kZSAmJiBpc0VuZFtpXVwiXHJcbiAgICAgIFtuZ0NsYXNzXSA9XCJ7J2lubGluZS1ibG9jayB3LTcnOiFzZWxlY3RNb2RlfVwiXHJcbiAgICAgIGNsYXNzPVwicmVsYXRpdmUgXCJcclxuICAgICAgKm5nRm9yPVwibGV0IF8gb2YgbGlzdE9mVW5pdDsgbGV0IGkgPSBpbmRleFwiXHJcbiAgICA+ICAgIFxyXG4gICAgICA8c3BhbiBjbGFzcz1cImFic29sdXRlIGluc2V0LTAgIC1pbnNldC15LTEuNSBib3JkZXItbCBib3JkZXItbmV1dHJhbC0yLTIwMFwiIHN0eWxlPVwibGVmdDoxMHB4XCIgKm5nSWY9XCIhKCFzZWxlY3RNb2RlICYmIGlzRW5kW2ldKVwiPlxyXG4gICAgICAgICZuYnNwOyAgICAgICAgXHJcbiAgICAgIDwvc3Bhbj5cclxuICAgIDwvc3Bhbj5cclxuICBgLFxyXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxyXG4gIHByZXNlcnZlV2hpdGVzcGFjZXM6IGZhbHNlLFxyXG4gIGhvc3Q6IHtcclxuICAgICdbYXR0ci5hcmlhLWhpZGRlbl0nOiAndHJ1ZScsXHJcbiAgICAnW2NsYXNzLnRkcy10cmVlLWluZGVudF0nOiAnIXNlbGVjdE1vZGUnLFxyXG4gICAgJ1tjbGFzcy50ZHMtc2VsZWN0LXRyZWUtaW5kZW50XSc6ICdzZWxlY3RNb2RlJyxcclxuICAgICdjbGFzcyc6IFwiaXRlbXMtc3RyZXRjaCB3aGl0ZXNwYWNlLW5vd3JhcCBzZWxlY3Qtbm9uZSBmbGV4XCJcclxuICB9XHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBURFNUcmVlSW5kZW50Q29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcclxuICBASW5wdXQoKSB0cmVlTGV2ZWwgPSAwO1xyXG4gIEBJbnB1dCgpIGlzU3RhcnQ6IGJvb2xlYW5bXSA9IFtdO1xyXG4gIEBJbnB1dCgpIGlzRW5kOiBib29sZWFuW10gPSBbXTtcclxuICBASW5wdXQoKSBzZWxlY3RNb2RlID0gZmFsc2U7XHJcblxyXG4gIGxpc3RPZlVuaXQ6IG51bWJlcltdID0gW107XHJcblxyXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcclxuICAgIGNvbnN0IHsgdHJlZUxldmVsIH0gPSBjaGFuZ2VzO1xyXG4gICAgaWYgKHRyZWVMZXZlbCkge1xyXG4gICAgICB0aGlzLmxpc3RPZlVuaXQgPSBbLi4ubmV3IEFycmF5KHRyZWVMZXZlbC5jdXJyZW50VmFsdWUgfHwgMCldO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=