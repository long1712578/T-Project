import { __decorate } from "tslib";
import { CdkVirtualScrollViewport } from '@angular/cdk/scrolling';
import { ChangeDetectionStrategy, Component, ContentChild, EventEmitter, forwardRef, Host, Input, Optional, Output, SkipSelf, ViewChild } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { treeCollapseMotion } from 'tds-ui/core/animation';
import { WithConfig } from 'tds-ui/core/config';
import { TDSTreeBase, TDSTreeBaseService, TDSTreeHigherOrderServiceToken } from 'tds-ui/core/tree';
import { flattenTreeData } from 'tds-ui/core/tree';
import { InputBoolean } from 'tds-ui/shared/utility';
import { TDSTreeService } from './tree.service';
import * as i0 from "@angular/core";
import * as i1 from "tds-ui/core/tree";
import * as i2 from "tds-ui/core/config";
import * as i3 from "@angular/cdk/bidi";
import * as i4 from "tds-ui/core/no-animation";
import * as i5 from "@angular/common";
import * as i6 from "@angular/cdk/scrolling";
import * as i7 from "./tree-node.component";
const _c0 = ["treeTemplate"];
function TDSTreeComponent_cdk_virtual_scroll_viewport_4_ng_container_1_ng_template_1_Template(rf, ctx) { }
const _c1 = function (a0) { return { $implicit: a0 }; };
function TDSTreeComponent_cdk_virtual_scroll_viewport_4_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtemplate(1, TDSTreeComponent_cdk_virtual_scroll_viewport_4_ng_container_1_ng_template_1_Template, 0, 0, "ng-template", 8);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const node_r5 = ctx.$implicit;
    i0.ɵɵnextContext(2);
    const _r2 = i0.ɵɵreference(7);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngTemplateOutlet", _r2)("ngTemplateOutletContext", i0.ɵɵpureFunction1(2, _c1, node_r5));
} }
function TDSTreeComponent_cdk_virtual_scroll_viewport_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "cdk-virtual-scroll-viewport", 6);
    i0.ɵɵtemplate(1, TDSTreeComponent_cdk_virtual_scroll_viewport_4_ng_container_1_Template, 2, 4, "ng-container", 7);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵstyleProp("height", ctx_r0.virtualHeight);
    i0.ɵɵclassProp("tds-select-tree-list-holder-inner", ctx_r0.selectMode)("tds-tree-list-holder-inner", !ctx_r0.selectMode);
    i0.ɵɵproperty("itemSize", ctx_r0.virtualItemSize)("minBufferPx", ctx_r0.virtualMinBufferPx)("maxBufferPx", ctx_r0.virtualMaxBufferPx);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("cdkVirtualForOf", ctx_r0.flattenNodes)("cdkVirtualForTrackBy", ctx_r0.trackByFlattenNode);
} }
function TDSTreeComponent_div_5_ng_container_1_ng_template_1_Template(rf, ctx) { }
function TDSTreeComponent_div_5_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtemplate(1, TDSTreeComponent_div_5_ng_container_1_ng_template_1_Template, 0, 0, "ng-template", 8);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const node_r8 = ctx.$implicit;
    i0.ɵɵnextContext(2);
    const _r2 = i0.ɵɵreference(7);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngTemplateOutlet", _r2)("ngTemplateOutletContext", i0.ɵɵpureFunction1(2, _c1, node_r8));
} }
function TDSTreeComponent_div_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 9);
    i0.ɵɵtemplate(1, TDSTreeComponent_div_5_ng_container_1_Template, 2, 4, "ng-container", 10);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵclassProp("tds-select-tree-list-holder-inner", ctx_r1.selectMode)("tds-tree-list-holder-inner", !ctx_r1.selectMode);
    i0.ɵɵproperty("@.disabled", ctx_r1.beforeInit || (ctx_r1.noAnimation == null ? null : ctx_r1.noAnimation.noAnimation))("noAnimation", ctx_r1.noAnimation == null ? null : ctx_r1.noAnimation.noAnimation)("@treeCollapseMotion", ctx_r1.flattenNodes.length);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngForOf", ctx_r1.flattenNodes)("ngForTrackBy", ctx_r1.trackByFlattenNode);
} }
function TDSTreeComponent_ng_template_6_Template(rf, ctx) { if (rf & 1) {
    const _r12 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "tds-tree-node", 11);
    i0.ɵɵlistener("onExpandChange", function TDSTreeComponent_ng_template_6_Template_tds_tree_node_onExpandChange_0_listener($event) { i0.ɵɵrestoreView(_r12); const ctx_r11 = i0.ɵɵnextContext(); return ctx_r11.eventTriggerChanged($event); })("onClick", function TDSTreeComponent_ng_template_6_Template_tds_tree_node_onClick_0_listener($event) { i0.ɵɵrestoreView(_r12); const ctx_r13 = i0.ɵɵnextContext(); return ctx_r13.eventTriggerChanged($event); })("onDblClick", function TDSTreeComponent_ng_template_6_Template_tds_tree_node_onDblClick_0_listener($event) { i0.ɵɵrestoreView(_r12); const ctx_r14 = i0.ɵɵnextContext(); return ctx_r14.eventTriggerChanged($event); })("onContextMenu", function TDSTreeComponent_ng_template_6_Template_tds_tree_node_onContextMenu_0_listener($event) { i0.ɵɵrestoreView(_r12); const ctx_r15 = i0.ɵɵnextContext(); return ctx_r15.eventTriggerChanged($event); })("onCheckBoxChange", function TDSTreeComponent_ng_template_6_Template_tds_tree_node_onCheckBoxChange_0_listener($event) { i0.ɵɵrestoreView(_r12); const ctx_r16 = i0.ɵɵnextContext(); return ctx_r16.eventTriggerChanged($event); })("onDragStart", function TDSTreeComponent_ng_template_6_Template_tds_tree_node_onDragStart_0_listener($event) { i0.ɵɵrestoreView(_r12); const ctx_r17 = i0.ɵɵnextContext(); return ctx_r17.eventTriggerChanged($event); })("onDragEnter", function TDSTreeComponent_ng_template_6_Template_tds_tree_node_onDragEnter_0_listener($event) { i0.ɵɵrestoreView(_r12); const ctx_r18 = i0.ɵɵnextContext(); return ctx_r18.eventTriggerChanged($event); })("onDragOver", function TDSTreeComponent_ng_template_6_Template_tds_tree_node_onDragOver_0_listener($event) { i0.ɵɵrestoreView(_r12); const ctx_r19 = i0.ɵɵnextContext(); return ctx_r19.eventTriggerChanged($event); })("onDragLeave", function TDSTreeComponent_ng_template_6_Template_tds_tree_node_onDragLeave_0_listener($event) { i0.ɵɵrestoreView(_r12); const ctx_r20 = i0.ɵɵnextContext(); return ctx_r20.eventTriggerChanged($event); })("onDragEnd", function TDSTreeComponent_ng_template_6_Template_tds_tree_node_onDragEnd_0_listener($event) { i0.ɵɵrestoreView(_r12); const ctx_r21 = i0.ɵɵnextContext(); return ctx_r21.eventTriggerChanged($event); })("onDrop", function TDSTreeComponent_ng_template_6_Template_tds_tree_node_onDrop_0_listener($event) { i0.ɵɵrestoreView(_r12); const ctx_r22 = i0.ɵɵnextContext(); return ctx_r22.eventTriggerChanged($event); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const treeNode_r10 = ctx.$implicit;
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵproperty("icon", treeNode_r10.icon)("title", treeNode_r10.title)("isLoading", treeNode_r10.isLoading)("isSelected", treeNode_r10.isSelected)("isDisabled", treeNode_r10.isDisabled)("isMatched", treeNode_r10.isMatched)("isExpanded", treeNode_r10.isExpanded)("isLeaf", treeNode_r10.isLeaf)("isStart", treeNode_r10.isStart)("isEnd", treeNode_r10.isEnd)("isChecked", treeNode_r10.isChecked)("isHalfChecked", treeNode_r10.isHalfChecked)("isDisableCheckbox", treeNode_r10.isDisableCheckbox)("isSelectable", treeNode_r10.isSelectable)("canHide", treeNode_r10.canHide)("treeNode", treeNode_r10)("selectMode", ctx_r3.selectMode)("showLine", ctx_r3.showLine)("expandedIcon", ctx_r3.expandedIcon)("draggable", ctx_r3.draggable)("checkable", ctx_r3.checkable)("showExpand", ctx_r3.showExpand)("asyncData", ctx_r3.asyncData)("searchValue", ctx_r3.searchValue)("hideUnMatched", ctx_r3.hideUnMatched)("beforeDrop", ctx_r3.beforeDrop)("showIcon", ctx_r3.showIcon)("treeTemplate", ctx_r3.treeTemplate || ctx_r3.tdsTreeTemplateChild);
} }
export function TDSTreeServiceFactory(higherOrderService, treeService) {
    return higherOrderService ? higherOrderService : treeService;
}
const TDS_CONFIG_MODULE_NAME = 'tree';
export class TDSTreeComponent extends TDSTreeBase {
    // Handle emit event end
    constructor(tdsTreeService, tdsConfigService, cdr, directionality, noAnimation) {
        super(tdsTreeService);
        this.tdsConfigService = tdsConfigService;
        this.cdr = cdr;
        this.directionality = directionality;
        this.noAnimation = noAnimation;
        this._tdsModuleName = TDS_CONFIG_MODULE_NAME;
        this.showIcon = false;
        this.hideUnMatched = false;
        this.blockNode = false;
        this.expandAll = false;
        this.selectMode = false;
        this.checkStrictly = false;
        this.showExpand = true;
        this.showLine = false;
        this.checkable = false;
        this.asyncData = false;
        this.draggable = false;
        this.multiple = false;
        this.virtualItemSize = 28;
        this.virtualMaxBufferPx = 500;
        this.virtualMinBufferPx = 28;
        this.virtualHeight = null;
        this.data = [];
        this.expandedKeys = [];
        this.selectedKeys = [];
        this.checkedKeys = [];
        this.searchValue = '';
        this.flattenNodes = [];
        this.beforeInit = true;
        this.dir = 'ltr';
        this.onExpandedKeysChange = new EventEmitter();
        this.onSelectedKeysChange = new EventEmitter();
        this.onCheckedKeysChange = new EventEmitter();
        this.onSearchValueChange = new EventEmitter();
        this.onClick = new EventEmitter();
        this.onDblClick = new EventEmitter();
        this.onContextMenu = new EventEmitter();
        this.onCheckBoxChange = new EventEmitter();
        this.onExpandChange = new EventEmitter();
        this.onDragStart = new EventEmitter();
        this.onDragEnter = new EventEmitter();
        this.onDragOver = new EventEmitter();
        this.onDragLeave = new EventEmitter();
        this.onDrop = new EventEmitter();
        this.onDragEnd = new EventEmitter();
        this.HIDDEN_STYLE = {
            width: 0,
            height: 0,
            display: 'flex',
            overflow: 'hidden',
            opacity: 0,
            border: 0,
            padding: 0,
            margin: 0
        };
        this.destroy$ = new Subject();
        this.onChange = () => null;
        this.onTouched = () => null;
    }
    writeValue(value) {
        this.handleNzData(value);
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * Render all properties of nzTree
     *
     * @param changes: all changes from @Input
     */
    renderTreeProperties(changes) {
        let useDefaultExpandedKeys = false;
        let _expandAll = false;
        const { data, expandedKeys, selectedKeys, checkedKeys, checkStrictly, expandAll, multiple, searchValue } = changes;
        if (expandAll) {
            useDefaultExpandedKeys = true;
            _expandAll = this.expandAll;
        }
        if (multiple) {
            this.tdsTreeService.isMultiple = this.multiple;
        }
        if (checkStrictly) {
            this.tdsTreeService.isCheckStrictly = this.checkStrictly;
        }
        if (data) {
            this.handleNzData(this.data);
        }
        if (checkedKeys) {
            this.handleCheckedKeys(this.checkedKeys);
        }
        if (checkStrictly) {
            this.handleCheckedKeys(null);
        }
        if (expandedKeys || expandAll) {
            useDefaultExpandedKeys = true;
            this.handleExpandedKeys(_expandAll || this.expandedKeys);
        }
        if (selectedKeys) {
            this.handleSelectedKeys(this.selectedKeys, this.multiple);
        }
        if (searchValue) {
            if (!(searchValue.firstChange && !this.searchValue)) {
                useDefaultExpandedKeys = false;
                this.handleSearchValue(searchValue.currentValue, this.searchFunc);
                this.onSearchValueChange.emit(this.tdsTreeService.formatEvent('search', null, null));
            }
        }
        // flatten data
        const currentExpandedKeys = this.getExpandedNodeList().map(v => v.key);
        const newExpandedKeys = useDefaultExpandedKeys ? _expandAll || this.expandedKeys : currentExpandedKeys;
        this.handleFlattenNodes(this.tdsTreeService.rootNodes, newExpandedKeys);
    }
    trackByFlattenNode(_, node) {
        return node.key;
    }
    // Deal with properties
    /**
     * data
     *
     * @param value
     */
    handleNzData(value) {
        if (Array.isArray(value)) {
            const data = this.coerceTreeNodes(value);
            this.tdsTreeService.initTree(data);
        }
    }
    handleFlattenNodes(data, expandKeys = []) {
        this.tdsTreeService.flattenTreeData(data, expandKeys);
    }
    handleCheckedKeys(keys) {
        this.tdsTreeService.conductCheck(keys, this.checkStrictly);
    }
    handleExpandedKeys(keys = []) {
        this.tdsTreeService.conductExpandedKeys(keys);
    }
    handleSelectedKeys(keys, isMulti) {
        this.tdsTreeService.conductSelectedKeys(keys, isMulti);
    }
    handleSearchValue(value, searchFunc) {
        const dataList = flattenTreeData(this.tdsTreeService.rootNodes, true).map(v => v.data);
        const checkIfMatched = (node) => {
            if (searchFunc) {
                return searchFunc(node.origin);
            }
            return !value || !node.title.toLowerCase().includes(value.toLowerCase()) ? false : true;
        };
        dataList.forEach(v => {
            v.isMatched = checkIfMatched(v);
            v.canHide = !v.isMatched;
            if (!v.isMatched) {
                v.setExpanded(false);
                this.tdsTreeService.setExpandedNodeList(v);
            }
            else {
                // expand
                this.tdsTreeService.expandNodeAllParentBySearch(v);
            }
            this.tdsTreeService.setMatchedNodeList(v);
        });
    }
    /**
     * Handle emit event
     *
     * @param event
     * handle each event
     */
    eventTriggerChanged(event) {
        const node = event.node;
        switch (event.eventName) {
            case 'expand':
                this.renderTree();
                this.onExpandChange.emit(event);
                break;
            case 'click':
                this.onClick.emit(event);
                break;
            case 'dblclick':
                this.onDblClick.emit(event);
                break;
            case 'contextmenu':
                this.onContextMenu.emit(event);
                break;
            case 'check':
                // Render checked state with nodes' property `isChecked`
                this.tdsTreeService.setCheckedNodeList(node);
                if (!this.checkStrictly) {
                    this.tdsTreeService.conduct(node);
                }
                // Cause check method will rerender list, so we need recover it and next the new event to user
                const eventNext = this.tdsTreeService.formatEvent('check', node, event.event);
                this.onCheckBoxChange.emit(eventNext);
                break;
            case 'dragstart':
                // if node is expanded
                if (node.isExpanded) {
                    node.setExpanded(!node.isExpanded);
                    this.renderTree();
                }
                this.onDragStart.emit(event);
                break;
            case 'dragenter':
                const selectedNode = this.tdsTreeService.getSelectedNode();
                if (selectedNode && selectedNode.key !== node.key && !node.isExpanded && !node.isLeaf) {
                    node.setExpanded(true);
                    this.renderTree();
                }
                this.onDragEnter.emit(event);
                break;
            case 'dragover':
                this.onDragOver.emit(event);
                break;
            case 'dragleave':
                this.onDragLeave.emit(event);
                break;
            case 'dragend':
                this.onDragEnd.emit(event);
                break;
            case 'drop':
                this.renderTree();
                this.onDrop.emit(event);
                break;
        }
    }
    /**
     * Click expand icon
     */
    renderTree() {
        this.handleFlattenNodes(this.tdsTreeService.rootNodes, this.getExpandedNodeList().map(v => v.key));
        this.cdr.markForCheck();
    }
    ngOnInit() {
        this.tdsTreeService.flattenNodes$.pipe(takeUntil(this.destroy$)).subscribe(data => {
            this.flattenNodes = data;
            this.cdr.markForCheck();
        });
        this.dir = this.directionality.value;
        this.directionality.change?.pipe(takeUntil(this.destroy$)).subscribe((direction) => {
            this.dir = direction;
            this.cdr.detectChanges();
        });
    }
    ngOnChanges(changes) {
        this.renderTreeProperties(changes);
    }
    ngAfterViewInit() {
        this.beforeInit = false;
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
}
TDSTreeComponent.ɵfac = function TDSTreeComponent_Factory(t) { return new (t || TDSTreeComponent)(i0.ɵɵdirectiveInject(i1.TDSTreeBaseService), i0.ɵɵdirectiveInject(i2.TDSConfigService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i3.Directionality, 8), i0.ɵɵdirectiveInject(i4.TDSNoAnimationDirective, 9)); };
TDSTreeComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSTreeComponent, selectors: [["tds-tree"]], contentQueries: function TDSTreeComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        i0.ɵɵcontentQuery(dirIndex, _c0, 7);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tdsTreeTemplateChild = _t.first);
    } }, viewQuery: function TDSTreeComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(CdkVirtualScrollViewport, 5, CdkVirtualScrollViewport);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.cdkVirtualScrollViewport = _t.first);
    } }, hostAttrs: [1, "box-border", "m-0", "p-0", "border-0"], hostVars: 20, hostBindings: function TDSTreeComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵclassProp("tds-select-tree", ctx.selectMode)("tds-select-tree-show-line", ctx.selectMode && ctx.showLine)("tds-select-tree-icon-hide", ctx.selectMode && !ctx.showIcon)("tds-select-tree-block-node", ctx.selectMode && ctx.blockNode)("tds-tree", !ctx.selectMode)("tds-tree-rtl", ctx.dir === "rtl")("tds-tree-show-line", !ctx.selectMode && ctx.showLine)("tds-tree-icon-hide", !ctx.selectMode && !ctx.showIcon)("tds-tree-block-node", !ctx.selectMode && ctx.blockNode)("draggable-tree", ctx.draggable);
    } }, inputs: { showIcon: "showIcon", hideUnMatched: "hideUnMatched", blockNode: "blockNode", expandAll: "expandAll", selectMode: "selectMode", checkStrictly: "checkStrictly", showExpand: "showExpand", showLine: "showLine", checkable: "checkable", asyncData: "asyncData", draggable: "draggable", multiple: "multiple", expandedIcon: "expandedIcon", virtualItemSize: "virtualItemSize", virtualMaxBufferPx: "virtualMaxBufferPx", virtualMinBufferPx: "virtualMinBufferPx", virtualHeight: "virtualHeight", treeTemplate: "treeTemplate", beforeDrop: "beforeDrop", data: "data", expandedKeys: "expandedKeys", selectedKeys: "selectedKeys", checkedKeys: "checkedKeys", searchValue: "searchValue", searchFunc: "searchFunc" }, outputs: { onExpandedKeysChange: "onExpandedKeysChange", onSelectedKeysChange: "onSelectedKeysChange", onCheckedKeysChange: "onCheckedKeysChange", onSearchValueChange: "onSearchValueChange", onClick: "onClick", onDblClick: "onDblClick", onContextMenu: "onContextMenu", onCheckBoxChange: "onCheckBoxChange", onExpandChange: "onExpandChange", onDragStart: "onDragStart", onDragEnter: "onDragEnter", onDragOver: "onDragOver", onDragLeave: "onDragLeave", onDrop: "onDrop", onDragEnd: "onDragEnd" }, exportAs: ["tdsTree"], features: [i0.ɵɵProvidersFeature([
            TDSTreeService,
            {
                provide: TDSTreeBaseService,
                useFactory: TDSTreeServiceFactory,
                deps: [[new SkipSelf(), new Optional(), TDSTreeHigherOrderServiceToken], TDSTreeService]
            },
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => TDSTreeComponent),
                multi: true
            }
        ]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature], decls: 8, vars: 5, consts: [["role", "tree"], [3, "ngStyle"], [1, "tds-tree-list"], [3, "tds-select-tree-list-holder-inner", "tds-tree-list-holder-inner", "itemSize", "minBufferPx", "maxBufferPx", "height", 4, "ngIf"], [3, "tds-select-tree-list-holder-inner", "tds-tree-list-holder-inner", "noAnimation", 4, "ngIf"], ["nodeTemplate", ""], [3, "itemSize", "minBufferPx", "maxBufferPx"], [4, "cdkVirtualFor", "cdkVirtualForOf", "cdkVirtualForTrackBy"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [3, "noAnimation"], [4, "ngFor", "ngForOf", "ngForTrackBy"], ["builtin", "", 3, "icon", "title", "isLoading", "isSelected", "isDisabled", "isMatched", "isExpanded", "isLeaf", "isStart", "isEnd", "isChecked", "isHalfChecked", "isDisableCheckbox", "isSelectable", "canHide", "treeNode", "selectMode", "showLine", "expandedIcon", "draggable", "checkable", "showExpand", "asyncData", "searchValue", "hideUnMatched", "beforeDrop", "showIcon", "treeTemplate", "onExpandChange", "onClick", "onDblClick", "onContextMenu", "onCheckBoxChange", "onDragStart", "onDragEnter", "onDragOver", "onDragLeave", "onDragEnd", "onDrop"]], template: function TDSTreeComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 0);
        i0.ɵɵelement(1, "input", 1);
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(2, "div", 2)(3, "div");
        i0.ɵɵtemplate(4, TDSTreeComponent_cdk_virtual_scroll_viewport_4_Template, 2, 11, "cdk-virtual-scroll-viewport", 3);
        i0.ɵɵtemplate(5, TDSTreeComponent_div_5_Template, 2, 9, "div", 4);
        i0.ɵɵelementEnd()();
        i0.ɵɵtemplate(6, TDSTreeComponent_ng_template_6_Template, 1, 28, "ng-template", null, 5, i0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngStyle", ctx.HIDDEN_STYLE);
        i0.ɵɵadvance(1);
        i0.ɵɵclassProp("tds-select-tree-list", ctx.selectMode);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.virtualHeight);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx.virtualHeight);
    } }, directives: [i5.NgStyle, i5.NgIf, i6.CdkVirtualScrollViewport, i6.CdkFixedSizeVirtualScroll, i6.CdkVirtualForOf, i5.NgTemplateOutlet, i4.TDSNoAnimationDirective, i5.NgForOf, i7.TDSTreeNodeBuiltinComponent], encapsulation: 2, data: { animation: [treeCollapseMotion] }, changeDetection: 0 });
__decorate([
    InputBoolean(),
    WithConfig()
], TDSTreeComponent.prototype, "showIcon", void 0);
__decorate([
    InputBoolean(),
    WithConfig()
], TDSTreeComponent.prototype, "hideUnMatched", void 0);
__decorate([
    InputBoolean(),
    WithConfig()
], TDSTreeComponent.prototype, "blockNode", void 0);
__decorate([
    InputBoolean()
], TDSTreeComponent.prototype, "expandAll", void 0);
__decorate([
    InputBoolean()
], TDSTreeComponent.prototype, "selectMode", void 0);
__decorate([
    InputBoolean()
], TDSTreeComponent.prototype, "checkStrictly", void 0);
__decorate([
    InputBoolean()
], TDSTreeComponent.prototype, "showExpand", void 0);
__decorate([
    InputBoolean()
], TDSTreeComponent.prototype, "showLine", void 0);
__decorate([
    InputBoolean()
], TDSTreeComponent.prototype, "checkable", void 0);
__decorate([
    InputBoolean()
], TDSTreeComponent.prototype, "asyncData", void 0);
__decorate([
    InputBoolean()
], TDSTreeComponent.prototype, "draggable", void 0);
__decorate([
    InputBoolean()
], TDSTreeComponent.prototype, "multiple", void 0);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSTreeComponent, [{
        type: Component,
        args: [{ selector: 'tds-tree', exportAs: 'tdsTree', animations: [treeCollapseMotion], changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                    TDSTreeService,
                    {
                        provide: TDSTreeBaseService,
                        useFactory: TDSTreeServiceFactory,
                        deps: [[new SkipSelf(), new Optional(), TDSTreeHigherOrderServiceToken], TDSTreeService]
                    },
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => TDSTreeComponent),
                        multi: true
                    }
                ], host: {
                    '[class.tds-select-tree]': `selectMode`,
                    '[class.tds-select-tree-show-line]': `selectMode && showLine`,
                    '[class.tds-select-tree-icon-hide]': `selectMode && !showIcon`,
                    '[class.tds-select-tree-block-node]': `selectMode && blockNode`,
                    '[class.tds-tree]': `!selectMode`,
                    '[class.tds-tree-rtl]': `dir === 'rtl'`,
                    '[class.tds-tree-show-line]': `!selectMode && showLine`,
                    '[class.tds-tree-icon-hide]': `!selectMode && !showIcon`,
                    '[class.tds-tree-block-node]': `!selectMode && blockNode`,
                    '[class.draggable-tree]': `draggable`,
                    'class': "box-border m-0 p-0 border-0"
                }, template: "<div role=\"tree\">\r\n    <input [ngStyle]=\"HIDDEN_STYLE\" />\r\n  </div>\r\n  <div class=\"tds-tree-list\" [class.tds-select-tree-list]=\"selectMode\">\r\n    <div>     \r\n      <cdk-virtual-scroll-viewport\r\n        *ngIf=\"virtualHeight\"\r\n        [class.tds-select-tree-list-holder-inner]=\"selectMode\"\r\n        [class.tds-tree-list-holder-inner]=\"!selectMode\"\r\n        [itemSize]=\"virtualItemSize\"\r\n        [minBufferPx]=\"virtualMinBufferPx\"\r\n        [maxBufferPx]=\"virtualMaxBufferPx\"\r\n        [style.height]=\"virtualHeight\"\r\n      >\r\n        <ng-container *cdkVirtualFor=\"let node of flattenNodes; trackBy: trackByFlattenNode\">\r\n          <ng-template\r\n            [ngTemplateOutlet]=\"nodeTemplate\"\r\n            [ngTemplateOutletContext]=\"{ $implicit: node }\"\r\n          ></ng-template>\r\n        </ng-container>\r\n      </cdk-virtual-scroll-viewport>\r\n\r\n      <div\r\n        *ngIf=\"!virtualHeight\"\r\n        [class.tds-select-tree-list-holder-inner]=\"selectMode\"\r\n        [class.tds-tree-list-holder-inner]=\"!selectMode\"\r\n        [@.disabled]=\"beforeInit || noAnimation?.noAnimation\"\r\n        [noAnimation]=\"noAnimation?.noAnimation\"\r\n        [@treeCollapseMotion]=\"flattenNodes.length\"\r\n      >\r\n        <ng-container *ngFor=\"let node of flattenNodes; trackBy: trackByFlattenNode\">\r\n          <ng-template\r\n            [ngTemplateOutlet]=\"nodeTemplate\"\r\n            [ngTemplateOutletContext]=\"{ $implicit: node }\"\r\n          ></ng-template>\r\n        </ng-container>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <ng-template #nodeTemplate let-treeNode>    \r\n    <tds-tree-node\r\n      builtin\r\n      [icon]=\"treeNode.icon\"\r\n      [title]=\"treeNode.title\"\r\n      [isLoading]=\"treeNode.isLoading\"\r\n      [isSelected]=\"treeNode.isSelected\"\r\n      [isDisabled]=\"treeNode.isDisabled\"\r\n      [isMatched]=\"treeNode.isMatched\"\r\n      [isExpanded]=\"treeNode.isExpanded\"\r\n      [isLeaf]=\"treeNode.isLeaf\"\r\n      [isStart]=\"treeNode.isStart\"\r\n      [isEnd]=\"treeNode.isEnd\"\r\n      [isChecked]=\"treeNode.isChecked\"\r\n      [isHalfChecked]=\"treeNode.isHalfChecked\"\r\n      [isDisableCheckbox]=\"treeNode.isDisableCheckbox\"\r\n      [isSelectable]=\"treeNode.isSelectable\"\r\n      [canHide]=\"treeNode.canHide\"\r\n      [treeNode]=\"treeNode\"\r\n      [selectMode]=\"selectMode\"\r\n      [showLine]=\"showLine\"\r\n      [expandedIcon]=\"expandedIcon\"\r\n      [draggable]=\"draggable\"\r\n      [checkable]=\"checkable\"\r\n      [showExpand]=\"showExpand\"\r\n      [asyncData]=\"asyncData\"\r\n      [searchValue]=\"searchValue\"\r\n      [hideUnMatched]=\"hideUnMatched\"\r\n      [beforeDrop]=\"beforeDrop\"\r\n      [showIcon]=\"showIcon\"\r\n      [treeTemplate]=\"treeTemplate || tdsTreeTemplateChild\"\r\n      (onExpandChange)=\"eventTriggerChanged($event)\"\r\n      (onClick)=\"eventTriggerChanged($event)\"\r\n      (onDblClick)=\"eventTriggerChanged($event)\"\r\n      (onContextMenu)=\"eventTriggerChanged($event)\"\r\n      (onCheckBoxChange)=\"eventTriggerChanged($event)\"\r\n      (onDragStart)=\"eventTriggerChanged($event)\"\r\n      (onDragEnter)=\"eventTriggerChanged($event)\"\r\n      (onDragOver)=\"eventTriggerChanged($event)\"\r\n      (onDragLeave)=\"eventTriggerChanged($event)\"\r\n      (onDragEnd)=\"eventTriggerChanged($any($event))\"\r\n      (onDrop)=\"eventTriggerChanged($event)\"\r\n    ></tds-tree-node>\r\n  </ng-template>" }]
    }], function () { return [{ type: i1.TDSTreeBaseService }, { type: i2.TDSConfigService }, { type: i0.ChangeDetectorRef }, { type: i3.Directionality, decorators: [{
                type: Optional
            }] }, { type: i4.TDSNoAnimationDirective, decorators: [{
                type: Host
            }, {
                type: Optional
            }] }]; }, { showIcon: [{
            type: Input
        }], hideUnMatched: [{
            type: Input
        }], blockNode: [{
            type: Input
        }], expandAll: [{
            type: Input
        }], selectMode: [{
            type: Input
        }], checkStrictly: [{
            type: Input
        }], showExpand: [{
            type: Input
        }], showLine: [{
            type: Input
        }], checkable: [{
            type: Input
        }], asyncData: [{
            type: Input
        }], draggable: [{
            type: Input
        }], multiple: [{
            type: Input
        }], expandedIcon: [{
            type: Input
        }], virtualItemSize: [{
            type: Input
        }], virtualMaxBufferPx: [{
            type: Input
        }], virtualMinBufferPx: [{
            type: Input
        }], virtualHeight: [{
            type: Input
        }], treeTemplate: [{
            type: Input
        }], beforeDrop: [{
            type: Input
        }], data: [{
            type: Input
        }], expandedKeys: [{
            type: Input
        }], selectedKeys: [{
            type: Input
        }], checkedKeys: [{
            type: Input
        }], searchValue: [{
            type: Input
        }], searchFunc: [{
            type: Input
        }], tdsTreeTemplateChild: [{
            type: ContentChild,
            args: ['treeTemplate', { static: true }]
        }], cdkVirtualScrollViewport: [{
            type: ViewChild,
            args: [CdkVirtualScrollViewport, { read: CdkVirtualScrollViewport }]
        }], onExpandedKeysChange: [{
            type: Output
        }], onSelectedKeysChange: [{
            type: Output
        }], onCheckedKeysChange: [{
            type: Output
        }], onSearchValueChange: [{
            type: Output
        }], onClick: [{
            type: Output
        }], onDblClick: [{
            type: Output
        }], onContextMenu: [{
            type: Output
        }], onCheckBoxChange: [{
            type: Output
        }], onExpandChange: [{
            type: Output
        }], onDragStart: [{
            type: Output
        }], onDragEnter: [{
            type: Output
        }], onDragOver: [{
            type: Output
        }], onDragLeave: [{
            type: Output
        }], onDrop: [{
            type: Output
        }], onDragEnd: [{
            type: Output
        }] }); })();
//# sourceMappingURL=data:application/json;base64,