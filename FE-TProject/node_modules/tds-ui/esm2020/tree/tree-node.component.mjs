import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, EventEmitter, Host, Input, Optional, Output } from '@angular/core';
import { fromEvent, Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { InputBoolean } from 'tds-ui/shared/utility';
import * as i0 from "@angular/core";
import * as i1 from "tds-ui/core/tree";
import * as i2 from "tds-ui/core/no-animation";
import * as i3 from "./tree-indent.component";
import * as i4 from "@angular/common";
import * as i5 from "./tree-node-switcher.component";
import * as i6 from "./tree-node-checkbox.component";
import * as i7 from "./tree-node-title.component";
const _c0 = ["builtin", ""];
function TDSTreeNodeBuiltinComponent_tds_tree_node_switcher_1_Template(rf, ctx) { if (rf & 1) {
    const _r3 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "tds-tree-node-switcher", 4);
    i0.ɵɵlistener("click", function TDSTreeNodeBuiltinComponent_tds_tree_node_switcher_1_Template_tds_tree_node_switcher_click_0_listener($event) { i0.ɵɵrestoreView(_r3); const ctx_r2 = i0.ɵɵnextContext(); return ctx_r2.clickExpand($event); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵproperty("showExpand", ctx_r0.showExpand)("showLine", ctx_r0.showLine)("expandedIcon", ctx_r0.expandedIcon)("selectMode", ctx_r0.selectMode)("context", ctx_r0.treeNode)("isLeaf", ctx_r0.isLeaf)("isExpanded", ctx_r0.isExpanded)("isLoading", ctx_r0.isLoading);
} }
function TDSTreeNodeBuiltinComponent_tds_tree_node_checkbox_2_Template(rf, ctx) { if (rf & 1) {
    const _r5 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "tds-tree-node-checkbox", 5);
    i0.ɵɵlistener("click", function TDSTreeNodeBuiltinComponent_tds_tree_node_checkbox_2_Template_tds_tree_node_checkbox_click_0_listener($event) { i0.ɵɵrestoreView(_r5); const ctx_r4 = i0.ɵɵnextContext(); return ctx_r4.clickCheckBox($event); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵproperty("selectMode", ctx_r1.selectMode)("isChecked", ctx_r1.isChecked)("isHalfChecked", ctx_r1.isHalfChecked)("isDisabled", ctx_r1.isDisabled)("isDisableCheckbox", ctx_r1.isDisableCheckbox);
} }
export class TDSTreeNodeBuiltinComponent {
    constructor(tdsTreeService, ngZone, renderer, elementRef, cdr, tdsnoAnimation) {
        this.tdsTreeService = tdsTreeService;
        this.ngZone = ngZone;
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.cdr = cdr;
        this.tdsnoAnimation = tdsnoAnimation;
        /**
         * for global property
         */
        this.icon = '';
        this.title = '';
        this.isLoading = false;
        this.isSelected = false;
        this.isDisabled = false;
        this.isMatched = false;
        this.isStart = [];
        this.isEnd = [];
        this.hideUnMatched = false;
        this.noAnimation = false;
        this.selectMode = false;
        this.showIcon = false;
        this.treeTemplate = null;
        this.searchValue = '';
        this.draggable = false;
        this.onClick = new EventEmitter();
        this.onDblClick = new EventEmitter();
        this.onContextMenu = new EventEmitter();
        this.onCheckBoxChange = new EventEmitter();
        this.onExpandChange = new EventEmitter();
        this.onDragStart = new EventEmitter();
        this.onDragEnter = new EventEmitter();
        this.onDragOver = new EventEmitter();
        this.onDragLeave = new EventEmitter();
        this.onDrop = new EventEmitter();
        this.tdsOnDragEnd = new EventEmitter();
        /**
         * drag var
         */
        this.destroy$ = new Subject();
        this.dragPos = 2;
        this.dragPosClass = {
            0: 'drag-over',
            1: 'drag-over-gap-bottom',
            '-1': 'drag-over-gap-top'
        };
        this.showIndicator = false;
    }
    /**
     * default set
     */
    get displayStyle() {
        // to hide unmatched nodes
        return this.searchValue && this.hideUnMatched && !this.isMatched && !this.isExpanded && this.canHide
            ? 'none'
            : '';
    }
    get isSwitcherOpen() {
        return this.isExpanded && !this.isLeaf;
    }
    get isSwitcherClose() {
        return !this.isExpanded && !this.isLeaf;
    }
    onMousedown(event) {
        if (this.selectMode) {
            event.preventDefault();
        }
    }
    /**
     * collapse node
     *
     * @param event
     */
    clickExpand(event) {
        event.preventDefault();
        if (!this.isLoading && !this.isLeaf) {
            // set async state
            if (this.asyncData && this.treeNode.children.length === 0 && !this.isExpanded) {
                this.treeNode.isLoading = true;
            }
            this.treeNode.setExpanded(!this.isExpanded);
        }
        this.tdsTreeService.setExpandedNodeList(this.treeNode);
        const eventNext = this.tdsTreeService.formatEvent('expand', this.treeNode, event);
        this.onExpandChange.emit(eventNext);
    }
    clickSelect(event) {
        event.preventDefault();
        if (this.isSelectable && !this.isDisabled) {
            this.treeNode.isSelected = !this.treeNode.isSelected;
        }
        this.tdsTreeService.setSelectedNodeList(this.treeNode);
        const eventNext = this.tdsTreeService.formatEvent('click', this.treeNode, event);
        this.onClick.emit(eventNext);
    }
    dblClick(event) {
        event.preventDefault();
        const eventNext = this.tdsTreeService.formatEvent('dblclick', this.treeNode, event);
        this.onDblClick.emit(eventNext);
    }
    contextMenu(event) {
        event.preventDefault();
        const eventNext = this.tdsTreeService.formatEvent('contextmenu', this.treeNode, event);
        this.onContextMenu.emit(eventNext);
    }
    /**
     * check node
     *
     * @param event
     */
    clickCheckBox(event) {
        event.preventDefault();
        // return if node is disabled
        if (this.isDisabled || this.isDisableCheckbox) {
            return;
        }
        this.treeNode.isChecked = !this.treeNode.isChecked;
        this.treeNode.isHalfChecked = false;
        this.tdsTreeService.setCheckedNodeList(this.treeNode);
        const eventNext = this.tdsTreeService.formatEvent('check', this.treeNode, event);
        this.onCheckBoxChange.emit(eventNext);
    }
    clearDragClass() {
        const dragClass = ['drag-over-gap-top', 'drag-over-gap-bottom', 'drag-over', 'drop-target'];
        dragClass.forEach(e => {
            this.renderer.removeClass(this.elementRef.nativeElement, e);
        });
    }
    /**
     * drag event
     *
     * @param e
     */
    handleDragStart(e) {
        try {
            // ie throw error
            // firefox-need-it
            e.dataTransfer.setData('text/plain', this.treeNode.key);
        }
        catch (error) {
            // empty
        }
        this.tdsTreeService.setSelectedNode(this.treeNode);
        const eventNext = this.tdsTreeService.formatEvent('dragstart', this.treeNode, e);
        this.onDragStart.emit(eventNext);
    }
    handleDragEnter(e) {
        e.preventDefault();
        // reset position
        this.showIndicator = this.treeNode.key !== this.tdsTreeService.getSelectedNode()?.key;
        this.renderIndicator(2);
        this.ngZone.run(() => {
            const eventNext = this.tdsTreeService.formatEvent('dragenter', this.treeNode, e);
            this.onDragEnter.emit(eventNext);
        });
    }
    handleDragOver(e) {
        e.preventDefault();
        const dropPosition = this.tdsTreeService.calcDropPosition(e);
        if (this.dragPos !== dropPosition) {
            this.clearDragClass();
            this.renderIndicator(dropPosition);
            // leaf node will pass
            if (!(this.dragPos === 0 && this.isLeaf)) {
                this.renderer.addClass(this.elementRef.nativeElement, this.dragPosClass[this.dragPos]);
                this.renderer.addClass(this.elementRef.nativeElement, 'drop-target');
            }
        }
        const eventNext = this.tdsTreeService.formatEvent('dragover', this.treeNode, e);
        this.onDragOver.emit(eventNext);
    }
    handleDragLeave(e) {
        e.preventDefault();
        this.renderIndicator(2);
        this.clearDragClass();
        const eventNext = this.tdsTreeService.formatEvent('dragleave', this.treeNode, e);
        this.onDragLeave.emit(eventNext);
    }
    handleDragDrop(e) {
        e.preventDefault();
        e.stopPropagation();
        this.ngZone.run(() => {
            this.showIndicator = false;
            this.clearDragClass();
            const node = this.tdsTreeService.getSelectedNode();
            if (!node || (node && node.key === this.treeNode.key) || (this.dragPos === 0 && this.isLeaf)) {
                return;
            }
            // pass if node is leafNo
            const dropEvent = this.tdsTreeService.formatEvent('drop', this.treeNode, e);
            const dragEndEvent = this.tdsTreeService.formatEvent('dragend', this.treeNode, e);
            if (this.beforeDrop) {
                this.beforeDrop({
                    dragNode: this.tdsTreeService.getSelectedNode(),
                    node: this.treeNode,
                    pos: this.dragPos
                }).subscribe((canDrop) => {
                    if (canDrop) {
                        this.tdsTreeService.dropAndApply(this.treeNode, this.dragPos);
                    }
                    this.onDrop.emit(dropEvent);
                    this.tdsOnDragEnd.emit(dragEndEvent);
                });
            }
            else if (this.treeNode) {
                this.tdsTreeService.dropAndApply(this.treeNode, this.dragPos);
                this.onDrop.emit(dropEvent);
            }
        });
    }
    handleDragEnd(e) {
        e.preventDefault();
        this.ngZone.run(() => {
            // if user do not custom beforeDrop
            if (!this.beforeDrop) {
                const eventNext = this.tdsTreeService.formatEvent('dragend', this.treeNode, e);
                this.tdsOnDragEnd.emit(eventNext);
            }
        });
    }
    /**
     * Listening to dragging events.
     */
    handDragEvent() {
        this.ngZone.runOutsideAngular(() => {
            if (this.draggable) {
                const nativeElement = this.elementRef.nativeElement;
                this.destroy$ = new Subject();
                fromEvent(nativeElement, 'dragstart')
                    .pipe(takeUntil(this.destroy$))
                    .subscribe((e) => this.handleDragStart(e));
                fromEvent(nativeElement, 'dragenter')
                    .pipe(takeUntil(this.destroy$))
                    .subscribe((e) => this.handleDragEnter(e));
                fromEvent(nativeElement, 'dragover')
                    .pipe(takeUntil(this.destroy$))
                    .subscribe((e) => this.handleDragOver(e));
                fromEvent(nativeElement, 'dragleave')
                    .pipe(takeUntil(this.destroy$))
                    .subscribe((e) => this.handleDragLeave(e));
                fromEvent(nativeElement, 'drop')
                    .pipe(takeUntil(this.destroy$))
                    .subscribe((e) => this.handleDragDrop(e));
                fromEvent(nativeElement, 'dragend')
                    .pipe(takeUntil(this.destroy$))
                    .subscribe((e) => this.handleDragEnd(e));
            }
            else {
                this.destroy$.next();
                this.destroy$.complete();
            }
        });
    }
    markForCheck() {
        this.cdr.markForCheck();
    }
    ngOnInit() {
        this.treeNode.component = this;
    }
    ngOnChanges(changes) {
        const { draggable } = changes;
        if (draggable) {
            this.handDragEvent();
        }
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    renderIndicator(dropPosition) {
        this.ngZone.run(() => {
            this.showIndicator = dropPosition !== 2;
            if (this.treeNode.key === this.tdsTreeService.getSelectedNode()?.key || (dropPosition === 0 && this.isLeaf)) {
                return;
            }
            this.dragPos = dropPosition;
            this.cdr.markForCheck();
        });
    }
}
TDSTreeNodeBuiltinComponent.ɵfac = function TDSTreeNodeBuiltinComponent_Factory(t) { return new (t || TDSTreeNodeBuiltinComponent)(i0.ɵɵdirectiveInject(i1.TDSTreeBaseService), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.TDSNoAnimationDirective, 9)); };
TDSTreeNodeBuiltinComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSTreeNodeBuiltinComponent, selectors: [["tds-tree-node", "builtin", ""]], hostAttrs: [1, "flex", "items-stretch", "py-1.5", "hover:bg-neutral-3-50"], hostVars: 36, hostBindings: function TDSTreeNodeBuiltinComponent_HostBindings(rf, ctx) { if (rf & 1) {
        i0.ɵɵlistener("mousedown", function TDSTreeNodeBuiltinComponent_mousedown_HostBindingHandler($event) { return ctx.onMousedown($event); });
    } if (rf & 2) {
        i0.ɵɵstyleProp("display", ctx.displayStyle);
        i0.ɵɵclassProp("tds-select-tree-treenode", ctx.selectMode)("tds-select-tree-treenode-disabled", ctx.selectMode && ctx.isDisabled)("tds-select-tree-treenode-switcher-open", ctx.selectMode && ctx.isSwitcherOpen)("tds-select-tree-treenode-switcher-close", ctx.selectMode && ctx.isSwitcherClose)("tds-select-tree-treenode-checkbox-checked", ctx.selectMode && ctx.isChecked)("tds-select-tree-treenode-checkbox-indeterminate", ctx.selectMode && ctx.isHalfChecked)("tds-select-tree-treenode-selected", ctx.selectMode && ctx.isSelected)("tds-select-tree-treenode-loading", ctx.selectMode && ctx.isLoading)("tds-tree-treenode", !ctx.selectMode)("tds-tree-treenode-disabled", !ctx.selectMode && ctx.isDisabled)("tds-tree-treenode-switcher-open", !ctx.selectMode && ctx.isSwitcherOpen)("tds-tree-treenode-switcher-close", !ctx.selectMode && ctx.isSwitcherClose)("tds-tree-treenode-checkbox-checked", !ctx.selectMode && ctx.isChecked)("tds-tree-treenode-checkbox-indeterminate", !ctx.selectMode && ctx.isHalfChecked)("tds-tree-treenode-selected", !ctx.selectMode && ctx.isSelected)("tds-tree-treenode-loading", !ctx.selectMode && ctx.isLoading)("opacity-65", !ctx.selectMode && ctx.isDisabled);
    } }, inputs: { icon: "icon", title: "title", isLoading: "isLoading", isSelected: "isSelected", isDisabled: "isDisabled", isMatched: "isMatched", isExpanded: "isExpanded", isLeaf: "isLeaf", isChecked: "isChecked", isHalfChecked: "isHalfChecked", isDisableCheckbox: "isDisableCheckbox", isSelectable: "isSelectable", canHide: "canHide", isStart: "isStart", isEnd: "isEnd", treeNode: "treeNode", showLine: "showLine", showExpand: "showExpand", checkable: "checkable", asyncData: "asyncData", hideUnMatched: "hideUnMatched", noAnimation: "noAnimation", selectMode: "selectMode", showIcon: "showIcon", expandedIcon: "expandedIcon", treeTemplate: "treeTemplate", beforeDrop: "beforeDrop", searchValue: "searchValue", draggable: "draggable" }, outputs: { onClick: "onClick", onDblClick: "onDblClick", onContextMenu: "onContextMenu", onCheckBoxChange: "onCheckBoxChange", onExpandChange: "onExpandChange", onDragStart: "onDragStart", onDragEnter: "onDragEnter", onDragOver: "onDragOver", onDragLeave: "onDragLeave", onDrop: "onDrop", tdsOnDragEnd: "tdsOnDragEnd" }, exportAs: ["tdsTreeBuiltinNode"], features: [i0.ɵɵNgOnChangesFeature], attrs: _c0, decls: 4, vars: 22, consts: [[3, "treeLevel", "selectMode", "isStart", "isEnd"], [3, "showExpand", "showLine", "expandedIcon", "selectMode", "context", "isLeaf", "isExpanded", "isLoading", "click", 4, "ngIf"], ["builtin", "", 3, "selectMode", "isChecked", "isHalfChecked", "isDisabled", "isDisableCheckbox", "click", 4, "ngIf"], [3, "icon", "title", "isLoading", "isSelected", "isDisabled", "isMatched", "isExpanded", "isLeaf", "searchValue", "treeTemplate", "draggable", "showIcon", "selectMode", "context", "showIndicator", "dragPosition", "dblclick", "click", "contextmenu"], [3, "showExpand", "showLine", "expandedIcon", "selectMode", "context", "isLeaf", "isExpanded", "isLoading", "click"], ["builtin", "", 3, "selectMode", "isChecked", "isHalfChecked", "isDisabled", "isDisableCheckbox", "click"]], template: function TDSTreeNodeBuiltinComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "tds-tree-indent", 0);
        i0.ɵɵtemplate(1, TDSTreeNodeBuiltinComponent_tds_tree_node_switcher_1_Template, 1, 8, "tds-tree-node-switcher", 1);
        i0.ɵɵtemplate(2, TDSTreeNodeBuiltinComponent_tds_tree_node_checkbox_2_Template, 1, 5, "tds-tree-node-checkbox", 2);
        i0.ɵɵelementStart(3, "tds-tree-node-title", 3);
        i0.ɵɵlistener("dblclick", function TDSTreeNodeBuiltinComponent_Template_tds_tree_node_title_dblclick_3_listener($event) { return ctx.dblClick($event); })("click", function TDSTreeNodeBuiltinComponent_Template_tds_tree_node_title_click_3_listener($event) { return ctx.clickSelect($event); })("contextmenu", function TDSTreeNodeBuiltinComponent_Template_tds_tree_node_title_contextmenu_3_listener($event) { return ctx.contextMenu($event); });
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵproperty("treeLevel", ctx.treeNode.level)("selectMode", ctx.selectMode)("isStart", ctx.isStart)("isEnd", ctx.isEnd);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx.showExpand);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx.checkable);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("icon", ctx.icon)("title", ctx.title)("isLoading", ctx.isLoading)("isSelected", ctx.isSelected)("isDisabled", ctx.isDisabled)("isMatched", ctx.isMatched)("isExpanded", ctx.isExpanded)("isLeaf", ctx.isLeaf)("searchValue", ctx.searchValue)("treeTemplate", ctx.treeTemplate)("draggable", ctx.draggable)("showIcon", ctx.showIcon)("selectMode", ctx.selectMode)("context", ctx.treeNode)("showIndicator", ctx.showIndicator)("dragPosition", ctx.dragPos);
    } }, directives: [i3.TDSTreeIndentComponent, i4.NgIf, i5.TDSTreeNodeSwitcherComponent, i6.TDSTreeNodeBuiltinCheckboxComponent, i7.TDSTreeNodeTitleComponent], encapsulation: 2, changeDetection: 0 });
__decorate([
    InputBoolean()
], TDSTreeNodeBuiltinComponent.prototype, "showLine", void 0);
__decorate([
    InputBoolean()
], TDSTreeNodeBuiltinComponent.prototype, "showExpand", void 0);
__decorate([
    InputBoolean()
], TDSTreeNodeBuiltinComponent.prototype, "checkable", void 0);
__decorate([
    InputBoolean()
], TDSTreeNodeBuiltinComponent.prototype, "asyncData", void 0);
__decorate([
    InputBoolean()
], TDSTreeNodeBuiltinComponent.prototype, "hideUnMatched", void 0);
__decorate([
    InputBoolean()
], TDSTreeNodeBuiltinComponent.prototype, "noAnimation", void 0);
__decorate([
    InputBoolean()
], TDSTreeNodeBuiltinComponent.prototype, "selectMode", void 0);
__decorate([
    InputBoolean()
], TDSTreeNodeBuiltinComponent.prototype, "showIcon", void 0);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSTreeNodeBuiltinComponent, [{
        type: Component,
        args: [{
                selector: 'tds-tree-node[builtin]',
                exportAs: 'tdsTreeBuiltinNode',
                template: `
    <tds-tree-indent
      [treeLevel]="treeNode.level"
      [selectMode]="selectMode"
      [isStart]="isStart"
      [isEnd]="isEnd"
    ></tds-tree-indent>
    <tds-tree-node-switcher
      *ngIf="showExpand"
      [showExpand]="showExpand"
      [showLine]="showLine"
      [expandedIcon]="expandedIcon"
      [selectMode]="selectMode"
      [context]="treeNode"
      [isLeaf]="isLeaf"
      [isExpanded]="isExpanded"
      [isLoading]="isLoading"
      (click)="clickExpand($event)"
    ></tds-tree-node-switcher>
    <tds-tree-node-checkbox
      builtin
      *ngIf="checkable"
      (click)="clickCheckBox($event)"
      [selectMode]="selectMode"
      [isChecked]="isChecked"
      [isHalfChecked]="isHalfChecked"
      [isDisabled]="isDisabled"
      [isDisableCheckbox]="isDisableCheckbox"
    ></tds-tree-node-checkbox>
    <tds-tree-node-title
      [icon]="icon"
      [title]="title"
      [isLoading]="isLoading"
      [isSelected]="isSelected"
      [isDisabled]="isDisabled"
      [isMatched]="isMatched"
      [isExpanded]="isExpanded"
      [isLeaf]="isLeaf"
      [searchValue]="searchValue"
      [treeTemplate]="treeTemplate"
      [draggable]="draggable"
      [showIcon]="showIcon"
      [selectMode]="selectMode"
      [context]="treeNode"
      [showIndicator]="showIndicator"
      [dragPosition]="dragPos"
      (dblclick)="dblClick($event)"
      (click)="clickSelect($event)"
      (contextmenu)="contextMenu($event)"
    ></tds-tree-node-title>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                host: {
                    '[class.tds-select-tree-treenode]': `selectMode`,
                    '[class.tds-select-tree-treenode-disabled]': `selectMode && isDisabled`,
                    '[class.tds-select-tree-treenode-switcher-open]': `selectMode && isSwitcherOpen`,
                    '[class.tds-select-tree-treenode-switcher-close]': `selectMode && isSwitcherClose`,
                    '[class.tds-select-tree-treenode-checkbox-checked]': `selectMode && isChecked`,
                    '[class.tds-select-tree-treenode-checkbox-indeterminate]': `selectMode && isHalfChecked`,
                    '[class.tds-select-tree-treenode-selected]': `selectMode && isSelected`,
                    '[class.tds-select-tree-treenode-loading]': `selectMode && isLoading`,
                    '[class.tds-tree-treenode]': `!selectMode`,
                    '[class.tds-tree-treenode-disabled]': `!selectMode && isDisabled`,
                    '[class.tds-tree-treenode-switcher-open]': `!selectMode && isSwitcherOpen`,
                    '[class.tds-tree-treenode-switcher-close]': `!selectMode && isSwitcherClose`,
                    '[class.tds-tree-treenode-checkbox-checked]': `!selectMode && isChecked`,
                    '[class.tds-tree-treenode-checkbox-indeterminate]': `!selectMode && isHalfChecked`,
                    '[class.tds-tree-treenode-selected]': `!selectMode && isSelected`,
                    '[class.tds-tree-treenode-loading]': `!selectMode && isLoading`,
                    '[style.display]': 'displayStyle',
                    '(mousedown)': 'onMousedown($event)',
                    'class': 'flex items-stretch py-1.5 hover:bg-neutral-3-50',
                    '[class.opacity-65]': `!selectMode && isDisabled`,
                }
            }]
    }], function () { return [{ type: i1.TDSTreeBaseService }, { type: i0.NgZone }, { type: i0.Renderer2 }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i2.TDSNoAnimationDirective, decorators: [{
                type: Host
            }, {
                type: Optional
            }] }]; }, { icon: [{
            type: Input
        }], title: [{
            type: Input
        }], isLoading: [{
            type: Input
        }], isSelected: [{
            type: Input
        }], isDisabled: [{
            type: Input
        }], isMatched: [{
            type: Input
        }], isExpanded: [{
            type: Input
        }], isLeaf: [{
            type: Input
        }], isChecked: [{
            type: Input
        }], isHalfChecked: [{
            type: Input
        }], isDisableCheckbox: [{
            type: Input
        }], isSelectable: [{
            type: Input
        }], canHide: [{
            type: Input
        }], isStart: [{
            type: Input
        }], isEnd: [{
            type: Input
        }], treeNode: [{
            type: Input
        }], showLine: [{
            type: Input
        }], showExpand: [{
            type: Input
        }], checkable: [{
            type: Input
        }], asyncData: [{
            type: Input
        }], hideUnMatched: [{
            type: Input
        }], noAnimation: [{
            type: Input
        }], selectMode: [{
            type: Input
        }], showIcon: [{
            type: Input
        }], expandedIcon: [{
            type: Input
        }], treeTemplate: [{
            type: Input
        }], beforeDrop: [{
            type: Input
        }], searchValue: [{
            type: Input
        }], draggable: [{
            type: Input
        }], onClick: [{
            type: Output
        }], onDblClick: [{
            type: Output
        }], onContextMenu: [{
            type: Output
        }], onCheckBoxChange: [{
            type: Output
        }], onExpandChange: [{
            type: Output
        }], onDragStart: [{
            type: Output
        }], onDragEnter: [{
            type: Output
        }], onDragOver: [{
            type: Output
        }], onDragLeave: [{
            type: Output
        }], onDrop: [{
            type: Output
        }], tdsOnDragEnd: [{
            type: Output
        }] }); })();
//# sourceMappingURL=data:application/json;base64,