import { __decorate } from "tslib";
import { coerceBooleanProperty } from "@angular/cdk/coercion";
import { DOWN_ARROW, ENTER, ESCAPE, SPACE, TAB, UP_ARROW } from "@angular/cdk/keycodes";
import { CdkConnectedOverlay, CdkOverlayOrigin } from "@angular/cdk/overlay";
import { CdkVirtualScrollViewport } from "@angular/cdk/scrolling";
import { ChangeDetectionStrategy, Component, ContentChild, ContentChildren, EventEmitter, forwardRef, Host, Inject, Input, Optional, Output, Self, TemplateRef, ViewChild, ViewEncapsulation } from "@angular/core";
import { BehaviorSubject, combineLatest, fromEvent, Subject } from "rxjs";
import { takeUntil } from "rxjs/operators";
import { reqAnimFrame } from "tds-ui/core/animation";
import { TDSOptgroup, TDSOption } from "tds-ui/core/option";
import { TDSFormFieldControl, TDS_FORM_FIELD } from "tds-ui/form-field";
import { TDSIsErrorState } from "tds-ui/shared/common";
import { InputBoolean, TDSHelperArray, TDSHelperObject, TDSHelperString } from "tds-ui/shared/utility";
import { TDSSelectSearchComponent } from "./select-search";
import { TDSFooterTemplateDirective, TDSHeaderTemplateDirective, TDSLabelTemplateDirective, TDSLoadingSpinnerTemplateDirective, TDSLoadingTextTemplateDirective, TDSMultiLabelTemplateDirective, TDSNotFoundTemplateDirective, TDSOptionTemplateDirective, TDSTagTemplateDirective, TDSTypeToSearchTemplateDirective } from "./select.directive";
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/a11y";
import * as i2 from "@angular/forms";
import * as i3 from "@angular/cdk/platform";
import * as i4 from "@angular/common";
import * as i5 from "./select-placeholder";
import * as i6 from "./select-search";
import * as i7 from "@angular/cdk/overlay";
import * as i8 from "tds-ui/progress-spinner";
import * as i9 from "tds-ui/empty";
import * as i10 from "@angular/cdk/scrolling";
import * as i11 from "./select-option-group";
import * as i12 from "./select-option-item";
import * as i13 from "tds-ui/form-field";
const _c0 = ["selectOverlay"];
const _c1 = ["rigthContainer"];
function TDSSelect_ng_container_5_tds_select_placeholder_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "tds-select-placeholder", 21);
} if (rf & 2) {
    const ctx_r13 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("placeholder", ctx_r13.placeholder);
} }
function TDSSelect_ng_container_5_div_4_ng_template_3_Template(rf, ctx) { }
const _c2 = function (a0, a1, a2, a3) { return { label: a0, value: a1, $implicit: a2, item: a3 }; };
function TDSSelect_ng_container_5_div_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 22)(1, "div", 23)(2, "div", 24);
    i0.ɵɵtemplate(3, TDSSelect_ng_container_5_div_4_ng_template_3_Template, 0, 0, "ng-template", 25);
    i0.ɵɵelementEnd()()();
} if (rf & 2) {
    const ctx_r14 = i0.ɵɵnextContext(2);
    const _r9 = i0.ɵɵreference(16);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r14.labelTemplate || _r9)("ngTemplateOutletContext", i0.ɵɵpureFunction4(2, _c2, ctx_r14.listOfTopItem[0].textField, ctx_r14.listOfTopItem[0].valueField, ctx_r14.listOfTopItem[0], ctx_r14.listOfTopItem[0]));
} }
function TDSSelect_ng_container_5_div_5_Template(rf, ctx) { if (rf & 1) {
    const _r19 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 26)(1, "tds-select-search", 27, 28);
    i0.ɵɵlistener("isComposingChange", function TDSSelect_ng_container_5_div_5_Template_tds_select_search_isComposingChange_1_listener($event) { i0.ɵɵrestoreView(_r19); const ctx_r18 = i0.ɵɵnextContext(2); return ctx_r18.isComposingChange($event); })("valueChange", function TDSSelect_ng_container_5_div_5_Template_tds_select_search_valueChange_1_listener($event) { i0.ɵɵrestoreView(_r19); const ctx_r20 = i0.ɵɵnextContext(2); return ctx_r20.onInputValueChange($event); })("keydown", function TDSSelect_ng_container_5_div_5_Template_tds_select_search_keydown_1_listener($event) { i0.ɵɵrestoreView(_r19); const ctx_r21 = i0.ɵɵnextContext(2); return ctx_r21.onKeyDown($event); });
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r15 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("id", ctx_r15.id)("disabled", ctx_r15.disabled)("value", ctx_r15.inputValue)("showInput", ctx_r15.showSearch)("autofocus", ctx_r15.autofocus)("focusTrigger", ctx_r15.open);
} }
const _c3 = function (a0, a1, a2) { return { "pl-2.5  py-1": a0, "pl-3  py-1.5": a1, "pl-4  py-2": a2 }; };
function TDSSelect_ng_container_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "div", 16)(2, "div", 17);
    i0.ɵɵtemplate(3, TDSSelect_ng_container_5_tds_select_placeholder_3_Template, 1, 1, "tds-select-placeholder", 18);
    i0.ɵɵtemplate(4, TDSSelect_ng_container_5_div_4_Template, 4, 7, "div", 19);
    i0.ɵɵtemplate(5, TDSSelect_ng_container_5_div_5_Template, 3, 6, "div", 20);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction3(4, _c3, ctx_r1.size === "sm", ctx_r1.size === "md", ctx_r1.size === "lg"));
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r1.isShowPlaceholder);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r1.isShowSingleLabel);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r1.isSearchDefault);
} }
function TDSSelect_ng_container_6_tds_select_placeholder_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "tds-select-placeholder", 34);
} if (rf & 2) {
    const ctx_r22 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("placeholder", ctx_r22.placeholder)("ngClass", i0.ɵɵpureFunction3(2, _c3, ctx_r22.size === "sm", ctx_r22.size === "md", ctx_r22.size === "lg"));
} }
function TDSSelect_ng_container_6_div_3_ng_template_3_Template(rf, ctx) { }
function TDSSelect_ng_container_6_div_3_i_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "i", 40);
} }
const _c4 = function (a0, a1, a2) { return { "py-0.5": a0, "py-1": a1, "py-1.5": a2 }; };
function TDSSelect_ng_container_6_div_3_Template(rf, ctx) { if (rf & 1) {
    const _r29 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 35)(1, "div", 36)(2, "div", 37);
    i0.ɵɵtemplate(3, TDSSelect_ng_container_6_div_3_ng_template_3_Template, 0, 0, "ng-template", 25);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(4, "div", 38);
    i0.ɵɵlistener("click", function TDSSelect_ng_container_6_div_3_Template_div_click_4_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r29); const item_r25 = restoredCtx.$implicit; const ctx_r28 = i0.ɵɵnextContext(2); return ctx_r28.onItemDelete($event, item_r25); });
    i0.ɵɵtemplate(5, TDSSelect_ng_container_6_div_3_i_5_Template, 1, 0, "i", 39);
    i0.ɵɵelementEnd()()();
} if (rf & 2) {
    const item_r25 = ctx.$implicit;
    const ctx_r23 = i0.ɵɵnextContext(2);
    const _r11 = i0.ɵɵreference(18);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction3(4, _c4, ctx_r23.size === "sm", ctx_r23.size === "md", ctx_r23.size === "lg"));
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r23.labelTemplate || _r11)("ngTemplateOutletContext", i0.ɵɵpureFunction4(8, _c2, item_r25.textField, item_r25.valueField, item_r25, item_r25));
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !ctx_r23.disabled);
} }
const _c5 = function (a0, a1, a2) { return { "my-1": a0, "my-1.5": a1, "my-2 ": a2 }; };
function TDSSelect_ng_container_6_Template(rf, ctx) { if (rf & 1) {
    const _r31 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "div", 29);
    i0.ɵɵtemplate(2, TDSSelect_ng_container_6_tds_select_placeholder_2_Template, 1, 6, "tds-select-placeholder", 30);
    i0.ɵɵtemplate(3, TDSSelect_ng_container_6_div_3_Template, 6, 13, "div", 31);
    i0.ɵɵelementStart(4, "div", 32)(5, "tds-select-search", 33, 28);
    i0.ɵɵlistener("isComposingChange", function TDSSelect_ng_container_6_Template_tds_select_search_isComposingChange_5_listener($event) { i0.ɵɵrestoreView(_r31); const ctx_r30 = i0.ɵɵnextContext(); return ctx_r30.isComposingChange($event); })("valueChange", function TDSSelect_ng_container_6_Template_tds_select_search_valueChange_5_listener($event) { i0.ɵɵrestoreView(_r31); const ctx_r32 = i0.ɵɵnextContext(); return ctx_r32.onInputValueChange($event); })("keydown", function TDSSelect_ng_container_6_Template_tds_select_search_keydown_5_listener($event) { i0.ɵɵrestoreView(_r31); const ctx_r33 = i0.ɵɵnextContext(); return ctx_r33.onKeyDown($event); });
    i0.ɵɵelementEnd()()();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r2.showPlaceholder);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngForOf", ctx_r2.listOfTopItem)("ngForTrackBy", ctx_r2.trackValue);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction3(10, _c5, ctx_r2.size === "sm", ctx_r2.size === "md", ctx_r2.size === "lg"));
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("id", ctx_r2.id)("disabled", ctx_r2.disabled)("value", ctx_r2.inputValue)("showInput", ctx_r2.showSearch)("autofocus", ctx_r2.autofocus)("focusTrigger", ctx_r2.open);
} }
const _c6 = function (a0, a1, a2, a3) { return { "p-1": a0, "p-1.5": a1, "p-2": a2, "flex-grow-0 flex-shrink-0": a3 }; };
function TDSSelect_div_10_Template(rf, ctx) { if (rf & 1) {
    const _r35 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 41)(1, "div", 42);
    i0.ɵɵlistener("click", function TDSSelect_div_10_Template_div_click_1_listener($event) { i0.ɵɵrestoreView(_r35); const ctx_r34 = i0.ɵɵnextContext(); return ctx_r34.onClearSelection($event); });
    i0.ɵɵelement(2, "i", 43);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext();
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction4(1, _c6, ctx_r4.size === "sm", ctx_r4.size === "md", ctx_r4.size === "lg", ctx_r4.mode == "default"));
} }
const _c7 = function (a0, a1, a2, a3) { return { "px-1": a0, "px-1.5": a1, "px-2": a2, "flex-grow-0 flex-shrink-0": a3 }; };
function TDSSelect_div_11_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 44)(1, "div", 45);
    i0.ɵɵelement(2, "i", 46);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r5 = i0.ɵɵnextContext();
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction4(2, _c7, ctx_r5.size === "sm", ctx_r5.size === "md", ctx_r5.size === "lg", ctx_r5.mode == "default"));
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngClass", ctx_r5.classIcon);
} }
function TDSSelect_ng_template_12_div_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 53);
    i0.ɵɵelement(1, "tds-embed-empty", 54);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r36 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("specificContent", ctx_r36.notFoundTemplate);
} }
function TDSSelect_ng_template_12_ng_template_6_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "tds-option-group", 56);
} if (rf & 2) {
    const item_r38 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵproperty("label", item_r38.groupLabel);
} }
function TDSSelect_ng_template_12_ng_template_6_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    const _r43 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "tds-option-item", 57);
    i0.ɵɵlistener("itemClick", function TDSSelect_ng_template_12_ng_template_6_ng_template_3_Template_tds_option_item_itemClick_0_listener($event) { i0.ɵɵrestoreView(_r43); const ctx_r42 = i0.ɵɵnextContext(3); return ctx_r42.onItemClick($event); })("itemHover", function TDSSelect_ng_template_12_ng_template_6_ng_template_3_Template_tds_option_item_itemHover_0_listener($event) { i0.ɵɵrestoreView(_r43); const ctx_r44 = i0.ɵɵnextContext(3); return ctx_r44.onItemHover($event); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r38 = i0.ɵɵnextContext().$implicit;
    const ctx_r40 = i0.ɵɵnextContext(2);
    const _r7 = i0.ɵɵreference(14);
    i0.ɵɵproperty("grouped", !!item_r38.groupLabel)("disabled", item_r38.disabled)("showState", ctx_r40.mode === "tags" || ctx_r40.mode === "multiple")("label", item_r38.textField)("compareWith", ctx_r40.compareWith)("activatedValue", ctx_r40.activatedValue)("listOfSelectedValue", ctx_r40.listOfValue)("value", item_r38.valueField)("template", ctx_r40.optionTemplate ? ctx_r40.optionTemplate : _r7)("item", item_r38.data)("hideSelected", ctx_r40.hideSelected)("size", ctx_r40.size)("ngClass", ctx_r40.tdsCssOption);
} }
function TDSSelect_ng_template_12_ng_template_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0, 4);
    i0.ɵɵelementStart(1, "div", 23);
    i0.ɵɵtemplate(2, TDSSelect_ng_template_12_ng_template_6_ng_template_2_Template, 1, 1, "ng-template", 55);
    i0.ɵɵtemplate(3, TDSSelect_ng_template_12_ng_template_6_ng_template_3_Template, 1, 13, "ng-template", 55);
    i0.ɵɵelementEnd();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const item_r38 = ctx.$implicit;
    i0.ɵɵproperty("ngSwitch", item_r38.type);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngSwitchCase", "group");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngSwitchCase", "item");
} }
function TDSSelect_ng_template_12_Template(rf, ctx) { if (rf & 1) {
    const _r47 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 47)(1, "div", 48)(2, "tds-spin", 49);
    i0.ɵɵtemplate(3, TDSSelect_ng_template_12_div_3_Template, 2, 1, "div", 50);
    i0.ɵɵelementStart(4, "div", 23)(5, "cdk-virtual-scroll-viewport", 51);
    i0.ɵɵlistener("scrolledIndexChange", function TDSSelect_ng_template_12_Template_cdk_virtual_scroll_viewport_scrolledIndexChange_5_listener($event) { i0.ɵɵrestoreView(_r47); const ctx_r46 = i0.ɵɵnextContext(); return ctx_r46.onScrolledIndexChange($event); });
    i0.ɵɵtemplate(6, TDSSelect_ng_template_12_ng_template_6_Template, 4, 3, "ng-template", 52);
    i0.ɵɵelementEnd()()()()();
} if (rf & 2) {
    const ctx_r6 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("spinning", ctx_r6.loading)("tip", "...");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r6.listOfContainerItem.length === 0 && !ctx_r6.loading);
    i0.ɵɵadvance(2);
    i0.ɵɵstyleProp("height", ctx_r6.listOfContainerItem.length * ctx_r6.optionHeightPx, "px")("max-height", ctx_r6.optionHeightPx * ctx_r6.optionOverflowSize, "px");
    i0.ɵɵclassProp("full-width", !ctx_r6.dropdownMatchSelectWidth);
    i0.ɵɵproperty("itemSize", ctx_r6.optionHeightPx)("maxBufferPx", ctx_r6.optionHeightPx * ctx_r6.optionOverflowSize)("minBufferPx", ctx_r6.optionHeightPx * ctx_r6.optionOverflowSize);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("cdkVirtualForOf", ctx_r6.listOfContainerItem)("cdkVirtualForTrackBy", ctx_r6.trackValue)("cdkVirtualForTemplateCacheSize", 0);
} }
function TDSSelect_ng_template_13_div_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 45);
    i0.ɵɵelement(1, "span", 61);
    i0.ɵɵelementEnd();
} }
function TDSSelect_ng_template_13_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 58)(1, "div", 59);
    i0.ɵɵtext(2);
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(3, TDSSelect_ng_template_13_div_3_Template, 2, 0, "div", 60);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const label_r48 = ctx.label;
    const selected_r51 = ctx.selected;
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate1(" ", label_r48, " ");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", selected_r51);
} }
function TDSSelect_ng_template_15_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 62);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const label_r53 = ctx.label;
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" ", label_r53, " ");
} }
function TDSSelect_ng_template_17_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 62);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const label_r56 = ctx.label;
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" ", label_r56, " ");
} }
const _c8 = function (a0) { return { "border border-neutral-2-200 dark:border-d-neutral-2-200 rounded  ": a0 }; };
export const TDSDefaultFilterOption = (searchValue, item) => {
    if (item && item.textField) {
        return item.textField.toString().toLowerCase().indexOf(searchValue.toLowerCase()) > -1;
    }
    else {
        return false;
    }
};
export class TDSSelect {
    constructor(_focusMonitor, _elementRef, host, _formField, ngControl, cdr, platform, _parentForm, _parentFormGroup, ngZone) {
        this._focusMonitor = _focusMonitor;
        this._elementRef = _elementRef;
        this.host = host;
        this._formField = _formField;
        this.ngControl = ngControl;
        this.cdr = cdr;
        this.platform = platform;
        this._parentForm = _parentForm;
        this._parentFormGroup = _parentFormGroup;
        this.ngZone = ngZone;
        this._destroy = new Subject();
        this.stateChanges = new Subject();
        this.listOfValue$ = new BehaviorSubject([]);
        this.listOfTemplateItem$ = new BehaviorSubject([]);
        this.focused = false;
        this.listOfTopItem = [];
        this.activatedValue = null;
        this.listOfValue = [];
        this.inputValue = null;
        this.triggerWidth = null;
        this.dropDownPosition = 'bottom';
        this.isReactiveDriven = false;
        this.listOfTagAndTemplateItem = [];
        this.listOfContainerItem = [];
        this.scrolledIndex = 0;
        this.open = false;
        this.autofocus = false;
        this.showSearch = true;
        this.allowClear = false;
        this.allowSearch = true;
        this.id = `tds-select-${TDSSelect.nextId++}`;
        this.backdrop = false;
        this.dropdownMatchSelectWidth = true;
        this.dropdownClassName = null;
        this.mode = 'default';
        this.compareWith = (o1, o2) => o1 === o2;
        this.serverSearch = false;
        this.filterOption = TDSDefaultFilterOption;
        this.optionHeightPx = 37;
        this.optionOverflowSize = 8;
        this.maxMultipleCount = Infinity;
        this.autoClearSearchValue = true;
        this.maxTagCount = Infinity;
        this.tokenSeparators = [];
        this.maxTagPlaceholder = null;
        //dung cho mode  tags / multiple
        this.autoClose = false;
        this._size = "md";
        this._required = false;
        this._disabled = false;
        this.value = undefined;
        this.errorState = false;
        this._textField = 'lable';
        this._valueField = 'value';
        this._disabledField = 'disabled';
        this._groupField = 'group';
        this._data = [];
        this.loading = false;
        this.hideSelected = false;
        this.tdsCssOption = null;
        this.isShowPlaceholder = true;
        this.isShowSingleLabel = false;
        this.isComposing = false;
        this.border = true;
        this.valuePrimitive = true;
        this.classIcon = "tdsi-arrow-down-line";
        this.parentIsFormField = false;
        this.onSearch = new EventEmitter();
        this.scrollToBottom = new EventEmitter();
        this.openChange = new EventEmitter();
        this.blurChange = new EventEmitter();
        this.focusChange = new EventEmitter();
        this.selectChangeEvent = new EventEmitter();
        this.paddingRightIcon = 0;
        this.onChange = (_) => { };
        this.onTouched = () => { };
        if (this.ngControl != null) {
            this.ngControl.valueAccessor = this;
        }
        if (this._formField) {
            // this.size = this._formField.size;
            this.parentIsFormField = true;
        }
    }
    get empty() {
        return !TDSHelperArray.hasListValue(this.listOfValue);
    }
    get size() {
        return this._size;
    }
    set size(value) {
        if (this._size != value) {
            this._size = value;
            this.stateChanges.next();
            switch (this._size) {
                case "sm":
                    this.optionHeightPx = 29;
                    break;
                case "lg":
                    this.optionHeightPx = 45;
                    break;
                default:
                    this.optionHeightPx = 37;
                    break;
            }
        }
    }
    get placeholder() {
        return this._placeholder;
    }
    set placeholder(value) {
        this._placeholder = value;
        this.stateChanges.next();
    }
    get required() {
        return this._required;
    }
    set required(value) {
        this._required = coerceBooleanProperty(value);
        this.stateChanges.next();
    }
    get disabled() {
        return this._disabled;
    }
    set disabled(value) {
        this._disabled = coerceBooleanProperty(value);
        this.stateChanges.next();
    }
    updateErrorState() {
        const oldState = this.errorState;
        const parent = this._parentFormGroup || this._parentForm;
        // const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;
        const control = this.ngControl ? this.ngControl.control : null;
        const newState = this._isErrorState(control, parent);
        if (newState !== oldState) {
            this.errorState = newState;
            this.stateChanges.next();
            this.cdr.markForCheck();
        }
    }
    _isErrorState(control, form) {
        return TDSIsErrorState(control, form);
    }
    get textField() {
        return this._textField;
    }
    set textField(val) {
        if (val !== this._textField) {
            this._textField = val;
            this.stateChanges.next();
        }
    }
    get valueField() {
        return this._valueField;
    }
    set valueField(val) {
        if (val !== this._valueField) {
            this._valueField = val;
            this.stateChanges.next();
        }
    }
    get disabledField() {
        return this._disabledField;
    }
    set disabledField(val) {
        if (val !== this._disabledField) {
            this._disabledField = val;
        }
    }
    get groupField() {
        return this._groupField;
    }
    set groupField(val) {
        if (val !== this._groupField) {
            this._groupField = val;
        }
    }
    get data() {
        return this._data;
    }
    set data(val) {
        if (TDSHelperArray.hasListValue(val)) {
            this._data = val;
        }
        else {
            this._data = [];
        }
        this.stateChanges.next();
    }
    ngOnInit() {
        let that = this;
        this._focusMonitor
            .monitor(this._elementRef, true)
            .pipe(takeUntil(this._destroy))
            .subscribe(focusOrigin => {
            if (!focusOrigin) {
                this.focused = false;
                this.cdr.markForCheck();
                this.blurChange.emit();
                Promise.resolve().then(() => {
                    this.onTouched();
                });
            }
            else {
                this.focused = true;
                this.cdr.markForCheck();
                this.focusChange.emit();
            }
        });
        combineLatest([this.listOfValue$, this.listOfTemplateItem$])
            .pipe(takeUntil(this._destroy))
            .subscribe(([listOfSelectedValue, listOfTemplateItem]) => {
            const listOfSelected = !this.valuePrimitive && TDSHelperObject.hasValue(this.value) ? this.covertModelToList(this.value, this.mode) : [];
            const listConvertDataOfSelected = listOfSelected.map(item => {
                return this.generateDataItem(item);
            });
            const listOfTagItem = listOfSelectedValue
                .filter(() => this.mode === 'tags')
                .filter(value => listOfTemplateItem.findIndex(o => this.compareWith(o.valueField, value)) === -1 && listConvertDataOfSelected.findIndex(o => this.compareWith(o.valueField, value)) === -1)
                .map(value => this.listOfTopItem.find(o => this.compareWith(o.valueField, value)) || this.generateTagItem(value));
            this.listOfTagAndTemplateItem = [...listOfTemplateItem, ...listOfTagItem];
            this.listOfTopItem = this.listOfValue
                .map(v => {
                const value = TDSHelperObject.hasValue(v) && TDSHelperObject.hasValue(v[that.valueField]) ? v[that.valueField] : v;
                return [...this.listOfTagAndTemplateItem, ...this.listOfTopItem, ...listConvertDataOfSelected].find(item => {
                    return this.compareWith(value, item.valueField);
                });
            })
                .filter(item => !!item);
            this.updateListOfContainerItem();
            this.updateTemplateVariable();
            this.updatePaddingRightIcon();
        });
        this.ngZone.runOutsideAngular(() => fromEvent(this.host.nativeElement, 'click')
            .pipe(takeUntil(this._destroy))
            .subscribe(() => {
            if ((this.open && this.showSearch) || this.disabled) {
                return;
            }
            this.ngZone.run(() => {
                if (!this.focused && !this.disabled) {
                    this.focused = true;
                    this.stateChanges.next();
                }
                this.setOpenState(!this.open);
            });
        }));
    }
    ngOnChanges(changes) {
        const { open, disabled, data, textField, valueField, disabledField, valuePrimitive, loading } = changes;
        if (open) {
            this.onOpenChange();
        }
        if (disabled && this.disabled) {
            this.setOpenState(false);
            this.setFocused(false);
        }
        if (TDSHelperObject.hasValue(this.data)) {
            this.isReactiveDriven = true;
            const listOfOptions = this.data || [];
            const listOfTransformedItem = listOfOptions.map(item => {
                return this.generateDataItem(item);
            });
            this.listOfTemplateItem$.next(listOfTransformedItem);
        }
    }
    ngAfterContentInit() {
    }
    updateListOfValue(listOfValue) {
        const covertListToModel = (list, mode) => {
            if (mode === 'default') {
                if (list.length > 0) {
                    return list[0];
                }
                else {
                    return null;
                }
            }
            else {
                return list;
            }
        };
        const model = covertListToModel(listOfValue, this.mode);
        if (this.value !== model) {
            this.listOfValue = listOfValue;
            this.listOfValue$.next(listOfValue);
            this.value = model;
            if (!this.valuePrimitive) {
                if (this.mode == 'default') {
                    const data = TDSHelperArray.hasListValue(this.listOfTopItem) ? this.listOfTopItem[0].data : null;
                    this.onChange(data);
                    this.selectChangeEvent.emit(data);
                }
                else {
                    const data = this.listOfTopItem.map(res => {
                        return res.data;
                    });
                    this.onChange(data);
                    this.selectChangeEvent.emit(data);
                }
            }
            else {
                this.onChange(this.value);
                this.selectChangeEvent.emit(this.value);
            }
        }
    }
    onClearSelection(e) {
        e.preventDefault();
        e.stopPropagation();
        this.onTouched();
        this.updateListOfValue([]);
    }
    updateListOfContainerItem() {
        let listOfContainerItem = this.listOfTagAndTemplateItem
            .filter(item => !item.hide)
            .filter(item => {
            if (!this.serverSearch && this.inputValue) {
                return this.filterOption(this.inputValue, item);
            }
            else {
                return true;
            }
        });
        if (this.mode === 'tags' && this.inputValue) {
            const matchedItem = this.listOfTagAndTemplateItem.find(item => item.textField === this.inputValue);
            if (!matchedItem) {
                const tagItem = this.generateTagItem(this.inputValue);
                listOfContainerItem = [tagItem, ...listOfContainerItem];
                this.activatedValue = tagItem.valueField;
            }
            else {
                this.activatedValue = matchedItem.valueField;
            }
        }
        const optionNotDisabled = this.listOfContainerItem.filter(item => item.type === 'item').find(item => !item.disabled);
        const activatedItem = listOfContainerItem.find(item => item.textField === this.inputValue) ||
            listOfContainerItem.find(item => this.compareWith(item.valueField, this.listOfValue[0]))
            || optionNotDisabled;
        this.activatedValue = (activatedItem && activatedItem.valueField) || null;
        let listOfGroupLabel = [];
        if (this.isReactiveDriven) {
            listOfGroupLabel = [...new Set(this.data.filter(o => o[this.groupField]).map(o => o[this.groupField]))];
        }
        else {
            if (this.listOfOptionGroupComponent) {
                listOfGroupLabel = this.listOfOptionGroupComponent.map(o => o.label);
            }
        }
        /** insert group item **/
        listOfGroupLabel.forEach(label => {
            const index = listOfContainerItem.findIndex(item => label === item.groupLabel);
            if (index > -1) {
                const groupItem = { groupLabel: label, type: 'group', key: label };
                listOfContainerItem.splice(index, 0, groupItem);
            }
        });
        this.listOfContainerItem = [...listOfContainerItem];
        this.updateCdkConnectedOverlayPositions();
    }
    generateTagItem(value) {
        return {
            valueField: value,
            textField: value,
            type: 'item',
            item: value,
            data: value
        };
    }
    generateDataItem(item) {
        let isOject = TDSHelperObject.hasValue(item[this.valueField]) || TDSHelperObject.hasValue(item[this.textField]);
        return {
            textField: typeof item[this.textField] === 'string' || typeof item[this.textField] === 'number' ? item[this.textField] : item,
            valueField: isOject ? item[this.valueField] : item,
            disabled: item[this.disabledField] || false,
            hide: item.hide || false,
            groupLabel: item[this.groupField] || null,
            type: 'item',
            key: item[this.valueField] || item,
            data: item,
            item: item,
        };
    }
    writeValue(modelValue) {
        /** https://github.com/angular/angular/issues/14988 **/
        if (this.value !== modelValue) {
            this.value = modelValue;
            const listOfValue = this.covertModelToList(modelValue, this.mode).map(f => {
                return f[this.valueField] ? f[this.valueField] : f;
            });
            this.listOfValue = listOfValue;
            this.listOfValue$.next(listOfValue);
            this.cdr.markForCheck();
        }
    }
    covertModelToList(model, mode) {
        if (model === null || model === undefined) {
            return [];
        }
        else if (mode === 'default') {
            if (TDSHelperObject.hasValue(model)) {
                if (TDSHelperArray.isArray(model)) {
                    if (TDSHelperString.hasValueString(model[0]))
                        return [model[0]];
                    else
                        return [];
                }
                else
                    return [model];
            }
            else {
                return [];
            }
        }
        else {
            return model;
        }
    }
    ;
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    ngAfterViewInit() {
        if (this.autofocus && !this.focused) {
            this.setFocused(true);
            this.setOpenState(true);
        }
    }
    ngOnDestroy() {
        this._focusMonitor.stopMonitoring(this._elementRef);
        this._destroy.next();
        this._destroy.complete();
        this.stateChanges.complete();
        if (this.timerRightIcon) {
            clearTimeout(this.timerRightIcon);
        }
    }
    setDescribedByIds(ids) {
        if (ids.length) {
            this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));
        }
        else {
            this._elementRef.nativeElement.removeAttribute('aria-describedby');
        }
    }
    onContainerClick(e) {
        // e.preventDefault();
        // e.stopPropagation();
    }
    updateTemplateVariable() {
        const isSelectedValueEmpty = this.listOfTopItem.length === 0;
        this.isShowPlaceholder = isSelectedValueEmpty && !this.isComposing && !this.inputValue;
        this.isShowSingleLabel = !isSelectedValueEmpty && !this.isComposing && !this.inputValue;
    }
    isComposingChange(isComposing) {
        this.isComposing = isComposing;
        this.updateTemplateVariable();
    }
    onInputValueChange(value) {
        if (value !== this.inputValue) {
            this.inputValue = value;
            this.updateTemplateVariable();
            this.updateListOfContainerItem();
            this.onSearch.emit(value);
            this.updateCdkConnectedOverlayPositions();
            this.tokenSeparate(value, this.tokenSeparators);
            this.scrollActive();
        }
    }
    onItemClick(value) {
        this.activatedValue = value;
        if (this.mode === 'default') {
            if (this.listOfValue.length === 0 || !this.compareWith(this.listOfValue[0], value)) {
                this.updateListOfValue([value]);
            }
            this.setFocused(false);
            this.setOpenState(false);
        }
        else {
            const targetIndex = this.listOfValue.findIndex(o => this.compareWith(o, value));
            if (targetIndex !== -1) {
                const listOfValueAfterRemoved = this.listOfValue.filter((_, i) => i !== targetIndex);
                this.updateListOfValue(listOfValueAfterRemoved);
            }
            else if (this.listOfValue.length < this.maxMultipleCount) {
                const listOfValueAfterAdded = [...this.listOfValue, value];
                this.updateListOfValue(listOfValueAfterAdded);
            }
            if (this.autoClose) {
                this.setFocused(false);
                this.setOpenState(false);
            }
            else {
                this.focus();
                if (this.autoClearSearchValue) {
                    this.clearInput();
                }
            }
        }
    }
    onItemHover(value) {
        // TODO: keydown.enter won't activate this value
        this.activatedValue = value;
    }
    onItemDelete(e, item) {
        e.preventDefault();
        e.stopPropagation();
        if (!this.disabled) {
            const listOfSelectedValue = this.listOfValue.filter(v => !this.compareWith(v, item.valueField));
            this.updateListOfValue(listOfSelectedValue);
            this.clearInput();
        }
    }
    focus() {
        if (this.tdsSelectSearch) {
            this.tdsSelectSearch.focus();
        }
    }
    blur() {
        if (this.tdsSelectSearch) {
            this.tdsSelectSearch.blur();
        }
    }
    onOverlayKeyDown(e) {
        if (e.keyCode === ESCAPE) {
            this.setFocused(false);
            this.setOpenState(false);
            this.onTouched();
        }
    }
    onClickOutside(event) {
        if (!this._elementRef.nativeElement.contains(event.target)) {
            this.setFocused(false);
            this.setOpenState(false);
            this.onTouched();
            this.clearInput();
        }
    }
    setOpenState(value) {
        if (this.open !== value) {
            this.open = value;
            this.openChange.emit(value);
            this.onOpenChange();
            this.scrollActive();
            this.cdr.markForCheck();
        }
    }
    setFocused(value) {
        this.focused = value;
        this.stateChanges.next();
    }
    onOpenChange() {
        this.updateCdkConnectedOverlayStatus();
        this.clearInput();
        if (this.open && this.activatedValue) {
            this.scrollToActivatedValue();
        }
    }
    clearInput() {
        if (this.tdsSelectSearch)
            this.tdsSelectSearch.clearInputValue();
    }
    onPositionChange(position) {
        this.dropDownPosition = position.connectionPair.originY;
    }
    showClear() {
        return this.allowClear && !this.disabled && this.listOfValue.length;
    }
    get overlayOrigin() {
        if (this._formField) {
            return new CdkOverlayOrigin(this._formField.getConnectedOverlayOrigin());
        }
        else {
            return new CdkOverlayOrigin(this._connectionSelectOverlay);
        }
    }
    get originElement() {
        if (this._formField) {
            return this._formField.getConnectedOverlayOrigin();
        }
        else {
            return this._connectionSelectOverlay;
        }
    }
    get showPlaceholder() {
        return TDSHelperString.hasValueString(this.placeholder)
            && this.listOfTopItem.length == 0
            // && (!TDSHelperString.hasValueString(this.inputValue) && this.mode == "multiple")
            // && (this.mode == "default" || (!this.focused && !this.open && this.mode == "multiple"))
            && (!this.focused && !this.open);
    }
    get isSearchDefault() {
        return (this.focused || this.open) && this.allowSearch;
    }
    updateCdkConnectedOverlayStatus() {
        if (this.platform.isBrowser && this.originElement.nativeElement) {
            reqAnimFrame(() => {
                this.triggerWidth = this.originElement.nativeElement.getBoundingClientRect().width;
                this.cdr.markForCheck();
            });
        }
    }
    updateCdkConnectedOverlayPositions() {
        reqAnimFrame(() => {
            this.cdkConnectedOverlay?.overlayRef?.updatePosition();
        });
    }
    trackValue(_index, option) {
        return option.key;
    }
    onScrolledIndexChange(index) {
        this.scrolledIndex = index;
        if (index === this.listOfContainerItem.length - this.optionOverflowSize) {
            this.scrollToBottom.emit();
        }
    }
    scrollToActivatedValue() {
        if (!TDSHelperObject.hasValue(this.cdkVirtualScrollViewport) || !this.open || !TDSHelperObject.hasValue(this.activatedValue)) {
            return;
        }
        const index = this.listOfContainerItem.findIndex(item => this.compareWith(item.key, this.activatedValue));
        if (index < this.scrolledIndex || index >= this.scrolledIndex + this.optionOverflowSize) {
            this.cdkVirtualScrollViewport.scrollToIndex(index || 0);
        }
    }
    ngDoCheck() {
        if (this.ngControl) {
            this.updateErrorState();
        }
    }
    tokenSeparate(inputValue, tokenSeparators) {
        const includesSeparators = (str, separators) => {
            // tslint:disable-next-line:prefer-for-of
            for (let i = 0; i < separators.length; ++i) {
                if (str.lastIndexOf(separators[i]) > 0) {
                    return true;
                }
            }
            return false;
        };
        const splitBySeparators = (str, separators) => {
            const reg = new RegExp(`[${separators.join()}]`);
            const array = str.split(reg).filter(token => token);
            return [...new Set(array)];
        };
        if (inputValue &&
            inputValue.length &&
            tokenSeparators.length &&
            this.mode !== 'default' &&
            includesSeparators(inputValue, tokenSeparators)) {
            const listOfLabel = splitBySeparators(inputValue, tokenSeparators);
            this.onTokenSeparate(listOfLabel);
        }
    }
    onTokenSeparate(listOfLabel) {
        const listOfMatchedValue = this.listOfTagAndTemplateItem
            .filter(item => listOfLabel.findIndex(label => label === item.textField) !== -1)
            .map(item => item.valueField)
            .filter(item => this.listOfValue.findIndex(v => this.compareWith(v, item)) === -1);
        if (this.mode === 'multiple') {
            this.updateListOfValue([...this.listOfValue, ...listOfMatchedValue]);
        }
        else if (this.mode === 'tags') {
            const listOfUnMatchedLabel = listOfLabel.filter(label => this.listOfTagAndTemplateItem.findIndex(item => item.textField === label) === -1);
            this.updateListOfValue([...this.listOfValue, ...listOfMatchedValue, ...listOfUnMatchedLabel]);
        }
        this.clearInput();
    }
    onKeyDown(e) {
        if (this.disabled || this.mode === 'tags') {
            return;
        }
        const listOfFilteredOptionNotDisabled = this.listOfContainerItem
            .filter(item => item.type === 'item')
            //thêm trường hợp hideSelected =true
            .filter(item => !item.disabled && (!this.hideSelected || this.listOfValue.find(key => key === item.key) == null));
        const activatedIndex = listOfFilteredOptionNotDisabled.findIndex(item => this.compareWith(item.valueField, this.activatedValue));
        switch (e.keyCode) {
            case UP_ARROW:
                e.preventDefault();
                if (this.open) {
                    const preIndex = activatedIndex > 0 ? activatedIndex - 1 : listOfFilteredOptionNotDisabled.length - 1;
                    this.activatedValue = listOfFilteredOptionNotDisabled[preIndex].valueField;
                }
                break;
            case DOWN_ARROW:
                e.preventDefault();
                if (this.open) {
                    const nextIndex = activatedIndex < listOfFilteredOptionNotDisabled.length - 1 ? activatedIndex + 1 : 0;
                    this.activatedValue = listOfFilteredOptionNotDisabled[nextIndex].valueField;
                }
                else {
                    this.setOpenState(true);
                }
                break;
            case ENTER:
                e.preventDefault();
                if (this.open) {
                    if (TDSHelperObject.hasValue(this.activatedValue)) {
                        this.onItemClick(this.activatedValue);
                    }
                }
                else {
                    this.setOpenState(true);
                }
                break;
            case SPACE:
                if (!this.open) {
                    this.setOpenState(true);
                    e.preventDefault();
                }
                break;
            case TAB:
                this.setOpenState(false);
                break;
            case ESCAPE:
                /**
                 * Skip the ESCAPE processing, it will be handled in {@link onOverlayKeyDown}.
                 */
                break;
            default:
                if (!this.open) {
                    this.setOpenState(true);
                }
        }
        this.scrollToActivatedValue();
    }
    updatePaddingRightIcon() {
        if (this.timerRightIcon) {
            clearTimeout(this.timerRightIcon);
        }
        if (TDSHelperObject.hasValue(this.classIcon)) {
            const padding = 8;
            let widthIcon = this.size == 'md' ? 28 : this.size == 'lg' ? 32 : 24;
            if (this.showClear()) {
                widthIcon = this.size == 'md' ? 56 : this.size == 'lg' ? 64 : 48;
            }
            this.timerRightIcon = setTimeout(() => {
                this.paddingRightIcon = widthIcon + padding;
                this.cdr.markForCheck();
            }, 0);
        }
        else {
            this.timerRightIcon = setTimeout(() => {
                this.paddingRightIcon = 0;
                this.cdr.markForCheck();
            }, 0);
        }
    }
    scrollActive() {
        if (this.timerScrollActive) {
            clearTimeout(this.timerScrollActive);
        }
        this.timerScrollActive = setTimeout(() => {
            this.scrollToActivatedValue();
        }, 0);
    }
}
TDSSelect.nextId = 0;
TDSSelect.ɵfac = function TDSSelect_Factory(t) { return new (t || TDSSelect)(i0.ɵɵdirectiveInject(i1.FocusMonitor), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(TDS_FORM_FIELD, 9), i0.ɵɵdirectiveInject(i2.NgControl, 10), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i3.Platform), i0.ɵɵdirectiveInject(i2.NgForm, 8), i0.ɵɵdirectiveInject(i2.FormGroupDirective, 8), i0.ɵɵdirectiveInject(i0.NgZone)); };
TDSSelect.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSSelect, selectors: [["tds-select"]], contentQueries: function TDSSelect_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        i0.ɵɵcontentQuery(dirIndex, TDSOptionTemplateDirective, 5, TemplateRef);
        i0.ɵɵcontentQuery(dirIndex, TDSOptionTemplateDirective, 5, TemplateRef);
        i0.ɵɵcontentQuery(dirIndex, TDSLabelTemplateDirective, 5, TemplateRef);
        i0.ɵɵcontentQuery(dirIndex, TDSMultiLabelTemplateDirective, 5, TemplateRef);
        i0.ɵɵcontentQuery(dirIndex, TDSHeaderTemplateDirective, 5, TemplateRef);
        i0.ɵɵcontentQuery(dirIndex, TDSFooterTemplateDirective, 5, TemplateRef);
        i0.ɵɵcontentQuery(dirIndex, TDSNotFoundTemplateDirective, 5, TemplateRef);
        i0.ɵɵcontentQuery(dirIndex, TDSTypeToSearchTemplateDirective, 5, TemplateRef);
        i0.ɵɵcontentQuery(dirIndex, TDSLoadingTextTemplateDirective, 5, TemplateRef);
        i0.ɵɵcontentQuery(dirIndex, TDSTagTemplateDirective, 5, TemplateRef);
        i0.ɵɵcontentQuery(dirIndex, TDSLoadingSpinnerTemplateDirective, 5, TemplateRef);
        i0.ɵɵcontentQuery(dirIndex, TDSOption, 5);
        i0.ɵɵcontentQuery(dirIndex, TDSOptgroup, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.optionTemplate = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.optgroupTemplate = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.labelTemplate = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.multiLabelTemplate = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.headerTemplate = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.footerTemplate = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.notFoundTemplate = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.typeToSearchTemplate = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.loadingTextTemplate = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tagTemplate = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.loadingSpinnerTemplate = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.listOfOptionComponent = _t);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.listOfOptionGroupComponent = _t);
    } }, viewQuery: function TDSSelect_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(CdkVirtualScrollViewport, 5);
        i0.ɵɵviewQuery(CdkConnectedOverlay, 7);
        i0.ɵɵviewQuery(_c0, 7);
        i0.ɵɵviewQuery(TDSSelectSearchComponent, 5);
        i0.ɵɵviewQuery(_c1, 7);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.cdkVirtualScrollViewport = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.cdkConnectedOverlay = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._connectionSelectOverlay = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tdsSelectSearch = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._rigthContainer = _t.first);
    } }, hostAttrs: [1, "w-full", "block", "relative", "box-border", "m-0", "p-0"], hostVars: 2, hostBindings: function TDSSelect_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵclassProp("cursor-pointer", !ctx.disabled);
    } }, inputs: { open: "open", autofocus: "autofocus", allowClear: "allowClear", allowSearch: "allowSearch", userAriaDescribedBy: ["aria-describedby", "userAriaDescribedBy"], id: "id", backdrop: "backdrop", dropdownMatchSelectWidth: "dropdownMatchSelectWidth", dropdownClassName: "dropdownClassName", mode: "mode", compareWith: "compareWith", serverSearch: "serverSearch", filterOption: "filterOption", optionOverflowSize: "optionOverflowSize", maxMultipleCount: "maxMultipleCount", autoClearSearchValue: "autoClearSearchValue", maxTagCount: "maxTagCount", tokenSeparators: "tokenSeparators", maxTagPlaceholder: "maxTagPlaceholder", autoClose: "autoClose", size: "size", placeholder: "placeholder", required: "required", disabled: "disabled", textField: "textField", valueField: "valueField", disabledField: "disabledField", groupField: "groupField", data: "data", loading: "loading", hideSelected: "hideSelected", tdsCssOption: "tdsCssOption", border: "border", valuePrimitive: "valuePrimitive", classIcon: "classIcon" }, outputs: { onSearch: "onSearch", scrollToBottom: "scrollToBottom", openChange: "openChange", blurChange: "blurChange", focusChange: "focusChange", selectChangeEvent: "selectChange" }, features: [i0.ɵɵProvidersFeature([
            {
                provide: TDSFormFieldControl,
                useExisting: forwardRef(() => TDSSelect),
            }
        ]), i0.ɵɵNgOnChangesFeature], decls: 19, vars: 16, consts: [[1, "tds-select-selector", "w-full", "max-w-full", "group", "relative", 3, "ngClass", "click"], ["selectOverlay", ""], [1, "w-full", "flex", "items-stretch", "max-w-full", "group-hover:bg-neutral-3-50", "dark:group-hover:bg-d-neutral-3-50", "group-hover:rounded"], [1, "tds-value-container", "w-full", "relative"], [3, "ngSwitch"], [4, "ngSwitchCase"], [4, "ngSwitchDefault"], [1, "absolute", "bottom-0", "right-0", "top-0"], ["rigthContainer", ""], [1, "w-full", "h-full", "flex", "items-center", "justify-center"], ["class", "tds-clear-wrapper text-neutral-1-500 dark:text-d-neutral-1-500 flex ", 3, "ngClass", 4, "ngIf"], ["class", "tds-arrow-wrapper h-full text-neutral-1-900 dark:text-d-neutral-1-900 flex items-center  group-hover:border-transparent", "style", "border-top-right-radius: 0.2rem;border-bottom-right-radius: 0.2rem; ", 3, "ngClass", 4, "ngIf"], ["cdkConnectedOverlay", "", "cdkConnectedOverlayLockPosition", "", 3, "cdkConnectedOverlayHasBackdrop", "cdkConnectedOverlayMinWidth", "cdkConnectedOverlayWidth", "cdkConnectedOverlayOrigin", "cdkConnectedOverlayTransformOriginOn", "cdkConnectedOverlayPanelClass", "cdkConnectedOverlayOpen", "overlayKeydown", "overlayOutsideClick", "detach", "positionChange"], ["defaultOptionTemplate", ""], ["defaultLabelTemplate", ""], ["defaultTagTemplate", ""], [1, "w-full", "max-w-full", "relative", 3, "ngClass"], [1, "max-w-full", "relative", 2, "min-height", "20px"], ["class", "tds-placeholder mr-1  block", 3, "placeholder", 4, "ngIf"], ["class", "tds-value select-none", 4, "ngIf"], ["class", "absolute inset-0", 4, "ngIf"], [1, "tds-placeholder", "mr-1", "block", 3, "placeholder"], [1, "tds-value", "select-none"], [1, "w-full"], [1, "text-body-2", "font-regular", "text-neutral-1-900", "dark:text-d-neutral-1-900", "truncate", "box-border"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "absolute", "inset-0"], [1, "w-full", 3, "id", "disabled", "value", "showInput", "autofocus", "focusTrigger", "isComposingChange", "valueChange", "keydown"], ["tdsselectsearch", ""], [1, "w-full", "max-w-full", "relative", "flex-wrap", "flex-shrink", "flex-grow", "break-words", "flex"], ["class", "tds-placeholder mr-1  block", 3, "placeholder", "ngClass", 4, "ngIf"], ["class", "tds-value  flex max-w-full", 3, "ngClass", 4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "tds-input", "flex-1", "pl-2", 3, "ngClass"], [3, "id", "disabled", "value", "showInput", "autofocus", "focusTrigger", "isComposingChange", "valueChange", "keydown"], [1, "tds-placeholder", "mr-1", "block", 3, "placeholder", "ngClass"], [1, "tds-value", "flex", "max-w-full", 3, "ngClass"], [1, "w-full", "flex", "max-w-full", "items-center", "bg-neutral-3-200", "dark:bg-d-neutral-3-200", "group", "hover:bg-neutral-3-300", "dark:hover:bg-d-neutral-3-300", "rounded", "mx-1", "py-0.5", "pl-1.5"], [1, "text-body-2", "font-regular", "text-neutral-1-900", "dark:text-d-neutral-1-900", "whitespace-nowrap", "box-border", "truncate"], [1, "flex", "items-center", "group-hover:text-neutral-1-700", "dark:group-hover:text-d-neutral-1-700", "text-neutral-1-500", "dark:text-d-neutral-1-500", "ml-0.5", "pl-1", "pr-1", 3, "click"], ["class", "tdsi-close-fill  text-base leading-5", 4, "ngIf"], [1, "tdsi-close-fill", "text-base", "leading-5"], [1, "tds-clear-wrapper", "text-neutral-1-500", "dark:text-d-neutral-1-500", "flex", 3, "ngClass"], [1, "flex", "items-center", 3, "click"], [1, "tdsi-close-fill", "text-base", "leading-4"], [1, "tds-arrow-wrapper", "h-full", "text-neutral-1-900", "dark:text-d-neutral-1-900", "flex", "items-center", "group-hover:border-transparent", 2, "border-top-right-radius", "0.2rem", "border-bottom-right-radius", "0.2rem", 3, "ngClass"], [1, "flex", "items-center"], [1, "text-base", "leading-4", 3, "ngClass"], [1, "py-1", "tds-select-panel", "relative", "w-full"], [1, "relative", "py-1", "w-full", "overflow-auto", "bg-white", "dark:bg-d-neutral-3-300", "shadow-1-lg", "rounded"], [3, "spinning", "tip"], ["class", "p-1", "class", "tds-select-item-empty", 4, "ngIf"], [1, "overflow-x-hidden", "w-full", "tds-panel-scroll", 3, "itemSize", "maxBufferPx", "minBufferPx", "scrolledIndexChange"], ["cdkVirtualFor", "", 3, "cdkVirtualForOf", "cdkVirtualForTrackBy", "cdkVirtualForTemplateCacheSize"], [1, "tds-select-item-empty"], ["componentName", "select", 3, "specificContent"], [3, "ngSwitchCase"], [3, "label"], [3, "grouped", "disabled", "showState", "label", "compareWith", "activatedValue", "listOfSelectedValue", "value", "template", "item", "hideSelected", "size", "ngClass", "itemClick", "itemHover"], [1, "w-full", "flex"], [1, "w-full", "truncate", "pr-2"], ["class", "flex items-center", 4, "ngIf"], [1, "tdsi-success-fill", "text-primary-1", "text-sm"], [1, "w-full", "truncate"]], template: function TDSSelect_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 0, 1);
        i0.ɵɵlistener("click", function TDSSelect_Template_div_click_0_listener($event) { return ctx.onContainerClick($event); });
        i0.ɵɵelementStart(2, "div", 2)(3, "div", 3);
        i0.ɵɵelementContainerStart(4, 4);
        i0.ɵɵtemplate(5, TDSSelect_ng_container_5_Template, 6, 8, "ng-container", 5);
        i0.ɵɵtemplate(6, TDSSelect_ng_container_6_Template, 7, 14, "ng-container", 6);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(7, "div", 7, 8)(9, "div", 9);
        i0.ɵɵtemplate(10, TDSSelect_div_10_Template, 3, 6, "div", 10);
        i0.ɵɵtemplate(11, TDSSelect_div_11_Template, 3, 7, "div", 11);
        i0.ɵɵelementEnd()()()();
        i0.ɵɵtemplate(12, TDSSelect_ng_template_12_Template, 7, 15, "ng-template", 12);
        i0.ɵɵlistener("overlayKeydown", function TDSSelect_Template_ng_template_overlayKeydown_12_listener($event) { return ctx.onOverlayKeyDown($event); })("overlayOutsideClick", function TDSSelect_Template_ng_template_overlayOutsideClick_12_listener($event) { return ctx.onClickOutside($event); })("detach", function TDSSelect_Template_ng_template_detach_12_listener() { return ctx.setOpenState(false); })("positionChange", function TDSSelect_Template_ng_template_positionChange_12_listener($event) { return ctx.onPositionChange($event); });
        i0.ɵɵtemplate(13, TDSSelect_ng_template_13_Template, 4, 2, "ng-template", null, 13, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtemplate(15, TDSSelect_ng_template_15_Template, 2, 1, "ng-template", null, 14, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtemplate(17, TDSSelect_ng_template_17_Template, 2, 1, "ng-template", null, 15, i0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(14, _c8, !ctx.parentIsFormField && ctx.border));
        i0.ɵɵadvance(3);
        i0.ɵɵstyleProp("padding-right", ctx.paddingRightIcon, "px");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngSwitch", ctx.mode);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngSwitchCase", "default");
        i0.ɵɵadvance(5);
        i0.ɵɵproperty("ngIf", ctx.showClear());
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx.classIcon);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("cdkConnectedOverlayHasBackdrop", ctx.backdrop)("cdkConnectedOverlayMinWidth", ctx.dropdownMatchSelectWidth ? null : ctx.triggerWidth)("cdkConnectedOverlayWidth", ctx.dropdownMatchSelectWidth ? ctx.triggerWidth : null)("cdkConnectedOverlayOrigin", ctx.overlayOrigin)("cdkConnectedOverlayTransformOriginOn", ".form-field-connection-container")("cdkConnectedOverlayPanelClass", ctx.dropdownClassName)("cdkConnectedOverlayOpen", ctx.open);
    } }, directives: [i4.NgClass, i4.NgSwitch, i4.NgSwitchCase, i4.NgIf, i5.TDSSelectPlaceholderComponent, i4.NgTemplateOutlet, i6.TDSSelectSearchComponent, i4.NgSwitchDefault, i4.NgForOf, i7.CdkConnectedOverlay, i8.TDSSpinComponent, i9.TDSEmbedEmptyComponent, i10.CdkVirtualScrollViewport, i10.CdkFixedSizeVirtualScroll, i10.CdkVirtualForOf, i11.TDSSelectOptionGroup, i12.TDSOptionItem], encapsulation: 2, changeDetection: 0 });
__decorate([
    InputBoolean()
], TDSSelect.prototype, "open", void 0);
__decorate([
    InputBoolean()
], TDSSelect.prototype, "autofocus", void 0);
__decorate([
    InputBoolean()
], TDSSelect.prototype, "allowClear", void 0);
__decorate([
    InputBoolean()
], TDSSelect.prototype, "allowSearch", void 0);
__decorate([
    InputBoolean()
], TDSSelect.prototype, "backdrop", void 0);
__decorate([
    InputBoolean()
], TDSSelect.prototype, "dropdownMatchSelectWidth", void 0);
__decorate([
    InputBoolean()
], TDSSelect.prototype, "serverSearch", void 0);
__decorate([
    InputBoolean()
], TDSSelect.prototype, "autoClearSearchValue", void 0);
__decorate([
    InputBoolean()
], TDSSelect.prototype, "autoClose", void 0);
__decorate([
    InputBoolean()
], TDSSelect.prototype, "loading", void 0);
__decorate([
    InputBoolean()
], TDSSelect.prototype, "hideSelected", void 0);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSSelect, [{
        type: Component,
        args: [{ selector: 'tds-select', providers: [
                    {
                        provide: TDSFormFieldControl,
                        useExisting: forwardRef(() => TDSSelect),
                    }
                ], host: {
                    'class': 'w-full block relative box-border m-0 p-0',
                    '[class.cursor-pointer]': "!disabled",
                    // '[class.cursor-not-allowed]':"disabled"
                }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: "<!-- <ng-content ></ng-content> -->\r\n<div class=\"tds-select-selector w-full  max-w-full group relative \" (click)=\"onContainerClick($event)\" #selectOverlay [ngClass]=\"{ \r\n    'border border-neutral-2-200 dark:border-d-neutral-2-200 rounded  ':!parentIsFormField && border\r\n}\">\r\n    <div class=\"w-full flex items-stretch  max-w-full group-hover:bg-neutral-3-50  dark:group-hover:bg-d-neutral-3-50 group-hover:rounded\">\r\n        <div class=\"tds-value-container w-full relative\" [style.paddingRight.px]=\"paddingRightIcon\">\r\n\r\n            <ng-container [ngSwitch]=\"mode\">\r\n                <ng-container *ngSwitchCase=\"'default'\">\r\n                    <div class=\"w-full max-w-full relative\" [ngClass]=\"{\r\n                        'pl-2.5  py-1':size ==='sm',\r\n                        'pl-3  py-1.5':size ==='md',                                          \r\n                        'pl-4  py-2':size ==='lg'\r\n                    }\">\r\n                        <div class=\"max-w-full relative \"  style=\"min-height: 20px;\">\r\n                            <tds-select-placeholder *ngIf=\"isShowPlaceholder\" [placeholder]=\"placeholder\"\r\n                                class=\"tds-placeholder mr-1  block\">\r\n                            </tds-select-placeholder>\r\n                            <div class=\"tds-value select-none\" *ngIf=\"isShowSingleLabel\">\r\n                                <div class=\"w-full\">\r\n                                    <div class=\"text-body-2 font-regular text-neutral-1-900 dark:text-d-neutral-1-900 truncate box-border\">\r\n                                        <ng-template [ngTemplateOutlet]=\"labelTemplate || defaultLabelTemplate\"\r\n                                            [ngTemplateOutletContext]=\"{label:listOfTopItem[0].textField ,value: listOfTopItem[0].valueField, $implicit:listOfTopItem[0],item:listOfTopItem[0]}\">\r\n                                        </ng-template>\r\n                                    </div>\r\n\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"absolute inset-0\" *ngIf=\"isSearchDefault\">                         \r\n                                <tds-select-search class=\"w-full\" #tdsselectsearch [id]=\"id\" [disabled]=\"disabled\"\r\n                                    [value]=\"inputValue!\" [showInput]=\"showSearch\" [autofocus]=\"autofocus\"\r\n                                    [focusTrigger]=\"open\" (isComposingChange)=\"isComposingChange($event)\"\r\n                                    (valueChange)=\"onInputValueChange($event)\" (keydown)=\"onKeyDown($event)\">\r\n                                </tds-select-search>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </ng-container>\r\n                <ng-container *ngSwitchDefault>\r\n                    <div class=\"w-full max-w-full relative flex-wrap flex-shrink flex-grow break-words flex \">\r\n\r\n                        <tds-select-placeholder [placeholder]=\"placeholder\" class=\"tds-placeholder mr-1  block\"\r\n                            *ngIf=\"showPlaceholder\" [ngClass]=\"{\r\n                    'pl-2.5  py-1':size ==='sm',                  \r\n                    'pl-3  py-1.5':size ==='md',                                          \r\n                    'pl-4  py-2':size ==='lg'\r\n                }\">\r\n                        </tds-select-placeholder>\r\n                        <div class=\"tds-value  flex max-w-full\" *ngFor=\"let item of listOfTopItem; trackBy: trackValue\"\r\n                            [ngClass]=\"{'py-0.5':size ==='sm' ,\r\n                        'py-1':size ==='md' ,\r\n                        'py-1.5':size ==='lg' }\">\r\n                            <div\r\n                                class=\"w-full flex max-w-full items-center bg-neutral-3-200 dark:bg-d-neutral-3-200 group hover:bg-neutral-3-300 dark:hover:bg-d-neutral-3-300 rounded mx-1 py-0.5 pl-1.5\">\r\n                                <div class=\"text-body-2 font-regular text-neutral-1-900 dark:text-d-neutral-1-900 whitespace-nowrap box-border truncate\">\r\n                                    <ng-template [ngTemplateOutlet]=\"labelTemplate || defaultTagTemplate\"\r\n                                        [ngTemplateOutletContext]=\"{ label:item.textField ,value:item.valueField, $implicit:item,item:item }\">\r\n                                    </ng-template>\r\n                                </div>\r\n                                <div class=\"flex items-center group-hover:text-neutral-1-700 dark:group-hover:text-d-neutral-1-700 text-neutral-1-500 dark:text-d-neutral-1-500 ml-0.5 pl-1 pr-1\"\r\n                                    (click)=\"onItemDelete($event,item)\">\r\n                                    <i class=\"tdsi-close-fill  text-base leading-5\" *ngIf=\"!disabled\"></i>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"tds-input flex-1 pl-2\" [ngClass]=\"{\r\n                    'my-1':size ==='sm',\r\n                    'my-1.5':size ==='md',                                          \r\n                    'my-2 ':size ==='lg'\r\n                }\">\r\n                            <tds-select-search #tdsselectsearch [id]=\"id\" [disabled]=\"disabled\" [value]=\"inputValue!\"\r\n                                [showInput]=\"showSearch\" [autofocus]=\"autofocus\" [focusTrigger]=\"open\"\r\n                                (isComposingChange)=\"isComposingChange($event)\"\r\n                                (valueChange)=\"onInputValueChange($event)\" (keydown)=\"onKeyDown($event)\">\r\n                            </tds-select-search>\r\n                        </div>\r\n                    </div>\r\n\r\n                </ng-container>\r\n            </ng-container>\r\n        </div>\r\n        <div class=\"absolute bottom-0 right-0 top-0\" #rigthContainer>\r\n            <div class=\"w-full h-full flex items-center justify-center\">\r\n                <div class=\"tds-clear-wrapper text-neutral-1-500 dark:text-d-neutral-1-500 flex \" *ngIf=\"showClear()\" [ngClass]=\"{\r\n                'p-1':size ==='sm',\r\n                'p-1.5':size ==='md',                                          \r\n                'p-2':size ==='lg',\r\n                'flex-grow-0 flex-shrink-0':mode =='default'\r\n            }\">\r\n                    <div class=\"flex items-center\" (click)=\"onClearSelection($event)\">\r\n                        <i class=\"tdsi-close-fill text-base leading-4\"></i>\r\n                    </div>\r\n                </div>\r\n                <div *ngIf=\"classIcon\" class=\"tds-arrow-wrapper h-full text-neutral-1-900 dark:text-d-neutral-1-900 flex items-center  group-hover:border-transparent\"\r\n                    style=\"border-top-right-radius: 0.2rem;border-bottom-right-radius: 0.2rem; \" [ngClass]=\"{\r\n                    'px-1':size ==='sm',\r\n                    'px-1.5':size ==='md',                                          \r\n                    'px-2':size ==='lg',\r\n                    'flex-grow-0 flex-shrink-0':mode =='default'\r\n                }\">\r\n                    <div class=\"flex items-center\">\r\n                        <i [ngClass]=\"classIcon\" class=\"text-base leading-4\"></i>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n</div>\r\n<ng-template cdkConnectedOverlay cdkConnectedOverlayLockPosition [cdkConnectedOverlayHasBackdrop]=\"backdrop\"\r\n    [cdkConnectedOverlayMinWidth]=\"$any(dropdownMatchSelectWidth ? null : triggerWidth)\"\r\n    [cdkConnectedOverlayWidth]=\"$any(dropdownMatchSelectWidth ? triggerWidth : null)\"\r\n    [cdkConnectedOverlayOrigin]=\"overlayOrigin\"\r\n    [cdkConnectedOverlayTransformOriginOn]=\"'.form-field-connection-container'\"\r\n    [cdkConnectedOverlayPanelClass]=\"dropdownClassName!\" [cdkConnectedOverlayOpen]=\"open\"\r\n    (overlayKeydown)=\"onOverlayKeyDown($event)\" (overlayOutsideClick)=\"onClickOutside($event)\"\r\n    (detach)=\"setOpenState(false)\" (positionChange)=\"onPositionChange($event)\">\r\n    <div class=\"py-1 tds-select-panel relative w-full\">\r\n        <div class=\"relative py-1 w-full overflow-auto bg-white dark:bg-d-neutral-3-300 shadow-1-lg  rounded \">\r\n            <tds-spin [spinning]=\"loading\" [tip]=\"'...'\">\r\n                <div class=\"p-1\" *ngIf=\"listOfContainerItem.length === 0 && !loading\" class=\"tds-select-item-empty\">\r\n                    <tds-embed-empty componentName=\"select\" [specificContent]=\"notFoundTemplate!\"></tds-embed-empty>\r\n                </div>\r\n                <div class=\"w-full\">\r\n                    <cdk-virtual-scroll-viewport class=\"overflow-x-hidden w-full tds-panel-scroll\"\r\n                        [class.full-width]=\"!dropdownMatchSelectWidth\" [itemSize]=\"optionHeightPx\"\r\n                        [maxBufferPx]=\"optionHeightPx * optionOverflowSize\"\r\n                        [minBufferPx]=\"optionHeightPx * optionOverflowSize\"\r\n                        (scrolledIndexChange)=\"onScrolledIndexChange($event)\"\r\n                        [style.height.px]=\"listOfContainerItem.length * optionHeightPx\"\r\n                        [style.max-height.px]=\"optionHeightPx * optionOverflowSize\">\r\n                        <ng-template cdkVirtualFor [cdkVirtualForOf]=\"listOfContainerItem\"\r\n                            [cdkVirtualForTrackBy]=\"trackValue\" [cdkVirtualForTemplateCacheSize]=\"0\" let-item>\r\n                            <ng-container [ngSwitch]=\"item.type\">\r\n    \r\n                                <div class=\"w-full\">\r\n                                    <ng-template [ngSwitchCase]=\"'group'\">\r\n                                        <tds-option-group [label]=\"item.groupLabel!\"></tds-option-group>\r\n                                    </ng-template>\r\n                                    <ng-template [ngSwitchCase]=\"'item'\">                                       \r\n                                        <tds-option-item                                        \r\n                                            [grouped]=\"!!item.groupLabel\" [disabled]=\"item.disabled\"\r\n                                            [showState]=\"mode === 'tags' || mode === 'multiple'\" [label]=\"item.textField\"\r\n                                            [compareWith]=\"compareWith\" [activatedValue]=\"activatedValue\"\r\n                                            [listOfSelectedValue]=\"listOfValue\" [value]=\"item.valueField\"\r\n                                            [template]=\"optionTemplate ?  optionTemplate :  defaultOptionTemplate\"\r\n                                            [item]=\"item.data\" (itemClick)=\"onItemClick($event)\"\r\n                                            [hideSelected]=\"hideSelected\"\r\n                                            (itemHover)=\"onItemHover($event)\"\r\n                                            [size]=\"size\"\r\n                                            [ngClass]=\"tdsCssOption!\"\r\n                                           >\r\n\r\n                                        </tds-option-item>\r\n                                    </ng-template>\r\n                                </div>\r\n    \r\n                            </ng-container>\r\n                        </ng-template>\r\n    \r\n                    </cdk-virtual-scroll-viewport>\r\n                </div>\r\n            </tds-spin>\r\n           \r\n        </div>\r\n    </div>\r\n    \r\n  \r\n</ng-template>\r\n<ng-template #defaultOptionTemplate let-label='label' let-item=\"item\" let-value='value' let-selected=\"selected\">\r\n    <div class=\"w-full flex\">\r\n        <div class=\"w-full truncate pr-2\">\r\n            {{label}}\r\n        </div>\r\n        <div class=\"flex items-center\" *ngIf=\"selected\">\r\n            <span class=\"tdsi-success-fill text-primary-1 text-sm\"></span>\r\n        </div>\r\n    </div>\r\n</ng-template>\r\n<ng-template #defaultLabelTemplate let-label='label' let-item=\"item\" let-value='value'>\r\n    <div class=\"w-full truncate\">\r\n        {{label}}\r\n    </div>\r\n</ng-template>\r\n<ng-template #defaultTagTemplate let-label='label' let-item=\"item\" let-value='value'>\r\n    <div class=\"w-full truncate\">\r\n        {{label}}\r\n    </div>\r\n</ng-template>" }]
    }], function () { return [{ type: i1.FocusMonitor }, { type: i0.ElementRef }, { type: i0.ElementRef }, { type: i13.TDSFormField, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [TDS_FORM_FIELD]
            }, {
                type: Host
            }] }, { type: i2.NgControl, decorators: [{
                type: Optional
            }, {
                type: Self
            }] }, { type: i0.ChangeDetectorRef }, { type: i3.Platform }, { type: i2.NgForm, decorators: [{
                type: Optional
            }] }, { type: i2.FormGroupDirective, decorators: [{
                type: Optional
            }] }, { type: i0.NgZone }]; }, { open: [{
            type: Input
        }], autofocus: [{
            type: Input
        }], allowClear: [{
            type: Input
        }], allowSearch: [{
            type: Input
        }], userAriaDescribedBy: [{
            type: Input,
            args: ['aria-describedby']
        }], id: [{
            type: Input
        }], backdrop: [{
            type: Input
        }], dropdownMatchSelectWidth: [{
            type: Input
        }], dropdownClassName: [{
            type: Input
        }], mode: [{
            type: Input
        }], compareWith: [{
            type: Input
        }], serverSearch: [{
            type: Input
        }], filterOption: [{
            type: Input
        }], optionOverflowSize: [{
            type: Input
        }], maxMultipleCount: [{
            type: Input
        }], autoClearSearchValue: [{
            type: Input
        }], maxTagCount: [{
            type: Input
        }], tokenSeparators: [{
            type: Input
        }], maxTagPlaceholder: [{
            type: Input
        }], autoClose: [{
            type: Input
        }], size: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], required: [{
            type: Input
        }], disabled: [{
            type: Input
        }], textField: [{
            type: Input
        }], valueField: [{
            type: Input
        }], disabledField: [{
            type: Input
        }], groupField: [{
            type: Input
        }], data: [{
            type: Input
        }], loading: [{
            type: Input
        }], hideSelected: [{
            type: Input
        }], tdsCssOption: [{
            type: Input
        }], border: [{
            type: Input
        }], valuePrimitive: [{
            type: Input
        }], classIcon: [{
            type: Input
        }], onSearch: [{
            type: Output
        }], scrollToBottom: [{
            type: Output
        }], openChange: [{
            type: Output
        }], blurChange: [{
            type: Output
        }], focusChange: [{
            type: Output
        }], selectChangeEvent: [{
            type: Output,
            args: ['selectChange']
        }], cdkVirtualScrollViewport: [{
            type: ViewChild,
            args: [CdkVirtualScrollViewport, { static: false }]
        }], cdkConnectedOverlay: [{
            type: ViewChild,
            args: [CdkConnectedOverlay, { static: true }]
        }], _connectionSelectOverlay: [{
            type: ViewChild,
            args: ['selectOverlay', { static: true }]
        }], tdsSelectSearch: [{
            type: ViewChild,
            args: [TDSSelectSearchComponent, { static: false }]
        }], listOfOptionComponent: [{
            type: ContentChildren,
            args: [TDSOption, { descendants: true }]
        }], listOfOptionGroupComponent: [{
            type: ContentChildren,
            args: [TDSOptgroup, { descendants: true }]
        }], optionTemplate: [{
            type: ContentChild,
            args: [TDSOptionTemplateDirective, { read: TemplateRef }]
        }], optgroupTemplate: [{
            type: ContentChild,
            args: [TDSOptionTemplateDirective, { read: TemplateRef }]
        }], labelTemplate: [{
            type: ContentChild,
            args: [TDSLabelTemplateDirective, { read: TemplateRef }]
        }], multiLabelTemplate: [{
            type: ContentChild,
            args: [TDSMultiLabelTemplateDirective, { read: TemplateRef }]
        }], headerTemplate: [{
            type: ContentChild,
            args: [TDSHeaderTemplateDirective, { read: TemplateRef }]
        }], footerTemplate: [{
            type: ContentChild,
            args: [TDSFooterTemplateDirective, { read: TemplateRef }]
        }], notFoundTemplate: [{
            type: ContentChild,
            args: [TDSNotFoundTemplateDirective, { read: TemplateRef }]
        }], typeToSearchTemplate: [{
            type: ContentChild,
            args: [TDSTypeToSearchTemplateDirective, { read: TemplateRef }]
        }], loadingTextTemplate: [{
            type: ContentChild,
            args: [TDSLoadingTextTemplateDirective, { read: TemplateRef }]
        }], tagTemplate: [{
            type: ContentChild,
            args: [TDSTagTemplateDirective, { read: TemplateRef }]
        }], loadingSpinnerTemplate: [{
            type: ContentChild,
            args: [TDSLoadingSpinnerTemplateDirective, { read: TemplateRef }]
        }], _rigthContainer: [{
            type: ViewChild,
            args: ['rigthContainer', { static: true }]
        }] }); })();
//# sourceMappingURL=data:application/json;base64,