import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { fromEvent } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { TDSDestroyService } from 'tds-ui/core/services';
import { InputBoolean } from 'tds-ui/shared/utility';
import * as i0 from "@angular/core";
import * as i1 from "tds-ui/core/services";
import * as i2 from "@angular/common";
function TDSOptionItem_ng_template_1_Template(rf, ctx) { }
const _c0 = function (a0, a1, a2, a3, a4) { return { label: a0, value: a1, $implicit: a2, item: a3, selected: a4 }; };
export class TDSOptionItem {
    constructor(elementRef, ngZone, destroy$) {
        this.elementRef = elementRef;
        this.ngZone = ngZone;
        this.destroy$ = destroy$;
        this.selected = false;
        this.activated = false;
        this.grouped = false;
        this.disabled = false;
        this.showState = false;
        this.label = null;
        this.value = null;
        this.activatedValue = null;
        this.listOfSelectedValue = [];
        this.template = null;
        this.hideSelected = false;
        this.size = 'md';
        this.itemClick = new EventEmitter();
        this.itemHover = new EventEmitter();
        this.elementRef.nativeElement.classList.add('tds-select-item', 'tds-select-item-option');
    }
    ngOnChanges(changes) {
        const { value, activatedValue, listOfSelectedValue } = changes;
        if (value || listOfSelectedValue) {
            this.selected = this.listOfSelectedValue.some(v => this.compareWith(v, this.value));
        }
        if (value || activatedValue) {
            this.activated = this.compareWith(this.activatedValue, this.value);
        }
    }
    ngOnInit() {
        this.ngZone.runOutsideAngular(() => {
            fromEvent(this.elementRef.nativeElement, 'click')
                .pipe(takeUntil(this.destroy$))
                .subscribe(() => {
                if (!this.disabled) {
                    this.ngZone.run(() => this.itemClick.emit(this.value));
                }
            });
            fromEvent(this.elementRef.nativeElement, 'mouseenter')
                .pipe(takeUntil(this.destroy$))
                .subscribe(() => {
                if (!this.disabled) {
                    this.ngZone.run(() => this.itemHover.emit(this.value));
                }
            });
        });
    }
}
TDSOptionItem.ɵfac = function TDSOptionItem_Factory(t) { return new (t || TDSOptionItem)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1.TDSDestroyService)); };
TDSOptionItem.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSOptionItem, selectors: [["tds-option-item"]], hostAttrs: [1, "w-full", "px-3", "text-body-2", "font-regular", "justify-between", "items-center", "mb-px"], hostVars: 37, hostBindings: function TDSOptionItem_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵattribute("title", ctx.label);
        i0.ɵɵclassProp("tds-select-item-option-grouped", ctx.grouped)("bg-neutral-3-50", (ctx.selected || ctx.activated) && !ctx.disabled)("dark:bg-d-neutral-3-400", (ctx.selected || ctx.activated) && !ctx.disabled)("hover:bg-neutral-3-400", !ctx.disabled)("text-neutral-1-900", !ctx.disabled)("dark:text-d-neutral-1-900", !ctx.disabled)("dark:hover:bg-d-neutral-3-400", !ctx.disabled)("text-neutral-1-300", ctx.disabled)("dark:text-d-neutral-1-300", ctx.disabled)("cursor-pointer", !ctx.disabled)("cursor-not-allowed", ctx.disabled)("tds-select-item-option-active", ctx.activated && !ctx.disabled)("py-1", ctx.size === "sm")("py-2", ctx.size === "md")("py-3", ctx.size === "lg")("flex", !ctx.hideSelected || !ctx.selected)("hidden", ctx.hideSelected && ctx.selected)("pointer-events-none", ctx.hideSelected && ctx.selected);
    } }, inputs: { item: "item", grouped: "grouped", disabled: "disabled", showState: "showState", label: "label", value: "value", activatedValue: "activatedValue", listOfSelectedValue: "listOfSelectedValue", template: "template", compareWith: "compareWith", hideSelected: "hideSelected", size: "size" }, outputs: { itemClick: "itemClick", itemHover: "itemHover" }, features: [i0.ɵɵProvidersFeature([
            TDSDestroyService
        ]), i0.ɵɵNgOnChangesFeature], decls: 2, vars: 8, consts: [[3, "ngTemplateOutlet", "ngTemplateOutletContext"]], template: function TDSOptionItem_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵtemplate(1, TDSOptionItem_ng_template_1_Template, 0, 0, "ng-template", 0);
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngTemplateOutlet", ctx.template)("ngTemplateOutletContext", i0.ɵɵpureFunction5(2, _c0, ctx.label, ctx.value, ctx.item, ctx.item, ctx.selected));
    } }, directives: [i2.NgTemplateOutlet], encapsulation: 2, changeDetection: 0 });
__decorate([
    InputBoolean()
], TDSOptionItem.prototype, "grouped", void 0);
__decorate([
    InputBoolean()
], TDSOptionItem.prototype, "disabled", void 0);
__decorate([
    InputBoolean()
], TDSOptionItem.prototype, "showState", void 0);
__decorate([
    InputBoolean()
], TDSOptionItem.prototype, "hideSelected", void 0);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSOptionItem, [{
        type: Component,
        args: [{
                selector: 'tds-option-item',
                template: `  
    <ng-container>
      <ng-template [ngTemplateOutlet]="template" [ngTemplateOutletContext]="{label:label ,value: value, $implicit:item,item:item,selected:selected}">
      </ng-template>
    </ng-container>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                host: {
                    '[attr.title]': 'label',
                    '[class.tds-select-item-option-grouped]': 'grouped',
                    '[class.bg-neutral-3-50]': '(selected || activated) && !disabled',
                    '[class.dark:bg-d-neutral-3-400]': '(selected || activated) && !disabled',
                    '[class.hover:bg-neutral-3-400]': '!disabled',
                    '[class.text-neutral-1-900]': '!disabled',
                    '[class.dark:text-d-neutral-1-900]': '!disabled',
                    '[class.dark:hover:bg-d-neutral-3-400]': '!disabled',
                    '[class.text-neutral-1-300]': 'disabled',
                    '[class.dark:text-d-neutral-1-300]': 'disabled',
                    '[class.cursor-pointer]': '!disabled',
                    '[class.cursor-not-allowed]': 'disabled',
                    '[class.tds-select-item-option-active]': 'activated && !disabled',
                    '[class.py-1.5]': "size === 'sm'",
                    '[class.py-2]': 'size === "md"',
                    '[class.py-3]': 'size === "lg"',
                    '[class.flex]': '!hideSelected || !selected',
                    '[class.hidden]': 'hideSelected && selected',
                    '[class.pointer-events-none]': 'hideSelected && selected',
                    'class': "w-full px-3 text-body-2 font-regular  justify-between items-center mb-px"
                },
                providers: [
                    TDSDestroyService
                ]
            }]
    }], function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: i1.TDSDestroyService }]; }, { item: [{
            type: Input
        }], grouped: [{
            type: Input
        }], disabled: [{
            type: Input
        }], showState: [{
            type: Input
        }], label: [{
            type: Input
        }], value: [{
            type: Input
        }], activatedValue: [{
            type: Input
        }], listOfSelectedValue: [{
            type: Input
        }], template: [{
            type: Input
        }], compareWith: [{
            type: Input
        }], hideSelected: [{
            type: Input
        }], size: [{
            type: Input
        }], itemClick: [{
            type: Output
        }], itemHover: [{
            type: Output
        }] }); })();
//# sourceMappingURL=data:application/json;base64,