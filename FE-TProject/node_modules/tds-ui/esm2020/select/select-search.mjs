import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewChild, ViewEncapsulation } from '@angular/core';
import { COMPOSITION_BUFFER_MODE } from '@angular/forms';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/a11y";
import * as i2 from "@angular/forms";
const _c0 = ["inputElement"];
export class TDSSelectSearchComponent {
    constructor(elementRef, renderer, focusMonitor) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.focusMonitor = focusMonitor;
        this.id = null;
        this.disabled = false;
        this.showInput = true;
        this.focusTrigger = false;
        this.value = '';
        this.autofocus = false;
        this.valueChange = new EventEmitter();
        this.isComposingChange = new EventEmitter();
        // private searchChange$ = new BehaviorSubject('');
        this._destroy = new Subject();
        // TODO: move to host after View Engine deprecation
        this.elementRef.nativeElement.classList.add('tds-select-selection-search');
    }
    setCompositionState(isComposing) {
        this.isComposingChange.next(isComposing);
    }
    onValueChange(value) {
        this.value = value;
        this.valueChange.emit(value);
    }
    clearInputValue() {
        const inputDOM = this.inputElement.nativeElement;
        inputDOM.value = '';
        this.onValueChange('');
    }
    focus() {
        this.focusMonitor.focusVia(this.inputElement, 'keyboard');
    }
    blur() {
        this.inputElement.nativeElement.blur();
    }
    ngOnChanges(changes) {
        const inputDOM = this.inputElement.nativeElement;
        const { focusTrigger, showInput } = changes;
        if (showInput) {
            if (this.showInput) {
                this.renderer.removeAttribute(inputDOM, 'readonly');
            }
            else {
                this.renderer.setAttribute(inputDOM, 'readonly', 'readonly');
            }
        }
        // IE11 cannot input value if focused before removing readonly
        if (focusTrigger && focusTrigger.currentValue === true && !focusTrigger.previousValue) {
            inputDOM.focus();
        }
    }
    ngOnInit() {
        // this.searchChange$
        //     .pipe(
        //         debounceTime(500),
        //         distinctUntilChanged(),
        //         takeUntil(this._destroy),
        //     )
        //     .subscribe(f => {
        //         this.valueChange.next(f);
        //     })
    }
    ngAfterViewInit() {
        if (this.autofocus) {
            this.focus();
        }
    }
    ngOnDestroy() {
        this._destroy.next();
        this._destroy.complete();
    }
}
TDSSelectSearchComponent.ɵfac = function TDSSelectSearchComponent_Factory(t) { return new (t || TDSSelectSearchComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i1.FocusMonitor)); };
TDSSelectSearchComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSSelectSearchComponent, selectors: [["tds-select-search"]], viewQuery: function TDSSelectSearchComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 7);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputElement = _t.first);
    } }, hostAttrs: [1, "box-border", "flex", "items-center", "h-full", "w-full"], inputs: { id: "id", disabled: "disabled", showInput: "showInput", focusTrigger: "focusTrigger", value: "value", autofocus: "autofocus" }, outputs: { valueChange: "valueChange", isComposingChange: "isComposingChange" }, features: [i0.ɵɵProvidersFeature([{ provide: COMPOSITION_BUFFER_MODE, useValue: false }]), i0.ɵɵNgOnChangesFeature], decls: 2, vars: 6, consts: [["autocomplete", "off", 1, "text-body-2", "font-regular", "dark:text-d-neutral-1-900", "text-neutral-1-40", "focus:outline-none", "focus:border-transparent", "shadow-none", "border-0", "bg-transparent", "text-current", "pl-0", "pb-0", "pt-0", "m-0", "w-full", "outline-none", "box-border", "placeholder-neutral-1-400", 2, "box-shadow", "unset", 3, "ngModel", "disabled", "ngModelChange", "compositionstart", "compositionend"], ["inputElement", ""]], template: function TDSSelectSearchComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "input", 0, 1);
        i0.ɵɵlistener("ngModelChange", function TDSSelectSearchComponent_Template_input_ngModelChange_0_listener($event) { return ctx.onValueChange($event); })("compositionstart", function TDSSelectSearchComponent_Template_input_compositionstart_0_listener() { return ctx.setCompositionState(true); })("compositionend", function TDSSelectSearchComponent_Template_input_compositionend_0_listener() { return ctx.setCompositionState(false); });
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵstyleProp("opacity", ctx.showInput ? null : 0);
        i0.ɵɵproperty("ngModel", ctx.value)("disabled", ctx.disabled);
        i0.ɵɵattribute("id", ctx.id)("autofocus", ctx.autofocus ? "autofocus" : null);
    } }, directives: [i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgModel], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSSelectSearchComponent, [{
        type: Component,
        args: [{
                selector: 'tds-select-search',
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: `
     <input
       #inputElement
       [attr.id]="id"
       autocomplete="off"
       class="text-body-2 font-regular dark:text-d-neutral-1-900 text-neutral-1-40 focus:outline-none focus:border-transparent shadow-none border-0 bg-transparent text-current pl-0 pb-0 pt-0 m-0 w-full outline-none  box-border placeholder-neutral-1-400"
       [ngModel]="value"
       [attr.autofocus]="autofocus ? 'autofocus' : null"
       [disabled]="disabled"
       [style.opacity]="showInput ? null : 0"
       (ngModelChange)="onValueChange($event)"
       (compositionstart)="setCompositionState(true)"
       (compositionend)="setCompositionState(false)"
       style="box-shadow: unset;"
     />
   `,
                host: {
                    class: "box-border flex items-center h-full w-full"
                },
                providers: [{ provide: COMPOSITION_BUFFER_MODE, useValue: false }]
            }]
    }], function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i1.FocusMonitor }]; }, { id: [{
            type: Input
        }], disabled: [{
            type: Input
        }], showInput: [{
            type: Input
        }], focusTrigger: [{
            type: Input
        }], value: [{
            type: Input
        }], autofocus: [{
            type: Input
        }], valueChange: [{
            type: Output
        }], isComposingChange: [{
            type: Output
        }], inputElement: [{
            type: ViewChild,
            args: ['inputElement', { static: true }]
        }] }); })();
//# sourceMappingURL=data:application/json;base64,