import { Component, ContentChildren, Directive } from '@angular/core';
import { mixinDisabled } from 'tds-ui/shared/common';
import * as i0 from "@angular/core";
const _c0 = ["*"];
class TDSScrollIntoViewBase {
    constructor(_elementRef) {
        this._elementRef = _elementRef;
    }
}
const _TDSScrollIntoViewBase = mixinDisabled(TDSScrollIntoViewBase);
export class TDSScrollIntoView extends _TDSScrollIntoViewBase {
    constructor(elementRef) {
        super(elementRef);
    }
    get scrollID() {
        return this._scrollID;
    }
    set scrollID(val) {
        this._scrollID = val;
    }
    getScrollID() {
        return this._scrollID;
    }
    getElement() {
        return this._elementRef;
    }
}
TDSScrollIntoView.ɵfac = function TDSScrollIntoView_Factory(t) { return new (t || TDSScrollIntoView)(i0.ɵɵdirectiveInject(i0.ElementRef)); };
TDSScrollIntoView.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: TDSScrollIntoView, selectors: [["", "tds-scroll-into-view", ""]], hostVars: 1, hostBindings: function TDSScrollIntoView_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵhostProperty("disabled", ctx.disabled || null);
    } }, inputs: { disabled: "disabled", scrollID: "scrollID" }, features: [i0.ɵɵInheritDefinitionFeature] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSScrollIntoView, [{
        type: Directive,
        args: [{
                selector: `[tds-scroll-into-view]`,
                host: {
                    '[disabled]': 'disabled ||  null',
                },
                inputs: ['disabled', 'scrollID']
            }]
    }], function () { return [{ type: i0.ElementRef }]; }, null); })();
export class TDSScrollIntoViewComponent extends _TDSScrollIntoViewBase {
    constructor(elementRef) {
        super(elementRef);
    }
    ngOnInit() {
    }
    scrollIntoView(dataID) {
        console.log(dataID);
        const children = this.lstChildren.find(e => {
            return e.getScrollID() === dataID;
        });
        if (children) {
            children.getElement().nativeElement.scrollIntoView({ behavior: "smooth", block: "end" });
        }
    }
}
TDSScrollIntoViewComponent.ɵfac = function TDSScrollIntoViewComponent_Factory(t) { return new (t || TDSScrollIntoViewComponent)(i0.ɵɵdirectiveInject(i0.ElementRef)); };
TDSScrollIntoViewComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSScrollIntoViewComponent, selectors: [["tds-scroll-into-view"]], contentQueries: function TDSScrollIntoViewComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        i0.ɵɵcontentQuery(dirIndex, TDSScrollIntoView, 4);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.lstChildren = _t);
    } }, hostAttrs: [1, "block", "relative", "w-full", "overflow-auto"], features: [i0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function TDSScrollIntoViewComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵprojection(0);
    } }, encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSScrollIntoViewComponent, [{
        type: Component,
        args: [{
                selector: 'tds-scroll-into-view',
                template: `
  <ng-content></ng-content>
  `,
                host: {
                    'class': "block relative w-full overflow-auto"
                }
            }]
    }], function () { return [{ type: i0.ElementRef }]; }, { lstChildren: [{
            type: ContentChildren,
            args: [TDSScrollIntoView]
        }] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsLWludG8tdmlldy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy90ZHMtdWkvc2Nyb2xsLWludG8tdmlldy9zY3JvbGwtaW50by12aWV3LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUcsU0FBUyxFQUFFLGVBQWUsRUFBRSxTQUFTLEVBQWdDLE1BQU0sZUFBZSxDQUFDO0FBQ3JHLE9BQU8sRUFBa0IsYUFBYSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7OztBQUVyRSxNQUFNLHFCQUFxQjtJQUN6QixZQUFtQixXQUF1QjtRQUF2QixnQkFBVyxHQUFYLFdBQVcsQ0FBWTtJQUFJLENBQUM7Q0FDaEQ7QUFDRCxNQUFNLHNCQUFzQixHQUNLLGFBQWEsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0FBU3RFLE1BQU0sT0FBTyxpQkFBa0IsU0FBUSxzQkFBc0I7SUFTM0QsWUFBWSxVQUFzQjtRQUNoQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUE7SUFDbkIsQ0FBQztJQVJELElBQUksUUFBUTtRQUNWLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUN4QixDQUFDO0lBQ0QsSUFBSSxRQUFRLENBQUMsR0FBUTtRQUNuQixJQUFJLENBQUMsU0FBUyxHQUFHLEdBQUcsQ0FBQztJQUN2QixDQUFDO0lBS00sV0FBVztRQUNoQixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDeEIsQ0FBQztJQUNNLFVBQVU7UUFDZixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDMUIsQ0FBQzs7a0ZBbEJVLGlCQUFpQjtvRUFBakIsaUJBQWlCOzs7dUZBQWpCLGlCQUFpQjtjQVA3QixTQUFTO2VBQUM7Z0JBQ1QsUUFBUSxFQUFFLHdCQUF3QjtnQkFDbEMsSUFBSSxFQUFFO29CQUNKLFlBQVksRUFBRSxtQkFBbUI7aUJBQ2xDO2dCQUNELE1BQU0sRUFBRSxDQUFDLFVBQVUsRUFBRSxVQUFVLENBQUM7YUFDakM7O0FBK0JELE1BQU0sT0FBTywwQkFBMkIsU0FBUSxzQkFBc0I7SUFFcEUsWUFBWSxVQUFzQjtRQUNoQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUE7SUFDbkIsQ0FBQztJQUVELFFBQVE7SUFDUixDQUFDO0lBQ00sY0FBYyxDQUFDLE1BQVc7UUFDL0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNwQixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUN6QyxPQUFPLENBQUMsQ0FBQyxXQUFXLEVBQUUsS0FBSyxNQUFNLENBQUM7UUFDcEMsQ0FBQyxDQUFDLENBQUM7UUFDSCxJQUFJLFFBQVEsRUFBRTtZQUNaLFFBQVEsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxhQUFhLENBQUMsY0FBYyxDQUFDLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztTQUMxRjtJQUVILENBQUM7O29HQWpCVSwwQkFBMEI7NkVBQTFCLDBCQUEwQjtvQ0FDcEIsaUJBQWlCOzs7Ozs7UUFQbEMsa0JBQXlCOzt1RkFNZCwwQkFBMEI7Y0FUdEMsU0FBUztlQUFDO2dCQUNULFFBQVEsRUFBRSxzQkFBc0I7Z0JBQ2hDLFFBQVEsRUFBRTs7R0FFVDtnQkFDRCxJQUFJLEVBQUU7b0JBQ0osT0FBTyxFQUFFLHFDQUFxQztpQkFDL0M7YUFDRjs2REFFcUMsV0FBVztrQkFBOUMsZUFBZTttQkFBQyxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyAgQ29tcG9uZW50LCBDb250ZW50Q2hpbGRyZW4sIERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgT25Jbml0LCBRdWVyeUxpc3R9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDYW5EaXNhYmxlQ3RvciwgbWl4aW5EaXNhYmxlZCB9IGZyb20gJ3Rkcy11aS9zaGFyZWQvY29tbW9uJztcclxuXHJcbmNsYXNzIFREU1Njcm9sbEludG9WaWV3QmFzZSB7XHJcbiAgY29uc3RydWN0b3IocHVibGljIF9lbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7IH1cclxufVxyXG5jb25zdCBfVERTU2Nyb2xsSW50b1ZpZXdCYXNlOiBDYW5EaXNhYmxlQ3RvciAmXHJcbiAgdHlwZW9mIFREU1Njcm9sbEludG9WaWV3QmFzZSA9IG1peGluRGlzYWJsZWQoVERTU2Nyb2xsSW50b1ZpZXdCYXNlKTtcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiBgW3Rkcy1zY3JvbGwtaW50by12aWV3XWAsXHJcbiAgaG9zdDoge1xyXG4gICAgJ1tkaXNhYmxlZF0nOiAnZGlzYWJsZWQgfHwgIG51bGwnLFxyXG4gIH0sXHJcbiAgaW5wdXRzOiBbJ2Rpc2FibGVkJywgJ3Njcm9sbElEJ11cclxufSlcclxuZXhwb3J0IGNsYXNzIFREU1Njcm9sbEludG9WaWV3IGV4dGVuZHMgX1REU1Njcm9sbEludG9WaWV3QmFzZSB7XHJcblxyXG4gIHByaXZhdGUgX3Njcm9sbElEOiBhbnk7XHJcbiAgZ2V0IHNjcm9sbElEKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX3Njcm9sbElEO1xyXG4gIH1cclxuICBzZXQgc2Nyb2xsSUQodmFsOiBhbnkpIHtcclxuICAgIHRoaXMuX3Njcm9sbElEID0gdmFsO1xyXG4gIH1cclxuICBjb25zdHJ1Y3RvcihlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7XHJcbiAgICBzdXBlcihlbGVtZW50UmVmKVxyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldFNjcm9sbElEKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX3Njcm9sbElEO1xyXG4gIH1cclxuICBwdWJsaWMgZ2V0RWxlbWVudCgpOiBFbGVtZW50UmVmIHtcclxuICAgIHJldHVybiB0aGlzLl9lbGVtZW50UmVmO1xyXG4gIH1cclxufVxyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICd0ZHMtc2Nyb2xsLWludG8tdmlldycsXHJcbiAgdGVtcGxhdGU6IGBcclxuICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XHJcbiAgYCxcclxuICBob3N0OiB7XHJcbiAgICAnY2xhc3MnOiBcImJsb2NrIHJlbGF0aXZlIHctZnVsbCBvdmVyZmxvdy1hdXRvXCJcclxuICB9XHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBURFNTY3JvbGxJbnRvVmlld0NvbXBvbmVudCBleHRlbmRzIF9URFNTY3JvbGxJbnRvVmlld0Jhc2UgaW1wbGVtZW50cyBPbkluaXQge1xyXG4gIEBDb250ZW50Q2hpbGRyZW4oVERTU2Nyb2xsSW50b1ZpZXcpIGxzdENoaWxkcmVuITogUXVlcnlMaXN0PFREU1Njcm9sbEludG9WaWV3PjtcclxuICBjb25zdHJ1Y3RvcihlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7XHJcbiAgICBzdXBlcihlbGVtZW50UmVmKVxyXG4gIH1cclxuXHJcbiAgbmdPbkluaXQoKTogdm9pZCB7XHJcbiAgfVxyXG4gIHB1YmxpYyBzY3JvbGxJbnRvVmlldyhkYXRhSUQ6IGFueSkge1xyXG4gICAgY29uc29sZS5sb2coZGF0YUlEKTtcclxuICAgIGNvbnN0IGNoaWxkcmVuID0gdGhpcy5sc3RDaGlsZHJlbi5maW5kKGUgPT4ge1xyXG4gICAgICByZXR1cm4gZS5nZXRTY3JvbGxJRCgpID09PSBkYXRhSUQ7XHJcbiAgICB9KTtcclxuICAgIGlmIChjaGlsZHJlbikge1xyXG4gICAgICBjaGlsZHJlbi5nZXRFbGVtZW50KCkubmF0aXZlRWxlbWVudC5zY3JvbGxJbnRvVmlldyh7IGJlaGF2aW9yOiBcInNtb290aFwiLCBibG9jazogXCJlbmRcIiB9KTtcclxuICAgIH1cclxuXHJcbiAgfVxyXG5cclxufVxyXG4iXX0=