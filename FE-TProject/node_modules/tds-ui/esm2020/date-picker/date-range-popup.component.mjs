import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { merge, Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { getTimeConfig, isAllowedDate, PREFIX_CLASS } from './util';
import { addDays, endOfMonth, startOfMonth } from 'date-fns';
import { TDSHelperObject } from 'tds-ui/shared/utility';
import { CandyDate, cloneDate, wrongSortOrder } from 'tds-ui/core/time';
import * as i0 from "@angular/core";
import * as i1 from "./date-picker.service";
import * as i2 from "@angular/common";
import * as i3 from "./inner-popup.component";
import * as i4 from "./calendar-footer.component";
function DateRangePopupComponent_ng_container_0_div_4_div_1_Template(rf, ctx) { if (rf & 1) {
    const _r17 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 11);
    i0.ɵɵlistener("click", function DateRangePopupComponent_ng_container_0_div_4_div_1_Template_div_click_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r17); const name_r15 = restoredCtx.$implicit; const ctx_r16 = i0.ɵɵnextContext(3); return ctx_r16.onClickPresetRange(ctx_r16.menuLeft[name_r15]); })("mouseenter", function DateRangePopupComponent_ng_container_0_div_4_div_1_Template_div_mouseenter_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r17); const name_r15 = restoredCtx.$implicit; const ctx_r18 = i0.ɵɵnextContext(3); return ctx_r18.onHoverPresetRange(ctx_r18.menuLeft[name_r15]); })("mouseleave", function DateRangePopupComponent_ng_container_0_div_4_div_1_Template_div_mouseleave_0_listener() { i0.ɵɵrestoreView(_r17); const ctx_r19 = i0.ɵɵnextContext(3); return ctx_r19.onPresetRangeMouseLeave(); });
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const name_r15 = ctx.$implicit;
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" ", name_r15, " ");
} }
function DateRangePopupComponent_ng_container_0_div_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 9);
    i0.ɵɵtemplate(1, DateRangePopupComponent_ng_container_0_div_4_div_1_Template, 2, 1, "div", 10);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r9 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngForOf", ctx_r9.getObjectKeys(ctx_r9.menuLeft));
} }
function DateRangePopupComponent_ng_container_0_ng_container_6_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
const _c0 = function (a0) { return { partType: a0 }; };
function DateRangePopupComponent_ng_container_0_ng_container_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtemplate(1, DateRangePopupComponent_ng_container_0_ng_container_6_ng_container_1_Template, 1, 0, "ng-container", 12);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r10 = i0.ɵɵnextContext(2);
    const _r3 = i0.ɵɵreference(4);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngTemplateOutlet", _r3)("ngTemplateOutletContext", i0.ɵɵpureFunction1(2, _c0, ctx_r10.datePickerService.activeInput));
} }
function DateRangePopupComponent_ng_container_0_ng_template_7_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function DateRangePopupComponent_ng_container_0_ng_template_7_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
const _c1 = function () { return { partType: "left" }; };
const _c2 = function () { return { partType: "right" }; };
function DateRangePopupComponent_ng_container_0_ng_template_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, DateRangePopupComponent_ng_container_0_ng_template_7_ng_container_0_Template, 1, 0, "ng-container", 12);
    i0.ɵɵtemplate(1, DateRangePopupComponent_ng_container_0_ng_template_7_ng_container_1_Template, 1, 0, "ng-container", 12);
} if (rf & 2) {
    i0.ɵɵnextContext(2);
    const _r3 = i0.ɵɵreference(4);
    i0.ɵɵproperty("ngTemplateOutlet", _r3)("ngTemplateOutletContext", i0.ɵɵpureFunction0(4, _c1));
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngTemplateOutlet", _r3)("ngTemplateOutletContext", i0.ɵɵpureFunction0(5, _c2));
} }
function DateRangePopupComponent_ng_container_0_ng_container_9_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
const _c3 = function (a0) { return { "w-full": a0 }; };
function DateRangePopupComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "div");
    i0.ɵɵelement(2, "div");
    i0.ɵɵelementStart(3, "div");
    i0.ɵɵtemplate(4, DateRangePopupComponent_ng_container_0_div_4_Template, 2, 1, "div", 5);
    i0.ɵɵelementStart(5, "div", 6);
    i0.ɵɵtemplate(6, DateRangePopupComponent_ng_container_0_ng_container_6_Template, 2, 4, "ng-container", 0);
    i0.ɵɵtemplate(7, DateRangePopupComponent_ng_container_0_ng_template_7_Template, 2, 6, "ng-template", null, 7, i0.ɵɵtemplateRefExtractor);
    i0.ɵɵelementEnd()();
    i0.ɵɵtemplate(9, DateRangePopupComponent_ng_container_0_ng_container_9_Template, 1, 0, "ng-container", 8);
    i0.ɵɵelementEnd();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const _r11 = i0.ɵɵreference(8);
    const ctx_r0 = i0.ɵɵnextContext();
    const _r5 = i0.ɵɵreference(6);
    i0.ɵɵadvance(1);
    i0.ɵɵclassMapInterpolate2("", ctx_r0.prefixCls, "-range-wrapper ", ctx_r0.prefixCls, "-date-range-wrapper");
    i0.ɵɵadvance(1);
    i0.ɵɵclassMapInterpolate1("", ctx_r0.prefixCls, "-range-arrow");
    i0.ɵɵstyleProp("left", ctx_r0.datePickerService.arrowLeft, "px");
    i0.ɵɵadvance(1);
    i0.ɵɵclassMapInterpolate1("", ctx_r0.prefixCls, "-panel-container w-full flex  items-stretch justify-center");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", !ctx_r0.hasTimePicker);
    i0.ɵɵadvance(1);
    i0.ɵɵclassMapInterpolate1("", ctx_r0.prefixCls, "-panels flex ");
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(20, _c3, ctx_r0.hasTimePicker));
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r0.hasTimePicker)("ngIfElse", _r11);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngTemplateOutlet", _r5);
} }
function DateRangePopupComponent_ng_template_1_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function DateRangePopupComponent_ng_template_1_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function DateRangePopupComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div")(1, "div", 13);
    i0.ɵɵtemplate(2, DateRangePopupComponent_ng_template_1_ng_container_2_Template, 1, 0, "ng-container", 8);
    i0.ɵɵtemplate(3, DateRangePopupComponent_ng_template_1_ng_container_3_Template, 1, 0, "ng-container", 8);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    const _r3 = i0.ɵɵreference(4);
    const _r5 = i0.ɵɵreference(6);
    i0.ɵɵclassMapInterpolate4("", ctx_r2.prefixCls, "-panel-container ", ctx_r2.showWeek ? ctx_r2.prefixCls + "-week-number" : "", " ", ctx_r2.hasTimePicker ? ctx_r2.prefixCls + "-time" : "", " ", ctx_r2.isRange ? ctx_r2.prefixCls + "-range" : "", "");
    i0.ɵɵadvance(1);
    i0.ɵɵclassMapInterpolate1("", ctx_r2.prefixCls, "-panel");
    i0.ɵɵclassProp("tds-picker-panel-rtl", ctx_r2.dir === "rtl");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngTemplateOutlet", _r3);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngTemplateOutlet", _r5);
} }
function DateRangePopupComponent_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    const _r27 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div")(1, "inner-popup", 14);
    i0.ɵɵlistener("panelModeChange", function DateRangePopupComponent_ng_template_3_Template_inner_popup_panelModeChange_1_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r27); const partType_r25 = restoredCtx.partType; const ctx_r26 = i0.ɵɵnextContext(); return ctx_r26.onPanelModeChange($event, partType_r25); })("cellHover", function DateRangePopupComponent_ng_template_3_Template_inner_popup_cellHover_1_listener($event) { i0.ɵɵrestoreView(_r27); const ctx_r28 = i0.ɵɵnextContext(); return ctx_r28.onCellHover($event); })("selectDate", function DateRangePopupComponent_ng_template_3_Template_inner_popup_selectDate_1_listener($event) { i0.ɵɵrestoreView(_r27); const ctx_r29 = i0.ɵɵnextContext(); return ctx_r29.changeValueFromSelect($event, !ctx_r29.showTime); })("selectTime", function DateRangePopupComponent_ng_template_3_Template_inner_popup_selectTime_1_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r27); const partType_r25 = restoredCtx.partType; const ctx_r30 = i0.ɵɵnextContext(); return ctx_r30.onSelectTime($event, partType_r25); })("headerChange", function DateRangePopupComponent_ng_template_3_Template_inner_popup_headerChange_1_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r27); const partType_r25 = restoredCtx.partType; const ctx_r31 = i0.ɵɵnextContext(); return ctx_r31.onActiveDateChange($event, partType_r25); });
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const partType_r25 = ctx.partType;
    const ctx_r4 = i0.ɵɵnextContext();
    i0.ɵɵclassMapInterpolate1("", ctx_r4.prefixCls, "-panel w-full");
    i0.ɵɵclassProp("tds-picker-panel-rtl", ctx_r4.dir === "rtl");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("showWeek", ctx_r4.showWeek)("endPanelMode", ctx_r4.getPanelMode(ctx_r4.endPanelMode, partType_r25))("partType", partType_r25)("locale", ctx_r4.locale)("showTimePicker", ctx_r4.hasTimePicker)("timeOptions", ctx_r4.getTimeOptions(partType_r25))("panelMode", ctx_r4.getPanelMode(ctx_r4.panelMode, partType_r25))("activeDate", ctx_r4.getActiveDate(partType_r25))("value", ctx_r4.getValue(partType_r25))("disabledDate", ctx_r4.disabledDate)("dateRender", ctx_r4.dateRender)("selectedValue", ctx_r4.datePickerService.value)("hoverValue", ctx_r4.hoverValue);
} }
function DateRangePopupComponent_ng_template_5_calendar_footer_0_Template(rf, ctx) { if (rf & 1) {
    const _r34 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "calendar-footer", 16);
    i0.ɵɵlistener("clickOk", function DateRangePopupComponent_ng_template_5_calendar_footer_0_Template_calendar_footer_clickOk_0_listener() { i0.ɵɵrestoreView(_r34); const ctx_r33 = i0.ɵɵnextContext(2); return ctx_r33.onClickOk(); })("clickToday", function DateRangePopupComponent_ng_template_5_calendar_footer_0_Template_calendar_footer_clickToday_0_listener($event) { i0.ɵɵrestoreView(_r34); const ctx_r35 = i0.ɵɵnextContext(2); return ctx_r35.onClickToday($event); })("clickCancel", function DateRangePopupComponent_ng_template_5_calendar_footer_0_Template_calendar_footer_clickCancel_0_listener() { i0.ɵɵrestoreView(_r34); const ctx_r36 = i0.ɵɵnextContext(2); return ctx_r36.onclickCancel(); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r32 = i0.ɵɵnextContext(2);
    const _r7 = i0.ɵɵreference(8);
    i0.ɵɵproperty("locale", ctx_r32.locale)("isRange", ctx_r32.isRange)("showToday", ctx_r32.showToday)("showNow", ctx_r32.showNow)("hasTimePicker", ctx_r32.hasTimePicker)("okDisabled", !ctx_r32.isAllowed(ctx_r32.datePickerService.value))("extraFooter", ctx_r32.extraFooter)("rangeQuickSelector", ctx_r32.ranges ? _r7 : null)("listDate", ctx_r32.datePickerService.value);
} }
function DateRangePopupComponent_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, DateRangePopupComponent_ng_template_5_calendar_footer_0_Template, 1, 9, "calendar-footer", 15);
} if (rf & 2) {
    const ctx_r6 = i0.ɵɵnextContext();
    i0.ɵɵproperty("ngIf", ctx_r6.hasFooter);
} }
function DateRangePopupComponent_ng_template_7_li_0_Template(rf, ctx) { if (rf & 1) {
    const _r40 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "li", 18);
    i0.ɵɵlistener("click", function DateRangePopupComponent_ng_template_7_li_0_Template_li_click_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r40); const name_r38 = restoredCtx.$implicit; const ctx_r39 = i0.ɵɵnextContext(2); return ctx_r39.onClickPresetRange(ctx_r39.ranges[name_r38]); })("mouseenter", function DateRangePopupComponent_ng_template_7_li_0_Template_li_mouseenter_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r40); const name_r38 = restoredCtx.$implicit; const ctx_r41 = i0.ɵɵnextContext(2); return ctx_r41.onHoverPresetRange(ctx_r41.ranges[name_r38]); })("mouseleave", function DateRangePopupComponent_ng_template_7_li_0_Template_li_mouseleave_0_listener() { i0.ɵɵrestoreView(_r40); const ctx_r42 = i0.ɵɵnextContext(2); return ctx_r42.onPresetRangeMouseLeave(); });
    i0.ɵɵelementStart(1, "span", 19);
    i0.ɵɵtext(2);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const name_r38 = ctx.$implicit;
    const ctx_r37 = i0.ɵɵnextContext(2);
    i0.ɵɵclassMapInterpolate1("", ctx_r37.prefixCls, "-preset");
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(name_r38);
} }
function DateRangePopupComponent_ng_template_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, DateRangePopupComponent_ng_template_7_li_0_Template, 3, 4, "li", 17);
} if (rf & 2) {
    const ctx_r8 = i0.ɵɵnextContext();
    i0.ɵɵproperty("ngForOf", ctx_r8.getObjectKeys(ctx_r8.ranges));
} }
export class DateRangePopupComponent {
    constructor(datePickerService, cdr) {
        this.datePickerService = datePickerService;
        this.cdr = cdr;
        this.inline = false;
        this.dir = 'ltr';
        this.panelModeChange = new EventEmitter();
        this.calendarChange = new EventEmitter();
        this.resultOk = new EventEmitter(); // Emitted when done with date selecting
        this.resultCancel = new EventEmitter();
        this.menuLeft = null;
        this.prefixCls = PREFIX_CLASS;
        this.endPanelMode = 'date';
        this.timeOptions = null;
        this.hoverValue = []; // Range ONLY
        this.checkedPartArr = [false, false];
        this.destroy$ = new Subject();
        this.disabledStartTime = (value) => {
            return this.disabledTime && this.disabledTime(value, 'start');
        };
        this.disabledEndTime = (value) => {
            return this.disabledTime && this.disabledTime(value, 'end');
        };
    }
    get hasTimePicker() {
        return !!this.showTime;
    }
    get hasFooter() {
        return this.showToday || this.hasTimePicker || !!this.extraFooter || !!this.ranges || !!this.isRange;
    }
    ngOnInit() {
        this.buildMenuLeft();
        merge(this.datePickerService.valueChange$, this.datePickerService.inputPartChange$)
            .pipe(takeUntil(this.destroy$))
            .subscribe(() => {
            this.updateActiveDate();
            this.cdr.markForCheck();
        });
    }
    ngOnChanges(changes) {
        // Parse showTime options
        if (changes.showTime || changes.disabledTime) {
            if (this.showTime) {
                this.buildTimeOptions();
            }
        }
        if (changes.panelMode) {
            this.endPanelMode = this.panelMode;
        }
        if (changes.defaultPickerValue) {
            this.updateActiveDate();
        }
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    updateActiveDate() {
        const activeDate = this.datePickerService.hasValue()
            ? this.datePickerService.value
            : this.datePickerService.makeValue(this.defaultPickerValue);
        this.datePickerService.setActiveDate(activeDate, this.hasTimePicker, this.getPanelMode(this.endPanelMode));
    }
    /**
     * Prevent input losing focus when click panel
     * @param event
     */
    onMousedown(event) {
        event.preventDefault();
    }
    onClickOk() {
        const inputIndex = { left: 0, right: 1 }[this.datePickerService.activeInput];
        const value = this.isRange
            ? this.datePickerService.value[inputIndex]
            : this.datePickerService.value;
        this.changeValueFromSelect(value, true, true);
        this.resultOk.emit();
    }
    onClickToday(value) {
        this.changeValueFromSelect(value, !this.showTime, true);
    }
    onCellHover(value) {
        if (!this.isRange) {
            return;
        }
        const otherInputIndex = { left: 1, right: 0 }[this.datePickerService.activeInput];
        const base = (this.datePickerService.value || [])[otherInputIndex];
        if (base) {
            if (base.isBeforeDay(value)) {
                this.hoverValue = [base, value];
            }
            else {
                this.hoverValue = [value, base];
            }
        }
    }
    onPanelModeChange(mode, partType) {
        if (this.isRange) {
            const index = this.datePickerService.getActiveIndex(partType);
            if (index === 0) {
                this.panelMode = [mode, this.panelMode[1]];
            }
            else {
                this.panelMode = [this.panelMode[0], mode];
            }
        }
        else {
            this.panelMode = mode;
        }
        this.panelModeChange.emit(this.panelMode);
    }
    onActiveDateChange(value, partType) {
        if (this.isRange) {
            const activeDate = [];
            activeDate[this.datePickerService.getActiveIndex(partType)] = value;
            this.datePickerService.setActiveDate(activeDate, this.hasTimePicker, this.getPanelMode(this.endPanelMode, partType));
        }
        else {
            this.datePickerService.setActiveDate(value);
        }
    }
    onSelectTime(value, partType) {
        if (this.isRange) {
            const newValue = cloneDate(this.datePickerService.value);
            const index = this.datePickerService.getActiveIndex(partType);
            newValue[index] = this.overrideHms(value, newValue[index]);
            this.datePickerService.setValue(newValue);
        }
        else {
            const newValue = this.overrideHms(value, this.datePickerService.value);
            this.datePickerService.setValue(newValue); // If not select a date currently, use today
        }
        this.datePickerService.inputPartChange$.next();
        this.buildTimeOptions();
    }
    changeValueFromSelect(value, emitValue = true, submit = false) {
        if (this.isRange) {
            const selectedValue = cloneDate(this.datePickerService.value) || [];
            const checkedPart = this.datePickerService.activeInput;
            let nextPart = checkedPart;
            selectedValue[this.datePickerService.getActiveIndex(checkedPart)] = value;
            this.checkedPartArr[this.datePickerService.getActiveIndex(checkedPart)] = true;
            this.hoverValue = selectedValue;
            if (emitValue) {
                if (this.inline) {
                    // For UE, Should always be reversed, and clear vaue when next part is right
                    nextPart = this.reversedPart(checkedPart);
                    if (nextPart === 'right') {
                        selectedValue[this.datePickerService.getActiveIndex(nextPart)] = null;
                        this.checkedPartArr[this.datePickerService.getActiveIndex(nextPart)] = false;
                    }
                    this.datePickerService.setValue(selectedValue);
                    this.calendarChange.emit(selectedValue);
                    if (this.isBothAllowed(selectedValue) && this.checkedPartArr[0] && this.checkedPartArr[1]) {
                        this.clearHoverValue();
                        this.datePickerService.emitValue$.next();
                    }
                }
                else {
                    /**
                     * if sort order is wrong, clear the other part's value
                     */
                    if (wrongSortOrder(selectedValue)) {
                        nextPart = this.reversedPart(checkedPart);
                        selectedValue[this.datePickerService.getActiveIndex(nextPart)] = null;
                        this.checkedPartArr[this.datePickerService.getActiveIndex(nextPart)] = false;
                    }
                    this.datePickerService.setValue(selectedValue);
                    /**
                     * range date usually selected paired,
                     * so we emit the date value only both date is allowed and both part are checked
                     */
                    if (this.isBothAllowed(selectedValue)) {
                        if (this.checkedPartArr[0] && this.checkedPartArr[1]) {
                            this.calendarChange.emit(selectedValue);
                            this.clearHoverValue();
                        }
                        if (submit)
                            this.datePickerService.emitValue$.next();
                    }
                    else if (this.isAllowed(selectedValue)) {
                        nextPart = this.reversedPart(checkedPart);
                        if (submit)
                            this.calendarChange.emit([value.clone()]);
                    }
                }
            }
            else {
                this.datePickerService.setValue(selectedValue);
            }
            this.datePickerService.inputPartChange$.next(nextPart);
        }
        else {
            this.datePickerService.setValue(value);
            this.datePickerService.inputPartChange$.next();
            if (emitValue && this.isAllowed(value)) {
                this.datePickerService.emitValue$.next();
            }
        }
    }
    reversedPart(part) {
        return part === 'left' ? 'right' : 'left';
    }
    getPanelMode(panelMode, partType) {
        if (this.isRange) {
            return panelMode[this.datePickerService.getActiveIndex(partType)];
        }
        else {
            return panelMode;
        }
    }
    // Get single value or part value of a range
    getValue(partType) {
        if (this.isRange) {
            return (this.datePickerService.value || [])[this.datePickerService.getActiveIndex(partType)];
        }
        else {
            return this.datePickerService.value;
        }
    }
    getActiveDate(partType) {
        if (this.isRange) {
            return this.datePickerService.activeDate[this.datePickerService.getActiveIndex(partType)];
        }
        else {
            return this.datePickerService.activeDate;
        }
    }
    isOneAllowed(selectedValue) {
        if (!TDSHelperObject.hasValue(selectedValue)) {
            return false;
        }
        const index = this.datePickerService.getActiveIndex();
        const disabledTimeArr = [this.disabledStartTime, this.disabledEndTime];
        return isAllowedDate(selectedValue[index], this.disabledDate, disabledTimeArr[index]);
    }
    isBothAllowed(selectedValue) {
        return (isAllowedDate(selectedValue[0], this.disabledDate, this.disabledStartTime) &&
            isAllowedDate(selectedValue[1], this.disabledDate, this.disabledEndTime));
    }
    isAllowed(value, isBoth = false) {
        if (this.isRange) {
            return isBoth ? this.isBothAllowed(value) : this.isOneAllowed(value);
        }
        else {
            return isAllowedDate(value, this.disabledDate, this.disabledTime);
        }
    }
    getTimeOptions(partType) {
        if (this.showTime && this.timeOptions) {
            return this.timeOptions instanceof Array ? this.timeOptions[this.datePickerService.getActiveIndex(partType)] : this.timeOptions;
        }
        return null;
    }
    onClickPresetRange(val) {
        const value = typeof val === 'function' ? val() : val;
        if (value) {
            this.datePickerService.setValue([new CandyDate(value[0]), new CandyDate(value[1])]);
            //khi submit mới change data
            // console.log('onClickPresetRange')
            // this.datePickerService.emitValue$.next();
            // this.calendarChange.emit([new CandyDate(value[0]), new CandyDate(value[1])]);
        }
    }
    onPresetRangeMouseLeave() {
        this.clearHoverValue();
    }
    onHoverPresetRange(val) {
        if (typeof val !== 'function') {
            this.hoverValue = [new CandyDate(val[0]), new CandyDate(val[1])];
        }
    }
    getObjectKeys(obj) {
        return obj ? Object.keys(obj) : [];
    }
    show(partType) {
        const hide = this.showTime && this.isRange && this.datePickerService.activeInput !== partType;
        return !hide;
    }
    clearHoverValue() {
        this.hoverValue = [];
    }
    buildTimeOptions() {
        if (this.showTime) {
            const showTime = typeof this.showTime === 'object' ? this.showTime : { use12Hours: true };
            if (this.isRange) {
                const value = (this.datePickerService.value || []);
                this.timeOptions = [this.overrideTimeOptions(showTime, value[0], 'start'), this.overrideTimeOptions(showTime, value[1], 'end')];
            }
            else {
                this.timeOptions = this.overrideTimeOptions(showTime, this.datePickerService.value);
            }
        }
        else {
            this.timeOptions = null;
        }
    }
    overrideTimeOptions(origin, value, partial) {
        let disabledTimeFn;
        if (partial) {
            disabledTimeFn = partial === 'start' ? this.disabledStartTime : this.disabledEndTime;
        }
        else {
            disabledTimeFn = this.disabledTime;
        }
        return { ...origin, ...getTimeConfig(value, disabledTimeFn) };
    }
    overrideHms(newValue, oldValue) {
        // tslint:disable-next-line:no-parameter-reassignment
        newValue = newValue || new CandyDate();
        // tslint:disable-next-line:no-parameter-reassignment
        oldValue = oldValue || new CandyDate();
        return oldValue.setHms(newValue.getHours(), newValue.getMinutes(), newValue.getSeconds());
    }
    buildMenuLeft() {
        let today = new Date();
        let lastMonth = new Date(today.getFullYear(), today.getMonth() - 1, 1);
        this.menuLeft = this.ranges ? this.ranges : {
            'Today': [today, today],
            'Yesterday': [addDays(today, -1), today],
            'Last 7 Days': [addDays(today, -7), today],
            'Last 30 Days': [addDays(today, -30), today],
            'This Month': [startOfMonth(today), endOfMonth(today)],
            'Last Month': [startOfMonth(lastMonth), endOfMonth(lastMonth)],
            // 'Custom Range': [new Date(), endOfMonth(new Date())],
        };
    }
    onclickCancel() {
        this.resultCancel.emit();
    }
}
DateRangePopupComponent.ɵfac = function DateRangePopupComponent_Factory(t) { return new (t || DateRangePopupComponent)(i0.ɵɵdirectiveInject(i1.DatePickerService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
DateRangePopupComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: DateRangePopupComponent, selectors: [["date-range-popup"]], hostBindings: function DateRangePopupComponent_HostBindings(rf, ctx) { if (rf & 1) {
        i0.ɵɵlistener("mousedown", function DateRangePopupComponent_mousedown_HostBindingHandler($event) { return ctx.onMousedown($event); });
    } }, inputs: { isRange: "isRange", inline: "inline", showWeek: "showWeek", locale: "locale", disabledDate: "disabledDate", disabledTime: "disabledTime", showToday: "showToday", showNow: "showNow", showTime: "showTime", extraFooter: "extraFooter", ranges: "ranges", dateRender: "dateRender", panelMode: "panelMode", defaultPickerValue: "defaultPickerValue", dir: "dir" }, outputs: { panelModeChange: "panelModeChange", calendarChange: "calendarChange", resultOk: "resultOk", resultCancel: "resultCancel" }, exportAs: ["dateRangePopup"], features: [i0.ɵɵNgOnChangesFeature], decls: 9, vars: 2, consts: [[4, "ngIf", "ngIfElse"], ["singlePanel", ""], ["tplInnerPopup", ""], ["tplFooter", ""], ["tplRangeQuickSelector", ""], ["class", "flex-auto border-0 border-r border-neutral-2-200 dark:border-d-neutral-2-200 ", 4, "ngIf"], [3, "ngClass"], ["noTimePicker", ""], [4, "ngTemplateOutlet"], [1, "flex-auto", "border-0", "border-r", "border-neutral-2-200", "dark:border-d-neutral-2-200"], ["class", "w-full px-4 py-2.5 text-caption-1 font-regular text-neutral-1-900 dark:text-d-neutral-1-900 dark:border-d-neutral-2-200 cursor-pointer hover:bg-primary-1 hover:text-white", 3, "click", "mouseenter", "mouseleave", 4, "ngFor", "ngForOf"], [1, "w-full", "px-4", "py-2.5", "text-caption-1", "font-regular", "text-neutral-1-900", "dark:text-d-neutral-1-900", "dark:border-d-neutral-2-200", "cursor-pointer", "hover:bg-primary-1", "hover:text-white", 3, "click", "mouseenter", "mouseleave"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], ["tabindex", "-1"], [3, "showWeek", "endPanelMode", "partType", "locale", "showTimePicker", "timeOptions", "panelMode", "activeDate", "value", "disabledDate", "dateRender", "selectedValue", "hoverValue", "panelModeChange", "cellHover", "selectDate", "selectTime", "headerChange"], [3, "locale", "isRange", "showToday", "showNow", "hasTimePicker", "okDisabled", "extraFooter", "rangeQuickSelector", "listDate", "clickOk", "clickToday", "clickCancel", 4, "ngIf"], [3, "locale", "isRange", "showToday", "showNow", "hasTimePicker", "okDisabled", "extraFooter", "rangeQuickSelector", "listDate", "clickOk", "clickToday", "clickCancel"], [3, "class", "click", "mouseenter", "mouseleave", 4, "ngFor", "ngForOf"], [3, "click", "mouseenter", "mouseleave"], [1, "tds-tag", "tds-tag-blue"]], template: function DateRangePopupComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtemplate(0, DateRangePopupComponent_ng_container_0_Template, 10, 22, "ng-container", 0);
        i0.ɵɵtemplate(1, DateRangePopupComponent_ng_template_1_Template, 4, 13, "ng-template", null, 1, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtemplate(3, DateRangePopupComponent_ng_template_3_Template, 2, 18, "ng-template", null, 2, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtemplate(5, DateRangePopupComponent_ng_template_5_Template, 1, 1, "ng-template", null, 3, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtemplate(7, DateRangePopupComponent_ng_template_7_Template, 1, 1, "ng-template", null, 4, i0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r1 = i0.ɵɵreference(2);
        i0.ɵɵproperty("ngIf", ctx.isRange)("ngIfElse", _r1);
    } }, directives: [i2.NgIf, i2.NgForOf, i2.NgClass, i2.NgTemplateOutlet, i3.InnerPopupComponent, i4.CalendarFooterComponent], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(DateRangePopupComponent, [{
        type: Component,
        args: [{ encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, selector: 'date-range-popup', exportAs: 'dateRangePopup', host: {
                    '(mousedown)': 'onMousedown($event)'
                }, template: "<ng-container *ngIf=\"isRange; else singlePanel\">\r\n    <div class=\"{{ prefixCls }}-range-wrapper {{ prefixCls }}-date-range-wrapper\">\r\n        <div class=\"{{ prefixCls }}-range-arrow\" [style.left.px]=\"datePickerService.arrowLeft\"></div>\r\n        <div class=\"{{ prefixCls }}-panel-container w-full flex  items-stretch justify-center\">\r\n            <div class=\"flex-auto border-0 border-r border-neutral-2-200 dark:border-d-neutral-2-200 \"\r\n                *ngIf=\"!hasTimePicker\">\r\n\r\n                <div *ngFor=\"let name of getObjectKeys(menuLeft!)\" (click)=\"onClickPresetRange(menuLeft![name])\"\r\n                    (mouseenter)=\"onHoverPresetRange(menuLeft![name])\" (mouseleave)=\"onPresetRangeMouseLeave()\"\r\n                    class=\"w-full px-4 py-2.5 text-caption-1 font-regular text-neutral-1-900 dark:text-d-neutral-1-900 dark:border-d-neutral-2-200 cursor-pointer hover:bg-primary-1 hover:text-white\">\r\n                    {{ name }}\r\n                </div>\r\n\r\n            </div>\r\n            <div class=\"{{ prefixCls }}-panels flex \" [ngClass]=\"{'w-full':hasTimePicker}\">\r\n                <ng-container *ngIf=\"hasTimePicker; else noTimePicker\">\r\n                    <ng-container\r\n                        *ngTemplateOutlet=\"tplInnerPopup; context: { partType: datePickerService.activeInput }\">\r\n                    </ng-container>\r\n                </ng-container>\r\n                <ng-template #noTimePicker>\r\n                    <ng-container *ngTemplateOutlet=\"tplInnerPopup; context: { partType: 'left' }\"></ng-container>\r\n                    <ng-container *ngTemplateOutlet=\"tplInnerPopup; context: { partType: 'right' }\"></ng-container>\r\n                </ng-template>\r\n            </div>\r\n        </div>\r\n        <ng-container *ngTemplateOutlet=\"tplFooter\"></ng-container>\r\n    </div>\r\n</ng-container>\r\n<ng-template #singlePanel>\r\n    <div class=\"{{ prefixCls }}-panel-container {{ showWeek ? prefixCls + '-week-number' : '' }} {{\r\n        hasTimePicker ? prefixCls + '-time' : ''\r\n      }} {{ isRange ? prefixCls + '-range' : '' }}\">\r\n        <div class=\"{{ prefixCls }}-panel\" [class.tds-picker-panel-rtl]=\"dir === 'rtl'\" tabindex=\"-1\">\r\n            <!-- Single ONLY -->\r\n            <ng-container *ngTemplateOutlet=\"tplInnerPopup\"></ng-container>\r\n            <ng-container *ngTemplateOutlet=\"tplFooter\"></ng-container>\r\n        </div>\r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template #tplInnerPopup let-partType=\"partType\">\r\n    <div class=\"{{ prefixCls }}-panel w-full\" [class.tds-picker-panel-rtl]=\"dir === 'rtl'\">\r\n        <!-- TODO(@wenqi73) [selectedValue] [hoverValue] types-->\r\n        <inner-popup [showWeek]=\"showWeek\" [endPanelMode]=\"getPanelMode(endPanelMode, partType)\" [partType]=\"partType\"\r\n            [locale]=\"locale!\" [showTimePicker]=\"hasTimePicker\" [timeOptions]=\"getTimeOptions(partType)\"\r\n            [panelMode]=\"getPanelMode(panelMode, partType)\" (panelModeChange)=\"onPanelModeChange($event, partType)\"\r\n            [activeDate]=\"getActiveDate(partType)\" [value]=\"getValue(partType)\" [disabledDate]=\"disabledDate\"\r\n            [dateRender]=\"dateRender\" [selectedValue]=\"$any(datePickerService.value)\" [hoverValue]=\"$any(hoverValue)\"\r\n            (cellHover)=\"onCellHover($event)\" (selectDate)=\"changeValueFromSelect($event,!showTime)\"\r\n            (selectTime)=\"onSelectTime($event, partType)\" (headerChange)=\"onActiveDateChange($event, partType)\">\r\n        </inner-popup>\r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template #tplFooter>\r\n\r\n    <calendar-footer *ngIf=\"hasFooter\" [locale]=\"locale!\" [isRange]=\"isRange\" [showToday]=\"showToday\"\r\n        [showNow]=\"showNow\" [hasTimePicker]=\"hasTimePicker\" [okDisabled]=\"!isAllowed($any(datePickerService.value))\"\r\n        [extraFooter]=\"extraFooter\" [rangeQuickSelector]=\"ranges ? tplRangeQuickSelector : null\" (clickOk)=\"onClickOk()\"\r\n        (clickToday)=\"onClickToday($event)\" [listDate]=\"$any(datePickerService.value)\" (clickCancel)=\"onclickCancel()\">\r\n    </calendar-footer>\r\n</ng-template>\r\n\r\n<!-- Range ONLY: Range Quick Selector -->\r\n<ng-template #tplRangeQuickSelector>\r\n    <li *ngFor=\"let name of getObjectKeys(ranges)\" class=\"{{ prefixCls }}-preset\"\r\n        (click)=\"onClickPresetRange(ranges![name])\" (mouseenter)=\"onHoverPresetRange(ranges![name])\"\r\n        (mouseleave)=\"onPresetRangeMouseLeave()\">\r\n        <span class=\"tds-tag tds-tag-blue\">{{ name }}</span>\r\n    </li>\r\n</ng-template>" }]
    }], function () { return [{ type: i1.DatePickerService }, { type: i0.ChangeDetectorRef }]; }, { isRange: [{
            type: Input
        }], inline: [{
            type: Input
        }], showWeek: [{
            type: Input
        }], locale: [{
            type: Input
        }], disabledDate: [{
            type: Input
        }], disabledTime: [{
            type: Input
        }], showToday: [{
            type: Input
        }], showNow: [{
            type: Input
        }], showTime: [{
            type: Input
        }], extraFooter: [{
            type: Input
        }], ranges: [{
            type: Input
        }], dateRender: [{
            type: Input
        }], panelMode: [{
            type: Input
        }], defaultPickerValue: [{
            type: Input
        }], dir: [{
            type: Input
        }], panelModeChange: [{
            type: Output
        }], calendarChange: [{
            type: Output
        }], resultOk: [{
            type: Output
        }], resultCancel: [{
            type: Output
        }] }); })();
//# sourceMappingURL=data:application/json;base64,