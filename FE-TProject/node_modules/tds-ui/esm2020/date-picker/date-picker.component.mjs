import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, EventEmitter, forwardRef, Host, Inject, Input, Optional, Output, Self, ViewChild, ViewChildren, ViewEncapsulation } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { DatePickerService } from './date-picker.service';
import { DateRangePopupComponent } from './date-range-popup.component';
import { PREFIX_CLASS } from './util';
import { ESCAPE } from '@angular/cdk/keycodes';
import { CdkConnectedOverlay, CdkOverlayOrigin } from '@angular/cdk/overlay';
import { DOCUMENT } from '@angular/common';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { TDSFormFieldControl, TDS_FORM_FIELD } from 'tds-ui/form-field';
import { slideMotion } from 'tds-ui/core/animation';
import { InputBoolean, TDSHelperArray, TDSHelperObject, toBoolean, valueFunctionProp } from 'tds-ui/shared/utility';
import { CandyDate, cloneDate, wrongSortOrder } from 'tds-ui/core/time';
import { TDSIsErrorState } from 'tds-ui/shared/common';
import * as i0 from "@angular/core";
import * as i1 from "tds-ui/core/config";
import * as i2 from "./date-picker.service";
import * as i3 from "tds-ui/i18n";
import * as i4 from "tds-ui/core/resize-observers";
import * as i5 from "@angular/cdk/platform";
import * as i6 from "@angular/cdk/bidi";
import * as i7 from "@angular/forms";
import * as i8 from "@angular/common";
import * as i9 from "tds-ui/core/outlet";
import * as i10 from "./date-range-popup.component";
import * as i11 from "@angular/cdk/overlay";
import * as i12 from "tds-ui/form-field";
const _c0 = ["separatorElement"];
const _c1 = ["pickerInput"];
const _c2 = ["rangePickerInput"];
function TDSDatePickerComponent_ng_container_0_div_1_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
const _c3 = function (a0, a1, a2) { return { "pl-2.5 py-1": a0, "pl-3 py-1.5": a1, "pl-4 py-2": a2 }; };
function TDSDatePickerComponent_ng_container_0_div_1_Template(rf, ctx) { if (rf & 1) {
    const _r15 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 8)(1, "div", 9)(2, "input", 10, 11);
    i0.ɵɵlistener("ngModelChange", function TDSDatePickerComponent_ng_container_0_div_1_Template_input_ngModelChange_2_listener($event) { i0.ɵɵrestoreView(_r15); const ctx_r14 = i0.ɵɵnextContext(2); return ctx_r14.inputValue = $event; })("focus", function TDSDatePickerComponent_ng_container_0_div_1_Template_input_focus_2_listener($event) { i0.ɵɵrestoreView(_r15); const ctx_r16 = i0.ɵɵnextContext(2); return ctx_r16.onFocus($event); })("focusout", function TDSDatePickerComponent_ng_container_0_div_1_Template_input_focusout_2_listener($event) { i0.ɵɵrestoreView(_r15); const ctx_r17 = i0.ɵɵnextContext(2); return ctx_r17.onFocusout($event); })("ngModelChange", function TDSDatePickerComponent_ng_container_0_div_1_Template_input_ngModelChange_2_listener($event) { i0.ɵɵrestoreView(_r15); const ctx_r18 = i0.ɵɵnextContext(2); return ctx_r18.onInputChange($event); })("keyup.enter", function TDSDatePickerComponent_ng_container_0_div_1_Template_input_keyup_enter_2_listener($event) { i0.ɵɵrestoreView(_r15); const ctx_r19 = i0.ɵɵnextContext(2); return ctx_r19.onKeyupEnter($event); });
    i0.ɵɵelementEnd()();
    i0.ɵɵtemplate(4, TDSDatePickerComponent_ng_container_0_div_1_ng_container_4_Template, 1, 0, "ng-container", 12);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r10 = i0.ɵɵnextContext(2);
    const _r3 = i0.ɵɵreference(4);
    i0.ɵɵclassMap(ctx_r10.tdsCssContainer);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction3(11, _c3, ctx_r10.size === "sm", ctx_r10.size === "md", ctx_r10.size === "lg"));
    i0.ɵɵadvance(1);
    i0.ɵɵclassProp("tds-input-disabled", ctx_r10.disabled);
    i0.ɵɵpropertyInterpolate("placeholder", ctx_r10.getPlaceholder());
    i0.ɵɵproperty("disabled", ctx_r10.disabled)("readOnly", ctx_r10.inputReadOnly)("ngModel", ctx_r10.inputValue);
    i0.ɵɵattribute("id", ctx_r10.id);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngTemplateOutlet", _r3);
} }
function TDSDatePickerComponent_ng_container_0_ng_container_2_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function TDSDatePickerComponent_ng_container_0_ng_container_2_ng_container_8_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r22 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r22.deparator);
} }
function TDSDatePickerComponent_ng_container_0_ng_container_2_ng_template_9_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1, " - ");
    i0.ɵɵelementEnd();
} }
function TDSDatePickerComponent_ng_container_0_ng_container_2_ng_container_12_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function TDSDatePickerComponent_ng_container_0_ng_container_2_ng_container_13_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
const _c4 = function () { return { partType: "left" }; };
const _c5 = function () { return { partType: "right" }; };
function TDSDatePickerComponent_ng_container_0_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "div", 8)(2, "div", 9)(3, "div");
    i0.ɵɵtemplate(4, TDSDatePickerComponent_ng_container_0_ng_container_2_ng_container_4_Template, 1, 0, "ng-container", 13);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(5, "div", null, 14)(7, "span");
    i0.ɵɵtemplate(8, TDSDatePickerComponent_ng_container_0_ng_container_2_ng_container_8_Template, 2, 1, "ng-container", 0);
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(9, TDSDatePickerComponent_ng_container_0_ng_container_2_ng_template_9_Template, 2, 0, "ng-template", null, 15, i0.ɵɵtemplateRefExtractor);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(11, "div");
    i0.ɵɵtemplate(12, TDSDatePickerComponent_ng_container_0_ng_container_2_ng_container_12_Template, 1, 0, "ng-container", 13);
    i0.ɵɵelementEnd()();
    i0.ɵɵtemplate(13, TDSDatePickerComponent_ng_container_0_ng_container_2_ng_container_13_Template, 1, 0, "ng-container", 12);
    i0.ɵɵelementEnd();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const _r23 = i0.ɵɵreference(10);
    const ctx_r11 = i0.ɵɵnextContext(2);
    const _r1 = i0.ɵɵreference(2);
    const _r3 = i0.ɵɵreference(4);
    i0.ɵɵadvance(1);
    i0.ɵɵclassMap(ctx_r11.tdsCssContainer);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction3(22, _c3, ctx_r11.size === "sm", ctx_r11.size === "md", ctx_r11.size === "lg"));
    i0.ɵɵadvance(1);
    i0.ɵɵclassMapInterpolate1("", ctx_r11.prefixCls, "-input");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngTemplateOutlet", _r1)("ngTemplateOutletContext", i0.ɵɵpureFunction0(26, _c4));
    i0.ɵɵadvance(1);
    i0.ɵɵclassMapInterpolate1("", ctx_r11.prefixCls, "-range-separator");
    i0.ɵɵadvance(2);
    i0.ɵɵclassMapInterpolate1("", ctx_r11.prefixCls, "-separator");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r11.deparator)("ngIfElse", _r23);
    i0.ɵɵadvance(3);
    i0.ɵɵclassMapInterpolate1("", ctx_r11.prefixCls, "-input pl-2");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngTemplateOutlet", _r1)("ngTemplateOutletContext", i0.ɵɵpureFunction0(27, _c5));
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngTemplateOutlet", _r3);
} }
function TDSDatePickerComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtemplate(1, TDSDatePickerComponent_ng_container_0_div_1_Template, 5, 15, "div", 6);
    i0.ɵɵtemplate(2, TDSDatePickerComponent_ng_container_0_ng_container_2_Template, 14, 28, "ng-container", 7);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", !ctx_r0.isRange);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r0.isRange);
} }
function TDSDatePickerComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    const _r30 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "input", 16, 17);
    i0.ɵɵlistener("click", function TDSDatePickerComponent_ng_template_1_Template_input_click_0_listener($event) { i0.ɵɵrestoreView(_r30); const ctx_r29 = i0.ɵɵnextContext(); return ctx_r29.onClickInputBox($event); })("focusout", function TDSDatePickerComponent_ng_template_1_Template_input_focusout_0_listener($event) { i0.ɵɵrestoreView(_r30); const ctx_r31 = i0.ɵɵnextContext(); return ctx_r31.onFocusout($event); })("focus", function TDSDatePickerComponent_ng_template_1_Template_input_focus_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r30); const partType_r27 = restoredCtx.partType; const ctx_r32 = i0.ɵɵnextContext(); return ctx_r32.onFocus($event, partType_r27); })("keyup.enter", function TDSDatePickerComponent_ng_template_1_Template_input_keyup_enter_0_listener($event) { i0.ɵɵrestoreView(_r30); const ctx_r33 = i0.ɵɵnextContext(); return ctx_r33.onKeyupEnter($event); })("ngModelChange", function TDSDatePickerComponent_ng_template_1_Template_input_ngModelChange_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r30); const partType_r27 = restoredCtx.partType; const ctx_r34 = i0.ɵɵnextContext(); return (ctx_r34.inputValue[ctx_r34.datePickerService.getActiveIndex(partType_r27)] = $event); })("ngModelChange", function TDSDatePickerComponent_ng_template_1_Template_input_ngModelChange_0_listener($event) { i0.ɵɵrestoreView(_r30); const ctx_r35 = i0.ɵɵnextContext(); return ctx_r35.onInputChange($event); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const partType_r27 = ctx.partType;
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵproperty("disabled", ctx_r2.disabled)("readOnly", ctx_r2.inputReadOnly)("size", ctx_r2.inputSize)("ngModel", ctx_r2.inputValue[ctx_r2.datePickerService.getActiveIndex(partType_r27)])("placeholder", ctx_r2.getPlaceholder(partType_r27));
} }
const _c6 = function (a0, a1, a2) { return { "px-1": a0, "px-1.5": a1, "px-2": a2 }; };
function TDSDatePickerComponent_ng_template_3_div_0_Template(rf, ctx) { if (rf & 1) {
    const _r39 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 21);
    i0.ɵɵlistener("click", function TDSDatePickerComponent_ng_template_3_div_0_Template_div_click_0_listener($event) { i0.ɵɵrestoreView(_r39); const ctx_r38 = i0.ɵɵnextContext(2); return ctx_r38.onClickClear($event); });
    i0.ɵɵelement(1, "span", 22);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r36 = i0.ɵɵnextContext(2);
    i0.ɵɵclassMapInterpolate1("", ctx_r36.prefixCls, "-clear flex items-center cursor-pointer");
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction3(4, _c6, ctx_r36.size === "sm", ctx_r36.size === "md", ctx_r36.size === "lg"));
} }
function TDSDatePickerComponent_ng_template_3_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelement(1, "span", 23);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const suffixIcon_r40 = ctx.$implicit;
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngClass", suffixIcon_r40);
} }
function TDSDatePickerComponent_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, TDSDatePickerComponent_ng_template_3_div_0_Template, 2, 8, "div", 18);
    i0.ɵɵelementStart(1, "div", 19);
    i0.ɵɵtemplate(2, TDSDatePickerComponent_ng_template_3_ng_container_2_Template, 2, 1, "ng-container", 20);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext();
    i0.ɵɵproperty("ngIf", ctx_r4.showClear());
    i0.ɵɵadvance(1);
    i0.ɵɵclassMapInterpolate1("", ctx_r4.prefixCls, "-suffix text-neutral-1-900 dark:text-d-neutral-1-900  group-hover:bg-neutral-3-50 dark:group-hover:bg-d-neutral-3-200 flex items-center  group-hover:border-transparent");
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction3(6, _c6, ctx_r4.size === "sm", ctx_r4.size === "md", ctx_r4.size === "lg"));
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("tdsStringTemplateOutlet", ctx_r4.suffixIcon);
} }
function TDSDatePickerComponent_ng_template_5_ng_container_0_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function TDSDatePickerComponent_ng_template_5_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "div", 24);
    i0.ɵɵtemplate(2, TDSDatePickerComponent_ng_template_5_ng_container_0_ng_container_2_Template, 1, 0, "ng-container", 12);
    i0.ɵɵelementEnd();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    i0.ɵɵnextContext(2);
    const _r7 = i0.ɵɵreference(8);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("@slideMotion", "enter");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngTemplateOutlet", _r7);
} }
function TDSDatePickerComponent_ng_template_5_ng_container_1_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function TDSDatePickerComponent_ng_template_5_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "div", 25);
    i0.ɵɵtemplate(2, TDSDatePickerComponent_ng_template_5_ng_container_1_ng_container_2_Template, 1, 0, "ng-container", 12);
    i0.ɵɵelementEnd();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r42 = i0.ɵɵnextContext(2);
    const _r7 = i0.ɵɵreference(8);
    i0.ɵɵadvance(1);
    i0.ɵɵstyleProp("width", ctx_r42.isRange && !ctx_r42.showTime ? "700px" : "100%");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngTemplateOutlet", _r7);
} }
function TDSDatePickerComponent_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, TDSDatePickerComponent_ng_template_5_ng_container_0_Template, 3, 2, "ng-container", 7);
    i0.ɵɵtemplate(1, TDSDatePickerComponent_ng_template_5_ng_container_1_Template, 3, 3, "ng-container", 7);
} if (rf & 2) {
    const ctx_r6 = i0.ɵɵnextContext();
    i0.ɵɵproperty("ngIf", !ctx_r6.inline);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r6.inline);
} }
function TDSDatePickerComponent_ng_template_7_Template(rf, ctx) { if (rf & 1) {
    const _r46 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 26)(1, "date-range-popup", 27);
    i0.ɵɵlistener("panelModeChange", function TDSDatePickerComponent_ng_template_7_Template_date_range_popup_panelModeChange_1_listener($event) { i0.ɵɵrestoreView(_r46); const ctx_r45 = i0.ɵɵnextContext(); return ctx_r45.onPanelModeChange($event); })("calendarChange", function TDSDatePickerComponent_ng_template_7_Template_date_range_popup_calendarChange_1_listener($event) { i0.ɵɵrestoreView(_r46); const ctx_r47 = i0.ɵɵnextContext(); return ctx_r47._calendarChange($event); })("resultOk", function TDSDatePickerComponent_ng_template_7_Template_date_range_popup_resultOk_1_listener() { i0.ɵɵrestoreView(_r46); const ctx_r48 = i0.ɵɵnextContext(); return ctx_r48.onResultOk(); })("resultCancel", function TDSDatePickerComponent_ng_template_7_Template_date_range_popup_resultCancel_1_listener() { i0.ɵɵrestoreView(_r46); const ctx_r49 = i0.ɵɵnextContext(); return ctx_r49.onResultCancel(); });
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r8 = i0.ɵɵnextContext();
    i0.ɵɵclassMapInterpolate2("", ctx_r8.prefixCls, "-dropdown ", ctx_r8.dropdownClassName, "");
    i0.ɵɵclassProp("tds-picker-dropdown-rtl", ctx_r8.dir === "rtl")("tds-picker-dropdown-placement-bottomLeft", ctx_r8.currentPositionY === "bottom" && ctx_r8.currentPositionX === "start")("tds-picker-dropdown-placement-topLeft", ctx_r8.currentPositionY === "top" && ctx_r8.currentPositionX === "start")("tds-picker-dropdown-placement-bottomRight", ctx_r8.currentPositionY === "bottom" && ctx_r8.currentPositionX === "end")("tds-picker-dropdown-placement-topRight", ctx_r8.currentPositionY === "top" && ctx_r8.currentPositionX === "end")("tds-picker-dropdown-range", ctx_r8.isRange)("tds-picker-active-left", ctx_r8.datePickerService.activeInput === "left")("tds-picker-active-right", ctx_r8.datePickerService.activeInput === "right");
    i0.ɵɵproperty("ngStyle", ctx_r8.popupStyle);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("isRange", ctx_r8.isRange)("inline", ctx_r8.inline)("defaultPickerValue", ctx_r8.defaultPickerValue)("showWeek", ctx_r8.mode === "week")("panelMode", ctx_r8.panelMode)("locale", ctx_r8.locale.lang)("showToday", ctx_r8.mode === "date" && ctx_r8.showToday && !ctx_r8.isRange && !ctx_r8.showTime)("showNow", ctx_r8.mode === "date" && ctx_r8.showNow && !ctx_r8.isRange && !!ctx_r8.showTime)("showTime", ctx_r8.showTime)("dateRender", ctx_r8.dateRender)("disabledDate", ctx_r8.disabledDate)("disabledTime", ctx_r8.disabledTime)("extraFooter", ctx_r8.extraFooter)("ranges", ctx_r8.ranges)("dir", ctx_r8.dir);
} }
function TDSDatePickerComponent_ng_template_9_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function TDSDatePickerComponent_ng_template_9_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, TDSDatePickerComponent_ng_template_9_ng_container_0_Template, 1, 0, "ng-container", 12);
} if (rf & 2) {
    i0.ɵɵnextContext();
    const _r5 = i0.ɵɵreference(6);
    i0.ɵɵproperty("ngTemplateOutlet", _r5);
} }
const POPUP_STYLE_PATCH = { position: 'relative' }; // Aim to override antd's style to support overlay's position strategy (position:absolute will cause it not working because the overlay can't get the height/width of it's content)
/**
 * The base picker for all common APIs
 */
export class TDSDatePickerComponent {
    // ------------------------------------------------------------------------
    // Input API End
    // ------------------------------------------------------------------------
    constructor(tdsConfigService, datePickerService, i18n, cdr, renderer, elementRef, dateHelper, resizeObserver, platform, doc, directionality, _formField, ngControl, _parentForm, _parentFormGroup) {
        this.tdsConfigService = tdsConfigService;
        this.datePickerService = datePickerService;
        this.i18n = i18n;
        this.cdr = cdr;
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.dateHelper = dateHelper;
        this.resizeObserver = resizeObserver;
        this.platform = platform;
        this.directionality = directionality;
        this._formField = _formField;
        this.ngControl = ngControl;
        this._parentForm = _parentForm;
        this._parentFormGroup = _parentFormGroup;
        this.isRange = false; // Indicate whether the value is a range value
        this.dir = 'ltr';
        this.panelMode = 'date';
        this.destroyed$ = new Subject();
        this.isCustomPlaceHolder = false;
        this.isCustomFormat = false;
        this._showTime = false;
        // --- Common API
        this.allowClear = true;
        this.autoFocus = false;
        this.disabled = false;
        this.borderless = false;
        this.inputReadOnly = false;
        this.inline = false;
        this.placeholder = '';
        this.popupStyle = POPUP_STYLE_PATCH;
        this.showToday = true;
        this.mode = 'date';
        this.showNow = true;
        this.defaultPickerValue = null;
        this.deparator = undefined;
        this.suffixIcon = 'tdsi-calendar-fill';
        this.backdrop = false;
        this.id = null;
        this.tdsClass = "";
        this._size = "md";
        // TODO(@wenqi73) The PanelMode need named for each pickers and export
        this.panelChange = new EventEmitter();
        this.calendarChange = new EventEmitter();
        this.ok = new EventEmitter();
        this.openChange = new EventEmitter();
        this.stateChanges = new Subject();
        this.focused = false;
        this._required = false;
        this.parentIsFormField = false;
        this.inputSize = 12;
        this.destroy$ = new Subject();
        this.prefixCls = PREFIX_CLASS;
        this.activeBarStyle = {};
        this.overlayOpen = false; // Available when "isOpen" = undefined
        this.overlayPositions = [
            {
                offsetY: 2,
                originX: 'start',
                originY: 'bottom',
                overlayX: 'start',
                overlayY: 'top'
            },
            {
                offsetY: -2,
                originX: 'start',
                originY: 'top',
                overlayX: 'start',
                overlayY: 'bottom'
            },
            {
                offsetY: 2,
                originX: 'end',
                originY: 'bottom',
                overlayX: 'end',
                overlayY: 'top'
            },
            {
                offsetY: -2,
                originX: 'end',
                originY: 'top',
                overlayX: 'end',
                overlayY: 'bottom'
            }
        ];
        this.currentPositionX = 'start';
        this.currentPositionY = 'bottom';
        this.currentPickerValue = null;
        this.tdsCssContainer = "";
        // ------------------------------------------------------------------------
        // | Control value accessor implements
        // ------------------------------------------------------------------------
        // NOTE: onChangeFn/onTouchedFn will not be assigned if user not use as ngModel
        this.onChangeFn = () => void 0;
        this.onTouchedFn = () => void 0;
        this.errorState = false;
        this.document = doc;
        this.origin = new CdkOverlayOrigin(this.elementRef);
        if (this.ngControl != null) {
            this.ngControl.valueAccessor = this;
        }
        if (this._formField) {
            // this.size = this._formField.size;
            this.parentIsFormField = true;
        }
    }
    get size() {
        return this._size;
    }
    set size(value) {
        if (this._size != value) {
            this._size = value;
            this.stateChanges.next();
        }
    }
    get showTime() {
        return this._showTime;
    }
    set showTime(value) {
        this._showTime = typeof value === 'object' ? value : toBoolean(value);
    }
    get empty() {
        return false;
    }
    get required() {
        return this._required;
    }
    set required(value) {
        this._required = coerceBooleanProperty(value);
        this.stateChanges.next();
    }
    get realOpenState() {
        // The value that really decide the open state of overlay
        return this.isOpenHandledByUser() ? !!this.isOpen : this.overlayOpen;
    }
    ngAfterViewInit() {
        if (this.autoFocus) {
            this.focus();
        }
        if (this.isRange && this.platform.isBrowser) {
            this.resizeObserver
                .observe(this.elementRef)
                .pipe(takeUntil(this.destroy$))
                .subscribe(() => {
                this.updateInputWidthAndArrowLeft();
            });
        }
        this.datePickerService.inputPartChange$.pipe(takeUntil(this.destroy$)).subscribe(partType => {
            if (partType) {
                this.datePickerService.activeInput = partType;
            }
            this.focus();
            this.updateInputWidthAndArrowLeft();
        });
    }
    updateInputWidthAndArrowLeft() {
        this.inputWidth = this.rangePickerInputs?.first?.nativeElement.offsetWidth || 0;
        const baseStyle = { position: 'absolute', width: `${this.inputWidth}px` };
        this.datePickerService.arrowLeft = this.datePickerService.activeInput === 'left' ? 0 : this.inputWidth + this.separatorElement?.nativeElement.offsetWidth || 0;
        if (this.dir === 'rtl') {
            this.activeBarStyle = { ...baseStyle, right: `${this.datePickerService.arrowLeft}px` };
        }
        else {
            this.activeBarStyle = { ...baseStyle, left: `${this.datePickerService.arrowLeft}px` };
        }
        this.cdr.markForCheck();
    }
    getInput(partType) {
        if (this.inline) {
            return undefined;
        }
        return this.isRange
            ? partType === 'left'
                ? this.rangePickerInputs?.first.nativeElement
                : this.rangePickerInputs?.last.nativeElement
            : this.pickerInput.nativeElement;
    }
    focus() {
        const activeInputElement = this.getInput(this.datePickerService.activeInput);
        if (this.document.activeElement !== activeInputElement) {
            activeInputElement?.focus();
        }
        if (!this.focused && !this.disabled) {
            this.focused = true;
            this.stateChanges.next();
        }
    }
    onFocus(event, partType) {
        event.preventDefault();
        if (partType) {
            this.datePickerService.inputPartChange$.next(partType);
        }
        this.renderClass(true);
    }
    // blur event has not the relatedTarget in IE11, use focusout instead.
    onFocusout(event) {
        event.preventDefault();
        this.renderClass(false);
    }
    // Show overlay content
    open() {
        if (this.isRange) {
            this.currentPickerValue = this.datePickerService.hasValue() ? this.datePickerService.value : null;
        }
        if (this.inline) {
            return;
        }
        if (!this.realOpenState && !this.disabled) {
            this.updateInputWidthAndArrowLeft();
            this.overlayOpen = true;
            this.openChange.emit(true);
            this.updateCssContainer();
            this.cdr.markForCheck();
        }
    }
    close() {
        if (this.inline || this.isRange) {
            return;
        }
        else {
            this.p_Close();
        }
    }
    p_Close() {
        if (this.realOpenState) {
            this.overlayOpen = false;
            this.focused = false;
            this.stateChanges.next();
            this.openChange.emit(false);
            this.onTouchedFn();
            this.updateCssContainer();
        }
    }
    showClear() {
        return !this.disabled && !this.isEmptyValue(this.datePickerService.value) && this.allowClear;
    }
    checkAndClose() {
        if (!this.realOpenState) {
            return;
        }
        if (this.panel.isAllowed(this.datePickerService.value, true)) {
            if (Array.isArray(this.datePickerService.value) && wrongSortOrder(this.datePickerService.value)) {
                const index = this.datePickerService.getActiveIndex();
                const value = this.datePickerService.value[index];
                this.panel.changeValueFromSelect(value, true);
                return;
            }
            if (!this.isRange) {
                //cập nhật modelchange khi đóng popup
                if (this.showTime) {
                    this.updateInputValue();
                    this.datePickerService.emitValue$.next();
                }
                else
                    this.close();
            }
        }
        else {
            this.datePickerService.setValue(this.datePickerService.initialValue);
            this.close();
        }
    }
    onClickInputBox(event) {
        event.stopPropagation();
        this.focus();
        if (!this.isOpenHandledByUser()) {
            this.open();
        }
    }
    onOverlayKeydown(event) {
        if (event.keyCode === ESCAPE) {
            this.datePickerService.initValue();
        }
    }
    // NOTE: A issue here, the first time position change, the animation will not be triggered.
    // Because the overlay's "positionChange" event is emitted after the content's full shown up.
    // All other components like "tds-dropdown" which depends on overlay also has the same issue.
    // See: https://github.com/NG-ZORRO/ng-zorro-antd/issues/1429
    onPositionChange(position) {
        this.currentPositionX = position.connectionPair.originX;
        this.currentPositionY = position.connectionPair.originY;
        this.cdr.detectChanges(); // Take side-effects to position styles
    }
    onClickClear(event) {
        event.preventDefault();
        event.stopPropagation();
        this.datePickerService.initValue(true);
        this.datePickerService.emitValue$.next();
    }
    updateInputValue() {
        const newValue = this.datePickerService.value;
        if (this.isRange) {
            this.inputValue = newValue ? newValue.map(v => this.formatValue(v)) : ['', ''];
        }
        else {
            this.inputValue = this.formatValue(newValue);
        }
        this.cdr.markForCheck();
    }
    formatValue(value) {
        return this.dateHelper.format(value && value.nativeDate, this.format);
    }
    onInputChange(value, isEnter = false) {
        /**
         * in IE11 focus/blur will trigger ngModelChange if placeholder changes,
         * so we forbidden IE11 to open panel through input change
         */
        if (!this.platform.TRIDENT &&
            this.document.activeElement === this.getInput(this.datePickerService.activeInput) &&
            !this.realOpenState) {
            this.open();
            return;
        }
        const date = this.checkValidDate(value);
        // Can only change date when it's open
        if (date && this.realOpenState) {
            this.panel.changeValueFromSelect(date, isEnter);
        }
    }
    onKeyupEnter(event) {
        this.onInputChange(event.target.value, true);
    }
    checkValidDate(value) {
        const date = new CandyDate(this.dateHelper.parseDate(value, this.format));
        if (!date.isValid() || value !== this.dateHelper.format(date.nativeDate, this.format)) {
            return null;
        }
        return date;
    }
    getPlaceholder(partType) {
        return this.isRange ? this.placeholder[this.datePickerService.getActiveIndex(partType)] : this.placeholder;
    }
    isEmptyValue(value) {
        if (value === null) {
            return true;
        }
        else if (this.isRange) {
            return !value || !Array.isArray(value) || value.every(val => !val);
        }
        else {
            return !value;
        }
    }
    // Whether open state is permanently controlled by user himself
    isOpenHandledByUser() {
        return this.isOpen !== undefined;
    }
    ngOnInit() {
        this.updateCssContainer();
        // Subscribe the every locale change if the locale is not handled by user
        if (!this.locale) {
            this.i18n.localeChange.pipe(takeUntil(this.destroyed$)).subscribe(() => this.setLocale());
        }
        // Default value
        this.datePickerService.isRange = this.isRange;
        this.datePickerService.initValue(true);
        this.datePickerService.emitValue$.pipe(takeUntil(this.destroyed$)).subscribe(_ => {
            const value = this.datePickerService.value;
            this.datePickerService.initialValue = cloneDate(value);
            if (this.isRange) {
                const vAsRange = value;
                if (TDSHelperArray.hasListValue(vAsRange)) {
                    this.onChangeFn([vAsRange[0]?.nativeDate ?? null, vAsRange[1]?.nativeDate ?? null]);
                }
                else {
                    this.onChangeFn([]);
                }
            }
            else {
                if (value) {
                    this.onChangeFn(value.nativeDate);
                }
                else {
                    this.onChangeFn(null);
                }
            }
            this.onTouchedFn();
            // When value emitted, overlay will be closed
            this.close();
        });
        this.directionality.change?.pipe(takeUntil(this.destroyed$)).subscribe((direction) => {
            this.dir = direction;
            this.cdr.detectChanges();
        });
        this.dir = this.directionality.value;
        this.inputValue = this.isRange ? ['', ''] : '';
        this.setModeAndFormat();
        this.datePickerService.valueChange$.pipe(takeUntil(this.destroy$)).subscribe(() => {
            this.updateInputValue();
        });
    }
    ngOnChanges(changes) {
        if (changes.popupStyle) {
            // Always assign the popup style patch
            this.popupStyle = this.popupStyle ? { ...this.popupStyle, ...POPUP_STYLE_PATCH } : POPUP_STYLE_PATCH;
        }
        // Mark as customized placeholder by user once placeholder assigned at the first time
        if (changes.placeholder?.currentValue) {
            this.isCustomPlaceHolder = true;
        }
        if (changes.format?.currentValue) {
            this.isCustomFormat = true;
        }
        if (changes.locale) {
            // The locale is currently handled by user
            this.setDefaultPlaceHolder();
        }
        if (changes.renderExtraFooter) {
            this.extraFooter = valueFunctionProp(this.renderExtraFooter);
        }
        if (changes.mode) {
            this.setDefaultPlaceHolder();
            this.setModeAndFormat();
        }
    }
    ngOnDestroy() {
        this.destroyed$.next();
        this.destroyed$.complete();
    }
    setModeAndFormat() {
        const local = this.i18n.getLocale();
        let inputFormats = {
            year: 'yyyy',
            month: 'yyyy/MM',
            week: this.i18n.getDateLocale() ? 'RRRR/II' : 'yyyy/ww',
            date: this.showTime ? 'yyyy/MM/dd HH:mm:ss' : 'yyyy/MM/dd'
        };
        if (TDSHelperObject.hasValue(local)) {
            inputFormats = {
                year: local.DatePicker.lang.yearFormat ? local.DatePicker.lang.yearFormat : 'yyyy',
                month: local.DatePicker.lang.monthFormat ? local.DatePicker.lang.monthFormat : 'yyyy/MM',
                week: this.i18n.getDateLocale() ? 'RRRR/II' : 'ww',
                date: this.showTime ? local.DatePicker.lang.dateTimeFormat : local.DatePicker.lang.dateFormat
            };
        }
        if (!this.mode) {
            this.mode = 'date';
        }
        this.panelMode = this.isRange ? [this.mode, this.mode] : this.mode;
        // Default format when it's empty
        if (!this.isCustomFormat) {
            this.format = inputFormats[this.mode];
        }
        this.inputSize = Math.max(10, this.format.length) + 2;
        this.updateInputValue();
    }
    /**
     * Triggered when overlayOpen changes (different with realOpenState)
     * @param open The overlayOpen in picker component
     */
    onOpenChange(open) {
        this.openChange.emit(open);
    }
    writeValue(value) {
        //  lỗi không binding dc data khi dùng formcontrol, do gọi writevalue trước ngOnInit
        setTimeout(() => {
            this.setValue(value);
            this.cdr.markForCheck();
        }, 0);
    }
    registerOnChange(fn) {
        this.onChangeFn = fn;
    }
    registerOnTouched(fn) {
        this.onTouchedFn = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this.cdr.markForCheck();
    }
    // ------------------------------------------------------------------------
    // | Internal methods
    // ------------------------------------------------------------------------
    // Reload locale from i18n with side effects
    setLocale() {
        this.locale = this.i18n.getLocaleData('DatePicker', {});
        this.setDefaultPlaceHolder();
        this.cdr.markForCheck();
    }
    setDefaultPlaceHolder() {
        if (!this.isCustomPlaceHolder && this.locale) {
            const defaultPlaceholder = {
                year: this.getPropertyOfLocale('yearPlaceholder'),
                month: this.getPropertyOfLocale('monthPlaceholder'),
                week: this.getPropertyOfLocale('weekPlaceholder'),
                date: this.getPropertyOfLocale('placeholder')
            };
            const defaultRangePlaceholder = {
                year: this.getPropertyOfLocale('rangeYearPlaceholder'),
                month: this.getPropertyOfLocale('rangeMonthPlaceholder'),
                week: this.getPropertyOfLocale('rangeWeekPlaceholder'),
                date: this.getPropertyOfLocale('rangePlaceholder')
            };
            this.placeholder = this.isRange
                ? defaultRangePlaceholder[this.mode]
                : defaultPlaceholder[this.mode];
        }
    }
    getPropertyOfLocale(type) {
        return this.locale.lang[type] || this.i18n.getLocaleData(`DatePicker.lang.${type}`);
    }
    // Safe way of setting value with default
    setValue(value) {
        const newValue = this.datePickerService.makeValue(value);
        this.datePickerService.setValue(newValue);
        this.datePickerService.initialValue = newValue;
    }
    renderClass(value) {
        // TODO: avoid autoFocus cause change after checked error
        if (value) {
            this.renderer.addClass(this.elementRef.nativeElement, 'tds-picker-focused');
        }
        else {
            this.renderer.removeClass(this.elementRef.nativeElement, 'tds-picker-focused');
        }
    }
    onPanelModeChange(panelMode) {
        this.panelChange.emit(panelMode);
    }
    // Emit calendarChange when select date by tds-range-picker
    _calendarChange(value) {
        if (this.isRange && Array.isArray(value)) {
            const rangeValue = value.filter(x => x instanceof CandyDate).map(x => x.nativeDate);
            this.calendarChange.emit(rangeValue);
        }
    }
    onResultOk() {
        if (this.isRange) {
            const value = this.datePickerService.value;
            if (value.length) {
                this.ok.emit([value[0]?.nativeDate || null, value[1]?.nativeDate || null]);
            }
            else {
                this.ok.emit([]);
            }
            if (!this.showTime || this.panel.isAllowed(this.datePickerService.value, true))
                this.p_Close();
        }
        else {
            if (this.datePickerService.value) {
                this.ok.emit(this.datePickerService.value.nativeDate);
            }
            else {
                this.ok.emit(null);
            }
        }
    }
    onResultCancel() {
        this.datePickerService.setValue(this.currentPickerValue);
        this.datePickerService.emitValue$.next();
        this.p_Close();
    }
    ngDoCheck() {
        if (this.ngControl) {
            this.updateErrorState();
        }
    }
    updateErrorState() {
        const oldState = this.errorState;
        const parent = this._parentFormGroup || this._parentForm;
        // const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;
        const control = this.ngControl ? this.ngControl.control : null;
        const newState = this._isErrorState(control, parent);
        if (newState !== oldState) {
            this.errorState = newState;
            this.stateChanges.next();
            this.cdr.markForCheck();
        }
    }
    _isErrorState(control, form) {
        return TDSIsErrorState(control, form);
    }
    // get errorState(): boolean {
    //   return this.ngControl && this.ngControl.errors !== null && !!this.ngControl.touched;
    // }
    setDescribedByIds(ids) {
        // if (ids.length) {
        //   this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));
        // } else {
        //   this._elementRef.nativeElement.removeAttribute('aria-describedby');
        // }
    }
    onContainerClick(e) {
        // e.preventDefault();
        // e.stopPropagation();
    }
    onClickOutside(e) {
        e.preventDefault();
        e.stopPropagation();
        this.checkAndClose();
    }
    updateCssContainer() {
        this.tdsCssContainer = '';
        if (!this.parentIsFormField) {
            this.tdsCssContainer += 'border  rounded bg-white dark:bg-d-neutral-3-50';
            if (this.overlayOpen) {
                this.tdsCssContainer += ' outline-none ring-opacity-20 ring ring-primary-1 border-primary-1';
            }
            else {
                this.tdsCssContainer += ' border-neutral-2-200 dark:border-d-neutral-2-200';
            }
        }
        this.tdsCssContainer += ` ${this.tdsClass}`;
    }
}
TDSDatePickerComponent.ɵfac = function TDSDatePickerComponent_Factory(t) { return new (t || TDSDatePickerComponent)(i0.ɵɵdirectiveInject(i1.TDSConfigService), i0.ɵɵdirectiveInject(i2.DatePickerService), i0.ɵɵdirectiveInject(i3.TDSI18nService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i3.DateHelperService), i0.ɵɵdirectiveInject(i4.TDSResizeObserver), i0.ɵɵdirectiveInject(i5.Platform), i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(i6.Directionality, 8), i0.ɵɵdirectiveInject(TDS_FORM_FIELD, 9), i0.ɵɵdirectiveInject(i7.NgControl, 10), i0.ɵɵdirectiveInject(i7.NgForm, 8), i0.ɵɵdirectiveInject(i7.FormGroupDirective, 8)); };
TDSDatePickerComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSDatePickerComponent, selectors: [["tds-date-picker"], ["tds-week-picker"], ["tds-month-picker"], ["tds-year-picker"], ["tds-range-picker"]], viewQuery: function TDSDatePickerComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(CdkConnectedOverlay, 5);
        i0.ɵɵviewQuery(DateRangePopupComponent, 5);
        i0.ɵɵviewQuery(_c0, 5);
        i0.ɵɵviewQuery(_c1, 5);
        i0.ɵɵviewQuery(_c2, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.cdkConnectedOverlay = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.panel = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.separatorElement = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.pickerInput = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.rangePickerInputs = _t);
    } }, hostAttrs: [1, "w-full", "block", "relative", "box-border", "m-0", "p-0"], hostVars: 12, hostBindings: function TDSDatePickerComponent_HostBindings(rf, ctx) { if (rf & 1) {
        i0.ɵɵlistener("click", function TDSDatePickerComponent_click_HostBindingHandler($event) { return ctx.onClickInputBox($event); });
    } if (rf & 2) {
        i0.ɵɵclassProp("tds-picker", true)("tds-picker-range", ctx.isRange)("tds-picker-disabled", ctx.disabled)("tds-picker-rtl", ctx.dir === "rtl")("tds-picker-borderless", ctx.borderless)("tds-picker-inline", ctx.inline);
    } }, inputs: { allowClear: "allowClear", autoFocus: "autoFocus", disabled: "disabled", borderless: "borderless", inputReadOnly: "inputReadOnly", inline: "inline", isOpen: "isOpen", disabledDate: "disabledDate", locale: "locale", placeholder: "placeholder", popupStyle: "popupStyle", dropdownClassName: "dropdownClassName", format: "format", dateRender: "dateRender", disabledTime: "disabledTime", renderExtraFooter: "renderExtraFooter", showToday: "showToday", mode: "mode", showNow: "showNow", ranges: "ranges", defaultPickerValue: "defaultPickerValue", deparator: "deparator", suffixIcon: "suffixIcon", backdrop: "backdrop", id: "id", tdsClass: "tdsClass", size: "size", showTime: "showTime", required: "required" }, outputs: { panelChange: "panelChange", calendarChange: "calendarChange", ok: "ok", openChange: "openChange" }, exportAs: ["tdsDatePicker"], features: [i0.ɵɵProvidersFeature([
            DatePickerService,
            {
                provide: TDSFormFieldControl,
                useExisting: forwardRef(() => TDSDatePickerComponent)
            }
        ]), i0.ɵɵNgOnChangesFeature], decls: 10, vars: 7, consts: [[4, "ngIf", "ngIfElse"], ["tplRangeInput", ""], ["tplRightRest", ""], ["inlineMode", ""], ["inlineModeContent", ""], ["cdkConnectedOverlay", "", 3, "cdkConnectedOverlayHasBackdrop", "cdkConnectedOverlayOrigin", "cdkConnectedOverlayOpen", "cdkConnectedOverlayPositions", "cdkConnectedOverlayTransformOriginOn", "positionChange", "detach", "overlayKeydown", "overlayOutsideClick"], ["class", "flex items-stretch w-full group ", 3, "class", 4, "ngIf"], [4, "ngIf"], [1, "flex", "items-stretch", "w-full", "group"], [1, "flex-auto", "flex", "items-center", 3, "ngClass"], [1, "text-body-2", "font-regular", "text-neutral-1-40", "focus:outline-none", "focus:border-transparent", "shadow-none", "border-0", "bg-transparent", "text-current", "pl-0", "pb-0", "pt-0", "m-0", "w-full", "outline-none", "box-border", "placeholder:text-neutral-1-400", "dark:placeholder:text-d-neutral-1-400", 3, "disabled", "readOnly", "ngModel", "placeholder", "ngModelChange", "focus", "focusout", "keyup.enter"], ["pickerInput", ""], [4, "ngTemplateOutlet"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], ["separatorElement", ""], ["defaultSeparator", ""], [1, "text-body-2", "font-regular", "text-neutral-1-40", "border-b", "border-transparent", "focus:outline-none", "focus:border-b", "focus:border-primary-1", "dark:focus:border-d-primary-1", "shadow-none", "bg-transparent", "text-current", "pl-0", "pb-0", "pt-0", "m-0", "w-full", "outline-none", "box-border", "placeholder:text-neutral-1-400", "dark:placeholder:text-d-neutral-1-400", 3, "disabled", "readOnly", "size", "ngModel", "placeholder", "click", "focusout", "focus", "keyup.enter", "ngModelChange"], ["rangePickerInput", ""], [3, "class", "ngClass", "click", 4, "ngIf"], [2, "border-top-right-radius", "0.2rem", "border-bottom-right-radius", "0.2rem", 3, "ngClass"], [4, "tdsStringTemplateOutlet"], [3, "ngClass", "click"], [1, "tdsi-close-fill", "text-base", "leading-4", "text-neutral-1-500"], [1, "text-lg", "leading-5", "text-neutral-1-900", "dark:text-d-neutral-1-900", 3, "ngClass"], [1, "tds-picker-wrapper", "shadow-1-xl", "overflow-auto", "bg-white", "dark:bg-d-neutral-3-300", "box-border", "rounded", "w-full", 2, "position", "relative"], [1, "tds-picker-wrapper", "pt-3", "overflow-auto", "bg-white", "dark:bg-d-neutral-3-300", "box-border", "rounded", "min-w-[266px]", 2, "position", "relative"], [3, "ngStyle"], [3, "isRange", "inline", "defaultPickerValue", "showWeek", "panelMode", "locale", "showToday", "showNow", "showTime", "dateRender", "disabledDate", "disabledTime", "extraFooter", "ranges", "dir", "panelModeChange", "calendarChange", "resultOk", "resultCancel"]], template: function TDSDatePickerComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtemplate(0, TDSDatePickerComponent_ng_container_0_Template, 3, 2, "ng-container", 0);
        i0.ɵɵtemplate(1, TDSDatePickerComponent_ng_template_1_Template, 2, 5, "ng-template", null, 1, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtemplate(3, TDSDatePickerComponent_ng_template_3_Template, 3, 10, "ng-template", null, 2, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtemplate(5, TDSDatePickerComponent_ng_template_5_Template, 2, 2, "ng-template", null, 3, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtemplate(7, TDSDatePickerComponent_ng_template_7_Template, 2, 36, "ng-template", null, 4, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtemplate(9, TDSDatePickerComponent_ng_template_9_Template, 1, 1, "ng-template", 5);
        i0.ɵɵlistener("positionChange", function TDSDatePickerComponent_Template_ng_template_positionChange_9_listener($event) { return ctx.onPositionChange($event); })("detach", function TDSDatePickerComponent_Template_ng_template_detach_9_listener() { return ctx.close(); })("overlayKeydown", function TDSDatePickerComponent_Template_ng_template_overlayKeydown_9_listener($event) { return ctx.onOverlayKeydown($event); })("overlayOutsideClick", function TDSDatePickerComponent_Template_ng_template_overlayOutsideClick_9_listener($event) { return ctx.onClickOutside($event); });
    } if (rf & 2) {
        const _r5 = i0.ɵɵreference(6);
        i0.ɵɵproperty("ngIf", !ctx.inline)("ngIfElse", _r5);
        i0.ɵɵadvance(9);
        i0.ɵɵproperty("cdkConnectedOverlayHasBackdrop", ctx.backdrop)("cdkConnectedOverlayOrigin", ctx.origin)("cdkConnectedOverlayOpen", ctx.realOpenState)("cdkConnectedOverlayPositions", ctx.overlayPositions)("cdkConnectedOverlayTransformOriginOn", ".tds-picker-wrapper");
    } }, directives: [i8.NgIf, i8.NgClass, i7.DefaultValueAccessor, i7.NgControlStatus, i7.NgModel, i8.NgTemplateOutlet, i9.TDSStringTemplateOutletDirective, i8.NgStyle, i10.DateRangePopupComponent, i6.Dir, i11.CdkConnectedOverlay], encapsulation: 2, data: { animation: [slideMotion] }, changeDetection: 0 });
__decorate([
    InputBoolean()
], TDSDatePickerComponent.prototype, "allowClear", void 0);
__decorate([
    InputBoolean()
], TDSDatePickerComponent.prototype, "autoFocus", void 0);
__decorate([
    InputBoolean()
], TDSDatePickerComponent.prototype, "disabled", void 0);
__decorate([
    InputBoolean()
], TDSDatePickerComponent.prototype, "borderless", void 0);
__decorate([
    InputBoolean()
], TDSDatePickerComponent.prototype, "inputReadOnly", void 0);
__decorate([
    InputBoolean()
], TDSDatePickerComponent.prototype, "inline", void 0);
__decorate([
    InputBoolean()
], TDSDatePickerComponent.prototype, "isOpen", void 0);
__decorate([
    InputBoolean()
], TDSDatePickerComponent.prototype, "showToday", void 0);
__decorate([
    InputBoolean()
], TDSDatePickerComponent.prototype, "showNow", void 0);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSDatePickerComponent, [{
        type: Component,
        args: [{ encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, selector: 'tds-date-picker,tds-week-picker,tds-month-picker,tds-year-picker,tds-range-picker', exportAs: 'tdsDatePicker', host: {
                    '[class.tds-picker]': `true`,
                    '[class.tds-picker-range]': `isRange`,
                    '[class.tds-picker-disabled]': `disabled`,
                    '[class.tds-picker-rtl]': `dir === 'rtl'`,
                    '[class.tds-picker-borderless]': `borderless`,
                    '[class.tds-picker-inline]': `inline`,
                    'class': 'w-full block relative box-border m-0 p-0',
                    '(click)': 'onClickInputBox($event)',
                }, providers: [
                    DatePickerService,
                    {
                        provide: TDSFormFieldControl,
                        useExisting: forwardRef(() => TDSDatePickerComponent)
                    }
                ], animations: [slideMotion], template: "<ng-container *ngIf=\"!inline; else inlineMode\">\r\n    <!-- Content of single picker -->\r\n    <div *ngIf=\"!isRange\" class=\"flex items-stretch w-full group \" [class]=\"tdsCssContainer\">\r\n        <div class=\"flex-auto flex items-center\" [ngClass]=\"{\r\n      'pl-2.5 py-1':size ==='sm', \r\n      'pl-3 py-1.5':size ==='md' ,                                              \r\n      'pl-4 py-2':size ==='lg'        \r\n  }\">\r\n            <input #pickerInput\r\n                class=\"text-body-2 font-regular text-neutral-1-40 focus:outline-none focus:border-transparent shadow-none border-0 bg-transparent text-current pl-0 pb-0 pt-0 m-0 w-full outline-none  box-border placeholder:text-neutral-1-400 dark:placeholder:text-d-neutral-1-400\"\r\n                [attr.id]=\"id\" [class.tds-input-disabled]=\"disabled\" [disabled]=\"disabled\" [readOnly]=\"inputReadOnly\"\r\n                [(ngModel)]=\"inputValue\" placeholder=\"{{ getPlaceholder() }}\" (focus)=\"onFocus($event)\"\r\n                (focusout)=\"onFocusout($event)\" (ngModelChange)=\"onInputChange($event)\"\r\n                (keyup.enter)=\"onKeyupEnter($event)\" />\r\n        </div>\r\n        <ng-container *ngTemplateOutlet=\"tplRightRest\"></ng-container>\r\n    </div>\r\n    <!-- Content of range picker -->\r\n    <ng-container *ngIf=\"isRange\">\r\n        <div class=\"flex items-stretch w-full group\"\r\n        [class]=\"tdsCssContainer\">\r\n            <div class=\"flex-auto flex items-center\" [ngClass]=\"{\r\n      'pl-2.5 py-1':size ==='sm', \r\n      'pl-3 py-1.5':size ==='md' ,                                              \r\n      'pl-4 py-2':size ==='lg'        \r\n  }\">\r\n                <div class=\"{{ prefixCls }}-input\">\r\n                    <ng-container *ngTemplateOutlet=\"tplRangeInput; context: { partType: 'left' }\"></ng-container>\r\n                </div>\r\n                <div #separatorElement class=\"{{ prefixCls }}-range-separator\">\r\n                    <span class=\"{{ prefixCls }}-separator\">\r\n                        <ng-container *ngIf=\"deparator; else defaultSeparator\">{{ deparator }}</ng-container>\r\n                    </span>\r\n                    <ng-template #defaultSeparator>\r\n                        <span> - </span>\r\n                    </ng-template>\r\n                </div>\r\n                <div class=\"{{ prefixCls }}-input pl-2\">\r\n                    <ng-container *ngTemplateOutlet=\"tplRangeInput; context: { partType: 'right' }\"></ng-container>\r\n                </div>\r\n            </div>\r\n            <ng-container *ngTemplateOutlet=\"tplRightRest\"></ng-container>\r\n        </div>\r\n\r\n\r\n    </ng-container>\r\n</ng-container>\r\n<!-- Input for Range ONLY -->\r\n<ng-template #tplRangeInput let-partType=\"partType\">\r\n    <input #rangePickerInput\r\n        class=\"text-body-2 font-regular text-neutral-1-40 border-b border-transparent focus:outline-none focus:border-b focus:border-primary-1 dark:focus:border-d-primary-1 shadow-none  bg-transparent text-current pl-0 pb-0 pt-0 m-0 w-full outline-none  box-border placeholder:text-neutral-1-400 dark:placeholder:text-d-neutral-1-400\"\r\n        [disabled]=\"disabled\" [readOnly]=\"inputReadOnly\" [size]=\"inputSize\" (click)=\"onClickInputBox($event)\"\r\n        (focusout)=\"onFocusout($event)\" (focus)=\"onFocus($event, partType)\" (keyup.enter)=\"onKeyupEnter($event)\"\r\n        [(ngModel)]=\"inputValue[datePickerService.getActiveIndex(partType)]\" (ngModelChange)=\"onInputChange($event)\"\r\n        [placeholder]=\"getPlaceholder(partType)\" />\r\n</ng-template>\r\n\r\n<!-- Right operator icons -->\r\n<ng-template #tplRightRest>\r\n\r\n    <div *ngIf=\"showClear()\" class=\"{{ prefixCls }}-clear flex items-center cursor-pointer\"\r\n        (click)=\"onClickClear($event)\" [ngClass]=\"{\r\n      'px-1':size ==='sm',\r\n      'px-1.5':size ==='md',                                          \r\n      'px-2':size ==='lg'\r\n  }\">\r\n        <span class=\"tdsi-close-fill text-base leading-4 text-neutral-1-500\"></span>\r\n    </div>\r\n    <div class=\"{{ prefixCls }}-suffix text-neutral-1-900 dark:text-d-neutral-1-900  group-hover:bg-neutral-3-50 dark:group-hover:bg-d-neutral-3-200 flex items-center  group-hover:border-transparent\"\r\n        style=\"border-top-right-radius: 0.2rem;border-bottom-right-radius: 0.2rem;\" [ngClass]=\"{\r\n        'px-1':size ==='sm',\r\n        'px-1.5':size ==='md',                                          \r\n        'px-2':size ==='lg'\r\n    }\">\r\n        <ng-container *tdsStringTemplateOutlet=\"suffixIcon; let suffixIcon\">\r\n            <span [ngClass]=\"suffixIcon\" class=\"text-lg leading-5 text-neutral-1-900 dark:text-d-neutral-1-900\"></span>\r\n        </ng-container>\r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template #inlineMode>\r\n    <ng-container *ngIf=\"!inline\">\r\n        <div class=\"tds-picker-wrapper  shadow-1-xl overflow-auto bg-white dark:bg-d-neutral-3-300 box-border  rounded w-full\"\r\n             [@slideMotion]=\"'enter'\" style=\"position: relative;\">\r\n            <ng-container *ngTemplateOutlet=\"inlineModeContent\"></ng-container>\r\n        </div>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"inline\">\r\n        <div class=\"tds-picker-wrapper pt-3 overflow-auto bg-white dark:bg-d-neutral-3-300 box-border  rounded min-w-[266px]\"\r\n            [style.width]=\"(isRange && !showTime) ? '700px': '100%'\" style=\"position: relative;\">\r\n            <ng-container *ngTemplateOutlet=\"inlineModeContent\"></ng-container>\r\n        </div>\r\n    </ng-container>\r\n</ng-template>\r\n<ng-template #inlineModeContent>\r\n    <div class=\"{{ prefixCls }}-dropdown {{ dropdownClassName }}\" [class.tds-picker-dropdown-rtl]=\"dir === 'rtl'\"\r\n        [class.tds-picker-dropdown-placement-bottomLeft]=\"currentPositionY === 'bottom' && currentPositionX === 'start'\"\r\n        [class.tds-picker-dropdown-placement-topLeft]=\"currentPositionY === 'top' && currentPositionX === 'start'\"\r\n        [class.tds-picker-dropdown-placement-bottomRight]=\"currentPositionY === 'bottom' && currentPositionX === 'end'\"\r\n        [class.tds-picker-dropdown-placement-topRight]=\"currentPositionY === 'top' && currentPositionX === 'end'\"\r\n        [class.tds-picker-dropdown-range]=\"isRange\"\r\n        [class.tds-picker-active-left]=\"datePickerService.activeInput === 'left'\"\r\n        [class.tds-picker-active-right]=\"datePickerService.activeInput === 'right'\" [ngStyle]=\"popupStyle\">\r\n        <date-range-popup [isRange]=\"isRange\" [inline]=\"inline\" [defaultPickerValue]=\"defaultPickerValue\"\r\n            [showWeek]=\"mode === 'week'\" [panelMode]=\"panelMode\" (panelModeChange)=\"onPanelModeChange($event)\"\r\n            (calendarChange)=\"_calendarChange($event)\" [locale]=\"locale.lang!\"\r\n            [showToday]=\"mode === 'date' && showToday && !isRange && !showTime\"\r\n            [showNow]=\"mode === 'date' && showNow && !isRange && !!showTime\" [showTime]=\"showTime\"\r\n            [dateRender]=\"dateRender\" [disabledDate]=\"disabledDate\" [disabledTime]=\"disabledTime\"\r\n            [extraFooter]=\"extraFooter\" [ranges]=\"ranges\" [dir]=\"dir\" (resultOk)=\"onResultOk()\"\r\n            (resultCancel)=\"onResultCancel()\"></date-range-popup>\r\n    </div>\r\n</ng-template>\r\n<!-- Overlay -->\r\n<ng-template cdkConnectedOverlay [cdkConnectedOverlayHasBackdrop]=\"backdrop\" [cdkConnectedOverlayOrigin]=\"origin\"\r\n    [cdkConnectedOverlayOpen]=\"realOpenState\" [cdkConnectedOverlayPositions]=\"overlayPositions\"\r\n    [cdkConnectedOverlayTransformOriginOn]=\"'.tds-picker-wrapper'\" (positionChange)=\"onPositionChange($event)\"\r\n    (detach)=\"close()\" (overlayKeydown)=\"onOverlayKeydown($event)\" (overlayOutsideClick)=\"onClickOutside($event)\">\r\n    <ng-container *ngTemplateOutlet=\"inlineMode\"></ng-container>\r\n</ng-template>" }]
    }], function () { return [{ type: i1.TDSConfigService }, { type: i2.DatePickerService }, { type: i3.TDSI18nService }, { type: i0.ChangeDetectorRef }, { type: i0.Renderer2 }, { type: i0.ElementRef }, { type: i3.DateHelperService }, { type: i4.TDSResizeObserver }, { type: i5.Platform }, { type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }, { type: i6.Directionality, decorators: [{
                type: Optional
            }] }, { type: i12.TDSFormField, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [TDS_FORM_FIELD]
            }, {
                type: Host
            }] }, { type: i7.NgControl, decorators: [{
                type: Optional
            }, {
                type: Self
            }] }, { type: i7.NgForm, decorators: [{
                type: Optional
            }] }, { type: i7.FormGroupDirective, decorators: [{
                type: Optional
            }] }]; }, { allowClear: [{
            type: Input
        }], autoFocus: [{
            type: Input
        }], disabled: [{
            type: Input
        }], borderless: [{
            type: Input
        }], inputReadOnly: [{
            type: Input
        }], inline: [{
            type: Input
        }], isOpen: [{
            type: Input
        }], disabledDate: [{
            type: Input
        }], locale: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], popupStyle: [{
            type: Input
        }], dropdownClassName: [{
            type: Input
        }], format: [{
            type: Input
        }], dateRender: [{
            type: Input
        }], disabledTime: [{
            type: Input
        }], renderExtraFooter: [{
            type: Input
        }], showToday: [{
            type: Input
        }], mode: [{
            type: Input
        }], showNow: [{
            type: Input
        }], ranges: [{
            type: Input
        }], defaultPickerValue: [{
            type: Input
        }], deparator: [{
            type: Input
        }], suffixIcon: [{
            type: Input
        }], backdrop: [{
            type: Input
        }], id: [{
            type: Input
        }], tdsClass: [{
            type: Input
        }], size: [{
            type: Input
        }], panelChange: [{
            type: Output
        }], calendarChange: [{
            type: Output
        }], ok: [{
            type: Output
        }], openChange: [{
            type: Output
        }], showTime: [{
            type: Input
        }], cdkConnectedOverlay: [{
            type: ViewChild,
            args: [CdkConnectedOverlay, { static: false }]
        }], panel: [{
            type: ViewChild,
            args: [DateRangePopupComponent, { static: false }]
        }], separatorElement: [{
            type: ViewChild,
            args: ['separatorElement', { static: false }]
        }], pickerInput: [{
            type: ViewChild,
            args: ['pickerInput', { static: false }]
        }], rangePickerInputs: [{
            type: ViewChildren,
            args: ['rangePickerInput']
        }], required: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;base64,