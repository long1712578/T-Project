import { Directive, EventEmitter, Input, Output } from '@angular/core';
import { CandyDate } from 'tds-ui/core/time';
import { isNonEmptyString, isTemplateRef } from 'tds-ui/core/util';
import * as i0 from "@angular/core";
// tslint:disable-next-line:directive-class-suffix
export class AbstractTable {
    constructor() {
        this.isTemplateRef = isTemplateRef;
        this.isNonEmptyString = isNonEmptyString;
        this.headRow = [];
        this.bodyRows = [];
        this.MAX_ROW = 6;
        this.MAX_COL = 7;
        this.prefixCls = 'tds-picker';
        this.activeDate = new CandyDate();
        this.showWeek = false;
        this.selectedValue = []; // Range ONLY
        this.hoverValue = []; // Range ONLY
        this.valueChange = new EventEmitter();
        this.cellHover = new EventEmitter(); // Emitted when hover on a day by mouse enter
    }
    render() {
        if (this.activeDate) {
            this.headRow = this.makeHeadRow();
            this.bodyRows = this.makeBodyRows();
        }
    }
    trackByBodyRow(_index, item) {
        return item.trackByIndex;
    }
    trackByBodyColumn(_index, item) {
        return item.trackByIndex;
    }
    hasRangeValue() {
        return this.selectedValue?.length > 0 || this.hoverValue?.length > 0;
    }
    getClassMap(cell) {
        return {
            [`tds-picker-cell `]: true,
            [`tds-picker-cell-in-view`]: true,
            [`tds-picker-cell-selected`]: cell.isSelected,
            [`tds-picker-cell-disabled`]: cell.isDisabled,
            [`tds-picker-cell-in-range`]: !!cell.isInSelectedRange,
            [`tds-picker-cell-range-start`]: !!cell.isSelectedStart,
            [`tds-picker-cell-range-end`]: !!cell.isSelectedEnd,
            [`tds-picker-cell-range-start-single`]: !!cell.isStartSingle,
            [`tds-picker-cell-range-end-single`]: !!cell.isEndSingle,
            [`tds-picker-cell-range-hover`]: !!cell.isInHoverRange,
            [`tds-picker-cell-range-hover-start`]: !!cell.isHoverStart,
            [`tds-picker-cell-range-hover-end`]: !!cell.isHoverEnd,
            [`tds-picker-cell-range-hover-edge-start`]: !!cell.isFirstCellInPanel,
            [`tds-picker-cell-range-hover-edge-end`]: !!cell.isLastCellInPanel,
            [`tds-picker-cell-range-start-near-hover`]: !!cell.isRangeStartNearHover,
            [`tds-picker-cell-range-end-near-hover`]: !!cell.isRangeEndNearHover,
        };
    }
    ngOnInit() {
        this.render();
    }
    ngOnChanges(changes) {
        if (changes.activeDate && !changes.activeDate.currentValue) {
            this.activeDate = new CandyDate();
        }
        if (changes.disabledDate ||
            changes.locale ||
            changes.showWeek ||
            this.isDateRealChange(changes.activeDate) ||
            this.isDateRealChange(changes.value) ||
            this.isDateRealChange(changes.selectedValue) ||
            this.isDateRealChange(changes.hoverValue)) {
            this.render();
        }
    }
    isDateRealChange(change) {
        if (change) {
            const previousValue = change.previousValue;
            const currentValue = change.currentValue;
            if (Array.isArray(currentValue)) {
                return (!Array.isArray(previousValue) ||
                    currentValue.length !== previousValue.length ||
                    currentValue.some((value, index) => {
                        const previousCandyDate = previousValue[index];
                        return previousCandyDate instanceof CandyDate ? previousCandyDate.isSameDay(value) : previousCandyDate !== value;
                    }));
            }
            else {
                return !this.isSameDate(previousValue, currentValue);
            }
        }
        return false;
    }
    isSameDate(left, right) {
        return (!left && !right) || (left && right && right.isSameDay(left));
    }
}
AbstractTable.ɵfac = function AbstractTable_Factory(t) { return new (t || AbstractTable)(); };
AbstractTable.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: AbstractTable, inputs: { prefixCls: "prefixCls", value: "value", locale: "locale", activeDate: "activeDate", showWeek: "showWeek", selectedValue: "selectedValue", hoverValue: "hoverValue", disabledDate: "disabledDate", cellRender: "cellRender", fullCellRender: "fullCellRender" }, outputs: { valueChange: "valueChange", cellHover: "cellHover" }, features: [i0.ɵɵNgOnChangesFeature] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AbstractTable, [{
        type: Directive
    }], null, { prefixCls: [{
            type: Input
        }], value: [{
            type: Input
        }], locale: [{
            type: Input
        }], activeDate: [{
            type: Input
        }], showWeek: [{
            type: Input
        }], selectedValue: [{
            type: Input
        }], hoverValue: [{
            type: Input
        }], disabledDate: [{
            type: Input
        }], cellRender: [{
            type: Input
        }], fullCellRender: [{
            type: Input
        }], valueChange: [{
            type: Output
        }], cellHover: [{
            type: Output
        }] }); })();
//# sourceMappingURL=data:application/json;base64,