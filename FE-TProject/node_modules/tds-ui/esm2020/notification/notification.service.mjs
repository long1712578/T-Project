import { Injectable } from '@angular/core';
import { TDSMNService } from 'tds-ui/message';
import { TDSNotificationContainerComponent } from './notification-container.component';
import { TDSNotificationServiceModule } from './notification.service.module';
import * as i0 from "@angular/core";
import * as i1 from "tds-ui/core/services";
import * as i2 from "@angular/cdk/overlay";
let notificationId = 0;
export class TDSNotificationService extends TDSMNService {
    constructor(tdsSingletonService, overlay, injector) {
        super(tdsSingletonService, overlay, injector);
        this.componentPrefix = 'notification-';
    }
    success(title, content, options) {
        return this.createInstance({ type: 'success', title, content }, options);
    }
    error(title, content, options) {
        return this.createInstance({ type: 'error', title, content }, options);
    }
    info(title, content, options) {
        return this.createInstance({ type: 'info', title, content }, options);
    }
    warning(title, content, options) {
        return this.createInstance({ type: 'warning', title, content }, options);
    }
    blank(title, content, options) {
        return this.createInstance({ type: 'blank', title, content }, options);
    }
    create(type, title, content, options) {
        return this.createInstance({ type, title, content }, options);
    }
    template(template, options) {
        return this.createInstance({ template }, options);
    }
    generateMessageId() {
        return `${this.componentPrefix}-${notificationId++}`;
    }
    createInstance(message, options) {
        this.container = this.withContainer(TDSNotificationContainerComponent);
        return this.container.create({
            ...message,
            ...{
                createdAt: new Date(),
                messageId: this.generateMessageId(),
                options
            }
        });
    }
}
TDSNotificationService.ɵfac = function TDSNotificationService_Factory(t) { return new (t || TDSNotificationService)(i0.ɵɵinject(i1.TDSSingletonService), i0.ɵɵinject(i2.Overlay), i0.ɵɵinject(i0.Injector)); };
TDSNotificationService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: TDSNotificationService, factory: TDSNotificationService.ɵfac, providedIn: TDSNotificationServiceModule });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSNotificationService, [{
        type: Injectable,
        args: [{
                providedIn: TDSNotificationServiceModule
            }]
    }], function () { return [{ type: i1.TDSSingletonService }, { type: i2.Overlay }, { type: i0.Injector }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpY2F0aW9uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy90ZHMtdWkvbm90aWZpY2F0aW9uL25vdGlmaWNhdGlvbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE9BQU8sRUFBRSxVQUFVLEVBQXlCLE1BQU0sZUFBZSxDQUFDO0FBRWxFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM5QyxPQUFPLEVBQUUsaUNBQWlDLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUN2RixPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQzs7OztBQUc3RSxJQUFJLGNBQWMsR0FBRyxDQUFDLENBQUM7QUFLdkIsTUFBTSxPQUFPLHNCQUF1QixTQUFRLFlBQVk7SUFJdEQsWUFBWSxtQkFBd0MsRUFBRSxPQUFnQixFQUFFLFFBQWtCO1FBQ3hGLEtBQUssQ0FBQyxtQkFBbUIsRUFBRSxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFIdEMsb0JBQWUsR0FBRyxlQUFlLENBQUM7SUFJNUMsQ0FBQztJQUVELE9BQU8sQ0FBQyxLQUFhLEVBQUUsT0FBZSxFQUFFLE9BQW9DO1FBQzFFLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQzNFLENBQUM7SUFFRCxLQUFLLENBQUMsS0FBYSxFQUFFLE9BQWUsRUFBRSxPQUFvQztRQUN4RSxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUN6RSxDQUFDO0lBRUQsSUFBSSxDQUFDLEtBQWEsRUFBRSxPQUFlLEVBQUUsT0FBb0M7UUFDdkUsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDeEUsQ0FBQztJQUVELE9BQU8sQ0FBQyxLQUFhLEVBQUUsT0FBZSxFQUFFLE9BQW9DO1FBQzFFLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQzNFLENBQUM7SUFFRCxLQUFLLENBQUMsS0FBYSxFQUFFLE9BQWUsRUFBRSxPQUFvQztRQUN4RSxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUN6RSxDQUFDO0lBRUQsTUFBTSxDQUNKLElBQWlFLEVBQ2pFLEtBQWEsRUFDYixPQUFlLEVBQ2YsT0FBb0M7UUFFcEMsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNoRSxDQUFDO0lBRUQsUUFBUSxDQUFDLFFBQXlCLEVBQUUsT0FBb0M7UUFDdEUsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLEVBQUUsUUFBUSxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUVTLGlCQUFpQjtRQUN6QixPQUFPLEdBQUcsSUFBSSxDQUFDLGVBQWUsSUFBSSxjQUFjLEVBQUUsRUFBRSxDQUFDO0lBQ3ZELENBQUM7SUFFTyxjQUFjLENBQUMsT0FBNEIsRUFBRSxPQUFvQztRQUN2RixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsaUNBQWlDLENBQUMsQ0FBQztRQUV2RSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDO1lBQzNCLEdBQUcsT0FBTztZQUNWLEdBQUc7Z0JBQ0QsU0FBUyxFQUFFLElBQUksSUFBSSxFQUFFO2dCQUNyQixTQUFTLEVBQUUsSUFBSSxDQUFDLGlCQUFpQixFQUFFO2dCQUNuQyxPQUFPO2FBQ1I7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDOzs0RkF4RFUsc0JBQXNCOzRFQUF0QixzQkFBc0IsV0FBdEIsc0JBQXNCLG1CQUZyQiw0QkFBNEI7dUZBRTdCLHNCQUFzQjtjQUhsQyxVQUFVO2VBQUM7Z0JBQ1YsVUFBVSxFQUFFLDRCQUE0QjthQUN6QyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5cclxuaW1wb3J0IHsgT3ZlcmxheSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9vdmVybGF5JztcclxuaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0b3IsIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFREU1NpbmdsZXRvblNlcnZpY2UgfSBmcm9tICd0ZHMtdWkvY29yZS9zZXJ2aWNlcyc7XHJcbmltcG9ydCB7IFREU01OU2VydmljZSB9IGZyb20gJ3Rkcy11aS9tZXNzYWdlJztcclxuaW1wb3J0IHsgVERTTm90aWZpY2F0aW9uQ29udGFpbmVyQ29tcG9uZW50IH0gZnJvbSAnLi9ub3RpZmljYXRpb24tY29udGFpbmVyLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IFREU05vdGlmaWNhdGlvblNlcnZpY2VNb2R1bGUgfSBmcm9tICcuL25vdGlmaWNhdGlvbi5zZXJ2aWNlLm1vZHVsZSc7XHJcbmltcG9ydCB7IFREU05vdGlmaWNhdGlvbkRhdGEsIFREU05vdGlmaWNhdGlvbkRhdGFPcHRpb25zLCBURFNOb3RpZmljYXRpb25SZWYgfSBmcm9tICcuL3R5cGluZ3MnO1xyXG5cclxubGV0IG5vdGlmaWNhdGlvbklkID0gMDtcclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICBwcm92aWRlZEluOiBURFNOb3RpZmljYXRpb25TZXJ2aWNlTW9kdWxlXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBURFNOb3RpZmljYXRpb25TZXJ2aWNlIGV4dGVuZHMgVERTTU5TZXJ2aWNlIHtcclxuICBwcm90ZWN0ZWQgY29udGFpbmVyITogVERTTm90aWZpY2F0aW9uQ29udGFpbmVyQ29tcG9uZW50O1xyXG4gIHByb3RlY3RlZCBjb21wb25lbnRQcmVmaXggPSAnbm90aWZpY2F0aW9uLSc7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHRkc1NpbmdsZXRvblNlcnZpY2U6IFREU1NpbmdsZXRvblNlcnZpY2UsIG92ZXJsYXk6IE92ZXJsYXksIGluamVjdG9yOiBJbmplY3Rvcikge1xyXG4gICAgc3VwZXIodGRzU2luZ2xldG9uU2VydmljZSwgb3ZlcmxheSwgaW5qZWN0b3IpO1xyXG4gIH1cclxuXHJcbiAgc3VjY2Vzcyh0aXRsZTogc3RyaW5nLCBjb250ZW50OiBzdHJpbmcsIG9wdGlvbnM/OiBURFNOb3RpZmljYXRpb25EYXRhT3B0aW9ucyk6IFREU05vdGlmaWNhdGlvblJlZiB7XHJcbiAgICByZXR1cm4gdGhpcy5jcmVhdGVJbnN0YW5jZSh7IHR5cGU6ICdzdWNjZXNzJywgdGl0bGUsIGNvbnRlbnQgfSwgb3B0aW9ucyk7XHJcbiAgfVxyXG5cclxuICBlcnJvcih0aXRsZTogc3RyaW5nLCBjb250ZW50OiBzdHJpbmcsIG9wdGlvbnM/OiBURFNOb3RpZmljYXRpb25EYXRhT3B0aW9ucyk6IFREU05vdGlmaWNhdGlvblJlZiB7XHJcbiAgICByZXR1cm4gdGhpcy5jcmVhdGVJbnN0YW5jZSh7IHR5cGU6ICdlcnJvcicsIHRpdGxlLCBjb250ZW50IH0sIG9wdGlvbnMpO1xyXG4gIH1cclxuXHJcbiAgaW5mbyh0aXRsZTogc3RyaW5nLCBjb250ZW50OiBzdHJpbmcsIG9wdGlvbnM/OiBURFNOb3RpZmljYXRpb25EYXRhT3B0aW9ucyk6IFREU05vdGlmaWNhdGlvblJlZiB7XHJcbiAgICByZXR1cm4gdGhpcy5jcmVhdGVJbnN0YW5jZSh7IHR5cGU6ICdpbmZvJywgdGl0bGUsIGNvbnRlbnQgfSwgb3B0aW9ucyk7XHJcbiAgfVxyXG5cclxuICB3YXJuaW5nKHRpdGxlOiBzdHJpbmcsIGNvbnRlbnQ6IHN0cmluZywgb3B0aW9ucz86IFREU05vdGlmaWNhdGlvbkRhdGFPcHRpb25zKTogVERTTm90aWZpY2F0aW9uUmVmIHtcclxuICAgIHJldHVybiB0aGlzLmNyZWF0ZUluc3RhbmNlKHsgdHlwZTogJ3dhcm5pbmcnLCB0aXRsZSwgY29udGVudCB9LCBvcHRpb25zKTtcclxuICB9XHJcblxyXG4gIGJsYW5rKHRpdGxlOiBzdHJpbmcsIGNvbnRlbnQ6IHN0cmluZywgb3B0aW9ucz86IFREU05vdGlmaWNhdGlvbkRhdGFPcHRpb25zKTogVERTTm90aWZpY2F0aW9uUmVmIHtcclxuICAgIHJldHVybiB0aGlzLmNyZWF0ZUluc3RhbmNlKHsgdHlwZTogJ2JsYW5rJywgdGl0bGUsIGNvbnRlbnQgfSwgb3B0aW9ucyk7XHJcbiAgfVxyXG5cclxuICBjcmVhdGUoXHJcbiAgICB0eXBlOiAnc3VjY2VzcycgfCAnaW5mbycgfCAnd2FybmluZycgfCAnZXJyb3InIHwgJ2JsYW5rJyB8IHN0cmluZyxcclxuICAgIHRpdGxlOiBzdHJpbmcsXHJcbiAgICBjb250ZW50OiBzdHJpbmcsXHJcbiAgICBvcHRpb25zPzogVERTTm90aWZpY2F0aW9uRGF0YU9wdGlvbnNcclxuICApOiBURFNOb3RpZmljYXRpb25SZWYge1xyXG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlSW5zdGFuY2UoeyB0eXBlLCB0aXRsZSwgY29udGVudCB9LCBvcHRpb25zKTtcclxuICB9XHJcblxyXG4gIHRlbXBsYXRlKHRlbXBsYXRlOiBUZW1wbGF0ZVJlZjx7fT4sIG9wdGlvbnM/OiBURFNOb3RpZmljYXRpb25EYXRhT3B0aW9ucyk6IFREU05vdGlmaWNhdGlvblJlZiB7XHJcbiAgICByZXR1cm4gdGhpcy5jcmVhdGVJbnN0YW5jZSh7IHRlbXBsYXRlIH0sIG9wdGlvbnMpO1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIGdlbmVyYXRlTWVzc2FnZUlkKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gYCR7dGhpcy5jb21wb25lbnRQcmVmaXh9LSR7bm90aWZpY2F0aW9uSWQrK31gO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjcmVhdGVJbnN0YW5jZShtZXNzYWdlOiBURFNOb3RpZmljYXRpb25EYXRhLCBvcHRpb25zPzogVERTTm90aWZpY2F0aW9uRGF0YU9wdGlvbnMpOiBURFNOb3RpZmljYXRpb25SZWYge1xyXG4gICAgdGhpcy5jb250YWluZXIgPSB0aGlzLndpdGhDb250YWluZXIoVERTTm90aWZpY2F0aW9uQ29udGFpbmVyQ29tcG9uZW50KTtcclxuXHJcbiAgICByZXR1cm4gdGhpcy5jb250YWluZXIuY3JlYXRlKHtcclxuICAgICAgLi4ubWVzc2FnZSxcclxuICAgICAgLi4ue1xyXG4gICAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKSxcclxuICAgICAgICBtZXNzYWdlSWQ6IHRoaXMuZ2VuZXJhdGVNZXNzYWdlSWQoKSxcclxuICAgICAgICBvcHRpb25zXHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG4iXX0=