import { ChangeDetectionStrategy, Component, EventEmitter, ViewChild, ViewEncapsulation } from '@angular/core';
import { Subject } from 'rxjs';
import { fadeMotion } from 'tds-ui/core/animation';
import { isNotNil } from 'tds-ui/core/util';
import { TDS_IMAGE_FADE_CLASS_NAME_MAP } from './image-config';
import { getClientSize, getFitContentPosition, getOffset } from './utils';
import * as i0 from "@angular/core";
import * as i1 from "tds-ui/core/config";
import * as i2 from "./image-preview-options";
import * as i3 from "@angular/cdk/overlay";
import * as i4 from "tds-ui/button";
import * as i5 from "@angular/cdk/drag-drop";
import * as i6 from "@angular/common";
const _c0 = ["imgRef"];
function TDSImagePreviewComponent_ng_container_8_img_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "img", 13, 14);
} if (rf & 2) {
    const image_r3 = i0.ɵɵnextContext().$implicit;
    const ctx_r5 = i0.ɵɵnextContext();
    i0.ɵɵstyleProp("width", image_r3.width)("height", image_r3.height)("transform", ctx_r5.previewImageTransform);
    i0.ɵɵattribute("src", image_r3.src, i0.ɵɵsanitizeUrl)("srcset", image_r3.srcset, i0.ɵɵsanitizeUrl)("alt", image_r3.alt);
} }
function TDSImagePreviewComponent_ng_container_8_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtemplate(1, TDSImagePreviewComponent_ng_container_8_img_1_Template, 2, 9, "img", 12);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const imageIndex_r4 = ctx.index;
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r0.index === imageIndex_r4);
} }
function TDSImagePreviewComponent_li_10_Template(rf, ctx) { if (rf & 1) {
    const _r10 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "li", 15);
    i0.ɵɵlistener("click", function TDSImagePreviewComponent_li_10_Template_li_click_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r10); const option_r8 = restoredCtx.$implicit; return option_r8.onClick(); });
    i0.ɵɵelement(1, "span", 16);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const option_r8 = ctx.$implicit;
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵclassProp("tds-image-preview-operations-operation-disabled", ctx_r1.zoomOutDisabled && option_r8.type === "zoomOut");
    i0.ɵɵproperty("ngClass", ctx_r1.zoomOutDisabled && option_r8.type === "zoomOut" ? "text-neutral-1-900" : "text-white");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngClass", option_r8.icon);
} }
function TDSImagePreviewComponent_ng_container_11_Template(rf, ctx) { if (rf & 1) {
    const _r12 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "div", 17);
    i0.ɵɵlistener("click", function TDSImagePreviewComponent_ng_container_11_Template_div_click_1_listener($event) { i0.ɵɵrestoreView(_r12); const ctx_r11 = i0.ɵɵnextContext(); return ctx_r11.onSwitchLeft($event); });
    i0.ɵɵelement(2, "span", 18);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(3, "div", 19);
    i0.ɵɵlistener("click", function TDSImagePreviewComponent_ng_container_11_Template_div_click_3_listener($event) { i0.ɵɵrestoreView(_r12); const ctx_r13 = i0.ɵɵnextContext(); return ctx_r13.onSwitchRight($event); });
    i0.ɵɵelement(4, "span", 20);
    i0.ɵɵelementEnd();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵclassProp("tds-image-preview-switch-left-disabled", ctx_r2.index <= 0);
    i0.ɵɵproperty("ngClass", ctx_r2.index <= 0 ? "text-neutral-1-900" : "text-white");
    i0.ɵɵadvance(2);
    i0.ɵɵclassProp("tds-image-preview-switch-right-disabled", ctx_r2.index >= ctx_r2.images.length - 1);
    i0.ɵɵproperty("ngClass", ctx_r2.index >= ctx_r2.images.length - 1 ? "text-neutral-1-900" : "text-white");
} }
const TDS_CONFIG_MODULE_NAME = 'image';
const initialPosition = {
    x: 0,
    y: 0
};
export class TDSImagePreviewComponent {
    constructor(cdr, tdsConfigService, config, overlayRef) {
        this.cdr = cdr;
        this.tdsConfigService = tdsConfigService;
        this.config = config;
        this.overlayRef = overlayRef;
        this.images = [];
        this.index = 0;
        this.isDragging = false;
        this.visible = true;
        this.animationState = 'enter';
        this.animationStateChanged = new EventEmitter();
        this.previewImageTransform = '';
        this.previewImageWrapperTransform = '';
        this.operations = [
            {
                icon: 'tdsi-rotate-left-line',
                onClick: () => {
                    this.onRotateLeft();
                },
                type: 'rotateLeft'
            },
            {
                icon: 'tdsi-rotate-right-line',
                onClick: () => {
                    this.onRotateRight();
                },
                type: 'rotateRight'
            },
            {
                icon: 'tdsi-zoom-out-line',
                onClick: () => {
                    this.onZoomOut();
                },
                type: 'zoomOut'
            },
            {
                icon: 'tdsi-zoom-in-line',
                onClick: () => {
                    this.onZoomIn();
                },
                type: 'zoomIn'
            },
        ];
        this.zoomOutDisabled = false;
        this.position = { ...initialPosition };
        this.containerClick = new EventEmitter();
        this.closeClick = new EventEmitter();
        this.destroy$ = new Subject();
        // TODO: move to host after View Engine deprecation
        this.zoom = this.config.zoom ?? 1;
        this.rotate = this.config.rotate ?? 0;
        this.updateZoomOutDisabled();
        this.updatePreviewImageTransform();
        this.updatePreviewImageWrapperTransform();
    }
    get animationDisabled() {
        return this.config.noAnimation ?? false;
    }
    get maskClosable() {
        const defaultConfig = this.tdsConfigService.getConfigForComponent(TDS_CONFIG_MODULE_NAME) || {};
        return this.config.maskClosable ?? defaultConfig.maskClosable ?? true;
    }
    setImages(images) {
        this.images = images;
        this.cdr.markForCheck();
    }
    switchTo(index) {
        this.index = index;
        this.cdr.markForCheck();
    }
    next() {
        if (this.index < this.images.length - 1) {
            this.reset();
            this.index++;
            this.updatePreviewImageTransform();
            this.updatePreviewImageWrapperTransform();
            this.updateZoomOutDisabled();
            this.cdr.markForCheck();
        }
    }
    prev() {
        if (this.index > 0) {
            this.reset();
            this.index--;
            this.updatePreviewImageTransform();
            this.updatePreviewImageWrapperTransform();
            this.updateZoomOutDisabled();
            this.cdr.markForCheck();
        }
    }
    markForCheck() {
        this.cdr.markForCheck();
    }
    onClose() {
        this.closeClick.emit();
    }
    onZoomIn() {
        this.zoom += 1;
        this.updatePreviewImageTransform();
        this.updateZoomOutDisabled();
        this.position = { ...initialPosition };
    }
    onZoomOut() {
        if (this.zoom > 1) {
            this.zoom -= 1;
            this.updatePreviewImageTransform();
            this.updateZoomOutDisabled();
            this.position = { ...initialPosition };
        }
    }
    onRotateRight() {
        this.rotate += 90;
        this.updatePreviewImageTransform();
    }
    onRotateLeft() {
        this.rotate -= 90;
        this.updatePreviewImageTransform();
    }
    onSwitchLeft(event) {
        event.preventDefault();
        event.stopPropagation();
        this.prev();
    }
    onSwitchRight(event) {
        event.preventDefault();
        event.stopPropagation();
        this.next();
    }
    onContainerClick(e) {
        if (e.target === e.currentTarget && this.maskClosable) {
            this.containerClick.emit();
        }
    }
    onAnimationStart(event) {
        if (event.toState === 'enter') {
            this.setEnterAnimationClass();
        }
        else if (event.toState === 'leave') {
            this.setLeaveAnimationClass();
        }
        this.animationStateChanged.emit(event);
    }
    onAnimationDone(event) {
        if (event.toState === 'enter') {
            this.setEnterAnimationClass();
        }
        else if (event.toState === 'leave') {
            this.setLeaveAnimationClass();
        }
        this.animationStateChanged.emit(event);
    }
    startLeaveAnimation() {
        this.animationState = 'leave';
        this.cdr.markForCheck();
    }
    onDragStarted() {
        this.isDragging = true;
    }
    onDragReleased() {
        this.isDragging = false;
        const width = this.imageRef.nativeElement.offsetWidth * this.zoom;
        const height = this.imageRef.nativeElement.offsetHeight * this.zoom;
        const { left, top } = getOffset(this.imageRef.nativeElement);
        const { width: clientWidth, height: clientHeight } = getClientSize();
        const isRotate = this.rotate % 180 !== 0;
        const fitContentParams = {
            width: isRotate ? height : width,
            height: isRotate ? width : height,
            left,
            top,
            clientWidth,
            clientHeight
        };
        const fitContentPos = getFitContentPosition(fitContentParams);
        if (isNotNil(fitContentPos.x) || isNotNil(fitContentPos.y)) {
            this.position = { ...this.position, ...fitContentPos };
        }
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    updatePreviewImageTransform() {
        this.previewImageTransform = `scale3d(${this.zoom}, ${this.zoom}, 1) rotate(${this.rotate}deg)`;
    }
    updatePreviewImageWrapperTransform() {
        this.previewImageWrapperTransform = `translate3d(${this.position.x}px, ${this.position.y}px, 0)`;
    }
    updateZoomOutDisabled() {
        this.zoomOutDisabled = this.zoom <= 1;
    }
    setEnterAnimationClass() {
        if (this.animationDisabled) {
            return;
        }
        const backdropElement = this.overlayRef.backdropElement;
        if (backdropElement) {
            backdropElement.classList.add(TDS_IMAGE_FADE_CLASS_NAME_MAP.enter);
            backdropElement.classList.add(TDS_IMAGE_FADE_CLASS_NAME_MAP.enterActive);
        }
    }
    setLeaveAnimationClass() {
        if (this.animationDisabled) {
            return;
        }
        const backdropElement = this.overlayRef.backdropElement;
        if (backdropElement) {
            backdropElement.classList.add(TDS_IMAGE_FADE_CLASS_NAME_MAP.leave);
            backdropElement.classList.add(TDS_IMAGE_FADE_CLASS_NAME_MAP.leaveActive);
        }
    }
    reset() {
        this.zoom = 1;
        this.rotate = 0;
        this.position = { ...initialPosition };
    }
}
TDSImagePreviewComponent.ɵfac = function TDSImagePreviewComponent_Factory(t) { return new (t || TDSImagePreviewComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.TDSConfigService), i0.ɵɵdirectiveInject(i2.TDSImagePreviewOptions), i0.ɵɵdirectiveInject(i3.OverlayRef)); };
TDSImagePreviewComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSImagePreviewComponent, selectors: [["tds-image-preview"]], viewQuery: function TDSImagePreviewComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.imageRef = _t.first);
    } }, hostAttrs: ["tabindex", "-1", "role", "document", 1, "fixed", "inset-0", "overflow-auto", "bg-black", "bg-opacity-40"], hostVars: 8, hostBindings: function TDSImagePreviewComponent_HostBindings(rf, ctx) { if (rf & 1) {
        i0.ɵɵsyntheticHostListener("@fadeMotion.start", function TDSImagePreviewComponent_animation_fadeMotion_start_HostBindingHandler($event) { return ctx.onAnimationStart($event); })("@fadeMotion.done", function TDSImagePreviewComponent_animation_fadeMotion_done_HostBindingHandler($event) { return ctx.onAnimationDone($event); });
        i0.ɵɵlistener("click", function TDSImagePreviewComponent_click_HostBindingHandler($event) { return ctx.onContainerClick($event); });
    } if (rf & 2) {
        i0.ɵɵsyntheticHostProperty("@.disabled", ctx.config.noAnimation)("@fadeMotion", ctx.animationState);
        i0.ɵɵstyleProp("z-index", ctx.config.zIndex);
        i0.ɵɵclassProp("tds-image-preview-moving", ctx.isDragging)("tds-image-preview-wrap", true);
    } }, exportAs: ["tdsImagePreview"], decls: 13, vars: 6, consts: [[1, "tds-image-preview", "pointer-events-none", "h-full", "text-center", "m-0", "p-0"], ["tabindex", "0", "aria-hidden", "true", 2, "width", "0", "height", "0", "overflow", "hidden", "outline", "none"], [1, "tds-image-preview-content", "m-0", "p-0", "w-full", "h-full"], [1, "tds-image-preview-body", "absolute", "inset-0", "overflow-hidden"], [1, "tds-image-preview-operations", "box-border", "absolute", "m-0", "p-0", "top-6", "right-6", "pointer-events-auto", 2, "z-index", "1"], [1, "tds-image-preview-operations-operation", "flex", "items-center", "justify-center", "cursor-pointer", 3, "click"], ["tds-button-close", "", 1, "tds-image-preview-operations-icon", "text-white", "dark:text-white"], ["cdkDrag", "", 1, "tds-image-preview-img-wrapper", "absolute", "inset-0", "flex", "items-center", "justify-center", 3, "cdkDragFreeDragPosition", "mousedown", "cdkDragReleased"], [4, "ngFor", "ngForOf"], [1, "tds-image-preview-operations", "pointer-events-auto", "box-border", "absolute", "m-0", "cursor-pointer", "bottom-0", "right-0", "flex", "justify-center", "items-center", "w-full", "bg-black", "bg-opacity-40", "py-3", 2, "z-index", "1"], ["class", "tds-image-preview-operations-operation mr-5  cursor-pointer  flex ", 3, "ngClass", "tds-image-preview-operations-operation-disabled", "click", 4, "ngFor", "ngForOf"], [4, "ngIf"], ["cdkDragHandle", "", "class", "tds-image-preview-img text-center pointer-events-auto", 3, "width", "height", "transform", 4, "ngIf"], ["cdkDragHandle", "", 1, "tds-image-preview-img", "text-center", "pointer-events-auto"], ["imgRef", ""], [1, "tds-image-preview-operations-operation", "mr-5", "cursor-pointer", "flex", 3, "ngClass", "click"], [1, "tds-image-preview-operations-icon", "text-xl", "leading-none", 3, "ngClass"], [1, "tds-image-preview-switch-left", "pointer-events-auto", "-mt-5", "cursor-pointer", "rounded-full", "bg-black", "bg-opacity-40", "text-white", "left-5", "absolute", "top-1/2", "flex", "items-censter", "z-10", "p-5", 3, "ngClass", "click"], [1, "tdsi-arrow-left-line", "text-xl", "leading-none"], [1, "tds-image-preview-switch-right", "rounded-full", "-mt-5", "pointer-events-auto", "cursor-pointer", "bg-black", "bg-opacity-40", "text-white", "absolute", "top-1/2", "right-5", "flex", "items-censter", "z-10", "p-5", 3, "ngClass", "click"], [1, "tdsi-arrow-right-line", "text-xl", "leading-none"]], template: function TDSImagePreviewComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 0);
        i0.ɵɵelement(1, "div", 1);
        i0.ɵɵelementStart(2, "div", 2)(3, "div", 3)(4, "div", 4)(5, "div", 5);
        i0.ɵɵlistener("click", function TDSImagePreviewComponent_Template_div_click_5_listener() { return ctx.onClose(); });
        i0.ɵɵelement(6, "button", 6);
        i0.ɵɵelementEnd()();
        i0.ɵɵelementStart(7, "div", 7);
        i0.ɵɵlistener("mousedown", function TDSImagePreviewComponent_Template_div_mousedown_7_listener() { return ctx.onDragStarted(); })("cdkDragReleased", function TDSImagePreviewComponent_Template_div_cdkDragReleased_7_listener() { return ctx.onDragReleased(); });
        i0.ɵɵtemplate(8, TDSImagePreviewComponent_ng_container_8_Template, 2, 1, "ng-container", 8);
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(9, "ul", 9);
        i0.ɵɵtemplate(10, TDSImagePreviewComponent_li_10_Template, 2, 4, "li", 10);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(11, TDSImagePreviewComponent_ng_container_11_Template, 5, 6, "ng-container", 11);
        i0.ɵɵelementEnd()();
        i0.ɵɵelement(12, "div", 1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵadvance(7);
        i0.ɵɵstyleProp("transform", ctx.previewImageWrapperTransform);
        i0.ɵɵproperty("cdkDragFreeDragPosition", ctx.position);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngForOf", ctx.images);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngForOf", ctx.operations);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx.images.length > 1);
    } }, directives: [i4.TDSButtonCloseComponent, i5.CdkDrag, i6.NgForOf, i6.NgIf, i5.CdkDragHandle, i6.NgClass], encapsulation: 2, data: { animation: [fadeMotion] }, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSImagePreviewComponent, [{
        type: Component,
        args: [{
                selector: 'tds-image-preview',
                exportAs: 'tdsImagePreview',
                animations: [fadeMotion],
                template: `
    <div class="tds-image-preview pointer-events-none h-full	text-center m-0 p-0">
      <div tabindex="0" aria-hidden="true" style="width: 0; height: 0; overflow: hidden; outline: none;"></div>
      <div class="tds-image-preview-content m-0 p-0 w-full h-full">
        <div class="tds-image-preview-body absolute inset-0 overflow-hidden">
          <div class="tds-image-preview-operations box-border absolute m-0 p-0 top-6 right-6  pointer-events-auto" style="zIndex:1">
            <div
              class="tds-image-preview-operations-operation flex items-center justify-center cursor-pointer"             
              (click)="onClose()"
            >
            <button tds-button-close class="tds-image-preview-operations-icon text-white dark:text-white"></button>
             </div>
          </div>
          <div
            class="tds-image-preview-img-wrapper absolute inset-0 flex items-center justify-center"
            cdkDrag
            [style.transform]="previewImageWrapperTransform"
            [cdkDragFreeDragPosition]="position"
            (mousedown)="onDragStarted()"
            (cdkDragReleased)="onDragReleased()"
          >
            <ng-container *ngFor="let image of images; index as imageIndex">
              <img
                cdkDragHandle
                class="tds-image-preview-img text-center pointer-events-auto"
                #imgRef
                *ngIf="index === imageIndex"
                [attr.src]="image.src"
                [attr.srcset]="image.srcset"
                [attr.alt]="image.alt"
                [style.width]="image.width"
                [style.height]="image.height"
                [style.transform]="previewImageTransform"
              />
            </ng-container>
          </div>
          <ul class="tds-image-preview-operations pointer-events-auto box-border absolute m-0  cursor-pointer bottom-0 right-0 flex justify-center items-center w-full bg-black bg-opacity-40 py-3" style="zIndex:1">
            <li
              class="tds-image-preview-operations-operation mr-5  cursor-pointer  flex "
              [ngClass]="zoomOutDisabled && option.type === 'zoomOut' ?'text-neutral-1-900':'text-white'"
              [class.tds-image-preview-operations-operation-disabled]="zoomOutDisabled && option.type === 'zoomOut'"
              (click)="option.onClick()"
              *ngFor="let option of operations"
            >
              <span class="tds-image-preview-operations-icon text-xl leading-none " [ngClass]="option.icon"></span>
            </li>
          </ul>
          <ng-container *ngIf="images.length > 1">
            <div
              class="tds-image-preview-switch-left pointer-events-auto -mt-5  cursor-pointer rounded-full bg-black bg-opacity-40  text-white left-5 absolute top-1/2  flex items-censter  z-10 p-5"
              [class.tds-image-preview-switch-left-disabled]="index <= 0"
              [ngClass]="index <= 0 ?'text-neutral-1-900':'text-white'"
              (click)="onSwitchLeft($event)"
            >
              <span class="tdsi-arrow-left-line text-xl leading-none"></span>
            </div>
            <div
              class="tds-image-preview-switch-right rounded-full -mt-5 pointer-events-auto cursor-pointer bg-black bg-opacity-40 text-white absolute top-1/2 right-5 flex items-censter z-10 p-5"
              [class.tds-image-preview-switch-right-disabled]="index >= images.length - 1"
              [ngClass]="index >= (images.length - 1) ?'text-neutral-1-900':'text-white'"
              (click)="onSwitchRight($event)"
            >
              <span class="tdsi-arrow-right-line text-xl leading-none"></span>
            </div>
          </ng-container>
        </div>
      </div>
      <div tabindex="0" aria-hidden="true" style="width: 0; height: 0; overflow: hidden; outline: none;"></div>
    </div>
  `,
                preserveWhitespaces: false,
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                host: {
                    '[class.tds-image-preview-moving]': 'isDragging',
                    '[style.zIndex]': 'config.zIndex',
                    '[class.tds-image-preview-wrap]': 'true',
                    '[@.disabled]': 'config.noAnimation',
                    '[@fadeMotion]': 'animationState',
                    '(@fadeMotion.start)': 'onAnimationStart($event)',
                    '(@fadeMotion.done)': 'onAnimationDone($event)',
                    '(click)': 'onContainerClick($event)',
                    'class': "fixed inset-0 overflow-auto bg-black bg-opacity-40",
                    tabindex: '-1',
                    role: 'document'
                }
            }]
    }], function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.TDSConfigService }, { type: i2.TDSImagePreviewOptions }, { type: i3.OverlayRef }]; }, { imageRef: [{
            type: ViewChild,
            args: ['imgRef']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2UtcHJldmlldy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy90ZHMtdWkvaW1hZ2UvaW1hZ2UtcHJldmlldy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSUEsT0FBTyxFQUNMLHVCQUF1QixFQUV2QixTQUFTLEVBRVQsWUFBWSxFQUVaLFNBQVMsRUFDVCxpQkFBaUIsRUFDbEIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMvQixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFbkQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRTVDLE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBTy9ELE9BQU8sRUFBRSxhQUFhLEVBQUUscUJBQXFCLEVBQUUsU0FBUyxFQUFFLE1BQU0sU0FBUyxDQUFDOzs7Ozs7Ozs7O0lBd0M1RCw4QkFXRTs7OztJQUhBLHVDQUEyQiwyQkFBQSwyQ0FBQTtJQUgzQixxREFBc0IsNkNBQUEscUJBQUE7OztJQU4xQiw2QkFBZ0U7SUFDOUQseUZBV0U7SUFDSiwwQkFBZTs7OztJQVJWLGVBQTBCO0lBQTFCLHFEQUEwQjs7OztJQVcvQiw4QkFNQztJQUZDLDRMQUFTLG1CQUFnQixJQUFDO0lBRzFCLDJCQUFxRztJQUN2RyxpQkFBSzs7OztJQUxILHlIQUFzRztJQUR0RyxzSEFBMkY7SUFLckIsZUFBdUI7SUFBdkIsd0NBQXVCOzs7O0lBR2pHLDZCQUF3QztJQUN0QywrQkFLQztJQURDLG9MQUFTLDRCQUFvQixJQUFDO0lBRTlCLDJCQUErRDtJQUNqRSxpQkFBTTtJQUNOLCtCQUtDO0lBREMsb0xBQVMsNkJBQXFCLElBQUM7SUFFL0IsMkJBQWdFO0lBQ2xFLGlCQUFNO0lBQ1IsMEJBQWU7OztJQWRYLGVBQTJEO0lB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RUFBRSwwQkFBMEI7b0JBQ2pELG9CQUFvQixFQUFFLHlCQUF5QjtvQkFDL0MsU0FBUyxFQUFFLDBCQUEwQjtvQkFDckMsT0FBTyxFQUFFLG9EQUFvRDtvQkFDN0QsUUFBUSxFQUFFLElBQUk7b0JBQ2QsSUFBSSxFQUFFLFVBQVU7aUJBQ2pCO2FBQ0Y7aUtBbURzQixRQUFRO2tCQUE1QixTQUFTO21CQUFDLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuXHJcbmltcG9ydCB7IEFuaW1hdGlvbkV2ZW50IH0gZnJvbSAnQGFuZ3VsYXIvYW5pbWF0aW9ucyc7XHJcbmltcG9ydCB7IE92ZXJsYXlSZWYgfSBmcm9tICdAYW5ndWxhci9jZGsvb3ZlcmxheSc7XHJcbmltcG9ydCB7XHJcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXHJcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXHJcbiAgQ29tcG9uZW50LFxyXG4gIEVsZW1lbnRSZWYsXHJcbiAgRXZlbnRFbWl0dGVyLFxyXG4gIE9uRGVzdHJveSxcclxuICBWaWV3Q2hpbGQsXHJcbiAgVmlld0VuY2Fwc3VsYXRpb25cclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBmYWRlTW90aW9uIH0gZnJvbSAndGRzLXVpL2NvcmUvYW5pbWF0aW9uJztcclxuaW1wb3J0IHsgVERTQ29uZmlnS2V5LCBURFNDb25maWdTZXJ2aWNlIH0gZnJvbSAndGRzLXVpL2NvcmUvY29uZmlnJztcclxuaW1wb3J0IHsgaXNOb3ROaWwgfSBmcm9tICd0ZHMtdWkvY29yZS91dGlsJztcclxuaW1wb3J0IHsgVERTU2FmZUFueSB9IGZyb20gJ3Rkcy11aS9zaGFyZWQvdXRpbGl0eSc7XHJcbmltcG9ydCB7IFREU19JTUFHRV9GQURFX0NMQVNTX05BTUVfTUFQIH0gZnJvbSAnLi9pbWFnZS1jb25maWcnO1xyXG5jb25zdCBURFNfQ09ORklHX01PRFVMRV9OQU1FOiBURFNDb25maWdLZXkgPSAnaW1hZ2UnO1xyXG5cclxuXHJcblxyXG5pbXBvcnQgeyBURFNJbWFnZSwgVERTSW1hZ2VQcmV2aWV3T3B0aW9ucyB9IGZyb20gJy4vaW1hZ2UtcHJldmlldy1vcHRpb25zJztcclxuaW1wb3J0IHsgVERTSW1hZ2VQcmV2aWV3UmVmIH0gZnJvbSAnLi9pbWFnZS1wcmV2aWV3LXJlZic7XHJcbmltcG9ydCB7IGdldENsaWVudFNpemUsIGdldEZpdENvbnRlbnRQb3NpdGlvbiwgZ2V0T2Zmc2V0IH0gZnJvbSAnLi91dGlscyc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIE56SW1hZ2VDb250YWluZXJPcGVyYXRpb24ge1xyXG4gIGljb246IHN0cmluZztcclxuICB0eXBlOiBzdHJpbmc7XHJcblxyXG4gIG9uQ2xpY2soKTogdm9pZDtcclxufVxyXG5cclxuY29uc3QgaW5pdGlhbFBvc2l0aW9uID0ge1xyXG4gIHg6IDAsXHJcbiAgeTogMFxyXG59O1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICd0ZHMtaW1hZ2UtcHJldmlldycsXHJcbiAgZXhwb3J0QXM6ICd0ZHNJbWFnZVByZXZpZXcnLFxyXG4gIGFuaW1hdGlvbnM6IFtmYWRlTW90aW9uXSxcclxuICB0ZW1wbGF0ZTogYFxyXG4gICAgPGRpdiBjbGFzcz1cInRkcy1pbWFnZS1wcmV2aWV3IHBvaW50ZXItZXZlbnRzLW5vbmUgaC1mdWxsXHR0ZXh0LWNlbnRlciBtLTAgcC0wXCI+XHJcbiAgICAgIDxkaXYgdGFiaW5kZXg9XCIwXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCIgc3R5bGU9XCJ3aWR0aDogMDsgaGVpZ2h0OiAwOyBvdmVyZmxvdzogaGlkZGVuOyBvdXRsaW5lOiBub25lO1wiPjwvZGl2PlxyXG4gICAgICA8ZGl2IGNsYXNzPVwidGRzLWltYWdlLXByZXZpZXctY29udGVudCBtLTAgcC0wIHctZnVsbCBoLWZ1bGxcIj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwidGRzLWltYWdlLXByZXZpZXctYm9keSBhYnNvbHV0ZSBpbnNldC0wIG92ZXJmbG93LWhpZGRlblwiPlxyXG4gICAgICAgICAgPGRpdiBjbGFzcz1cInRkcy1pbWFnZS1wcmV2aWV3LW9wZXJhdGlvbnMgYm94LWJvcmRlciBhYnNvbHV0ZSBtLTAgcC0wIHRvcC02IHJpZ2h0LTYgIHBvaW50ZXItZXZlbnRzLWF1dG9cIiBzdHlsZT1cInpJbmRleDoxXCI+XHJcbiAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICBjbGFzcz1cInRkcy1pbWFnZS1wcmV2aWV3LW9wZXJhdGlvbnMtb3BlcmF0aW9uIGZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIGN1cnNvci1wb2ludGVyXCIgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgKGNsaWNrKT1cIm9uQ2xvc2UoKVwiXHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgPGJ1dHRvbiB0ZHMtYnV0dG9uLWNsb3NlIGNsYXNzPVwidGRzLWltYWdlLXByZXZpZXctb3BlcmF0aW9ucy1pY29uIHRleHQtd2hpdGUgZGFyazp0ZXh0LXdoaXRlXCI+PC9idXR0b24+XHJcbiAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICBjbGFzcz1cInRkcy1pbWFnZS1wcmV2aWV3LWltZy13cmFwcGVyIGFic29sdXRlIGluc2V0LTAgZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXJcIlxyXG4gICAgICAgICAgICBjZGtEcmFnXHJcbiAgICAgICAgICAgIFtzdHlsZS50cmFuc2Zvcm1dPVwicHJldmlld0ltYWdlV3JhcHBlclRyYW5zZm9ybVwiXHJcbiAgICAgICAgICAgIFtjZGtEcmFnRnJlZURyYWdQb3NpdGlvbl09XCJwb3NpdGlvblwiXHJcbiAgICAgICAgICAgIChtb3VzZWRvd24pPVwib25EcmFnU3RhcnRlZCgpXCJcclxuICAgICAgICAgICAgKGNka0RyYWdSZWxlYXNlZCk9XCJvbkRyYWdSZWxlYXNlZCgpXCJcclxuICAgICAgICAgID5cclxuICAgICAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdGb3I9XCJsZXQgaW1hZ2Ugb2YgaW1hZ2VzOyBpbmRleCBhcyBpbWFnZUluZGV4XCI+XHJcbiAgICAgICAgICAgICAgPGltZ1xyXG4gICAgICAgICAgICAgICAgY2RrRHJhZ0hhbmRsZVxyXG4gICAgICAgICAgICAgICAgY2xhc3M9XCJ0ZHMtaW1hZ2UtcHJldmlldy1pbWcgdGV4dC1jZW50ZXIgcG9pbnRlci1ldmVudHMtYXV0b1wiXHJcbiAgICAgICAgICAgICAgICAjaW1nUmVmXHJcbiAgICAgICAgICAgICAgICAqbmdJZj1cImluZGV4ID09PSBpbWFnZUluZGV4XCJcclxuICAgICAgICAgICAgICAgIFthdHRyLnNyY109XCJpbWFnZS5zcmNcIlxyXG4gICAgICAgICAgICAgICAgW2F0dHIuc3Jjc2V0XT1cImltYWdlLnNyY3NldFwiXHJcbiAgICAgICAgICAgICAgICBbYXR0ci5hbHRdPVwiaW1hZ2UuYWx0XCJcclxuICAgICAgICAgICAgICAgIFtzdHlsZS53aWR0aF09XCJpbWFnZS53aWR0aFwiXHJcbiAgICAgICAgICAgICAgICBbc3R5bGUuaGVpZ2h0XT1cImltYWdlLmhlaWdodFwiXHJcbiAgICAgICAgICAgICAgICBbc3R5bGUudHJhbnNmb3JtXT1cInByZXZpZXdJbWFnZVRyYW5zZm9ybVwiXHJcbiAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgPC9uZy1jb250YWluZXI+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDx1bCBjbGFzcz1cInRkcy1pbWFnZS1wcmV2aWV3LW9wZXJhdGlvbnMgcG9pbnRlci1ldmVudHMtYXV0byBib3gtYm9yZGVyIGFic29sdXRlIG0tMCAgY3Vyc29yLXBvaW50ZXIgYm90dG9tLTAgcmlnaHQtMCBmbGV4IGp1c3RpZnktY2VudGVyIGl0ZW1zLWNlbnRlciB3LWZ1bGwgYmctYmxhY2sgYmctb3BhY2l0eS00MCBweS0zXCIgc3R5bGU9XCJ6SW5kZXg6MVwiPlxyXG4gICAgICAgICAgICA8bGlcclxuICAgICAgICAgICAgICBjbGFzcz1cInRkcy1pbWFnZS1wcmV2aWV3LW9wZXJhdGlvbnMtb3BlcmF0aW9uIG1yLTUgIGN1cnNvci1wb2ludGVyICBmbGV4IFwiXHJcbiAgICAgICAgICAgICAgW25nQ2xhc3NdPVwiem9vbU91dERpc2FibGVkICYmIG9wdGlvbi50eXBlID09PSAnem9vbU91dCcgPyd0ZXh0LW5ldXRyYWwtMS05MDAnOid0ZXh0LXdoaXRlJ1wiXHJcbiAgICAgICAgICAgICAgW2NsYXNzLnRkcy1pbWFnZS1wcmV2aWV3LW9wZXJhdGlvbnMtb3BlcmF0aW9uLWRpc2FibGVkXT1cInpvb21PdXREaXNhYmxlZCAmJiBvcHRpb24udHlwZSA9PT0gJ3pvb21PdXQnXCJcclxuICAgICAgICAgICAgICAoY2xpY2spPVwib3B0aW9uLm9uQ2xpY2soKVwiXHJcbiAgICAgICAgICAgICAgKm5nRm9yPVwibGV0IG9wdGlvbiBvZiBvcGVyYXRpb25zXCJcclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidGRzLWltYWdlLXByZXZpZXctb3BlcmF0aW9ucy1pY29uIHRleHQteGwgbGVhZGluZy1ub25lIFwiIFtuZ0NsYXNzXT1cIm9wdGlvbi5pY29uXCI+PC9zcGFuPlxyXG4gICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgPC91bD5cclxuICAgICAgICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJpbWFnZXMubGVuZ3RoID4gMVwiPlxyXG4gICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgY2xhc3M9XCJ0ZHMtaW1hZ2UtcHJldmlldy1zd2l0Y2gtbGVmdCBwb2ludGVyLWV2ZW50cy1hdXRvIC1tdC01ICBjdXJzb3ItcG9pbnRlciByb3VuZGVkLWZ1bGwgYmctYmxhY2sgYmctb3BhY2l0eS00MCAgdGV4dC13aGl0ZSBsZWZ0LTUgYWJzb2x1dGUgdG9wLTEvMiAgZmxleCBpdGVtcy1jZW5zdGVyICB6LTEwIHAtNVwiXHJcbiAgICAgICAgICAgICAgW2NsYXNzLnRkcy1pbWFnZS1wcmV2aWV3LXN3aXRjaC1sZWZ0LWRpc2FibGVkXT1cImluZGV4IDw9IDBcIlxyXG4gICAgICAgICAgICAgIFtuZ0NsYXNzXT1cImluZGV4IDw9IDAgPyd0ZXh0LW5ldXRyYWwtMS05MDAnOid0ZXh0LXdoaXRlJ1wiXHJcbiAgICAgICAgICAgICAgKGNsaWNrKT1cIm9uU3dpdGNoTGVmdCgkZXZlbnQpXCJcclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidGRzaS1hcnJvdy1sZWZ0LWxpbmUgdGV4dC14bCBsZWFkaW5nLW5vbmVcIj48L3NwYW4+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgY2xhc3M9XCJ0ZHMtaW1hZ2UtcHJldmlldy1zd2l0Y2gtcmlnaHQgcm91bmRlZC1mdWxsIC1tdC01IHBvaW50ZXItZXZlbnRzLWF1dG8gY3Vyc29yLXBvaW50ZXIgYmctYmxhY2sgYmctb3BhY2l0eS00MCB0ZXh0LXdoaXRlIGFic29sdXRlIHRvcC0xLzIgcmlnaHQtNSBmbGV4IGl0ZW1zLWNlbnN0ZXIgei0xMCBwLTVcIlxyXG4gICAgICAgICAgICAgIFtjbGFzcy50ZHMtaW1hZ2UtcHJldmlldy1zd2l0Y2gtcmlnaHQtZGlzYWJsZWRdPVwiaW5kZXggPj0gaW1hZ2VzLmxlbmd0aCAtIDFcIlxyXG4gICAgICAgICAgICAgIFtuZ0NsYXNzXT1cImluZGV4ID49IChpbWFnZXMubGVuZ3RoIC0gMSkgPyd0ZXh0LW5ldXRyYWwtMS05MDAnOid0ZXh0LXdoaXRlJ1wiXHJcbiAgICAgICAgICAgICAgKGNsaWNrKT1cIm9uU3dpdGNoUmlnaHQoJGV2ZW50KVwiXHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInRkc2ktYXJyb3ctcmlnaHQtbGluZSB0ZXh0LXhsIGxlYWRpbmctbm9uZVwiPjwvc3Bhbj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8L25nLWNvbnRhaW5lcj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9kaXY+XHJcbiAgICAgIDxkaXYgdGFiaW5kZXg9XCIwXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCIgc3R5bGU9XCJ3aWR0aDogMDsgaGVpZ2h0OiAwOyBvdmVyZmxvdzogaGlkZGVuOyBvdXRsaW5lOiBub25lO1wiPjwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbiAgYCxcclxuICBwcmVzZXJ2ZVdoaXRlc3BhY2VzOiBmYWxzZSxcclxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcclxuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxyXG4gIGhvc3Q6IHtcclxuICAgICdbY2xhc3MudGRzLWltYWdlLXByZXZpZXctbW92aW5nXSc6ICdpc0RyYWdnaW5nJyxcclxuICAgICdbc3R5bGUuekluZGV4XSc6ICdjb25maWcuekluZGV4JyxcclxuICAgICdbY2xhc3MudGRzLWltYWdlLXByZXZpZXctd3JhcF0nOiAndHJ1ZScsXHJcbiAgICAnW0AuZGlzYWJsZWRdJzogJ2NvbmZpZy5ub0FuaW1hdGlvbicsXHJcbiAgICAnW0BmYWRlTW90aW9uXSc6ICdhbmltYXRpb25TdGF0ZScsXHJcbiAgICAnKEBmYWRlTW90aW9uLnN0YXJ0KSc6ICdvbkFuaW1hdGlvblN0YXJ0KCRldmVudCknLFxyXG4gICAgJyhAZmFkZU1vdGlvbi5kb25lKSc6ICdvbkFuaW1hdGlvbkRvbmUoJGV2ZW50KScsXHJcbiAgICAnKGNsaWNrKSc6ICdvbkNvbnRhaW5lckNsaWNrKCRldmVudCknLFxyXG4gICAgJ2NsYXNzJzogXCJmaXhlZCBpbnNldC0wIG92ZXJmbG93LWF1dG8gYmctYmxhY2sgYmctb3BhY2l0eS00MFwiLFxyXG4gICAgdGFiaW5kZXg6ICctMScsXHJcbiAgICByb2xlOiAnZG9jdW1lbnQnXHJcbiAgfVxyXG59KVxyXG5leHBvcnQgY2xhc3MgVERTSW1hZ2VQcmV2aWV3Q29tcG9uZW50IGltcGxlbWVudHMgT25EZXN0cm95IHtcclxuICBpbWFnZXM6IFREU0ltYWdlW10gPSBbXTtcclxuICBpbmRleCA9IDA7XHJcbiAgaXNEcmFnZ2luZyA9IGZhbHNlO1xyXG4gIHZpc2libGUgPSB0cnVlO1xyXG4gIGFuaW1hdGlvblN0YXRlOiAndm9pZCcgfCAnZW50ZXInIHwgJ2xlYXZlJyA9ICdlbnRlcic7XHJcbiAgYW5pbWF0aW9uU3RhdGVDaGFuZ2VkID0gbmV3IEV2ZW50RW1pdHRlcjxBbmltYXRpb25FdmVudD4oKTtcclxuXHJcbiAgcHJldmlld0ltYWdlVHJhbnNmb3JtID0gJyc7XHJcbiAgcHJldmlld0ltYWdlV3JhcHBlclRyYW5zZm9ybSA9ICcnO1xyXG4gIG9wZXJhdGlvbnM6IE56SW1hZ2VDb250YWluZXJPcGVyYXRpb25bXSA9IFtcclxuICAgIHtcclxuICAgICAgaWNvbjogJ3Rkc2ktcm90YXRlLWxlZnQtbGluZScsXHJcbiAgICAgIG9uQ2xpY2s6ICgpID0+IHtcclxuICAgICAgICB0aGlzLm9uUm90YXRlTGVmdCgpO1xyXG4gICAgICB9LFxyXG4gICAgICB0eXBlOiAncm90YXRlTGVmdCdcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGljb246ICd0ZHNpLXJvdGF0ZS1yaWdodC1saW5lJyxcclxuICAgICAgb25DbGljazogKCkgPT4ge1xyXG4gICAgICAgIHRoaXMub25Sb3RhdGVSaWdodCgpO1xyXG4gICAgICB9LFxyXG4gICAgICB0eXBlOiAncm90YXRlUmlnaHQnXHJcbiAgICB9LFxyXG5cclxuICAgIHtcclxuICAgICAgaWNvbjogJ3Rkc2ktem9vbS1vdXQtbGluZScsXHJcbiAgICAgIG9uQ2xpY2s6ICgpID0+IHtcclxuICAgICAgICB0aGlzLm9uWm9vbU91dCgpO1xyXG4gICAgICB9LFxyXG4gICAgICB0eXBlOiAnem9vbU91dCdcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGljb246ICd0ZHNpLXpvb20taW4tbGluZScsXHJcbiAgICAgIG9uQ2xpY2s6ICgpID0+IHtcclxuICAgICAgICB0aGlzLm9uWm9vbUluKCk7XHJcbiAgICAgIH0sXHJcbiAgICAgIHR5cGU6ICd6b29tSW4nXHJcbiAgICB9LFxyXG5cclxuXHJcbiAgXTtcclxuXHJcbiAgem9vbU91dERpc2FibGVkID0gZmFsc2U7XHJcbiAgcG9zaXRpb24gPSB7IC4uLmluaXRpYWxQb3NpdGlvbiB9O1xyXG4gIHByZXZpZXdSZWYhOiBURFNJbWFnZVByZXZpZXdSZWY7XHJcbiAgY29udGFpbmVyQ2xpY2sgPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XHJcbiAgY2xvc2VDbGljayA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcclxuXHJcbiAgQFZpZXdDaGlsZCgnaW1nUmVmJykgaW1hZ2VSZWYhOiBFbGVtZW50UmVmPEhUTUxJbWFnZUVsZW1lbnQ+O1xyXG5cclxuICBwcml2YXRlIHpvb206IG51bWJlcjtcclxuICBwcml2YXRlIHJvdGF0ZTogbnVtYmVyO1xyXG4gIHByaXZhdGUgZGVzdHJveSQgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xyXG5cclxuICBnZXQgYW5pbWF0aW9uRGlzYWJsZWQoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5jb25maWcubm9BbmltYXRpb24gPz8gZmFsc2U7XHJcbiAgfVxyXG5cclxuICBnZXQgbWFza0Nsb3NhYmxlKCk6IGJvb2xlYW4ge1xyXG4gICAgY29uc3QgZGVmYXVsdENvbmZpZzogVERTU2FmZUFueSA9IHRoaXMudGRzQ29uZmlnU2VydmljZS5nZXRDb25maWdGb3JDb21wb25lbnQoVERTX0NPTkZJR19NT0RVTEVfTkFNRSkgfHwge307XHJcbiAgICByZXR1cm4gdGhpcy5jb25maWcubWFza0Nsb3NhYmxlID8/IGRlZmF1bHRDb25maWcubWFza0Nsb3NhYmxlID8/IHRydWU7XHJcbiAgfVxyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZixcclxuICAgIHB1YmxpYyB0ZHNDb25maWdTZXJ2aWNlOiBURFNDb25maWdTZXJ2aWNlLFxyXG4gICAgcHVibGljIGNvbmZpZzogVERTSW1hZ2VQcmV2aWV3T3B0aW9ucyxcclxuICAgIHByaXZhdGUgb3ZlcmxheVJlZjogT3ZlcmxheVJlZlxyXG4gICkge1xyXG4gICAgLy8gVE9ETzogbW92ZSB0byBob3N0IGFmdGVyIFZpZXcgRW5naW5lIGRlcHJlY2F0aW9uXHJcbiAgICB0aGlzLnpvb20gPSB0aGlzLmNvbmZpZy56b29tID8/IDE7XHJcbiAgICB0aGlzLnJvdGF0ZSA9IHRoaXMuY29uZmlnLnJvdGF0ZSA/PyAwO1xyXG4gICAgdGhpcy51cGRhdGVab29tT3V0RGlzYWJsZWQoKTtcclxuICAgIHRoaXMudXBkYXRlUHJldmlld0ltYWdlVHJhbnNmb3JtKCk7XHJcbiAgICB0aGlzLnVwZGF0ZVByZXZpZXdJbWFnZVdyYXBwZXJUcmFuc2Zvcm0oKTtcclxuICB9XHJcblxyXG4gIHNldEltYWdlcyhpbWFnZXM6IFREU0ltYWdlW10pOiB2b2lkIHtcclxuICAgIHRoaXMuaW1hZ2VzID0gaW1hZ2VzO1xyXG4gICAgdGhpcy5jZHIubWFya0ZvckNoZWNrKCk7XHJcbiAgfVxyXG5cclxuICBzd2l0Y2hUbyhpbmRleDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICB0aGlzLmluZGV4ID0gaW5kZXg7XHJcbiAgICB0aGlzLmNkci5tYXJrRm9yQ2hlY2soKTtcclxuICB9XHJcblxyXG4gIG5leHQoKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5pbmRleCA8IHRoaXMuaW1hZ2VzLmxlbmd0aCAtIDEpIHtcclxuICAgICAgdGhpcy5yZXNldCgpO1xyXG4gICAgICB0aGlzLmluZGV4Kys7XHJcbiAgICAgIHRoaXMudXBkYXRlUHJldmlld0ltYWdlVHJhbnNmb3JtKCk7XHJcbiAgICAgIHRoaXMudXBkYXRlUHJldmlld0ltYWdlV3JhcHBlclRyYW5zZm9ybSgpO1xyXG4gICAgICB0aGlzLnVwZGF0ZVpvb21PdXREaXNhYmxlZCgpO1xyXG4gICAgICB0aGlzLmNkci5tYXJrRm9yQ2hlY2soKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByZXYoKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5pbmRleCA+IDApIHtcclxuICAgICAgdGhpcy5yZXNldCgpO1xyXG4gICAgICB0aGlzLmluZGV4LS07XHJcbiAgICAgIHRoaXMudXBkYXRlUHJldmlld0ltYWdlVHJhbnNmb3JtKCk7XHJcbiAgICAgIHRoaXMudXBkYXRlUHJldmlld0ltYWdlV3JhcHBlclRyYW5zZm9ybSgpO1xyXG4gICAgICB0aGlzLnVwZGF0ZVpvb21PdXREaXNhYmxlZCgpO1xyXG4gICAgICB0aGlzLmNkci5tYXJrRm9yQ2hlY2soKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG1hcmtGb3JDaGVjaygpOiB2b2lkIHtcclxuICAgIHRoaXMuY2RyLm1hcmtGb3JDaGVjaygpO1xyXG4gIH1cclxuXHJcbiAgb25DbG9zZSgpOiB2b2lkIHtcclxuICAgIHRoaXMuY2xvc2VDbGljay5lbWl0KCk7XHJcbiAgfVxyXG5cclxuICBvblpvb21JbigpOiB2b2lkIHtcclxuICAgIHRoaXMuem9vbSArPSAxO1xyXG4gICAgdGhpcy51cGRhdGVQcmV2aWV3SW1hZ2VUcmFuc2Zvcm0oKTtcclxuICAgIHRoaXMudXBkYXRlWm9vbU91dERpc2FibGVkKCk7XHJcbiAgICB0aGlzLnBvc2l0aW9uID0geyAuLi5pbml0aWFsUG9zaXRpb24gfTtcclxuICB9XHJcblxyXG4gIG9uWm9vbU91dCgpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLnpvb20gPiAxKSB7XHJcbiAgICAgIHRoaXMuem9vbSAtPSAxO1xyXG4gICAgICB0aGlzLnVwZGF0ZVByZXZpZXdJbWFnZVRyYW5zZm9ybSgpO1xyXG4gICAgICB0aGlzLnVwZGF0ZVpvb21PdXREaXNhYmxlZCgpO1xyXG4gICAgICB0aGlzLnBvc2l0aW9uID0geyAuLi5pbml0aWFsUG9zaXRpb24gfTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG9uUm90YXRlUmlnaHQoKTogdm9pZCB7XHJcbiAgICB0aGlzLnJvdGF0ZSArPSA5MDtcclxuICAgIHRoaXMudXBkYXRlUHJldmlld0ltYWdlVHJhbnNmb3JtKCk7XHJcbiAgfVxyXG5cclxuICBvblJvdGF0ZUxlZnQoKTogdm9pZCB7XHJcbiAgICB0aGlzLnJvdGF0ZSAtPSA5MDtcclxuICAgIHRoaXMudXBkYXRlUHJldmlld0ltYWdlVHJhbnNmb3JtKCk7XHJcbiAgfVxyXG5cclxuICBvblN3aXRjaExlZnQoZXZlbnQ6IE1vdXNlRXZlbnQpOiB2b2lkIHtcclxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgIHRoaXMucHJldigpO1xyXG4gIH1cclxuXHJcbiAgb25Td2l0Y2hSaWdodChldmVudDogTW91c2VFdmVudCk6IHZvaWQge1xyXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgdGhpcy5uZXh0KCk7XHJcbiAgfVxyXG5cclxuICBvbkNvbnRhaW5lckNsaWNrKGU6IE1vdXNlRXZlbnQpOiB2b2lkIHtcclxuICAgIGlmIChlLnRhcmdldCA9PT0gZS5jdXJyZW50VGFyZ2V0ICYmIHRoaXMubWFza0Nsb3NhYmxlKSB7XHJcbiAgICAgIHRoaXMuY29udGFpbmVyQ2xpY2suZW1pdCgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgb25BbmltYXRpb25TdGFydChldmVudDogQW5pbWF0aW9uRXZlbnQpOiB2b2lkIHtcclxuICAgIGlmIChldmVudC50b1N0YXRlID09PSAnZW50ZXInKSB7XHJcbiAgICAgIHRoaXMuc2V0RW50ZXJBbmltYXRpb25DbGFzcygpO1xyXG4gICAgfSBlbHNlIGlmIChldmVudC50b1N0YXRlID09PSAnbGVhdmUnKSB7XHJcbiAgICAgIHRoaXMuc2V0TGVhdmVBbmltYXRpb25DbGFzcygpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuYW5pbWF0aW9uU3RhdGVDaGFuZ2VkLmVtaXQoZXZlbnQpO1xyXG4gIH1cclxuXHJcbiAgb25BbmltYXRpb25Eb25lKGV2ZW50OiBBbmltYXRpb25FdmVudCk6IHZvaWQge1xyXG4gICAgaWYgKGV2ZW50LnRvU3RhdGUgPT09ICdlbnRlcicpIHtcclxuICAgICAgdGhpcy5zZXRFbnRlckFuaW1hdGlvbkNsYXNzKCk7XHJcbiAgICB9IGVsc2UgaWYgKGV2ZW50LnRvU3RhdGUgPT09ICdsZWF2ZScpIHtcclxuICAgICAgdGhpcy5zZXRMZWF2ZUFuaW1hdGlvbkNsYXNzKCk7XHJcbiAgICB9XHJcbiAgICB0aGlzLmFuaW1hdGlvblN0YXRlQ2hhbmdlZC5lbWl0KGV2ZW50KTtcclxuICB9XHJcblxyXG4gIHN0YXJ0TGVhdmVBbmltYXRpb24oKTogdm9pZCB7XHJcbiAgICB0aGlzLmFuaW1hdGlvblN0YXRlID0gJ2xlYXZlJztcclxuICAgIHRoaXMuY2RyLm1hcmtGb3JDaGVjaygpO1xyXG4gIH1cclxuXHJcbiAgb25EcmFnU3RhcnRlZCgpOiB2b2lkIHtcclxuICAgIHRoaXMuaXNEcmFnZ2luZyA9IHRydWU7XHJcbiAgfVxyXG5cclxuICBvbkRyYWdSZWxlYXNlZCgpOiB2b2lkIHtcclxuICAgIHRoaXMuaXNEcmFnZ2luZyA9IGZhbHNlO1xyXG4gICAgY29uc3Qgd2lkdGggPSB0aGlzLmltYWdlUmVmLm5hdGl2ZUVsZW1lbnQub2Zmc2V0V2lkdGggKiB0aGlzLnpvb207XHJcbiAgICBjb25zdCBoZWlnaHQgPSB0aGlzLmltYWdlUmVmLm5hdGl2ZUVsZW1lbnQub2Zmc2V0SGVpZ2h0ICogdGhpcy56b29tO1xyXG4gICAgY29uc3QgeyBsZWZ0LCB0b3AgfSA9IGdldE9mZnNldCh0aGlzLmltYWdlUmVmLm5hdGl2ZUVsZW1lbnQpO1xyXG4gICAgY29uc3QgeyB3aWR0aDogY2xpZW50V2lkdGgsIGhlaWdodDogY2xpZW50SGVpZ2h0IH0gPSBnZXRDbGllbnRTaXplKCk7XHJcbiAgICBjb25zdCBpc1JvdGF0ZSA9IHRoaXMucm90YXRlICUgMTgwICE9PSAwO1xyXG4gICAgY29uc3QgZml0Q29udGVudFBhcmFtcyA9IHtcclxuICAgICAgd2lkdGg6IGlzUm90YXRlID8gaGVpZ2h0IDogd2lkdGgsXHJcbiAgICAgIGhlaWdodDogaXNSb3RhdGUgPyB3aWR0aCA6IGhlaWdodCxcclxuICAgICAgbGVmdCxcclxuICAgICAgdG9wLFxyXG4gICAgICBjbGllbnRXaWR0aCxcclxuICAgICAgY2xpZW50SGVpZ2h0XHJcbiAgICB9O1xyXG4gICAgY29uc3QgZml0Q29udGVudFBvcyA9IGdldEZpdENvbnRlbnRQb3NpdGlvbihmaXRDb250ZW50UGFyYW1zKTtcclxuICAgIGlmIChpc05vdE5pbChmaXRDb250ZW50UG9zLngpIHx8IGlzTm90TmlsKGZpdENvbnRlbnRQb3MueSkpIHtcclxuICAgICAgdGhpcy5wb3NpdGlvbiA9IHsgLi4udGhpcy5wb3NpdGlvbiwgLi4uZml0Q29udGVudFBvcyB9O1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XHJcbiAgICB0aGlzLmRlc3Ryb3kkLm5leHQoKTtcclxuICAgIHRoaXMuZGVzdHJveSQuY29tcGxldGUoKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgdXBkYXRlUHJldmlld0ltYWdlVHJhbnNmb3JtKCk6IHZvaWQge1xyXG4gICAgdGhpcy5wcmV2aWV3SW1hZ2VUcmFuc2Zvcm0gPSBgc2NhbGUzZCgke3RoaXMuem9vbX0sICR7dGhpcy56b29tfSwgMSkgcm90YXRlKCR7dGhpcy5yb3RhdGV9ZGVnKWA7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHVwZGF0ZVByZXZpZXdJbWFnZVdyYXBwZXJUcmFuc2Zvcm0oKTogdm9pZCB7XHJcbiAgICB0aGlzLnByZXZpZXdJbWFnZVdyYXBwZXJUcmFuc2Zvcm0gPSBgdHJhbnNsYXRlM2QoJHt0aGlzLnBvc2l0aW9uLnh9cHgsICR7dGhpcy5wb3NpdGlvbi55fXB4LCAwKWA7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHVwZGF0ZVpvb21PdXREaXNhYmxlZCgpOiB2b2lkIHtcclxuICAgIHRoaXMuem9vbU91dERpc2FibGVkID0gdGhpcy56b29tIDw9IDE7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHNldEVudGVyQW5pbWF0aW9uQ2xhc3MoKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5hbmltYXRpb25EaXNhYmxlZCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBjb25zdCBiYWNrZHJvcEVsZW1lbnQgPSB0aGlzLm92ZXJsYXlSZWYuYmFja2Ryb3BFbGVtZW50O1xyXG4gICAgaWYgKGJhY2tkcm9wRWxlbWVudCkge1xyXG4gICAgICBiYWNrZHJvcEVsZW1lbnQuY2xhc3NMaXN0LmFkZChURFNfSU1BR0VfRkFERV9DTEFTU19OQU1FX01BUC5lbnRlcik7XHJcbiAgICAgIGJhY2tkcm9wRWxlbWVudC5jbGFzc0xpc3QuYWRkKFREU19JTUFHRV9GQURFX0NMQVNTX05BTUVfTUFQLmVudGVyQWN0aXZlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgc2V0TGVhdmVBbmltYXRpb25DbGFzcygpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLmFuaW1hdGlvbkRpc2FibGVkKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNvbnN0IGJhY2tkcm9wRWxlbWVudCA9IHRoaXMub3ZlcmxheVJlZi5iYWNrZHJvcEVsZW1lbnQ7XHJcbiAgICBpZiAoYmFja2Ryb3BFbGVtZW50KSB7XHJcbiAgICAgIGJhY2tkcm9wRWxlbWVudC5jbGFzc0xpc3QuYWRkKFREU19JTUFHRV9GQURFX0NMQVNTX05BTUVfTUFQLmxlYXZlKTtcclxuICAgICAgYmFja2Ryb3BFbGVtZW50LmNsYXNzTGlzdC5hZGQoVERTX0lNQUdFX0ZBREVfQ0xBU1NfTkFNRV9NQVAubGVhdmVBY3RpdmUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSByZXNldCgpOiB2b2lkIHtcclxuICAgIHRoaXMuem9vbSA9IDE7XHJcbiAgICB0aGlzLnJvdGF0ZSA9IDA7XHJcbiAgICB0aGlzLnBvc2l0aW9uID0geyAuLi5pbml0aWFsUG9zaXRpb24gfTtcclxuICB9XHJcbn1cclxuIl19