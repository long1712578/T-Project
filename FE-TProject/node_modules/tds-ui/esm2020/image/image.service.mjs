import { OverlayConfig, OverlayRef } from '@angular/cdk/overlay';
import { ComponentPortal } from '@angular/cdk/portal';
import { Injectable, Injector, Optional } from '@angular/core';
import { TDS_IMAGE_PREVIEW_MASK_CLASS_NAME } from './image-config';
import { TDSImagePreviewOptions } from './image-preview-options';
import { TDSImagePreviewRef } from './image-preview-ref';
import { TDSImagePreviewComponent } from './image-preview.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/overlay";
import * as i2 from "tds-ui/core/config";
import * as i3 from "@angular/cdk/bidi";
const TDS_CONFIG_MODULE_NAME = 'image';
export class TDSImageService {
    constructor(overlay, injector, tdsConfigService, directionality) {
        this.overlay = overlay;
        this.injector = injector;
        this.tdsConfigService = tdsConfigService;
        this.directionality = directionality;
    }
    preview(images, options) {
        return this.display(images, options);
    }
    display(images, config) {
        const configMerged = { ...new TDSImagePreviewOptions(), ...(config ?? {}) };
        const overlayRef = this.createOverlay(configMerged);
        const previewComponent = this.attachPreviewComponent(overlayRef, configMerged);
        previewComponent.setImages(images);
        const previewRef = new TDSImagePreviewRef(previewComponent, configMerged, overlayRef);
        previewComponent.previewRef = previewRef;
        return previewRef;
    }
    attachPreviewComponent(overlayRef, config) {
        const injector = Injector.create({
            parent: this.injector,
            providers: [
                { provide: OverlayRef, useValue: overlayRef },
                { provide: TDSImagePreviewOptions, useValue: config }
            ]
        });
        const containerPortal = new ComponentPortal(TDSImagePreviewComponent, null, injector);
        const containerRef = overlayRef.attach(containerPortal);
        return containerRef.instance;
    }
    createOverlay(config) {
        const globalConfig = this.tdsConfigService.getConfigForComponent(TDS_CONFIG_MODULE_NAME) || {};
        const overLayConfig = new OverlayConfig({
            hasBackdrop: true,
            scrollStrategy: this.overlay.scrollStrategies.block(),
            positionStrategy: this.overlay.position().global(),
            disposeOnNavigation: config.closeOnNavigation ?? globalConfig.closeOnNavigation ?? true,
            backdropClass: TDS_IMAGE_PREVIEW_MASK_CLASS_NAME,
            direction: config.direction || globalConfig.direction || this.directionality.value
        });
        return this.overlay.create(overLayConfig);
    }
}
TDSImageService.ɵfac = function TDSImageService_Factory(t) { return new (t || TDSImageService)(i0.ɵɵinject(i1.Overlay), i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i2.TDSConfigService), i0.ɵɵinject(i3.Directionality, 8)); };
TDSImageService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: TDSImageService, factory: TDSImageService.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSImageService, [{
        type: Injectable
    }], function () { return [{ type: i1.Overlay }, { type: i0.Injector }, { type: i2.TDSConfigService }, { type: i3.Directionality, decorators: [{
                type: Optional
            }] }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2Uuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL3Rkcy11aS9pbWFnZS9pbWFnZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE9BQU8sRUFBVyxhQUFhLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDMUUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUcvRCxPQUFPLEVBQUUsaUNBQWlDLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNuRSxPQUFPLEVBQVksc0JBQXNCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUMzRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQzs7Ozs7QUFDckUsTUFBTSxzQkFBc0IsR0FBaUIsT0FBTyxDQUFDO0FBTXJELE1BQU0sT0FBTyxlQUFlO0lBQzFCLFlBQ1UsT0FBZ0IsRUFDaEIsUUFBa0IsRUFDbEIsZ0JBQWtDLEVBQ3RCLGNBQThCO1FBSDFDLFlBQU8sR0FBUCxPQUFPLENBQVM7UUFDaEIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUNsQixxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBQ3RCLG1CQUFjLEdBQWQsY0FBYyxDQUFnQjtJQUNqRCxDQUFDO0lBRUosT0FBTyxDQUFDLE1BQWtCLEVBQUUsT0FBZ0M7UUFDMUQsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBRU8sT0FBTyxDQUFDLE1BQWtCLEVBQUUsTUFBK0I7UUFDakUsTUFBTSxZQUFZLEdBQUcsRUFBRSxHQUFHLElBQUksc0JBQXNCLEVBQUUsRUFBRSxHQUFHLENBQUMsTUFBTSxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUM7UUFDNUUsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUNwRCxNQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxVQUFVLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDL0UsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ25DLE1BQU0sVUFBVSxHQUFHLElBQUksa0JBQWtCLENBQUMsZ0JBQWdCLEVBQUUsWUFBWSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBRXRGLGdCQUFnQixDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7UUFDekMsT0FBTyxVQUFVLENBQUM7SUFDcEIsQ0FBQztJQUVPLHNCQUFzQixDQUFDLFVBQXNCLEVBQUUsTUFBOEI7UUFDbkYsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQztZQUMvQixNQUFNLEVBQUUsSUFBSSxDQUFDLFFBQVE7WUFDckIsU0FBUyxFQUFFO2dCQUNULEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFO2dCQUM3QyxFQUFFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFO2FBQ3REO1NBQ0YsQ0FBQyxDQUFDO1FBRUgsTUFBTSxlQUFlLEdBQUcsSUFBSSxlQUFlLENBQUMsd0JBQXdCLEVBQUUsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQ3RGLE1BQU0sWUFBWSxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUM7UUFFeEQsT0FBTyxZQUFZLENBQUMsUUFBUSxDQUFDO0lBQy9CLENBQUM7SUFFTyxhQUFhLENBQUMsTUFBOEI7UUFDbEQsTUFBTSxZQUFZLEdBQUksSUFBSSxDQUFDLGdCQUFnQixDQUFDLHFCQUFxQixDQUFDLHNCQUFzQixDQUFpQixJQUFJLEVBQUUsQ0FBQztRQUNoSCxNQUFNLGFBQWEsR0FBRyxJQUFJLGFBQWEsQ0FBQztZQUN0QyxXQUFXLEVBQUUsSUFBSTtZQUNqQixjQUFjLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLEVBQUU7WUFDckQsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxNQUFNLEVBQUU7WUFDbEQsbUJBQW1CLEVBQUUsTUFBTSxDQUFDLGlCQUFpQixJQUFJLFlBQVksQ0FBQyxpQkFBaUIsSUFBSSxJQUFJO1lBQ3ZGLGFBQWEsRUFBRSxpQ0FBaUM7WUFDaEQsU0FBUyxFQUFFLE1BQU0sQ0FBQyxTQUFTLElBQUksWUFBWSxDQUFDLFNBQVMsSUFBSSxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUs7U0FDbkYsQ0FBQyxDQUFDO1FBRUgsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUM1QyxDQUFDOzs4RUFsRFUsZUFBZTtxRUFBZixlQUFlLFdBQWYsZUFBZTt1RkFBZixlQUFlO2NBRDNCLFVBQVU7O3NCQU1OLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuXHJcbmltcG9ydCB7IERpcmVjdGlvbmFsaXR5IH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2JpZGknO1xyXG5pbXBvcnQgeyBPdmVybGF5LCBPdmVybGF5Q29uZmlnLCBPdmVybGF5UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL292ZXJsYXknO1xyXG5pbXBvcnQgeyBDb21wb25lbnRQb3J0YWwgfSBmcm9tICdAYW5ndWxhci9jZGsvcG9ydGFsJztcclxuaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0b3IsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEltYWdlQ29uZmlnLCBURFNDb25maWdLZXksIFREU0NvbmZpZ1NlcnZpY2UgfSBmcm9tICd0ZHMtdWkvY29yZS9jb25maWcnO1xyXG5cclxuaW1wb3J0IHsgVERTX0lNQUdFX1BSRVZJRVdfTUFTS19DTEFTU19OQU1FIH0gZnJvbSAnLi9pbWFnZS1jb25maWcnO1xyXG5pbXBvcnQgeyBURFNJbWFnZSwgVERTSW1hZ2VQcmV2aWV3T3B0aW9ucyB9IGZyb20gJy4vaW1hZ2UtcHJldmlldy1vcHRpb25zJztcclxuaW1wb3J0IHsgVERTSW1hZ2VQcmV2aWV3UmVmIH0gZnJvbSAnLi9pbWFnZS1wcmV2aWV3LXJlZic7XHJcbmltcG9ydCB7IFREU0ltYWdlUHJldmlld0NvbXBvbmVudCB9IGZyb20gJy4vaW1hZ2UtcHJldmlldy5jb21wb25lbnQnO1xyXG5jb25zdCBURFNfQ09ORklHX01PRFVMRV9OQU1FOiBURFNDb25maWdLZXkgPSAnaW1hZ2UnO1xyXG5leHBvcnQgaW50ZXJmYWNlIFREU0ltYWdlU2VydmljZSB7XHJcbiAgcHJldmlldyhpbWFnZXM6IFREU0ltYWdlW10sIG9wdGlvbj86IFREU0ltYWdlUHJldmlld09wdGlvbnMpOiBURFNJbWFnZVByZXZpZXdSZWY7XHJcbn1cclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFREU0ltYWdlU2VydmljZSB7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIG92ZXJsYXk6IE92ZXJsYXksXHJcbiAgICBwcml2YXRlIGluamVjdG9yOiBJbmplY3RvcixcclxuICAgIHByaXZhdGUgdGRzQ29uZmlnU2VydmljZTogVERTQ29uZmlnU2VydmljZSxcclxuICAgIEBPcHRpb25hbCgpIHByaXZhdGUgZGlyZWN0aW9uYWxpdHk6IERpcmVjdGlvbmFsaXR5XHJcbiAgKSB7fVxyXG5cclxuICBwcmV2aWV3KGltYWdlczogVERTSW1hZ2VbXSwgb3B0aW9ucz86IFREU0ltYWdlUHJldmlld09wdGlvbnMpOiBURFNJbWFnZVByZXZpZXdSZWYge1xyXG4gICAgcmV0dXJuIHRoaXMuZGlzcGxheShpbWFnZXMsIG9wdGlvbnMpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBkaXNwbGF5KGltYWdlczogVERTSW1hZ2VbXSwgY29uZmlnPzogVERTSW1hZ2VQcmV2aWV3T3B0aW9ucyk6IFREU0ltYWdlUHJldmlld1JlZiB7XHJcbiAgICBjb25zdCBjb25maWdNZXJnZWQgPSB7IC4uLm5ldyBURFNJbWFnZVByZXZpZXdPcHRpb25zKCksIC4uLihjb25maWcgPz8ge30pIH07XHJcbiAgICBjb25zdCBvdmVybGF5UmVmID0gdGhpcy5jcmVhdGVPdmVybGF5KGNvbmZpZ01lcmdlZCk7XHJcbiAgICBjb25zdCBwcmV2aWV3Q29tcG9uZW50ID0gdGhpcy5hdHRhY2hQcmV2aWV3Q29tcG9uZW50KG92ZXJsYXlSZWYsIGNvbmZpZ01lcmdlZCk7XHJcbiAgICBwcmV2aWV3Q29tcG9uZW50LnNldEltYWdlcyhpbWFnZXMpO1xyXG4gICAgY29uc3QgcHJldmlld1JlZiA9IG5ldyBURFNJbWFnZVByZXZpZXdSZWYocHJldmlld0NvbXBvbmVudCwgY29uZmlnTWVyZ2VkLCBvdmVybGF5UmVmKTtcclxuXHJcbiAgICBwcmV2aWV3Q29tcG9uZW50LnByZXZpZXdSZWYgPSBwcmV2aWV3UmVmO1xyXG4gICAgcmV0dXJuIHByZXZpZXdSZWY7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGF0dGFjaFByZXZpZXdDb21wb25lbnQob3ZlcmxheVJlZjogT3ZlcmxheVJlZiwgY29uZmlnOiBURFNJbWFnZVByZXZpZXdPcHRpb25zKTogVERTSW1hZ2VQcmV2aWV3Q29tcG9uZW50IHtcclxuICAgIGNvbnN0IGluamVjdG9yID0gSW5qZWN0b3IuY3JlYXRlKHtcclxuICAgICAgcGFyZW50OiB0aGlzLmluamVjdG9yLFxyXG4gICAgICBwcm92aWRlcnM6IFtcclxuICAgICAgICB7IHByb3ZpZGU6IE92ZXJsYXlSZWYsIHVzZVZhbHVlOiBvdmVybGF5UmVmIH0sXHJcbiAgICAgICAgeyBwcm92aWRlOiBURFNJbWFnZVByZXZpZXdPcHRpb25zLCB1c2VWYWx1ZTogY29uZmlnIH1cclxuICAgICAgXVxyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgY29udGFpbmVyUG9ydGFsID0gbmV3IENvbXBvbmVudFBvcnRhbChURFNJbWFnZVByZXZpZXdDb21wb25lbnQsIG51bGwsIGluamVjdG9yKTtcclxuICAgIGNvbnN0IGNvbnRhaW5lclJlZiA9IG92ZXJsYXlSZWYuYXR0YWNoKGNvbnRhaW5lclBvcnRhbCk7XHJcblxyXG4gICAgcmV0dXJuIGNvbnRhaW5lclJlZi5pbnN0YW5jZTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY3JlYXRlT3ZlcmxheShjb25maWc6IFREU0ltYWdlUHJldmlld09wdGlvbnMpOiBPdmVybGF5UmVmIHtcclxuICAgIGNvbnN0IGdsb2JhbENvbmZpZyA9ICh0aGlzLnRkc0NvbmZpZ1NlcnZpY2UuZ2V0Q29uZmlnRm9yQ29tcG9uZW50KFREU19DT05GSUdfTU9EVUxFX05BTUUpIGFzIEltYWdlQ29uZmlnKSB8fCB7fTtcclxuICAgIGNvbnN0IG92ZXJMYXlDb25maWcgPSBuZXcgT3ZlcmxheUNvbmZpZyh7XHJcbiAgICAgIGhhc0JhY2tkcm9wOiB0cnVlLFxyXG4gICAgICBzY3JvbGxTdHJhdGVneTogdGhpcy5vdmVybGF5LnNjcm9sbFN0cmF0ZWdpZXMuYmxvY2soKSxcclxuICAgICAgcG9zaXRpb25TdHJhdGVneTogdGhpcy5vdmVybGF5LnBvc2l0aW9uKCkuZ2xvYmFsKCksXHJcbiAgICAgIGRpc3Bvc2VPbk5hdmlnYXRpb246IGNvbmZpZy5jbG9zZU9uTmF2aWdhdGlvbiA/PyBnbG9iYWxDb25maWcuY2xvc2VPbk5hdmlnYXRpb24gPz8gdHJ1ZSxcclxuICAgICAgYmFja2Ryb3BDbGFzczogVERTX0lNQUdFX1BSRVZJRVdfTUFTS19DTEFTU19OQU1FLFxyXG4gICAgICBkaXJlY3Rpb246IGNvbmZpZy5kaXJlY3Rpb24gfHwgZ2xvYmFsQ29uZmlnLmRpcmVjdGlvbiB8fCB0aGlzLmRpcmVjdGlvbmFsaXR5LnZhbHVlXHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gdGhpcy5vdmVybGF5LmNyZWF0ZShvdmVyTGF5Q29uZmlnKTtcclxuICB9XHJcbn1cclxuIl19