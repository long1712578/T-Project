import { __decorate } from "tslib";
import { DOCUMENT } from '@angular/common';
import { Directive, Inject, Input, Optional } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { WithConfig } from 'tds-ui/core/config';
import { InputBoolean } from 'tds-ui/shared/utility';
import * as i0 from "@angular/core";
import * as i1 from "tds-ui/core/config";
import * as i2 from "./image.service";
import * as i3 from "./image-group.component";
import * as i4 from "@angular/cdk/bidi";
const TDS_CONFIG_MODULE_NAME = 'image';
export class TDSImageDirective {
    constructor(document, tdsConfigService, elementRef, tdsImageService, cdr, parentGroup, directionality) {
        this.document = document;
        this.tdsConfigService = tdsConfigService;
        this.elementRef = elementRef;
        this.tdsImageService = tdsImageService;
        this.cdr = cdr;
        this.parentGroup = parentGroup;
        this.directionality = directionality;
        this._TDSModuleName = TDS_CONFIG_MODULE_NAME;
        this.tdsSrc = '';
        this.srcset = '';
        this.disablePreview = false;
        this.fallback = null;
        this.placeholder = null;
        this.status = 'normal';
        this.destroy$ = new Subject();
    }
    get previewable() {
        return !this.disablePreview && this.status !== 'error';
    }
    ngOnInit() {
        this.backLoad();
        if (this.parentGroup) {
            this.parentGroup.addImage(this);
        }
        if (this.directionality) {
            this.directionality.change?.pipe(takeUntil(this.destroy$)).subscribe((direction) => {
                this.dir = direction;
                this.cdr.detectChanges();
            });
            this.dir = this.directionality.value;
        }
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    onPreview() {
        if (!this.previewable) {
            return;
        }
        if (this.parentGroup) {
            // preview inside image group
            const previewAbleImages = this.parentGroup.images.filter(e => e.previewable);
            const previewImages = previewAbleImages.map(e => ({ src: e.tdsSrc, srcset: e.srcset }));
            const previewIndex = previewAbleImages.findIndex(el => this === el);
            const previewRef = this.tdsImageService.preview(previewImages, { direction: this.dir });
            previewRef.switchTo(previewIndex);
        }
        else {
            // preview not inside image group
            const previewImages = [{ src: this.tdsSrc, srcset: this.srcset }];
            this.tdsImageService.preview(previewImages, { direction: this.dir });
        }
    }
    getElement() {
        return this.elementRef;
    }
    ngOnChanges(changes) {
        const { tdsSrc } = changes;
        if (tdsSrc) {
            this.getElement().nativeElement.src = tdsSrc.currentValue;
            this.backLoad();
        }
    }
    /**
     * use internal Image object handle fallback & placeholder
     *
     * @private
     */
    backLoad() {
        this.backLoadImage = this.document.createElement('img');
        this.backLoadImage.src = this.tdsSrc;
        this.backLoadImage.srcset = this.srcset;
        this.status = 'loading';
        if (this.backLoadImage.complete) {
            this.status = 'normal';
            this.getElement().nativeElement.src = this.tdsSrc;
            this.getElement().nativeElement.srcset = this.srcset;
        }
        else {
            if (this.placeholder) {
                this.getElement().nativeElement.src = this.placeholder;
                this.getElement().nativeElement.srcset = '';
            }
            else {
                this.getElement().nativeElement.src = this.tdsSrc;
                this.getElement().nativeElement.srcset = this.srcset;
            }
            this.backLoadImage.onload = () => {
                this.status = 'normal';
                this.getElement().nativeElement.src = this.tdsSrc;
                this.getElement().nativeElement.srcset = this.srcset;
            };
            this.backLoadImage.onerror = () => {
                this.status = 'error';
                if (this.fallback) {
                    this.getElement().nativeElement.src = this.fallback;
                    this.getElement().nativeElement.srcset = '';
                }
            };
        }
    }
}
TDSImageDirective.ɵfac = function TDSImageDirective_Factory(t) { return new (t || TDSImageDirective)(i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(i1.TDSConfigService), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i2.TDSImageService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i3.TDSImageGroupComponent, 8), i0.ɵɵdirectiveInject(i4.Directionality, 8)); };
TDSImageDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: TDSImageDirective, selectors: [["img", "tds-image", ""]], hostBindings: function TDSImageDirective_HostBindings(rf, ctx) { if (rf & 1) {
        i0.ɵɵlistener("click", function TDSImageDirective_click_HostBindingHandler() { return ctx.onPreview(); });
    } }, inputs: { tdsSrc: "tdsSrc", srcset: "srcset", disablePreview: "disablePreview", fallback: "fallback", placeholder: "placeholder" }, exportAs: ["tdsImage"], features: [i0.ɵɵNgOnChangesFeature] });
__decorate([
    InputBoolean(),
    WithConfig()
], TDSImageDirective.prototype, "disablePreview", void 0);
__decorate([
    WithConfig()
], TDSImageDirective.prototype, "fallback", void 0);
__decorate([
    WithConfig()
], TDSImageDirective.prototype, "placeholder", void 0);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSImageDirective, [{
        type: Directive,
        args: [{
                selector: 'img[tds-image]',
                exportAs: 'tdsImage',
                host: {
                    '(click)': 'onPreview()'
                }
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }, { type: i1.TDSConfigService }, { type: i0.ElementRef }, { type: i2.TDSImageService }, { type: i0.ChangeDetectorRef }, { type: i3.TDSImageGroupComponent, decorators: [{
                type: Optional
            }] }, { type: i4.Directionality, decorators: [{
                type: Optional
            }] }]; }, { tdsSrc: [{
            type: Input
        }], srcset: [{
            type: Input
        }], disablePreview: [{
            type: Input
        }], fallback: [{
            type: Input
        }], placeholder: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;base64,