import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewChild, ViewEncapsulation } from '@angular/core';
import { WithConfig } from 'tds-ui/core/config';
import { InputNumber, TDSHelperString } from 'tds-ui/shared/utility';
import * as i0 from "@angular/core";
import * as i1 from "tds-ui/core/config";
import * as i2 from "@angular/cdk/platform";
import * as i3 from "@angular/common";
const _c0 = ["textEl"];
function TDSAvatarComponent_i_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "i");
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵclassMap(ctx_r0.icon);
} }
function TDSAvatarComponent_img_1_Template(rf, ctx) { if (rf & 1) {
    const _r7 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "img", 6);
    i0.ɵɵlistener("error", function TDSAvatarComponent_img_1_Template_img_error_0_listener($event) { i0.ɵɵrestoreView(_r7); const ctx_r6 = i0.ɵɵnextContext(); return ctx_r6.imgError($event); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵproperty("src", ctx_r1.tdsSrc, i0.ɵɵsanitizeUrl);
    i0.ɵɵattribute("srcset", ctx_r1.tdsSrcSet, i0.ɵɵsanitizeUrl)("alt", ctx_r1.alt);
} }
function TDSAvatarComponent_span_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 7, 8);
    i0.ɵɵtext(2);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(ctx_r2.text);
} }
function TDSAvatarComponent__svg_svg_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵnamespaceSVG();
    i0.ɵɵelementStart(0, "svg", 9);
    i0.ɵɵelement(1, "path", 10)(2, "path", 11)(3, "path", 12);
    i0.ɵɵelementEnd();
} }
function TDSAvatarComponent__svg_svg_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵnamespaceSVG();
    i0.ɵɵelementStart(0, "svg", 13);
    i0.ɵɵelement(1, "rect", 14)(2, "path", 15)(3, "path", 16);
    i0.ɵɵelementEnd();
} }
function TDSAvatarComponent_img_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "img", 17);
} if (rf & 2) {
    const ctx_r5 = i0.ɵɵnextContext();
    i0.ɵɵproperty("src", ctx_r5.tdsSrcPlaceholder, i0.ɵɵsanitizeUrl);
    i0.ɵɵattribute("srcset", ctx_r5.tdsSrcPlaceholder, i0.ɵɵsanitizeUrl)("alt", ctx_r5.alt);
} }
const TDS_CONFIG_MODULE_NAME = 'avatar';
export class TDSAvatarComponent {
    constructor(tdsConfigService, elementRef, cdr, platform) {
        this.tdsConfigService = tdsConfigService;
        this.elementRef = elementRef;
        this.cdr = cdr;
        this.platform = platform;
        this._tdsModuleName = TDS_CONFIG_MODULE_NAME;
        this.shape = 'circle';
        this.size = 'md';
        this.gap = 4;
        this.isAvatar = true;
        this.error = new EventEmitter();
        this.showPlaceholder = false;
        this.hasText = false;
        this.hasSrc = true;
        this.hasIcon = false;
        this.textStyles = {};
        this.classMap = {};
        this.customSize = null;
        this.el = this.elementRef.nativeElement;
        // TODO: move to host after View Engine deprecation
        this.elementRef.nativeElement.classList.add('tds-avatar');
    }
    get hasTdsSrc() {
        return TDSHelperString.hasValueString(this.tdsSrc);
    }
    imgError($event) {
        this.error.emit($event);
        if (!$event.defaultPrevented) {
            this.hasSrc = false;
            this.hasIcon = false;
            this.hasText = false;
            this.showPlaceholder = false;
            if (TDSHelperString.hasValueString(this.icon)) {
                this.hasIcon = true;
            }
            else if (TDSHelperString.hasValueString(this.text)) {
                this.hasText = true;
            }
            else {
                this.showPlaceholder = true;
            }
            this.cdr.detectChanges();
            this.setSizeStyle();
            this.notifyCalc();
        }
    }
    ngOnChanges() {
        this.hasText = !TDSHelperString.hasValueString(this.tdsSrc) && TDSHelperString.hasValueString(this.text);
        this.hasIcon = !TDSHelperString.hasValueString(this.tdsSrc) && TDSHelperString.hasValueString(this.icon);
        this.hasSrc = TDSHelperString.hasValueString(this.tdsSrc);
        this.showPlaceholder = !this.hasIcon && !this.hasSrc && !this.hasText;
        this.setSizeStyle();
        this.notifyCalc();
        this.buildClsCss();
        // this.buildClsIcon();
    }
    calcStringSize() {
        if (!TDSHelperString.hasValueString(this.text)) {
            return;
        }
        const childrenWidth = this.textEl.nativeElement.offsetWidth;
        const avatarWidth = this.el.getBoundingClientRect().width;
        const offset = this.gap * 2 < avatarWidth ? this.gap * 2 : 8;
        const scale = avatarWidth - offset < childrenWidth ? (avatarWidth - offset) / childrenWidth : 1;
        this.textStyles = {
            'transform-origin': `0 center`,
            transform: `scale(${scale}) translateX(-50%)`
        };
        if (this.customSize) {
            Object.assign(this.textStyles, {
                lineHeight: this.customSize
            });
        }
        this.cdr.detectChanges();
    }
    notifyCalc() {
        // If use ngAfterViewChecked, always demands more computations, so......
        if (this.platform.isBrowser) {
            setTimeout(() => {
                this.calcStringSize();
            });
        }
    }
    setSizeStyle() {
        if (typeof this.size === 'number') {
            this.customSize = `${this.size}px`;
        }
        else {
            this.customSize = null;
        }
        this.cdr.markForCheck();
    }
    buildClsCss() {
        this.classMap = {};
        let defaulClass = {
            "h-6": this.size === 'sm',
            "w-6": this.size === 'sm',
            "h-9": this.size === 'md',
            "w-9": this.size === 'md',
            "h-12": this.size === 'lg',
            "w-12": this.size === 'lg',
            "h-16": this.size === 'xl',
            "w-16": this.size === 'xl',
            "box-border": true,
            "m-0": true,
            "p-0": true,
            "relative": true,
            "inline-flex": true,
            "items-center": true,
            "justify-center": true,
            "overflow-hidden": true,
            "align-middle": true,
            "text-center": true,
            "whitespace-nowrap": true,
            "text-base": this.size === 'sm',
            "text-lg": this.size === 'md',
            "text-2xl": this.size === 'lg',
            "text-4xl": this.size === 'xl',
        };
        if (this.shape != "circle") {
            if (typeof this.size != "number")
                this.classMap = {
                    "rounded-md": this.size === 'sm',
                    "rounded-lg": this.size === 'md',
                    "rounded-10": this.size === 'lg',
                    "rounded-xl": this.size === 'xl',
                    ...defaulClass
                    // 
                };
            else {
                this.classMap = defaulClass;
            }
        }
        else {
            this.classMap = {
                "rounded-full": true,
                ...defaulClass
            };
        }
    }
    get hasTdsSrcPlaceholder() {
        return TDSHelperString.hasValueString(this.tdsSrcPlaceholder);
    }
    get element() {
        return this.el;
    }
}
TDSAvatarComponent.ɵfac = function TDSAvatarComponent_Factory(t) { return new (t || TDSAvatarComponent)(i0.ɵɵdirectiveInject(i1.TDSConfigService), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.Platform)); };
TDSAvatarComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSAvatarComponent, selectors: [["tds-avatar"]], viewQuery: function TDSAvatarComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.textEl = _t.first);
    } }, hostVars: 22, hostBindings: function TDSAvatarComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵclassMap(ctx.classMap);
        i0.ɵɵstyleProp("width", ctx.customSize)("height", ctx.customSize)("line-height", ctx.customSize)("font-size", ctx.hasIcon && ctx.customSize ? ctx.size / 2 : null, "px");
        i0.ɵɵclassProp("tds-avatar-lg", ctx.size === "lg")("tds-avatar-sm", ctx.size === "sm")("tds-avatar-square", ctx.shape === "square")("tds-avatar-circle", ctx.shape === "circle")("tds-avatar-icon", ctx.icon)("tds-avatar-image", ctx.hasSrc);
    } }, inputs: { shape: "shape", size: "size", gap: "gap", isAvatar: "isAvatar", text: "text", tdsSrc: "tdsSrc", tdsSrcSet: "tdsSrcSet", tdsSrcPlaceholder: "tdsSrcPlaceholder", alt: "alt", icon: "icon" }, outputs: { error: "error" }, exportAs: ["tdsAvatar"], features: [i0.ɵɵNgOnChangesFeature], decls: 6, vars: 6, consts: [[3, "class", 4, "ngIf"], [3, "src", "error", 4, "ngIf"], ["class", "tds-avatar-string", 4, "ngIf"], ["viewBox", "0 0 36 36", "class", "w-full h-full", "fill", "none", "xmlns", "http://www.w3.org/2000/svg", 4, "ngIf"], ["class", "w-full h-full", "xmlns", "http://www.w3.org/2000/svg", "viewBox", "0 0 480 480", "fill", "none", 4, "ngIf"], [3, "src", 4, "ngIf"], [3, "src", "error"], [1, "tds-avatar-string"], ["textEl", ""], ["viewBox", "0 0 36 36", "fill", "none", "xmlns", "http://www.w3.org/2000/svg", 1, "w-full", "h-full"], ["d", "M36 0H0V36H36V0Z", "fill", "#F2F4F7"], ["d", "M18 23.03C12.6318 23.0301 7.42685 24.876 3.258 28.258C2.07431 29.241 0.983696 30.3309 0 31.514L0 36H36V31.237C34.9771 30.1771 33.889 29.1822 32.742 28.258C28.5732 24.876 23.3682 23.0301 18 23.03Z", "fill", "#D0D7DE"], ["d", "M18 19.8C19.335 19.8 20.6401 19.4041 21.7501 18.6624C22.8601 17.9207 23.7253 16.8665 24.2362 15.6331C24.7471 14.3997 24.8808 13.0425 24.6203 11.7331C24.3598 10.4238 23.717 9.22102 22.773 8.27702C21.829 7.33302 20.6262 6.69014 19.3169 6.42969C18.0075 6.16924 16.6503 6.30291 15.4169 6.8138C14.1835 7.3247 13.1293 8.18986 12.3876 9.29989C11.6459 10.4099 11.25 11.715 11.25 13.05C11.25 14.8402 11.9612 16.5571 13.227 17.823C14.4929 19.0888 16.2098 19.8 18 19.8Z", "fill", "#D0D7DE"], ["xmlns", "http://www.w3.org/2000/svg", "viewBox", "0 0 480 480", "fill", "none", 1, "w-full", "h-full"], ["fill", "#E9EDF2", 1, "w-full", "h-full"], ["d", "M195.249 231.124C205.01 231.124 212.948 223.163 212.948 213.373C212.948 203.584 205.01 195.623 195.249 195.623C185.487 195.623 177.548 203.584 177.548 213.373C177.548 223.163 185.487 231.124 195.249 231.124Z", "fill", "#A1ACB8"], ["d", "M305.874 169H173.124C160.93 169 151 178.958 151 191.188V288.812C151 301.042 160.93 311 173.124 311H305.874C318.07 311 328 301.042 328 288.812V191.188C328 178.958 318.07 169 305.874 169ZM173.124 186.75H305.874C308.318 186.75 310.3 188.738 310.3 191.188V254.192L282.343 221.478C279.378 217.99 275.085 216.126 270.475 216.021C265.89 216.047 261.59 218.088 258.652 221.621L225.782 261.184L215.074 250.472C209.021 244.402 199.17 244.402 193.126 250.472L168.7 274.958V191.188C168.7 188.738 170.682 186.75 173.124 186.75Z", "fill", "#A1ACB8"], [3, "src"]], template: function TDSAvatarComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtemplate(0, TDSAvatarComponent_i_0_Template, 1, 2, "i", 0);
        i0.ɵɵtemplate(1, TDSAvatarComponent_img_1_Template, 1, 3, "img", 1);
        i0.ɵɵtemplate(2, TDSAvatarComponent_span_2_Template, 3, 1, "span", 2);
        i0.ɵɵtemplate(3, TDSAvatarComponent__svg_svg_3_Template, 4, 0, "svg", 3);
        i0.ɵɵtemplate(4, TDSAvatarComponent__svg_svg_4_Template, 4, 0, "svg", 4);
        i0.ɵɵtemplate(5, TDSAvatarComponent_img_5_Template, 1, 3, "img", 5);
    } if (rf & 2) {
        i0.ɵɵproperty("ngIf", ctx.icon && ctx.hasIcon);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx.tdsSrc && ctx.hasSrc);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx.text && ctx.hasText);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx.showPlaceholder && !ctx.hasTdsSrcPlaceholder && ctx.isAvatar);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx.showPlaceholder && !ctx.hasTdsSrcPlaceholder && !ctx.isAvatar);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx.showPlaceholder && ctx.hasTdsSrcPlaceholder);
    } }, directives: [i3.NgIf], encapsulation: 2, changeDetection: 0 });
__decorate([
    WithConfig()
], TDSAvatarComponent.prototype, "shape", void 0);
__decorate([
    WithConfig()
], TDSAvatarComponent.prototype, "size", void 0);
__decorate([
    WithConfig(),
    InputNumber()
], TDSAvatarComponent.prototype, "gap", void 0);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSAvatarComponent, [{
        type: Component,
        args: [{
                selector: 'tds-avatar',
                exportAs: 'tdsAvatar',
                template: `
  <i [class]="icon"  *ngIf="icon && hasIcon" ></i>
  <img *ngIf="tdsSrc && hasSrc" [src]="tdsSrc" [attr.srcset]="tdsSrcSet" [attr.alt]="alt" (error)="imgError($event)" />
  <span class="tds-avatar-string" #textEl *ngIf="text && hasText">{{ text }}</span>  
  <svg *ngIf="showPlaceholder && !hasTdsSrcPlaceholder && isAvatar" viewBox="0 0 36 36"  class="w-full h-full" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M36 0H0V36H36V0Z" fill="#F2F4F7"/>
<path d="M18 23.03C12.6318 23.0301 7.42685 24.876 3.258 28.258C2.07431 29.241 0.983696 30.3309 0 31.514L0 36H36V31.237C34.9771 30.1771 33.889 29.1822 32.742 28.258C28.5732 24.876 23.3682 23.0301 18 23.03Z" fill="#D0D7DE"/>
<path d="M18 19.8C19.335 19.8 20.6401 19.4041 21.7501 18.6624C22.8601 17.9207 23.7253 16.8665 24.2362 15.6331C24.7471 14.3997 24.8808 13.0425 24.6203 11.7331C24.3598 10.4238 23.717 9.22102 22.773 8.27702C21.829 7.33302 20.6262 6.69014 19.3169 6.42969C18.0075 6.16924 16.6503 6.30291 15.4169 6.8138C14.1835 7.3247 13.1293 8.18986 12.3876 9.29989C11.6459 10.4099 11.25 11.715 11.25 13.05C11.25 14.8402 11.9612 16.5571 13.227 17.823C14.4929 19.0888 16.2098 19.8 18 19.8Z" fill="#D0D7DE"/>
</svg>  
<svg *ngIf="showPlaceholder && !hasTdsSrcPlaceholder && !isAvatar" class="w-full h-full"   xmlns="http://www.w3.org/2000/svg"  viewBox="0 0 480 480" fill="none">
<rect class="w-full h-full"  fill="#E9EDF2"/>
<path d="M195.249 231.124C205.01 231.124 212.948 223.163 212.948 213.373C212.948 203.584 205.01 195.623 195.249 195.623C185.487 195.623 177.548 203.584 177.548 213.373C177.548 223.163 185.487 231.124 195.249 231.124Z" fill="#A1ACB8"/>
<path d="M305.874 169H173.124C160.93 169 151 178.958 151 191.188V288.812C151 301.042 160.93 311 173.124 311H305.874C318.07 311 328 301.042 328 288.812V191.188C328 178.958 318.07 169 305.874 169ZM173.124 186.75H305.874C308.318 186.75 310.3 188.738 310.3 191.188V254.192L282.343 221.478C279.378 217.99 275.085 216.126 270.475 216.021C265.89 216.047 261.59 218.088 258.652 221.621L225.782 261.184L215.074 250.472C209.021 244.402 199.17 244.402 193.126 250.472L168.7 274.958V191.188C168.7 188.738 170.682 186.75 173.124 186.75Z" fill="#A1ACB8"/>
</svg>
<img *ngIf="showPlaceholder && hasTdsSrcPlaceholder" [src]="tdsSrcPlaceholder" [attr.srcset]="tdsSrcPlaceholder" [attr.alt]="alt"/>
  `,
                host: {
                    '[class.tds-avatar-lg]': `size === 'lg'`,
                    '[class.tds-avatar-sm]': `size === 'sm'`,
                    '[class.tds-avatar-square]': `shape === 'square'`,
                    '[class.tds-avatar-circle]': `shape === 'circle'`,
                    '[class.tds-avatar-icon]': `icon`,
                    '[class.tds-avatar-image]': `hasSrc `,
                    '[style.width]': 'customSize',
                    '[style.height]': 'customSize',
                    '[style.line-height]': 'customSize',
                    // size type is number when customSize is true
                    '[style.font-size.px]': '(hasIcon && customSize) ? $any(size) / 2 : null',
                    "[class]": 'classMap'
                },
                preserveWhitespaces: false,
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None
            }]
    }], function () { return [{ type: i1.TDSConfigService }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i2.Platform }]; }, { shape: [{
            type: Input
        }], size: [{
            type: Input
        }], gap: [{
            type: Input
        }], isAvatar: [{
            type: Input
        }], text: [{
            type: Input
        }], tdsSrc: [{
            type: Input
        }], tdsSrcSet: [{
            type: Input
        }], tdsSrcPlaceholder: [{
            type: Input
        }], alt: [{
            type: Input
        }], icon: [{
            type: Input
        }], error: [{
            type: Output
        }], textEl: [{
            type: ViewChild,
            args: ['textEl', { static: false }]
        }] }); })();
//# sourceMappingURL=data:application/json;base64,