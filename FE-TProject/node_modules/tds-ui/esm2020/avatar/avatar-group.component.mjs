import { ChangeDetectionStrategy, Component, ContentChildren, Input } from '@angular/core';
import { TDSAvatarComponent } from './avatar.component';
import * as i0 from "@angular/core";
const _c0 = ["*"];
export class TDSAvatarGroupComponent {
    constructor() {
        this.tdsClass = ['-ml-3', 'border', 'border-white', 'rounded-full'];
    }
    ngAfterViewInit() {
        if (this.lstAvatar) {
            this.lstAvatar.forEach((avatar, index) => {
                if (index != 0) {
                    this.tdsClass.forEach(cl => {
                        avatar.element.classList.add(cl);
                    });
                }
            });
        }
    }
}
TDSAvatarGroupComponent.ɵfac = function TDSAvatarGroupComponent_Factory(t) { return new (t || TDSAvatarGroupComponent)(); };
TDSAvatarGroupComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSAvatarGroupComponent, selectors: [["tds-avatar-group"]], contentQueries: function TDSAvatarGroupComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        i0.ɵɵcontentQuery(dirIndex, TDSAvatarComponent, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.lstAvatar = _t);
    } }, hostAttrs: [1, "tds-avatar-group", "inline-flex"], inputs: { tdsClass: "tdsClass" }, exportAs: ["tdsAvatarGroup"], ngContentSelectors: _c0, decls: 1, vars: 0, template: function TDSAvatarGroupComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSAvatarGroupComponent, [{
        type: Component,
        args: [{ selector: 'tds-avatar-group', exportAs: 'tdsAvatarGroup', changeDetection: ChangeDetectionStrategy.OnPush, host: {
                    class: 'tds-avatar-group inline-flex'
                }, template: "<ng-content></ng-content>" }]
    }], null, { lstAvatar: [{
            type: ContentChildren,
            args: [TDSAvatarComponent, { descendants: true }]
        }], tdsClass: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZhdGFyLWdyb3VwLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL3Rkcy11aS9hdmF0YXIvYXZhdGFyLWdyb3VwLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uL3Byb2plY3RzL3Rkcy11aS9hdmF0YXIvYXZhdGFyLWdyb3VwLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsZUFBZSxFQUFFLEtBQUssRUFBdUMsTUFBTSxlQUFlLENBQUM7QUFDaEksT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7OztBQVl4RCxNQUFNLE9BQU8sdUJBQXVCO0lBVnBDO1FBWVcsYUFBUSxHQUFnQixDQUFDLE9BQU8sRUFBQyxRQUFRLEVBQUMsY0FBYyxFQUFDLGNBQWMsQ0FBQyxDQUFDO0tBY25GO0lBYkMsZUFBZTtRQUNiLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNoQixJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQXlCLEVBQUMsS0FBWSxFQUFFLEVBQUU7Z0JBQ2hFLElBQUcsS0FBSyxJQUFJLENBQUMsRUFDYjtvQkFDRSxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUEsRUFBRTt3QkFDeEIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO29CQUNuQyxDQUFDLENBQUMsQ0FBQTtpQkFFSDtZQUNILENBQUMsQ0FBQyxDQUFBO1NBQ0w7SUFDSCxDQUFDOzs4RkFmVSx1QkFBdUI7MEVBQXZCLHVCQUF1QjtvQ0FDakIsa0JBQWtCOzs7Ozs7UUNoQnJDLGtCQUF5Qjs7dUZEZVosdUJBQXVCO2NBVm5DLFNBQVM7MkJBQ0Usa0JBQWtCLFlBQ2xCLGdCQUFnQixtQkFHVCx1QkFBdUIsQ0FBQyxNQUFNLFFBQ3pDO29CQUNKLEtBQUssRUFBRSw4QkFBOEI7aUJBQ3RDO2dCQUcyRCxTQUFTO2tCQUFwRSxlQUFlO21CQUFDLGtCQUFrQixFQUFFLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRTtZQUNqRCxRQUFRO2tCQUFoQixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiXHJcblxyXG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBDb250ZW50Q2hpbGRyZW4sIElucHV0LCBPbkNoYW5nZXMsIFF1ZXJ5TGlzdCwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBURFNBdmF0YXJDb21wb25lbnQgfSBmcm9tICcuL2F2YXRhci5jb21wb25lbnQnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICd0ZHMtYXZhdGFyLWdyb3VwJyxcclxuICBleHBvcnRBczogJ3Rkc0F2YXRhckdyb3VwJyxcclxuICAvLyB0ZW1wbGF0ZTogYDxuZy1jb250ZW50PjwvbmctY29udGVudD5gLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9hdmF0YXItZ3JvdXAuY29tcG9uZW50Lmh0bWwnLFxyXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxyXG4gIGhvc3Q6IHtcclxuICAgIGNsYXNzOiAndGRzLWF2YXRhci1ncm91cCBpbmxpbmUtZmxleCdcclxuICB9XHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBURFNBdmF0YXJHcm91cENvbXBvbmVudCB7XHJcbiAgQENvbnRlbnRDaGlsZHJlbihURFNBdmF0YXJDb21wb25lbnQsIHsgZGVzY2VuZGFudHM6IHRydWUgfSkgbHN0QXZhdGFyITogUXVlcnlMaXN0PFREU0F2YXRhckNvbXBvbmVudD47XHJcbiAgQElucHV0KCkgdGRzQ2xhc3M6QXJyYXk8c3RyaW5nPiA9WyctbWwtMycsJ2JvcmRlcicsJ2JvcmRlci13aGl0ZScsJ3JvdW5kZWQtZnVsbCddO1xyXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLmxzdEF2YXRhcikge1xyXG4gICAgICAgIHRoaXMubHN0QXZhdGFyLmZvckVhY2goKGF2YXRhcjpURFNBdmF0YXJDb21wb25lbnQsaW5kZXg6bnVtYmVyKSA9PntcclxuICAgICAgICAgIGlmKGluZGV4ICE9IDApXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMudGRzQ2xhc3MuZm9yRWFjaChjbD0+e1xyXG4gICAgICAgICAgICAgIGF2YXRhci5lbGVtZW50LmNsYXNzTGlzdC5hZGQoY2wpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCI8bmctY29udGVudD48L25nLWNvbnRlbnQ+Il19