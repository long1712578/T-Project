import { __decorate } from "tslib";
import { LEFT_ARROW, RIGHT_ARROW } from '@angular/cdk/keycodes';
import { ChangeDetectionStrategy, Component, EventEmitter, forwardRef, Input, Optional, Output, ViewChild, ViewEncapsulation } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { WithConfig } from "tds-ui/core/config";
import { InputBoolean, InputNumber } from 'tds-ui/shared/utility';
import * as i0 from "@angular/core";
import * as i1 from "tds-ui/core/config";
import * as i2 from "@angular/cdk/bidi";
import * as i3 from "@angular/common";
import * as i4 from "tds-ui/tooltip";
import * as i5 from "./rate-item.component";
const _c0 = ["ulElement"];
function TDSRateComponent_li_2_Template(rf, ctx) { if (rf & 1) {
    const _r5 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "li", 3)(1, "div", 4);
    i0.ɵɵlistener("itemHover", function TDSRateComponent_li_2_Template_div_itemHover_1_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r5); const i_r3 = restoredCtx.index; const ctx_r4 = i0.ɵɵnextContext(); return ctx_r4.onItemHover(i_r3, $event); })("itemClick", function TDSRateComponent_li_2_Template_div_itemClick_1_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r5); const i_r3 = restoredCtx.index; const ctx_r6 = i0.ɵɵnextContext(); return ctx_r6.onItemClick(i_r3, $event); });
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const i_r3 = ctx.index;
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵproperty("ngClass", ctx_r1.starStyleArray[i_r3] || "")("tooltipTitle", ctx_r1.tooltips[i_r3]);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("isHalf", ctx_r1.checkIsHalf(i_r3 + 1))("allowHalf", ctx_r1.allowHalf)("character", ctx_r1.character)("index", i_r3);
} }
const TDS_CONFIG_MODULE_NAME = 'rate';
export class TDSRateComponent {
    constructor(tdsConfigService, renderer, cdr, directionality) {
        this.tdsConfigService = tdsConfigService;
        this.renderer = renderer;
        this.cdr = cdr;
        this.directionality = directionality;
        this._tdsModuleName = TDS_CONFIG_MODULE_NAME;
        this.allowClear = true;
        this.allowHalf = false;
        this.disabled = false;
        this.autoFocus = false;
        this.count = 5;
        this.tooltips = [];
        this.tdsOnBlur = new EventEmitter();
        this.tdsOnFocus = new EventEmitter();
        this.tdsOnHoverChange = new EventEmitter();
        this.tdsOnKeyDown = new EventEmitter();
        this.classMap = {};
        this.starArray = [];
        this.starStyleArray = [];
        this.dir = 'ltr';
        this.destroy$ = new Subject();
        this.hasHalf = false;
        this.hoverValue = 0;
        this.isFocused = false;
        this._value = 0;
        this._size = "md";
        this.onChange = () => null;
        this.onTouched = () => null;
    }
    get size() {
        return this._size;
    }
    ;
    set size(size) {
        this._size = size;
    }
    ;
    get value() {
        return this._value;
    }
    set value(input) {
        if (this._value === input) {
            return;
        }
        this._value = input;
        this.hasHalf = !Number.isInteger(input);
        this.hoverValue = Math.ceil(input);
    }
    ngOnChanges(changes) {
        const { autoFocus, count, value } = changes;
        if (autoFocus && !autoFocus.isFirstChange()) {
            const el = this.ulElement.nativeElement;
            if (this.autoFocus && !this.disabled) {
                this.renderer.setAttribute(el, 'autofocus', 'autofocus');
            }
            else {
                this.renderer.removeAttribute(el, 'autofocus');
            }
        }
        if (count) {
            this.updateStarArray();
        }
        if (value) {
            this.updateStarStyle();
        }
    }
    ngOnInit() {
        this.tdsConfigService
            .getConfigChangeEventForComponent(TDS_CONFIG_MODULE_NAME)
            .pipe(takeUntil(this.destroy$))
            .subscribe(() => this.cdr.markForCheck());
        this.directionality.change?.pipe(takeUntil(this.destroy$)).subscribe((direction) => {
            this.dir = direction;
            this.cdr.detectChanges();
        });
        this.dir = this.directionality.value;
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    onItemClick(index, isHalf) {
        if (this.disabled) {
            return;
        }
        this.hoverValue = index + 1;
        const actualValue = isHalf ? index + 0.5 : index + 1;
        if (this.value === actualValue) {
            if (this.allowClear) {
                this.value = 0;
                this.onChange(this.value);
            }
        }
        else {
            this.value = actualValue;
            this.onChange(this.value);
        }
        this.updateStarStyle();
    }
    onItemHover(index, isHalf) {
        if (this.disabled || (this.hoverValue === index + 1 && isHalf === this.hasHalf)) {
            return;
        }
        this.hoverValue = index + 1;
        this.hasHalf = isHalf;
        this.tdsOnHoverChange.emit(this.hoverValue);
        this.updateStarStyle();
    }
    onRateLeave() {
        this.hasHalf = !Number.isInteger(this.value);
        this.hoverValue = Math.ceil(this.value);
        this.updateStarStyle();
    }
    onFocus(e) {
        this.isFocused = true;
        this.tdsOnFocus.emit(e);
    }
    onBlur(e) {
        this.isFocused = false;
        this.tdsOnBlur.emit(e);
    }
    focus() {
        this.ulElement.nativeElement.focus();
    }
    blur() {
        this.ulElement.nativeElement.blur();
    }
    onKeyDown(e) {
        const oldVal = this.value;
        if (e.keyCode === RIGHT_ARROW && this.value < this.count) {
            this.value += this.allowHalf ? 0.5 : 1;
        }
        else if (e.keyCode === LEFT_ARROW && this.value > 0) {
            this.value -= this.allowHalf ? 0.5 : 1;
        }
        if (oldVal !== this.value) {
            this.onChange(this.value);
            this.tdsOnKeyDown.emit(e);
            this.updateStarStyle();
            this.cdr.markForCheck();
        }
    }
    updateStarArray() {
        this.starArray = Array(this.count)
            .fill(0)
            .map((_, i) => i);
        this.updateStarStyle();
    }
    checkIsHalf(value) {
        return this.hasHalf && value === this.hoverValue;
    }
    updateStarStyle() {
        this.starStyleArray = this.starArray.map(i => {
            const prefix = 'tds-rate-star';
            const value = i + 1;
            return {
                [`text-base-amber-400 dark:text-d-base-amber-400`]: value < this.hoverValue || (!this.hasHalf && value === this.hoverValue),
                [`${prefix}-full`]: value < this.hoverValue || (!this.hasHalf && value === this.hoverValue),
                [`${prefix}-half`]: this.hasHalf && value === this.hoverValue,
                [`${prefix}-active`]: this.hasHalf && value === this.hoverValue,
                [`${prefix}-zero`]: value > this.hoverValue,
                [`${prefix}-focused`]: this.hasHalf && value === this.hoverValue && this.isFocused,
                ['mr-2']: this.size == "sm",
                ['mr-2.5']: this.size == "md",
                ['mr-3']: this.size == "lg",
                ['cursor-pointer']: !this.disabled,
                // ['cursor-not-allowed']:!this.disabled
            };
        });
    }
    writeValue(value) {
        this.value = value || 0;
        this.updateStarArray();
        this.cdr.markForCheck();
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
}
TDSRateComponent.ɵfac = function TDSRateComponent_Factory(t) { return new (t || TDSRateComponent)(i0.ɵɵdirectiveInject(i1.TDSConfigService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.Directionality, 8)); };
TDSRateComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSRateComponent, selectors: [["tds-rate"]], viewQuery: function TDSRateComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.ulElement = _t.first);
    } }, inputs: { allowClear: "allowClear", allowHalf: "allowHalf", disabled: "disabled", autoFocus: "autoFocus", character: "character", count: "count", tooltips: "tooltips", size: "size" }, outputs: { tdsOnBlur: "tdsOnBlur", tdsOnFocus: "tdsOnFocus", tdsOnHoverChange: "tdsOnHoverChange", tdsOnKeyDown: "tdsOnKeyDown" }, exportAs: ["tdsRate"], features: [i0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => TDSRateComponent),
                multi: true
            }
        ]), i0.ɵɵNgOnChangesFeature], decls: 3, vars: 19, consts: [[1, "tds-rate", "box-border", "m-0", "p-0", "inline-block", "text-neutral-1-50", "dark:text-d-neutral-1-200", 3, "ngClass", "tabindex", "blur", "focus", "keydown", "mouseleave"], ["ulElement", ""], ["class", "tds-rate-star relative inline-block", "tds-tooltip", "", 3, "ngClass", "tooltipTitle", 4, "ngFor", "ngForOf"], ["tds-tooltip", "", 1, "tds-rate-star", "relative", "inline-block", 3, "ngClass", "tooltipTitle"], ["tds-rate-item", "", 3, "isHalf", "allowHalf", "character", "index", "itemHover", "itemClick"]], template: function TDSRateComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "ul", 0, 1);
        i0.ɵɵlistener("blur", function TDSRateComponent_Template_ul_blur_0_listener($event) { return ctx.onBlur($event); })("focus", function TDSRateComponent_Template_ul_focus_0_listener($event) { return ctx.onFocus($event); })("keydown", function TDSRateComponent_Template_ul_keydown_0_listener($event) { ctx.onKeyDown($event); return $event.preventDefault(); })("mouseleave", function TDSRateComponent_Template_ul_mouseleave_0_listener($event) { ctx.onRateLeave(); return $event.stopPropagation(); });
        i0.ɵɵtemplate(2, TDSRateComponent_li_2_Template, 2, 6, "li", 2);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵclassProp("text-xl", ctx.size == "md")("leading-5", ctx.size == "md")("text-2xl", ctx.size == "lg")("leading-6", ctx.size == "lg")("text-base", ctx.size == "sm")("leading-4", ctx.size == "sm")("tds-rate-disabled", ctx.disabled)("tds-rate-rtl", ctx.dir === "rtl");
        i0.ɵɵproperty("ngClass", ctx.classMap)("tabindex", ctx.disabled ? -1 : 1);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngForOf", ctx.starArray);
    } }, directives: [i3.NgClass, i3.NgForOf, i4.TDSTooltipDirective, i5.TDSRateItemComponent], encapsulation: 2, changeDetection: 0 });
__decorate([
    WithConfig(),
    InputBoolean()
], TDSRateComponent.prototype, "allowClear", void 0);
__decorate([
    WithConfig(),
    InputBoolean()
], TDSRateComponent.prototype, "allowHalf", void 0);
__decorate([
    InputBoolean()
], TDSRateComponent.prototype, "disabled", void 0);
__decorate([
    InputBoolean()
], TDSRateComponent.prototype, "autoFocus", void 0);
__decorate([
    InputNumber()
], TDSRateComponent.prototype, "count", void 0);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSRateComponent, [{
        type: Component,
        args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                selector: 'tds-rate',
                exportAs: 'tdsRate',
                preserveWhitespaces: false,
                template: `
    <ul
      #ulElement
      class="tds-rate  box-border m-0 p-0 inline-block text-neutral-1-50 dark:text-d-neutral-1-200"
      [class.text-xl]="size == 'md'"
      [class.leading-5]="size == 'md'"
      [class.text-2xl]="size == 'lg'"
      [class.leading-6]="size == 'lg'"
      [class.text-base]="size == 'sm'"
      [class.leading-4]="size == 'sm'"
      [class.tds-rate-disabled]="disabled"
      [class.tds-rate-rtl]="dir === 'rtl'"
      [ngClass]="classMap"
      (blur)="onBlur($event)"
      (focus)="onFocus($event)"
      (keydown)="onKeyDown($event); $event.preventDefault()"
      (mouseleave)="onRateLeave(); $event.stopPropagation()"
      [tabindex]="disabled ? -1 : 1"
    >
      <li
        *ngFor="let star of starArray; let i = index"
        class="tds-rate-star relative inline-block"
       
        [ngClass]="starStyleArray[i] || ''"
        tds-tooltip
        [tooltipTitle]="tooltips[i]"
      >
        <div
          tds-rate-item
          [isHalf]="checkIsHalf(i+1)"
          [allowHalf]="allowHalf"
          [character]="character"
          [index]="i"
          (itemHover)="onItemHover(i, $event)"
          (itemClick)="onItemClick(i, $event)"
        ></div>
      </li>
    </ul>
  `,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => TDSRateComponent),
                        multi: true
                    }
                ]
            }]
    }], function () { return [{ type: i1.TDSConfigService }, { type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }, { type: i2.Directionality, decorators: [{
                type: Optional
            }] }]; }, { ulElement: [{
            type: ViewChild,
            args: ['ulElement', { static: false }]
        }], allowClear: [{
            type: Input
        }], allowHalf: [{
            type: Input
        }], disabled: [{
            type: Input
        }], autoFocus: [{
            type: Input
        }], character: [{
            type: Input
        }], count: [{
            type: Input
        }], tooltips: [{
            type: Input
        }], tdsOnBlur: [{
            type: Output
        }], tdsOnFocus: [{
            type: Output
        }], tdsOnHoverChange: [{
            type: Output
        }], tdsOnKeyDown: [{
            type: Output
        }], size: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;base64,