import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewChild, } from '@angular/core';
import { DEFAULT_TOOLTIP_POSITIONS, POSITION_MAP } from 'tds-ui/core/overlay';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/overlay";
import * as i2 from "@angular/common";
const _c0 = ["zoomContainer"];
const _c1 = ["imageThumbnail"];
const _c2 = ["fullSizeImage"];
const _c3 = function (a0, a1) { return { "border border-red-500 cursor-move": a0, "rounded-full": a1 }; };
function TDSZoomBoxComponent_ng_template_8_Template(rf, ctx) { if (rf & 1) {
    const _r7 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 8)(1, "img", 9, 6);
    i0.ɵɵlistener("load", function TDSZoomBoxComponent_ng_template_8_Template_img_load_1_listener() { i0.ɵɵrestoreView(_r7); const ctx_r6 = i0.ɵɵnextContext(); return ctx_r6.onFullImageLoaded(); });
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext();
    i0.ɵɵstyleProp("display", ctx_r4.displayOverlay)("top", ctx_r4.extendY, "px")("left", ctx_r4.extendX, "px")("width", ctx_r4.overlayWidth, "px")("height", ctx_r4.overlayHeight, "px");
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction2(22, _c3, ctx_r4.enableLens, ctx_r4.circularLens));
    i0.ɵɵadvance(1);
    i0.ɵɵstyleProp("display", ctx_r4.displayOverlay)("top", ctx_r4.fullImageTop, "px")("left", ctx_r4.fullImageLeft, "px")("width", ctx_r4.magnifiedWidth, "px")("height", ctx_r4.magnifiedHeight, "px");
    i0.ɵɵproperty("src", ctx_r4.fullImage, i0.ɵɵsanitizeUrl);
} }
const _c4 = function (a0, a1) { return { "border border-red-500 cursor-move ": a0, "rounded-full": a1 }; };
export class TDSZoomBoxComponent {
    constructor(renderer, cd) {
        this.renderer = renderer;
        this.cd = cd;
        this.zoomScroll = new EventEmitter();
        this.zoomPosition = new EventEmitter();
        this.enableLens = false;
        //scale to apply to len, will be change when zoom
        this.lensWidth = 100;
        this.lensHeight = 100;
        //default scale to calculate zoom value, will not be change
        this.defaultLenWidth = 100;
        this.defaultLenHeight = 100;
        this.overlayWidth = 200;
        this.overlayHeight = 200;
        this.overlayVisible = false;
        this.zoomMode = 'hover';
        this.magnification = 1;
        this.enableScrollZoom = false;
        this.scrollStepSize = 0.1;
        this.circularLens = false;
        this.minZoomRatio = 0;
        this.maxZoomRatio = 2;
        this.zoomingEnabled = false;
        this.zoomFrozen = false;
        this.isReady = false;
        this.thumbImageLoaded = false;
        this.fullImageLoaded = false;
        this.eventListeners = [];
        this.position = [POSITION_MAP.right];
        this.enableOverlay = false;
    }
    set setExtendX(value) {
        this.extendX = Number(value) || 0;
    }
    set setExtendY(value) {
        this.extendY = Number(value) || 0;
    }
    set setThumbImage(thumbImage) {
        this.thumbImageLoaded = false;
        this.isReady = false;
        this.thumbImage = thumbImage;
    }
    set setFullImage(fullImage) {
        this.fullImageLoaded = false;
        this.isReady = false;
        this.fullImage = fullImage;
    }
    set setZoomMode(zoomMode) {
        if (TDSZoomBoxComponent.validZoomModes.some(m => m === zoomMode)) {
            this.zoomContainer.nativeElement.removeAllListeners();
            this.eventListeners = [];
            this.zoomMode = zoomMode;
            this.setUpEventListeners();
        }
    }
    set setMagnification(magnification) {
        this.magnification = Math.round((Number(magnification) || this.magnification) * 10) / 10;
        this.zoomScroll.emit(this.magnification);
    }
    set setMinZoomRatio(minZoomRatio) {
        const ratio = Number(minZoomRatio) || this.minZoomRatio || this.baseRatio || 0;
        this.minZoomRatio = Math.max(ratio, this.baseRatio || 0);
    }
    set setMaxZoomRatio(maxZoomRatio) {
        this.maxZoomRatio = Number(maxZoomRatio) || this.maxZoomRatio;
    }
    set setScrollStepSize(stepSize) {
        this.scrollStepSize = Number(stepSize) || this.scrollStepSize;
    }
    set setEnableLens(enable) {
        this.enableLens = Boolean(enable);
    }
    set setLensWidth(width) {
        this.defaultLenWidth = this.lensWidth = Number(width) || this.lensWidth;
    }
    set setLensHeight(height) {
        this.defaultLenHeight = this.lensHeight = Number(height) || this.lensHeight;
    }
    set setCircularLens(enable) {
        this.circularLens = Boolean(enable);
    }
    set setEnableScrollZoom(enable) {
        this.enableScrollZoom = Boolean(enable);
    }
    set setPositon(pos) {
        this.setOverlayPositon(pos);
    }
    ngOnInit() {
        this.setUpEventListeners();
    }
    ngOnDestroy() {
        this.eventListeners.forEach((destroyFn) => destroyFn());
    }
    setOverlayPositon(pos) {
        let preferredPosition;
        if (Array.isArray(pos))
            preferredPosition = pos.map(placement => POSITION_MAP[placement]);
        else
            preferredPosition = [pos].map(placement => POSITION_MAP[placement]);
        this.position = [...preferredPosition, ...DEFAULT_TOOLTIP_POSITIONS];
    }
    onThumbImageLoaded() {
        this.thumbImageLoaded = true;
        this.checkImagesLoaded();
    }
    onFullImageLoaded() {
        this.fullImageLoaded = true;
        this.checkImagesLoaded();
    }
    setUpEventListeners() {
        switch (this.zoomMode) {
            case 'hover':
                this.eventListeners.push(this.renderer.listen(this.zoomContainer.nativeElement, 'mouseenter', ($event) => this.hoverMouseEnter($event)));
                this.eventListeners.push(this.renderer.listen(this.zoomContainer.nativeElement, 'mouseleave', () => this.hoverMouseLeave()));
                this.eventListeners.push(this.renderer.listen(this.zoomContainer.nativeElement, 'mousemove', ($event) => this.hoverMouseMove($event)));
                break;
            case 'toggle':
                this.eventListeners.push(this.renderer.listen(this.zoomContainer.nativeElement, 'click', ($event) => this.toggleClick($event)));
                break;
            case 'click':
                this.eventListeners.push(this.renderer.listen(this.zoomContainer.nativeElement, 'click', ($event) => this.clickStarter($event)));
                this.eventListeners.push(this.renderer.listen(this.zoomContainer.nativeElement, 'mouseleave', () => this.clickMouseLeave()));
                this.eventListeners.push(this.renderer.listen(this.zoomContainer.nativeElement, 'mousemove', ($event) => this.clickMouseMove($event)));
                break;
            case 'toggle-click':
                this.eventListeners.push(this.renderer.listen(this.zoomContainer.nativeElement, 'click', (event) => this.toggleClick(event)));
                this.eventListeners.push(this.renderer.listen(this.zoomContainer.nativeElement, 'mouseleave', () => this.clickMouseLeave()));
                this.eventListeners.push(this.renderer.listen(this.zoomContainer.nativeElement, 'mousemove', (event) => this.clickMouseMove(event)));
                break;
            case 'hover-freeze':
                this.eventListeners.push(this.renderer.listen(this.zoomContainer.nativeElement, 'mouseenter', ($event) => this.hoverFreezeMouseEnter($event)));
                this.eventListeners.push(this.renderer.listen(this.zoomContainer.nativeElement, 'mouseleave', () => this.hoverFreezeMouseLeave()));
                this.eventListeners.push(this.renderer.listen(this.zoomContainer.nativeElement, 'mousemove', ($event) => this.hoverFreezeMouseMove($event)));
                this.eventListeners.push(this.renderer.listen(this.zoomContainer.nativeElement, 'click', ($event) => this.hoverFreezeClick($event)));
                break;
            default:
                break;
        }
        if (this.enableScrollZoom) {
            // Chrome: 'mousewheel', Firefox: 'DOMMouseScroll', IE: 'onmousewheel'
            this.eventListeners.push(this.renderer.listen(this.zoomContainer.nativeElement, 'mousewheel', (event) => this.onMouseWheel(event)));
            this.eventListeners.push(this.renderer.listen(this.zoomContainer.nativeElement, 'DOMMouseScroll', (event) => this.onMouseWheel(event)));
            this.eventListeners.push(this.renderer.listen(this.zoomContainer.nativeElement, 'onmousewheel', (event) => this.onMouseWheel(event)));
        }
    }
    checkImagesLoaded() {
        this.calculateRatioAndOffset();
        if (this.thumbImageLoaded && this.fullImageLoaded) {
            this.calculateImageAndLensPosition();
            this.isReady = true;
        }
    }
    /**
     * Zoom position setters
     */
    setZoomPosition(left, top) {
        this.latestMouseLeft = Number(left) || this.latestMouseLeft;
        this.latestMouseTop = Number(top) || this.latestMouseTop;
        const c = {
            x: this.latestMouseLeft,
            y: this.latestMouseTop
        };
        this.zoomPosition.emit(c);
    }
    /**
     * Mouse wheel event
     */
    onMouseWheel(event) {
        // Don't eat events if zooming isn't active
        if (!this.zoomingEnabled || this.zoomFrozen) {
            return;
        }
        event = window.event || event; // old IE
        const direction = Math.max(Math.min((event.wheelDelta || -event.detail), 1), -1);
        if (direction > 0) {
            // up
            this.setMagnification = Math.min(this.magnification + this.scrollStepSize, this.maxZoomRatio);
        }
        else {
            // down
            this.setMagnification = Math.max(this.magnification - this.scrollStepSize, this.minZoomRatio);
        }
        this.calculateRatio();
        this.calculateZoomPosition(event);
        this.cd.markForCheck();
        // Prevent scrolling on page.
        event.returnValue = false; // IE
        if (event.preventDefault) {
            event.preventDefault(); // Chrome & FF
        }
    }
    /**
     * Hover mode
     */
    hoverMouseEnter(event) {
        this.zoomOn(event);
    }
    hoverMouseLeave() {
        this.zoomOff();
    }
    hoverMouseMove(event) {
        this.calculateZoomPosition(event);
    }
    /**
     * Toggle mode
     */
    toggleClick(event) {
        if (this.zoomingEnabled) {
            this.zoomOff();
        }
        else {
            this.zoomOn(event);
        }
    }
    /**
     * Click mode
     */
    clickStarter(event) {
        if (this.zoomingEnabled === false) {
            this.zoomOn(event);
        }
    }
    clickMouseLeave() {
        this.zoomOff();
    }
    clickMouseMove(event) {
        if (this.zoomingEnabled) {
            this.calculateZoomPosition(event);
        }
    }
    /**
     * Hover freeze mode
     */
    hoverFreezeMouseEnter(event) {
        if (this.zoomingEnabled && !this.zoomFrozen) {
            this.zoomOn(event);
        }
    }
    hoverFreezeMouseLeave() {
        if (this.zoomingEnabled && !this.zoomFrozen) {
            this.zoomOff();
        }
    }
    hoverFreezeMouseMove(event) {
        if (this.zoomingEnabled && !this.zoomFrozen) {
            this.calculateZoomPosition(event);
        }
    }
    hoverFreezeClick(event) {
        if (this.zoomingEnabled && this.zoomFrozen) {
            this.zoomFrozen = false;
            this.zoomOff();
        }
        else if (this.zoomingEnabled) {
            this.zoomFrozen = true;
        }
        else {
            this.zoomOn(event);
        }
    }
    /**
     * Private helper methods
     */
    zoomOn(event) {
        if (this.isReady) {
            this.zoomingEnabled = true;
            this.calculateRatioAndOffset();
            if (this.enableOverlay) {
                this.displayLen = this.displayOverlay = 'block';
                this.overlayVisible = true;
                this.displayInPic = 'none';
            }
            else {
                this.displayLen = this.displayInPic = 'block';
            }
            this.calculateZoomPosition(event);
            this.cd.markForCheck();
        }
    }
    zoomOff() {
        this.zoomingEnabled = false;
        if (this.enableOverlay) {
            this.displayLen = this.displayOverlay = 'none';
            this.overlayVisible = false;
        }
        else {
            this.displayLen = this.displayInPic = 'none';
            this.overlayVisible = false;
        }
        this.cd.markForCheck();
    }
    calculateZoomPosition(event) {
        const newLeft = Math.max(Math.min(event.offsetX, this.thumbWidth), 0);
        const newTop = Math.max(Math.min(event.offsetY, this.thumbHeight), 0);
        this.setZoomPosition(newLeft, newTop);
        this.calculateImageAndLensPosition();
        this.cd.markForCheck();
    }
    calculateImageAndLensPosition() {
        let lensLeftMod = 0;
        let lensTopMod = 0;
        let overlayLeftMod = 0;
        let overlayTopMod = 0;
        if (this.enableOverlay) {
            this.overlayHeight = this.defaultLenHeight / this.thumbHeight * this.fullHeight;
            this.overlayWidth = this.defaultLenWidth / this.thumbWidth * this.fullWidth;
            this.overlayLeft = this.thumbWidth + this.zoomContainer.nativeElement.offsetLeft;
            this.overlayTop = this.zoomContainer.nativeElement.offsetTop;
            overlayLeftMod = this.latestMouseLeft - this.overlayWidth / 2;
            overlayTopMod = this.latestMouseTop - this.overlayHeight / 2;
            if (overlayLeftMod < 0)
                overlayLeftMod = 0;
            else if (overlayLeftMod > (this.thumbWidth - this.overlayWidth))
                overlayLeftMod = this.thumbWidth - this.overlayWidth;
            if (overlayTopMod < 0)
                overlayTopMod = 0;
            else if (overlayTopMod > (this.thumbHeight - this.overlayHeight))
                overlayTopMod = this.thumbHeight - this.overlayHeight;
        }
        if (this.enableLens) {
            this.lensLeft = this.latestMouseLeft - this.lensWidth / 2;
            this.lensTop = this.latestMouseTop - this.lensHeight / 2;
            if (this.lensLeft < 0)
                this.lensLeft = 0;
            else if (this.lensLeft > (this.thumbWidth - this.lensWidth))
                this.lensLeft = (this.thumbWidth - this.lensWidth);
            if (this.lensTop < 0)
                this.lensTop = 0;
            else if (this.lensTop > (this.thumbHeight - this.lensHeight))
                this.lensTop = (this.thumbHeight - this.lensHeight);
            lensLeftMod = this.lensLeft;
            lensTopMod = this.lensTop;
        }
        this.fullImageLeft = (this.latestMouseLeft * -this.xRatio) - ((this.enableOverlay) ? overlayLeftMod : lensLeftMod);
        this.fullImageTop = (this.latestMouseTop * -this.yRatio) - ((this.enableOverlay) ? overlayTopMod : lensTopMod);
    }
    calculateRatioAndOffset() {
        this.thumbWidth = this.imageThumbnail.nativeElement.naturalWidth;
        this.thumbHeight = this.imageThumbnail.nativeElement.naturalHeight;
        // If lens is disabled, set lens size to equal thumb size and position it on top of the thumb
        if (!this.enableLens) {
            this.lensWidth = this.thumbWidth;
            this.lensHeight = this.thumbHeight;
            this.lensLeft = 0;
            this.lensTop = 0;
        }
        // getBoundingClientRect() ? https://stackoverflow.com/a/44008873
        this.offsetTop = this.imageThumbnail.nativeElement.getBoundingClientRect().top;
        this.offsetLeft = this.imageThumbnail.nativeElement.getBoundingClientRect().left;
        if (this.fullImage === undefined) {
            this.fullImage = this.thumbImage;
        }
        if (this.fullImageLoaded) {
            this.fullWidth = this.fullSizeImage.nativeElement.naturalWidth;
            this.fullHeight = this.fullSizeImage.nativeElement.naturalHeight;
            this.baseRatio = Math.max((this.thumbWidth / this.fullWidth), (this.thumbHeight / this.fullHeight));
            // Don't allow zooming to smaller than thumbnail size
            this.minZoomRatio = Math.max(this.minZoomRatio || 0, this.baseRatio || 0);
            this.calculateRatio();
        }
    }
    calculateRatio() {
        this.magnifiedWidth = (this.fullWidth * this.magnification);
        this.magnifiedHeight = (this.fullHeight * this.magnification);
        if (this.enableOverlay) {
            this.lensWidth = this.defaultLenWidth / this.magnification;
            this.lensHeight = this.defaultLenHeight / this.magnification;
        }
        this.xRatio = (this.magnifiedWidth - this.thumbWidth) / this.thumbWidth;
        this.yRatio = (this.magnifiedHeight - this.thumbHeight) / this.thumbHeight;
    }
}
TDSZoomBoxComponent.validZoomModes = ['hover', 'toggle', 'click', 'hover-freeze'];
TDSZoomBoxComponent.ɵfac = function TDSZoomBoxComponent_Factory(t) { return new (t || TDSZoomBoxComponent)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
TDSZoomBoxComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSZoomBoxComponent, selectors: [["tds-zoombox"]], viewQuery: function TDSZoomBoxComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 7);
        i0.ɵɵviewQuery(_c1, 7);
        i0.ɵɵviewQuery(_c2, 7);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.zoomContainer = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.imageThumbnail = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.fullSizeImage = _t.first);
    } }, inputs: { enableOverlay: "enableOverlay", setExtendX: ["extendX", "setExtendX"], setExtendY: ["extendY", "setExtendY"], setThumbImage: ["thumbImage", "setThumbImage"], setFullImage: ["fullImage", "setFullImage"], setZoomMode: ["zoomMode", "setZoomMode"], setMagnification: ["magnification", "setMagnification"], setMinZoomRatio: ["minZoomRatio", "setMinZoomRatio"], setMaxZoomRatio: ["maxZoomRatio", "setMaxZoomRatio"], setScrollStepSize: ["scrollStepSize", "setScrollStepSize"], setEnableLens: ["enableLens", "setEnableLens"], setLensWidth: ["lensWidth", "setLensWidth"], setLensHeight: ["lensHeight", "setLensHeight"], setCircularLens: ["circularLens", "setCircularLens"], setEnableScrollZoom: ["enableScrollZoom", "setEnableScrollZoom"], setPositon: ["postion", "setPositon"] }, outputs: { zoomScroll: "zoomScroll", zoomPosition: "zoomPosition" }, exportAs: ["TDSZoomBoxComponent"], decls: 9, vars: 29, consts: [[1, "relative", "m-auto", "w-full", "h-full", "overflow-hidden", "pointer-events-none"], ["zoomContainer", ""], ["cdkOverlayOrigin", "", 1, "pointer-events-auto", 3, "src", "load"], ["overlay", "cdkOverlayOrigin", "imageThumbnail", ""], [1, "absolute", "overflow-hidden", "pointer-events-none", 3, "ngClass"], [1, "absolute", "max-w-none", "max-h-none", "hidden", "pointer-events-none", 3, "src", "load"], ["fullSizeImage", ""], ["cdkConnectedOverlay", "", 3, "cdkConnectedOverlayOrigin", "cdkConnectedOverlayOpen", "cdkConnectedOverlayPositions"], [1, "relative", "overflow-hidden", "pointer-events-none", 3, "ngClass"], [1, "relative", "max-w-none", "max-h-none", "hidden", "pointer-events-none", 3, "src", "load"]], template: function TDSZoomBoxComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 0, 1)(2, "img", 2, 3);
        i0.ɵɵlistener("load", function TDSZoomBoxComponent_Template_img_load_2_listener() { return ctx.onThumbImageLoaded(); });
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(5, "div", 4)(6, "img", 5, 6);
        i0.ɵɵlistener("load", function TDSZoomBoxComponent_Template_img_load_6_listener() { return ctx.onFullImageLoaded(); });
        i0.ɵɵelementEnd()()();
        i0.ɵɵtemplate(8, TDSZoomBoxComponent_ng_template_8_Template, 3, 25, "ng-template", 7);
    } if (rf & 2) {
        const _r1 = i0.ɵɵreference(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("src", ctx.thumbImage, i0.ɵɵsanitizeUrl);
        i0.ɵɵadvance(3);
        i0.ɵɵstyleProp("display", ctx.displayLen)("top", ctx.lensTop, "px")("left", ctx.lensLeft, "px")("width", ctx.lensWidth, "px")("height", ctx.lensHeight, "px");
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction2(26, _c4, ctx.enableLens, ctx.circularLens));
        i0.ɵɵadvance(1);
        i0.ɵɵstyleProp("display", ctx.displayInPic)("top", ctx.fullImageTop, "px")("left", ctx.fullImageLeft, "px")("width", ctx.magnifiedWidth, "px")("height", ctx.magnifiedHeight, "px");
        i0.ɵɵproperty("src", ctx.fullImage, i0.ɵɵsanitizeUrl);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("cdkConnectedOverlayOrigin", _r1)("cdkConnectedOverlayOpen", ctx.overlayVisible)("cdkConnectedOverlayPositions", ctx.position);
    } }, directives: [i1.CdkOverlayOrigin, i2.NgClass, i1.CdkConnectedOverlay], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSZoomBoxComponent, [{
        type: Component,
        args: [{
                selector: 'tds-zoombox',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: `
  <div 
        #zoomContainer class="relative m-auto w-full h-full overflow-hidden pointer-events-none"
       >
  
    <img cdkOverlayOrigin #overlay="cdkOverlayOrigin" #imageThumbnail 
    class="pointer-events-auto" [src]="thumbImage" (load)="onThumbImageLoaded()"/>
    
    <div  class="absolute overflow-hidden pointer-events-none" 
    [ngClass]="{ 'border border-red-500 cursor-move ': this.enableLens,'rounded-full':this.circularLens}"
         [style.display]="this.displayLen"
         [style.top.px]="this.lensTop"
         [style.left.px]="this.lensLeft"
         [style.width.px]="this.lensWidth"
         [style.height.px]="this.lensHeight"
    >
    
      <img #fullSizeImage class="absolute max-w-none max-h-none hidden pointer-events-none" [src]="fullImage"
           (load)="onFullImageLoaded()"
           [style.display]="this.displayInPic"
           [style.top.px]="this.fullImageTop"
           [style.left.px]="this.fullImageLeft"
           [style.width.px]="this.magnifiedWidth"
           [style.height.px]="this.magnifiedHeight"
      />
  
    </div>
  </div>
  
  <ng-template  cdkConnectedOverlay 
  [cdkConnectedOverlayOrigin]="overlay"
  [cdkConnectedOverlayOpen]="overlayVisible"
  [cdkConnectedOverlayPositions]="position">
      <div class="relative overflow-hidden pointer-events-none"
       [ngClass]="{
      'border border-red-500 cursor-move': this.enableLens,
      'rounded-full':this.circularLens}"
          [style.display]="this.displayOverlay"
          [style.top.px]="this.extendY"
           [style.left.px]="this.extendX"
         [style.width.px]="this.overlayWidth"
         [style.height.px]="this.overlayHeight"
           
    >
    <img #fullSizeImage class=" relative max-w-none max-h-none hidden pointer-events-none" [src]="fullImage"
           (load)="onFullImageLoaded()"
           [style.display]="this.displayOverlay"
           [style.top.px]="this.fullImageTop"
           [style.left.px]="this.fullImageLeft"
           [style.width.px]="this.magnifiedWidth"
           [style.height.px]="this.magnifiedHeight"/>
    </div>
  
  </ng-template>
    `,
                exportAs: 'TDSZoomBoxComponent'
            }]
    }], function () { return [{ type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }]; }, { zoomContainer: [{
            type: ViewChild,
            args: ['zoomContainer', { static: true }]
        }], imageThumbnail: [{
            type: ViewChild,
            args: ['imageThumbnail', { static: true }]
        }], fullSizeImage: [{
            type: ViewChild,
            args: ['fullSizeImage', { static: true }]
        }], zoomScroll: [{
            type: Output
        }], zoomPosition: [{
            type: Output
        }], enableOverlay: [{
            type: Input
        }], setExtendX: [{
            type: Input,
            args: ['extendX']
        }], setExtendY: [{
            type: Input,
            args: ['extendY']
        }], setThumbImage: [{
            type: Input,
            args: ['thumbImage']
        }], setFullImage: [{
            type: Input,
            args: ['fullImage']
        }], setZoomMode: [{
            type: Input,
            args: ['zoomMode']
        }], setMagnification: [{
            type: Input,
            args: ['magnification']
        }], setMinZoomRatio: [{
            type: Input,
            args: ['minZoomRatio']
        }], setMaxZoomRatio: [{
            type: Input,
            args: ['maxZoomRatio']
        }], setScrollStepSize: [{
            type: Input,
            args: ['scrollStepSize']
        }], setEnableLens: [{
            type: Input,
            args: ['enableLens']
        }], setLensWidth: [{
            type: Input,
            args: ['lensWidth']
        }], setLensHeight: [{
            type: Input,
            args: ['lensHeight']
        }], setCircularLens: [{
            type: Input,
            args: ['circularLens']
        }], setEnableScrollZoom: [{
            type: Input,
            args: ['enableScrollZoom']
        }], setPositon: [{
            type: Input,
            args: ['postion']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGRzLXpvb20tYm94LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvdGRzLXVpL3pvb20tYm94L3Rkcy16b29tLWJveC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUcsdUJBQXVCLEVBQXFCLFNBQVMsRUFBYyxZQUFZLEVBQUcsS0FBSyxFQUF1QixNQUFNLEVBQWEsU0FBUyxHQUFJLE1BQU0sZUFBZSxDQUFDO0FBQzlLLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxZQUFZLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQzs7Ozs7Ozs7OztJQTZDeEUsOEJBVUQsZ0JBQUE7SUFFTSxtS0FBUSwwQkFBbUIsSUFBQztJQURuQyxpQkFNaUQsRUFBQTs7O0lBYjNDLGdEQUFxQyw2QkFBQSw4QkFBQSxvQ0FBQSxzQ0FBQTtJQUh4Qyw2RkFFaUM7SUFVN0IsZUFBcUM7SUFBckMsZ0RBQXFDLGtDQUFBLG9DQUFBLHNDQUFBLHdDQUFBO0lBRjJDLHdEQUFpQjs7O0FBYzFHLE1BQU0sT0FBTyxtQkFBbUI7SUEwRTlCLFlBQ1UsUUFBbUIsRUFDbkIsRUFBb0I7UUFEcEIsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQUNuQixPQUFFLEdBQUYsRUFBRSxDQUFrQjtRQXJFcEIsZUFBVSxHQUFHLElBQUksWUFBWSxFQUFVLENBQUM7UUFDeEMsaUJBQVksR0FBRyxJQUFJLFlBQVksRUFBZ0IsQ0FBQztRQVluRCxlQUFVLEdBQUcsS0FBSyxDQUFDO1FBVTFCLGlEQUFpRDtRQUMxQyxjQUFTLEdBQUcsR0FBRyxDQUFDO1FBQ2hCLGVBQVUsR0FBRyxHQUFHLENBQUM7UUFFdEIsMkRBQTJEO1FBQzdELG9CQUFlLEdBQUMsR0FBRyxDQUFBO1FBQ25CLHFCQUFnQixHQUFDLEdBQUcsQ0FBQTtRQUlwQixpQkFBWSxHQUFDLEdBQUcsQ0FBQTtRQUNoQixrQkFBYSxHQUFDLEdBQUcsQ0FBQTtRQUNqQixtQkFBYyxHQUFDLEtBQUssQ0FBQTtR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SUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxhQUFhLEVBQUUsV0FBVyxFQUFFLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQy9HLENBQUM7Z0JBQ0YsTUFBSztZQUNULEtBQUssUUFBUTtnQkFDVCxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FDcEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxhQUFhLEVBQUUsT0FBTyxFQUFFLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQ3hHLENBQUM7Z0JBQ0YsTUFBSztZQUNULEtBQUssT0FBTztnQkFDUixJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FDcEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxhQUFhLEVBQUUsT0FBTyxFQUFFLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQ3pHLENBQUM7Z0JBQ0YsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQ3BCLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsYUFBYSxFQUFFLFlBQVksRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUMsQ0FDckcsQ0FBQztnQkFDRixJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FDcEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxhQUFhLEVBQUUsV0FBVyxFQUFFLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQy9HLENBQUM7Z0JBQ0YsTUFBSztZQUNULEtBQUssY0FBYztnQkFDZixJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FDcEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxhQUFhLEVBQUUsT0FBTyxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQ3RHLENBQUM7Z0JBQ0YsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQ3BCLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsYUFBYSxFQUFFLFlBQVksRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUMsQ0FDckcsQ0FBQztnQkFDRixJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FDcEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxhQUFhLEVBQUUsV0FBVyxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQzdHLENBQUM7Z0JBQ0YsTUFBSztZQUNULEtBQUssY0FBYztnQkFDZixJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FDcEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxhQUFhLEVBQUUsWUFBWSxFQUFFLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMscUJBQXFCLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FDdkgsQ0FBQztnQkFDRixJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FDcEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxhQUFhLEVBQUUsWUFBWSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLENBQzNHLENBQUM7Z0JBQ0YsSUFB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QyxjQUFjO1lBTVYsbUJBQW1CO2tCQUQ3QixLQUFLO21CQUFDLGtCQUFrQjtZQUtkLFVBQVU7a0JBRHBCLEtBQUs7bUJBQUMsU0FBUyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5pbXBvcnQgeyBDb25uZWN0aW9uUG9zaXRpb25QYWlyIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL292ZXJsYXknO1xyXG5pbXBvcnQgeyAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENoYW5nZURldGVjdG9yUmVmLCBDb21wb25lbnQsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgIElucHV0LCAgT25EZXN0cm95LCBPbkluaXQsICBPdXRwdXQsIFJlbmRlcmVyMiwgVmlld0NoaWxkLCAgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgREVGQVVMVF9UT09MVElQX1BPU0lUSU9OUywgUE9TSVRJT05fTUFQIH0gZnJvbSAndGRzLXVpL2NvcmUvb3ZlcmxheSc7XHJcblxyXG5cclxuXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIHpvb21ib3hDb29yZCB7XHJcbiAgICB4OiBudW1iZXI7XHJcbiAgICB5OiBudW1iZXI7XHJcbiAgfVxyXG4gIEBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICd0ZHMtem9vbWJveCcsXHJcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcclxuICAgIHRlbXBsYXRlOiBgXHJcbiAgPGRpdiBcclxuICAgICAgICAjem9vbUNvbnRhaW5lciBjbGFzcz1cInJlbGF0aXZlIG0tYXV0byB3LWZ1bGwgaC1mdWxsIG92ZXJmbG93LWhpZGRlbiBwb2ludGVyLWV2ZW50cy1ub25lXCJcclxuICAgICAgID5cclxuICBcclxuICAgIDxpbWcgY2RrT3ZlcmxheU9yaWdpbiAjb3ZlcmxheT1cImNka092ZXJsYXlPcmlnaW5cIiAjaW1hZ2VUaHVtYm5haWwgXHJcbiAgICBjbGFzcz1cInBvaW50ZXItZXZlbnRzLWF1dG9cIiBbc3JjXT1cInRodW1iSW1hZ2VcIiAobG9hZCk9XCJvblRodW1iSW1hZ2VMb2FkZWQoKVwiLz5cclxuICAgIFxyXG4gICAgPGRpdiAgY2xhc3M9XCJhYnNvbHV0ZSBvdmVyZmxvdy1oaWRkZW4gcG9pbnRlci1ldmVudHMtbm9uZVwiIFxyXG4gICAgW25nQ2xhc3NdPVwieyAnYm9yZGVyIGJvcmRlci1yZWQtNTAwIGN1cnNvci1tb3ZlICc6IHRoaXMuZW5hYmxlTGVucywncm91bmRlZC1mdWxsJzp0aGlzLmNpcmN1bGFyTGVuc31cIlxyXG4gICAgICAgICBbc3R5bGUuZGlzcGxheV09XCJ0aGlzLmRpc3BsYXlMZW5cIlxyXG4gICAgICAgICBbc3R5bGUudG9wLnB4XT1cInRoaXMubGVuc1RvcFwiXHJcbiAgICAgICAgIFtzdHlsZS5sZWZ0LnB4XT1cInRoaXMubGVuc0xlZnRcIlxyXG4gICAgICAgICBbc3R5bGUud2lkdGgucHhdPVwidGhpcy5sZW5zV2lkdGhcIlxyXG4gICAgICAgICBbc3R5bGUuaGVpZ2h0LnB4XT1cInRoaXMubGVuc0hlaWdodFwiXHJcbiAgICA+XHJcbiAgICBcclxuICAgICAgPGltZyAjZnVsbFNpemVJbWFnZSBjbGFzcz1cImFic29sdXRlIG1heC13LW5vbmUgbWF4LWgtbm9uZSBoaWRkZW4gcG9pbnRlci1ldmVudHMtbm9uZVwiIFtzcmNdPVwiZnVsbEltYWdlXCJcclxuICAgICAgICAgICAobG9hZCk9XCJvbkZ1bGxJbWFnZUxvYWRlZCgpXCJcclxuICAgICAgICAgICBbc3R5bGUuZGlzcGxheV09XCJ0aGlzLmRpc3BsYXlJblBpY1wiXHJcbiAgICAgICAgICAgW3N0eWxlLnRvcC5weF09XCJ0aGlzLmZ1bGxJbWFnZVRvcFwiXHJcbiAgICAgICAgICAgW3N0eWxlLmxlZnQucHhdPVwidGhpcy5mdWxsSW1hZ2VMZWZ0XCJcclxuICAgICAgICAgICBbc3R5bGUud2lkdGgucHhdPVwidGhpcy5tYWduaWZpZWRXaWR0aFwiXHJcbiAgICAgICAgICAgW3N0eWxlLmhlaWdodC5weF09XCJ0aGlzLm1hZ25pZmllZEhlaWdodFwiXHJcbiAgICAgIC8+XHJcbiAgXHJcbiAgICA8L2Rpdj5cclxuICA8L2Rpdj5cclxuICBcclxuICA8bmctdGVtcGxhdGUgIGNka0Nvbm5lY3RlZE92ZXJsYXkgXHJcbiAgW2Nka0Nvbm5lY3RlZE92ZXJsYXlPcmlnaW5dPVwib3ZlcmxheVwiXHJcbiAgW2Nka0Nvbm5lY3RlZE92ZXJsYXlPcGVuXT1cIm92ZXJsYXlWaXNpYmxlXCJcclxuICBbY2RrQ29ubmVjdGVkT3ZlcmxheVBvc2l0aW9uc109XCJwb3NpdGlvblwiPlxyXG4gICAgICA8ZGl2IGNsYXNzPVwicmVsYXRpdmUgb3ZlcmZsb3ctaGlkZGVuIHBvaW50ZXItZXZlbnRzLW5vbmVcIlxyXG4gICAgICAgW25nQ2xhc3NdPVwie1xyXG4gICAgICAnYm9yZGVyIGJvcmRlci1yZWQtNTAwIGN1cnNvci1tb3ZlJzogdGhpcy5lbmFibGVMZW5zLFxyXG4gICAgICAncm91bmRlZC1mdWxsJzp0aGlzLmNpcmN1bGFyTGVuc31cIlxyXG4gICAgICAgICAgW3N0eWxlLmRpc3BsYXldPVwidGhpcy5kaXNwbGF5T3ZlcmxheVwiXHJcbiAgICAgICAgICBbc3R5bGUudG9wLnB4XT1cInRoaXMuZXh0ZW5kWVwiXHJcbiAgICAgICAgICAgW3N0eWxlLmxlZnQucHhdPVwidGhpcy5leHRlbmRYXCJcclxuICAgICAgICAgW3N0eWxlLndpZHRoLnB4XT1cInRoaXMub3ZlcmxheVdpZHRoXCJcclxuICAgICAgICAgW3N0eWxlLmhlaWdodC5weF09XCJ0aGlzLm92ZXJsYXlIZWlnaHRcIlxyXG4gICAgICAgICAgIFxyXG4gICAgPlxyXG4gICAgPGltZyAjZnVsbFNpemVJbWFnZSBjbGFzcz1cIiByZWxhdGl2ZSBtYXgtdy1ub25lIG1heC1oLW5vbmUgaGlkZGVuIHBvaW50ZXItZXZlbnRzLW5vbmVcIiBbc3JjXT1cImZ1bGxJbWFnZVwiXHJcbiAgICAgICAgICAgKGxvYWQpPVwib25GdWxsSW1hZ2VMb2FkZWQoKVwiXHJcbiAgICAgICAgICAgW3N0eWxlLmRpc3BsYXldPVwidGhpcy5kaXNwbGF5T3ZlcmxheVwiXHJcbiAgICAgICAgICAgW3N0eWxlLnRvcC5weF09XCJ0aGlzLmZ1bGxJbWFnZVRvcFwiXHJcbiAgICAgICAgICAgW3N0eWxlLmxlZnQucHhdPVwidGhpcy5mdWxsSW1hZ2VMZWZ0XCJcclxuICAgICAgICAgICBbc3R5bGUud2lkdGgucHhdPVwidGhpcy5tYWduaWZpZWRXaWR0aFwiXHJcbiAgICAgICAgICAgW3N0eWxlLmhlaWdodC5weF09XCJ0aGlzLm1hZ25pZmllZEhlaWdodFwiLz5cclxuICAgIDwvZGl2PlxyXG4gIFxyXG4gIDwvbmctdGVtcGxhdGU+XHJcbiAgICBgLFxyXG4gICAgZXhwb3J0QXM6ICdURFNab29tQm94Q29tcG9uZW50J1xyXG4gIH0pXHJcbiAgXHJcbiAgZXhwb3J0IGNsYXNzIFREU1pvb21Cb3hDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XHJcbiAgXHJcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSB2YWxpZFpvb21Nb2Rlczogc3RyaW5nW10gPSBbJ2hvdmVyJywgJ3RvZ2dsZScsICdjbGljaycsICdob3Zlci1mcmVlemUnXTtcclxuICBcclxuICAgIEBWaWV3Q2hpbGQoJ3pvb21Db250YWluZXInLCB7c3RhdGljOiB0cnVlfSkgem9vbUNvbnRhaW5lciAhOiBFbGVtZW50UmVmO1xyXG4gICAgQFZpZXdDaGlsZCgnaW1hZ2VUaHVtYm5haWwnLCB7c3RhdGljOiB0cnVlfSkgaW1hZ2VUaHVtYm5haWwgITogRWxlbWVudFJlZjtcclxuICAgIEBWaWV3Q2hpbGQoJ2Z1bGxTaXplSW1hZ2UnLCB7c3RhdGljOiB0cnVlfSkgZnVsbFNpemVJbWFnZSAhOiBFbGVtZW50UmVmO1xyXG4gICAgQE91dHB1dCgpIHpvb21TY3JvbGwgPSBuZXcgRXZlbnRFbWl0dGVyPG51bWJlcj4oKTtcclxuICAgIEBPdXRwdXQoKSB6b29tUG9zaXRpb24gPSBuZXcgRXZlbnRFbWl0dGVyPHpvb21ib3hDb29yZD4oKTtcclxuICBcclxuICAgIHB1YmxpYyBkaXNwbGF5TGVuITogc3RyaW5nO1xyXG4gICAgcHVibGljIGRpc3BsYXlPdmVybGF5ITogc3RyaW5nO1xyXG4gICAgcHVibGljIGRpc3BsYXlJblBpYyE6c3RyaW5nXHJcbiAgXHJcbiAgICBwdWJsaWMgZnVsbEltYWdlVG9wITogbnVtYmVyO1xyXG4gICAgcHVibGljIGZ1bGxJbWFnZUxlZnQhOiBudW1iZXI7XHJcbiAgICBwdWJsaWMgbWFnbmlmaWVkV2lkdGghOiBudW1iZXI7XHJcbiAgICBwdWJsaWMgbWFnbmlmaWVkSGVpZ2h0ITogbnVtYmVyO1xyXG4gICAgcHVibGljIGxlbnNUb3AhOiBudW1iZXI7XHJcbiAgICBwdWJsaWMgbGVuc0xlZnQhOiBudW1iZXI7XHJcbiAgICBwdWJsaWMgZW5hYmxlTGVucyA9IGZhbHNlO1xyXG4gIFxyXG4gIFxyXG4gICAgcHVibGljIHRodW1iSW1hZ2UhOiBzdHJpbmc7XHJcbiAgICBwdWJsaWMgZnVsbEltYWdlITogc3RyaW5nO1xyXG4gICAgcHVibGljIHRodW1iV2lkdGghOiBudW1iZXI7XHJcbiAgICBwdWJsaWMgdGh1bWJIZWlnaHQhOiBudW1iZXI7XHJcbiAgICBwdWJsaWMgZnVsbFdpZHRoITogbnVtYmVyO1xyXG4gICAgcHVibGljIGZ1bGxIZWlnaHQhOiBudW1iZXI7XHJcbiAgICBcclxuICAgIC8vc2NhbGUgdG8gYXBwbHkgdG8gbGVuLCB3aWxsIGJlIGNoYW5nZSB3aGVuIHpvb21cclxuICAgIHB1YmxpYyBsZW5zV2lkdGggPSAxMDA7XHJcbiAgICBwdWJsaWMgbGVuc0hlaWdodCA9IDEwMDtcclxuICAgIFxyXG4gICAgICAvL2RlZmF1bHQgc2NhbGUgdG8gY2FsY3VsYXRlIHpvb20gdmFsdWUsIHdpbGwgbm90IGJlIGNoYW5nZVxyXG4gICAgZGVmYXVsdExlbldpZHRoPTEwMFxyXG4gICAgZGVmYXVsdExlbkhlaWdodD0xMDBcclxuICBcclxuICAgIG92ZXJsYXlUb3AhOm51bWJlclxyXG4gICAgb3ZlcmxheUxlZnQhOm51bWJlclxyXG4gICAgb3ZlcmxheVdpZHRoPTIwMFxyXG4gICAgb3ZlcmxheUhlaWdodD0yMDBcclxuICAgIG92ZXJsYXlWaXNpYmxlPWZhbHNlXHJcbiAgIFxyXG4gIFxyXG4gICAgZXh0ZW5kWSE6bnVtYmVyXHJcbiAgICBleHRlbmRYITpudW1iZXJcclxuICBcclxuICAgIHByaXZhdGUgem9vbU1vZGUgPSAnaG92ZXInO1xyXG4gICAgcHJpdmF0ZSBtYWduaWZpY2F0aW9uID0gMTtcclxuICAgIHByaXZhdGUgZW5hYmxlU2Nyb2xsWm9vbSA9IGZhbHNlO1xyXG4gICAgcHJpdmF0ZSBzY3JvbGxTdGVwU2l6ZSA9IDAuMTtcclxuICAgIGNpcmN1bGFyTGVucyA9IGZhbHNlO1xyXG4gIFxyXG4gICAgcHJpdmF0ZSBiYXNlUmF0aW8hOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIG1pblpvb21SYXRpbz0wO1xyXG4gICAgcHJpdmF0ZSBtYXhab29tUmF0aW8gPSAyO1xyXG4gICAgcHJpdmF0ZSB4UmF0aW8hOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIHlSYXRpbyE6IG51bWJlcjtcclxuICAgIHByaXZhdGUgb2Zmc2V0TGVmdCE6IG51bWJlcjtcclxuICAgIHByaXZhdGUgb2Zmc2V0VG9wITogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSB6b29taW5nRW5hYmxlZCA9IGZhbHNlO1xyXG4gICAgcHJpdmF0ZSB6b29tRnJvemVuID0gZmFsc2U7XHJcbiAgICBwcml2YXRlIGlzUmVhZHkgPSBmYWxzZTtcclxuICAgIHByaXZhdGUgdGh1bWJJbWFnZUxvYWRlZCA9IGZhbHNlO1xyXG4gICAgcHJpdmF0ZSBmdWxsSW1hZ2VMb2FkZWQgPSBmYWxzZTtcclxuICBcclxuICAgIHByaXZhdGUgbGF0ZXN0TW91c2VMZWZ0ITogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBsYXRlc3RNb3VzZVRvcCE6IG51bWJlcjtcclxuICBcclxuICAgIHByaXZhdGUgZXZlbnRMaXN0ZW5lcnM6ICgoKSA9PiB2b2lkKVtdID0gW107XHJcbiAgICBwb3NpdGlvbjpDb25uZWN0aW9uUG9zaXRpb25QYWlyW109W1BPU0lUSU9OX01BUC5yaWdodF1cclxuICAgICBcclxuICAgICAgXHJcbiAgICBjb25zdHJ1Y3RvciggXHJcbiAgICAgIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMixcclxuICAgICAgcHJpdmF0ZSBjZDpDaGFuZ2VEZXRlY3RvclJlZlxyXG4gICAgICApIHtcclxuICAgICAgICAgIFxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBASW5wdXQoKSBlbmFibGVPdmVybGF5PWZhbHNlXHJcbiAgICBcclxuICAgIEBJbnB1dCAoJ2V4dGVuZFgnKVxyXG4gICAgcHVibGljIHNldCBzZXRFeHRlbmRYKHZhbHVlOm51bWJlcilcclxuICAgIHtcclxuICAgICAgdGhpcy5leHRlbmRYPU51bWJlcih2YWx1ZSkgfHwwXHJcbiAgICB9XHJcbiAgICBASW5wdXQgKCdleHRlbmRZJylcclxuICAgIHB1YmxpYyBzZXQgc2V0RXh0ZW5kWSh2YWx1ZTpudW1iZXIpXHJcbiAgICB7XHJcbiAgICAgICB0aGlzLmV4dGVuZFk9TnVtYmVyKHZhbHVlKSB8fDBcclxuICAgIH1cclxuICAgIEBJbnB1dCgndGh1bWJJbWFnZScpXHJcbiAgICBwdWJsaWMgc2V0IHNldFRodW1iSW1hZ2UodGh1bWJJbWFnZTogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy50aHVtYkltYWdlTG9hZGVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5pc1JlYWR5ID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy50aHVtYkltYWdlID0gdGh1bWJJbWFnZTtcclxuICAgIH1cclxuICBcclxuICAgIEBJbnB1dCgnZnVsbEltYWdlJylcclxuICAgIHB1YmxpYyBzZXQgc2V0RnVsbEltYWdlKGZ1bGxJbWFnZTogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5mdWxsSW1hZ2VMb2FkZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmlzUmVhZHkgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmZ1bGxJbWFnZSA9IGZ1bGxJbWFnZTtcclxuICAgIH1cclxuICBcclxuICAgIEBJbnB1dCgnem9vbU1vZGUnKVxyXG4gICAgcHVibGljIHNldCBzZXRab29tTW9kZSh6b29tTW9kZTogc3RyaW5nKSB7XHJcbiAgICAgIFxyXG4gICAgICBpZiAoVERTWm9vbUJveENvbXBvbmVudC52YWxpZFpvb21Nb2Rlcy5zb21lKG0gPT4gbSA9PT0gem9vbU1vZGUpKSBcclxuICAgICAge1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICB0aGlzLnpvb21Db250YWluZXIubmF0aXZlRWxlbWVudC5yZW1vdmVBbGxMaXN0ZW5lcnMoKVxyXG4gICAgICAgICAgdGhpcy5ldmVudExpc3RlbmVycz1bXVxyXG4gICAgICAgICAgdGhpcy56b29tTW9kZSA9IHpvb21Nb2RlO1xyXG4gICAgICAgICAgdGhpcy5zZXRVcEV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgfVxyXG4gIFxyXG4gICAgQElucHV0KCdtYWduaWZpY2F0aW9uJylcclxuICAgIHB1YmxpYyBzZXQgc2V0TWFnbmlmaWNhdGlvbihtYWduaWZpY2F0aW9uOiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLm1hZ25pZmljYXRpb24gPU1hdGgucm91bmQoKE51bWJlcihtYWduaWZpY2F0aW9uKSB8fCB0aGlzLm1hZ25pZmljYXRpb24pKjEwKS8xMDtcclxuICAgICAgICB0aGlzLnpvb21TY3JvbGwuZW1pdCh0aGlzLm1hZ25pZmljYXRpb24pO1xyXG4gICAgfVxyXG4gIFxyXG4gICAgQElucHV0KCdtaW5ab29tUmF0aW8nKVxyXG4gICAgcHVibGljIHNldCBzZXRNaW5ab29tUmF0aW8obWluWm9vbVJhdGlvOiBudW1iZXIpIHtcclxuICAgICAgICBjb25zdCByYXRpbyA9IE51bWJlcihtaW5ab29tUmF0aW8pIHx8IHRoaXMubWluWm9vbVJhdGlvIHx8IHRoaXMuYmFzZVJhdGlvIHx8IDA7XHJcbiAgICAgICAgdGhpcy5taW5ab29tUmF0aW8gPSBNYXRoLm1heChyYXRpbywgdGhpcy5iYXNlUmF0aW8gfHwgMCk7XHJcbiAgICB9XHJcbiAgXHJcbiAgICBASW5wdXQoJ21heFpvb21SYXRpbycpXHJcbiAgICBwdWJsaWMgc2V0IHNldE1heFpvb21SYXRpbyhtYXhab29tUmF0aW86IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMubWF4Wm9vbVJhdGlvID0gTnVtYmVyKG1heFpvb21SYXRpbykgfHwgdGhpcy5tYXhab29tUmF0aW87XHJcbiAgICB9XHJcbiAgXHJcbiAgICBASW5wdXQoJ3Njcm9sbFN0ZXBTaXplJylcclxuICAgIHB1YmxpYyBzZXQgc2V0U2Nyb2xsU3RlcFNpemUoc3RlcFNpemU6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuc2Nyb2xsU3RlcFNpemUgPSBOdW1iZXIoc3RlcFNpemUpIHx8IHRoaXMuc2Nyb2xsU3RlcFNpemU7XHJcbiAgICB9XHJcbiAgXHJcbiAgICBASW5wdXQoJ2VuYWJsZUxlbnMnKVxyXG4gICAgcHVibGljIHNldCBzZXRFbmFibGVMZW5zKGVuYWJsZTogYm9vbGVhbikge1xyXG4gICAgICAgIHRoaXMuZW5hYmxlTGVucyA9IEJvb2xlYW4oZW5hYmxlKTtcclxuICAgIH1cclxuICBcclxuICAgIEBJbnB1dCgnbGVuc1dpZHRoJylcclxuICAgIHB1YmxpYyBzZXQgc2V0TGVuc1dpZHRoKHdpZHRoOiBudW1iZXIpIHtcclxuICAgICAgdGhpcy5kZWZhdWx0TGVuV2lkdGggPXRoaXMubGVuc1dpZHRoPSBOdW1iZXIod2lkdGgpIHx8IHRoaXMubGVuc1dpZHRoO1xyXG4gICAgfVxyXG4gIFxyXG4gICAgQElucHV0KCdsZW5zSGVpZ2h0JylcclxuICAgIHB1YmxpYyBzZXQgc2V0TGVuc0hlaWdodChoZWlnaHQ6IG51bWJlcikge1xyXG4gICAgICB0aGlzLmRlZmF1bHRMZW5IZWlnaHQ9dGhpcy5sZW5zSGVpZ2h0PSAgTnVtYmVyKGhlaWdodCkgfHwgdGhpcy5sZW5zSGVpZ2h0O1xyXG4gICAgfVxyXG4gIFxyXG4gICAgQElucHV0KCdjaXJjdWxhckxlbnMnKVxyXG4gICAgcHVibGljIHNldCBzZXRDaXJjdWxhckxlbnMoZW5hYmxlOiBib29sZWFuKSB7XHJcbiAgICAgICAgdGhpcy5jaXJjdWxhckxlbnMgPSBCb29sZWFuKGVuYWJsZSk7XHJcbiAgICB9XHJcbiAgXHJcbiAgICBASW5wdXQoJ2VuYWJsZVNjcm9sbFpvb20nKVxyXG4gICAgcHVibGljIHNldCBzZXRFbmFibGVTY3JvbGxab29tKGVuYWJsZTogYm9vbGVhbikge1xyXG4gICAgICAgIHRoaXMuZW5hYmxlU2Nyb2xsWm9vbSA9IEJvb2xlYW4oZW5hYmxlKTtcclxuICAgIH1cclxuICAgIEBJbnB1dCgncG9zdGlvbicpXHJcbiAgICBwdWJsaWMgc2V0IHNldFBvc2l0b24ocG9zOnN0cmluZ3xzdHJpbmdbXSlcclxuICAgIHtcclxuICAgICAgdGhpcy5zZXRPdmVybGF5UG9zaXRvbihwb3MpXHJcbiAgICB9XHJcbiAgICBcclxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgICB0aGlzLnNldFVwRXZlbnRMaXN0ZW5lcnMoKTtcclxuICAgIH1cclxuICBcclxuICAgIG5nT25EZXN0cm95KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuZXZlbnRMaXN0ZW5lcnMuZm9yRWFjaCgoZGVzdHJveUZuKSA9PiBkZXN0cm95Rm4oKSk7XHJcbiAgICB9XHJcbiAgICBzZXRPdmVybGF5UG9zaXRvbihwb3M6c3RyaW5nfHN0cmluZ1tdKVxyXG4gICAge1xyXG4gICAgICBsZXQgcHJlZmVycmVkUG9zaXRpb246YW55XHJcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHBvcykpXHJcbiAgICAgICAgICBwcmVmZXJyZWRQb3NpdGlvbj0gcG9zLm1hcChwbGFjZW1lbnQgPT4gUE9TSVRJT05fTUFQW3BsYWNlbWVudF0pO1xyXG4gICAgICBlbHNlXHJcbiAgICAgICAgICBwcmVmZXJyZWRQb3NpdGlvbj0gW3Bvc10ubWFwKHBsYWNlbWVudCA9PiBQT1NJVElPTl9NQVBbcGxhY2VtZW50XSk7XHJcbiAgICAgIHRoaXMucG9zaXRpb24gPSBbLi4ucHJlZmVycmVkUG9zaXRpb24sIC4uLkRFRkFVTFRfVE9PTFRJUF9QT1NJVElPTlNdO1xyXG4gICAgfVxyXG4gICAgb25UaHVtYkltYWdlTG9hZGVkKCkge1xyXG4gICAgICAgIHRoaXMudGh1bWJJbWFnZUxvYWRlZCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5jaGVja0ltYWdlc0xvYWRlZCgpO1xyXG4gICAgfVxyXG4gIFxyXG4gICAgb25GdWxsSW1hZ2VMb2FkZWQoKSB7XHJcbiAgICAgICAgdGhpcy5mdWxsSW1hZ2VMb2FkZWQgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuY2hlY2tJbWFnZXNMb2FkZWQoKTtcclxuICAgIH1cclxuICBcclxuICAgIHByaXZhdGUgc2V0VXBFdmVudExpc3RlbmVycygpIHtcclxuICAgICAgICBzd2l0Y2godGhpcy56b29tTW9kZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICBjYXNlICdob3Zlcic6XHJcbiAgICAgICAgICAgICAgdGhpcy5ldmVudExpc3RlbmVycy5wdXNoKFxyXG4gICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcmVyLmxpc3Rlbih0aGlzLnpvb21Db250YWluZXIubmF0aXZlRWxlbWVudCwgJ21vdXNlZW50ZXInLCAoJGV2ZW50KSA9PiB0aGlzLmhvdmVyTW91c2VFbnRlcigkZXZlbnQpKVxyXG4gICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgdGhpcy5ldmVudExpc3RlbmVycy5wdXNoKFxyXG4gICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcmVyLmxpc3Rlbih0aGlzLnpvb21Db250YWluZXIubmF0aXZlRWxlbWVudCwgJ21vdXNlbGVhdmUnLCAoKSA9PiB0aGlzLmhvdmVyTW91c2VMZWF2ZSgpKVxyXG4gICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgdGhpcy5ldmVudExpc3RlbmVycy5wdXNoKFxyXG4gICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcmVyLmxpc3Rlbih0aGlzLnpvb21Db250YWluZXIubmF0aXZlRWxlbWVudCwgJ21vdXNlbW92ZScsICgkZXZlbnQpID0+IHRoaXMuaG92ZXJNb3VzZU1vdmUoJGV2ZW50KSlcclxuICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICBjYXNlICd0b2dnbGUnOlxyXG4gICAgICAgICAgICAgIHRoaXMuZXZlbnRMaXN0ZW5lcnMucHVzaChcclxuICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5saXN0ZW4odGhpcy56b29tQ29udGFpbmVyLm5hdGl2ZUVsZW1lbnQsICdjbGljaycsICgkZXZlbnQpID0+IHRoaXMudG9nZ2xlQ2xpY2soJGV2ZW50KSlcclxuICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICBjYXNlICdjbGljayc6XHJcbiAgICAgICAgICAgICAgdGhpcy5ldmVudExpc3RlbmVycy5wdXNoKFxyXG4gICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcmVyLmxpc3Rlbih0aGlzLnpvb21Db250YWluZXIubmF0aXZlRWxlbWVudCwgJ2NsaWNrJywgKCRldmVudCkgPT4gdGhpcy5jbGlja1N0YXJ0ZXIoJGV2ZW50KSlcclxuICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgIHRoaXMuZXZlbnRMaXN0ZW5lcnMucHVzaChcclxuICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5saXN0ZW4odGhpcy56b29tQ29udGFpbmVyLm5hdGl2ZUVsZW1lbnQsICdtb3VzZWxlYXZlJywgKCkgPT4gdGhpcy5jbGlja01vdXNlTGVhdmUoKSlcclxuICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgIHRoaXMuZXZlbnRMaXN0ZW5lcnMucHVzaChcclxuICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5saXN0ZW4odGhpcy56b29tQ29udGFpbmVyLm5hdGl2ZUVsZW1lbnQsICdtb3VzZW1vdmUnLCAoJGV2ZW50KSA9PiB0aGlzLmNsaWNrTW91c2VNb3ZlKCRldmVudCkpXHJcbiAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgY2FzZSAndG9nZ2xlLWNsaWNrJzpcclxuICAgICAgICAgICAgICB0aGlzLmV2ZW50TGlzdGVuZXJzLnB1c2goXHJcbiAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZXIubGlzdGVuKHRoaXMuem9vbUNvbnRhaW5lci5uYXRpdmVFbGVtZW50LCAnY2xpY2snLCAoZXZlbnQpID0+IHRoaXMudG9nZ2xlQ2xpY2soZXZlbnQpKVxyXG4gICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgdGhpcy5ldmVudExpc3RlbmVycy5wdXNoKFxyXG4gICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcmVyLmxpc3Rlbih0aGlzLnpvb21Db250YWluZXIubmF0aXZlRWxlbWVudCwgJ21vdXNlbGVhdmUnLCAoKSA9PiB0aGlzLmNsaWNrTW91c2VMZWF2ZSgpKVxyXG4gICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgdGhpcy5ldmVudExpc3RlbmVycy5wdXNoKFxyXG4gICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcmVyLmxpc3Rlbih0aGlzLnpvb21Db250YWluZXIubmF0aXZlRWxlbWVudCwgJ21vdXNlbW92ZScsIChldmVudCkgPT4gdGhpcy5jbGlja01vdXNlTW92ZShldmVudCkpXHJcbiAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgY2FzZSAnaG92ZXItZnJlZXplJzpcclxuICAgICAgICAgICAgICB0aGlzLmV2ZW50TGlzdGVuZXJzLnB1c2goXHJcbiAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZXIubGlzdGVuKHRoaXMuem9vbUNvbnRhaW5lci5uYXRpdmVFbGVtZW50LCAnbW91c2VlbnRlcicsICgkZXZlbnQpID0+IHRoaXMuaG92ZXJGcmVlemVNb3VzZUVudGVyKCRldmVudCkpXHJcbiAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICB0aGlzLmV2ZW50TGlzdGVuZXJzLnB1c2goXHJcbiAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZXIubGlzdGVuKHRoaXMuem9vbUNvbnRhaW5lci5uYXRpdmVFbGVtZW50LCAnbW91c2VsZWF2ZScsICgpID0+IHRoaXMuaG92ZXJGcmVlemVNb3VzZUxlYXZlKCkpXHJcbiAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICB0aGlzLmV2ZW50TGlzdGVuZXJzLnB1c2goXHJcbiAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZXIubGlzdGVuKHRoaXMuem9vbUNvbnRhaW5lci5uYXRpdmVFbGVtZW50LCAnbW91c2Vtb3ZlJywgKCRldmVudCkgPT4gdGhpcy5ob3ZlckZyZWV6ZU1vdXNlTW92ZSgkZXZlbnQpKVxyXG4gICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgdGhpcy5ldmVudExpc3RlbmVycy5wdXNoKFxyXG4gICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcmVyLmxpc3Rlbih0aGlzLnpvb21Db250YWluZXIubmF0aXZlRWxlbWVudCwgJ2NsaWNrJywgKCRldmVudCkgPT4gdGhpcy5ob3ZlckZyZWV6ZUNsaWNrKCRldmVudCkpXHJcbiAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5lbmFibGVTY3JvbGxab29tKSB7XHJcbiAgICAgICAgICAgIC8vIENocm9tZTogJ21vdXNld2hlZWwnLCBGaXJlZm94OiAnRE9NTW91c2VTY3JvbGwnLCBJRTogJ29ubW91c2V3aGVlbCdcclxuICAgICAgICAgICAgdGhpcy5ldmVudExpc3RlbmVycy5wdXNoKFxyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5saXN0ZW4odGhpcy56b29tQ29udGFpbmVyLm5hdGl2ZUVsZW1lbnQsICdtb3VzZXdoZWVsJywgKGV2ZW50KSA9PiB0aGlzLm9uTW91c2VXaGVlbChldmVudCkpXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIHRoaXMuZXZlbnRMaXN0ZW5lcnMucHVzaChcclxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZXIubGlzdGVuKHRoaXMuem9vbUNvbnRhaW5lci5uYXRpdmVFbGVtZW50LCAnRE9NTW91c2VTY3JvbGwnLCAoZXZlbnQpID0+IHRoaXMub25Nb3VzZVdoZWVsKGV2ZW50KSlcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgdGhpcy5ldmVudExpc3RlbmVycy5wdXNoKFxyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5saXN0ZW4odGhpcy56b29tQ29udGFpbmVyLm5hdGl2ZUVsZW1lbnQsICdvbm1vdXNld2hlZWwnLCAoZXZlbnQpID0+IHRoaXMub25Nb3VzZVdoZWVsKGV2ZW50KSlcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICB9XHJcbiAgICBwcml2YXRlIGNoZWNrSW1hZ2VzTG9hZGVkKCkge1xyXG4gICAgICAgIHRoaXMuY2FsY3VsYXRlUmF0aW9BbmRPZmZzZXQoKTtcclxuICAgICAgICBpZiAodGhpcy50aHVtYkltYWdlTG9hZGVkICYmIHRoaXMuZnVsbEltYWdlTG9hZGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2FsY3VsYXRlSW1hZ2VBbmRMZW5zUG9zaXRpb24oKTtcclxuICAgICAgICAgICAgdGhpcy5pc1JlYWR5ID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgXHJcbiAgICAvKipcclxuICAgICAqIFpvb20gcG9zaXRpb24gc2V0dGVyc1xyXG4gICAgICovXHJcbiAgICBwcml2YXRlIHNldFpvb21Qb3NpdGlvbihsZWZ0OiBudW1iZXIsIHRvcDogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5sYXRlc3RNb3VzZUxlZnQgPSBOdW1iZXIobGVmdCkgfHwgdGhpcy5sYXRlc3RNb3VzZUxlZnQ7XHJcbiAgICAgICAgdGhpcy5sYXRlc3RNb3VzZVRvcCA9IE51bWJlcih0b3ApIHx8IHRoaXMubGF0ZXN0TW91c2VUb3A7XHJcbiAgXHJcbiAgICAgICAgY29uc3QgYzogem9vbWJveENvb3JkID0ge1xyXG4gICAgICAgICAgICB4OiB0aGlzLmxhdGVzdE1vdXNlTGVmdCxcclxuICAgICAgICAgICAgeTogdGhpcy5sYXRlc3RNb3VzZVRvcFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy56b29tUG9zaXRpb24uZW1pdChjKTtcclxuICAgIH1cclxuICBcclxuICBcclxuICAgIC8qKlxyXG4gICAgICogTW91c2Ugd2hlZWwgZXZlbnRcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBvbk1vdXNlV2hlZWwoZXZlbnQ6IGFueSkge1xyXG4gICAgICAgIC8vIERvbid0IGVhdCBldmVudHMgaWYgem9vbWluZyBpc24ndCBhY3RpdmVcclxuICAgICAgICBpZiAoIXRoaXMuem9vbWluZ0VuYWJsZWQgfHwgdGhpcy56b29tRnJvemVuKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgXHJcbiAgICAgICAgZXZlbnQgPSB3aW5kb3cuZXZlbnQgfHwgZXZlbnQ7IC8vIG9sZCBJRVxyXG4gICAgICAgIGNvbnN0IGRpcmVjdGlvbiA9IE1hdGgubWF4KE1hdGgubWluKChldmVudC53aGVlbERlbHRhIHx8IC1ldmVudC5kZXRhaWwpLCAxKSwgLTEpO1xyXG4gICAgICAgIGlmIChkaXJlY3Rpb24gPiAwKSB7XHJcbiAgICAgICAgICAgIC8vIHVwXHJcbiAgICAgICAgICAgIHRoaXMuc2V0TWFnbmlmaWNhdGlvbiA9IE1hdGgubWluKHRoaXMubWFnbmlmaWNhdGlvbiArIHRoaXMuc2Nyb2xsU3RlcFNpemUsIHRoaXMubWF4Wm9vbVJhdGlvKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBkb3duXHJcbiAgICAgICAgICAgIHRoaXMuc2V0TWFnbmlmaWNhdGlvbiA9IE1hdGgubWF4KHRoaXMubWFnbmlmaWNhdGlvbiAtIHRoaXMuc2Nyb2xsU3RlcFNpemUsIHRoaXMubWluWm9vbVJhdGlvKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jYWxjdWxhdGVSYXRpbygpO1xyXG4gICAgICAgIHRoaXMuY2FsY3VsYXRlWm9vbVBvc2l0aW9uKGV2ZW50KTtcclxuICAgICAgICB0aGlzLmNkLm1hcmtGb3JDaGVjaygpXHJcbiAgICAgICAgLy8gUHJldmVudCBzY3JvbGxpbmcgb24gcGFnZS5cclxuICAgICAgICBldmVudC5yZXR1cm5WYWx1ZSA9IGZhbHNlOyAvLyBJRVxyXG4gICAgICAgIGlmIChldmVudC5wcmV2ZW50RGVmYXVsdCkge1xyXG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOyAvLyBDaHJvbWUgJiBGRlxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICBcclxuICAgIC8qKlxyXG4gICAgICogSG92ZXIgbW9kZVxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGhvdmVyTW91c2VFbnRlcihldmVudDogTW91c2VFdmVudCkge1xyXG4gICAgICAgIHRoaXMuem9vbU9uKGV2ZW50KTtcclxuICAgICAgICBcclxuICAgIH1cclxuICBcclxuICAgIHByaXZhdGUgaG92ZXJNb3VzZUxlYXZlKCkge1xyXG4gICAgICAgIHRoaXMuem9vbU9mZigpO1xyXG4gICAgICAgIFxyXG4gICAgfVxyXG4gIFxyXG4gICAgcHJpdmF0ZSBob3Zlck1vdXNlTW92ZShldmVudDogTW91c2VFdmVudCkge1xyXG4gICAgICAgIHRoaXMuY2FsY3VsYXRlWm9vbVBvc2l0aW9uKGV2ZW50KTtcclxuICAgICAgICBcclxuICAgIH1cclxuICBcclxuICAgIC8qKlxyXG4gICAgICogVG9nZ2xlIG1vZGVcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSB0b2dnbGVDbGljayhldmVudDogTW91c2VFdmVudCkge1xyXG4gICAgICBpZiAodGhpcy56b29taW5nRW5hYmxlZCkge1xyXG4gICAgICAgICAgICB0aGlzLnpvb21PZmYoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnpvb21PbihldmVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gIFxyXG4gICAgLyoqXHJcbiAgICAgKiBDbGljayBtb2RlXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgY2xpY2tTdGFydGVyKGV2ZW50OiBNb3VzZUV2ZW50KSB7XHJcbiAgICAgICAgaWYgKHRoaXMuem9vbWluZ0VuYWJsZWQgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuem9vbU9uKGV2ZW50KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgXHJcbiAgICBwcml2YXRlIGNsaWNrTW91c2VMZWF2ZSgpIHtcclxuICAgICAgICB0aGlzLnpvb21PZmYoKTtcclxuICAgIH1cclxuICBcclxuICAgIHByaXZhdGUgY2xpY2tNb3VzZU1vdmUoZXZlbnQ6IE1vdXNlRXZlbnQpIHtcclxuICAgICAgICBpZiAodGhpcy56b29taW5nRW5hYmxlZCkge1xyXG4gICAgICAgICAgICB0aGlzLmNhbGN1bGF0ZVpvb21Qb3NpdGlvbihldmVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgfVxyXG4gIFxyXG4gICAgLyoqXHJcbiAgICAgKiBIb3ZlciBmcmVlemUgbW9kZVxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGhvdmVyRnJlZXplTW91c2VFbnRlcihldmVudDogTW91c2VFdmVudCkge1xyXG4gICAgICAgIGlmICh0aGlzLnpvb21pbmdFbmFibGVkICYmICF0aGlzLnpvb21Gcm96ZW4pIHtcclxuICAgICAgICAgICAgdGhpcy56b29tT24oZXZlbnQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICBcclxuICAgIHByaXZhdGUgaG92ZXJGcmVlemVNb3VzZUxlYXZlKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnpvb21pbmdFbmFibGVkICYmICF0aGlzLnpvb21Gcm96ZW4pIHtcclxuICAgICAgICAgICAgdGhpcy56b29tT2ZmKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gIFxyXG4gICAgcHJpdmF0ZSBob3ZlckZyZWV6ZU1vdXNlTW92ZShldmVudDogTW91c2VFdmVudCkge1xyXG4gICAgICAgIGlmICh0aGlzLnpvb21pbmdFbmFibGVkICYmICF0aGlzLnpvb21Gcm96ZW4pIHtcclxuICAgICAgICAgICAgdGhpcy5jYWxjdWxhdGVab29tUG9zaXRpb24oZXZlbnQpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgXHJcbiAgICBwcml2YXRlIGhvdmVyRnJlZXplQ2xpY2soZXZlbnQ6IE1vdXNlRXZlbnQpIHtcclxuICAgICAgICBpZiAodGhpcy56b29taW5nRW5hYmxlZCAmJiB0aGlzLnpvb21Gcm96ZW4pIHtcclxuICAgICAgICAgICAgdGhpcy56b29tRnJvemVuID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuem9vbU9mZigpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy56b29taW5nRW5hYmxlZCkge1xyXG4gICAgICAgICAgICB0aGlzLnpvb21Gcm96ZW4gPSB0cnVlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuem9vbU9uKGV2ZW50KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgXHJcbiAgICAvKipcclxuICAgICAqIFByaXZhdGUgaGVscGVyIG1ldGhvZHNcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSB6b29tT24oZXZlbnQ6IE1vdXNlRXZlbnQpIHtcclxuICAgICAgICBpZiAodGhpcy5pc1JlYWR5KSB7XHJcbiAgICAgICAgICAgIHRoaXMuem9vbWluZ0VuYWJsZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLmNhbGN1bGF0ZVJhdGlvQW5kT2Zmc2V0KCk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmVuYWJsZU92ZXJsYXkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICB0aGlzLmRpc3BsYXlMZW49dGhpcy5kaXNwbGF5T3ZlcmxheT0nYmxvY2snXHJcbiAgICAgICAgICAgICAgdGhpcy5vdmVybGF5VmlzaWJsZT10cnVlXHJcbiAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5SW5QaWM9J25vbmUnXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgIHRoaXMuZGlzcGxheUxlbj10aGlzLmRpc3BsYXlJblBpYz0nYmxvY2snXHJcbiAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5jYWxjdWxhdGVab29tUG9zaXRpb24oZXZlbnQpO1xyXG4gICAgICAgICAgICB0aGlzLmNkLm1hcmtGb3JDaGVjaygpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gIFxyXG4gICAgcHJpdmF0ZSB6b29tT2ZmKCkge1xyXG4gICAgICAgIHRoaXMuem9vbWluZ0VuYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICBpZiAodGhpcy5lbmFibGVPdmVybGF5KVxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgdGhpcy5kaXNwbGF5TGVuPXRoaXMuZGlzcGxheU92ZXJsYXk9J25vbmUnXHJcbiAgICAgICAgICB0aGlzLm92ZXJsYXlWaXNpYmxlPWZhbHNlXHJcbiAgICAgIH1cclxuICAgICAgICBlbHNlIFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIHRoaXMuZGlzcGxheUxlbj10aGlzLmRpc3BsYXlJblBpYz0nbm9uZSdcclxuICAgICAgICAgIHRoaXMub3ZlcmxheVZpc2libGU9ZmFsc2VcclxuICAgICAgICB9XHJcbiAgICAgICAgICB0aGlzLmNkLm1hcmtGb3JDaGVjaygpXHJcbiAgICB9XHJcbiAgXHJcbiAgICBwcml2YXRlIGNhbGN1bGF0ZVpvb21Qb3NpdGlvbihldmVudDogTW91c2VFdmVudCkge1xyXG4gICAgICAgIGNvbnN0IG5ld0xlZnQgPSBNYXRoLm1heChNYXRoLm1pbihldmVudC5vZmZzZXRYLCB0aGlzLnRodW1iV2lkdGgpLCAwKTtcclxuICAgICAgICBjb25zdCBuZXdUb3AgPSBNYXRoLm1heChNYXRoLm1pbihldmVudC5vZmZzZXRZLCB0aGlzLnRodW1iSGVpZ2h0KSwgMCk7XHJcbiAgXHJcbiAgICAgICAgdGhpcy5zZXRab29tUG9zaXRpb24obmV3TGVmdCwgbmV3VG9wKTtcclxuICBcclxuICAgICAgICB0aGlzLmNhbGN1bGF0ZUltYWdlQW5kTGVuc1Bvc2l0aW9uKCk7XHJcbiAgICAgICAgdGhpcy5jZC5tYXJrRm9yQ2hlY2soKVxyXG4gICAgfVxyXG4gIFxyXG4gICAgcHJpdmF0ZSBjYWxjdWxhdGVJbWFnZUFuZExlbnNQb3NpdGlvbigpIHtcclxuICAgICAgICBsZXQgbGVuc0xlZnRNb2QgPSAwO1xyXG4gICAgICAgIGxldCBsZW5zVG9wTW9kID0gMDtcclxuICAgICAgICBsZXQgb3ZlcmxheUxlZnRNb2Q9MDtcclxuICAgICAgICBsZXQgb3ZlcmxheVRvcE1vZD0wXHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKHRoaXMuZW5hYmxlT3ZlcmxheSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICB0aGlzLm92ZXJsYXlIZWlnaHQ9IHRoaXMuZGVmYXVsdExlbkhlaWdodC8gdGhpcy50aHVtYkhlaWdodCp0aGlzLmZ1bGxIZWlnaHRcclxuICAgICAgICAgIHRoaXMub3ZlcmxheVdpZHRoPXRoaXMuZGVmYXVsdExlbldpZHRoL3RoaXMudGh1bWJXaWR0aCp0aGlzLmZ1bGxXaWR0aFxyXG4gICAgICAgICB0aGlzLm92ZXJsYXlMZWZ0PSB0aGlzLnRodW1iV2lkdGggK3RoaXMuem9vbUNvbnRhaW5lci5uYXRpdmVFbGVtZW50Lm9mZnNldExlZnRcclxuICAgICAgICAgIHRoaXMub3ZlcmxheVRvcD0gdGhpcy56b29tQ29udGFpbmVyLm5hdGl2ZUVsZW1lbnQub2Zmc2V0VG9wXHJcbiAgICAgICAgICBvdmVybGF5TGVmdE1vZD0gdGhpcy5sYXRlc3RNb3VzZUxlZnQtdGhpcy5vdmVybGF5V2lkdGgvMlxyXG4gICAgICAgICAgb3ZlcmxheVRvcE1vZD10aGlzLmxhdGVzdE1vdXNlVG9wIC0gdGhpcy5vdmVybGF5SGVpZ2h0IC8gMjtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgICAgIGlmIChvdmVybGF5TGVmdE1vZDwwKSBvdmVybGF5TGVmdE1vZD0wXHJcbiAgICAgICAgICAgICAgZWxzZSBpZiAob3ZlcmxheUxlZnRNb2Q+KHRoaXMudGh1bWJXaWR0aC10aGlzLm92ZXJsYXlXaWR0aCkpIG92ZXJsYXlMZWZ0TW9kPXRoaXMudGh1bWJXaWR0aC10aGlzLm92ZXJsYXlXaWR0aFxyXG4gICAgICAgICAgICAgIGlmIChvdmVybGF5VG9wTW9kPDApIG92ZXJsYXlUb3BNb2Q9MFxyXG4gICAgICAgICAgICAgIGVsc2UgaWYgKG92ZXJsYXlUb3BNb2Q+KHRoaXMudGh1bWJIZWlnaHQtdGhpcy5vdmVybGF5SGVpZ2h0KSkgb3ZlcmxheVRvcE1vZD10aGlzLnRodW1iSGVpZ2h0LXRoaXMub3ZlcmxheUhlaWdodFxyXG4gICAgICAgICAgXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmVuYWJsZUxlbnMpIHtcclxuICAgICAgICAgIHRoaXMubGVuc0xlZnQgPSB0aGlzLmxhdGVzdE1vdXNlTGVmdCAtIHRoaXMubGVuc1dpZHRoIC8gMjtcclxuICAgICAgICAgIHRoaXMubGVuc1RvcCA9IHRoaXMubGF0ZXN0TW91c2VUb3AgLSB0aGlzLmxlbnNIZWlnaHQgLyAyO1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICAgICAgaWYgKHRoaXMubGVuc0xlZnQ8MCkgdGhpcy5sZW5zTGVmdD0wXHJcbiAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5sZW5zTGVmdD4odGhpcy50aHVtYldpZHRoLXRoaXMubGVuc1dpZHRoKSkgdGhpcy5sZW5zTGVmdD0odGhpcy50aHVtYldpZHRoLXRoaXMubGVuc1dpZHRoKVxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICAgICAgaWYgKHRoaXMubGVuc1RvcDwwKSB0aGlzLmxlbnNUb3A9MFxyXG4gICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMubGVuc1RvcD4odGhpcy50aHVtYkhlaWdodC10aGlzLmxlbnNIZWlnaHQpKSB0aGlzLmxlbnNUb3A9KHRoaXMudGh1bWJIZWlnaHQtdGhpcy5sZW5zSGVpZ2h0KVxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICBsZW5zTGVmdE1vZCA9dGhpcy5sZW5zTGVmdFxyXG4gICAgICAgICAgbGVuc1RvcE1vZD10aGlzLmxlbnNUb3BcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5mdWxsSW1hZ2VMZWZ0ID0gKHRoaXMubGF0ZXN0TW91c2VMZWZ0ICogLXRoaXMueFJhdGlvKSAtICgodGhpcy5lbmFibGVPdmVybGF5KT9vdmVybGF5TGVmdE1vZDpsZW5zTGVmdE1vZCkgO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuZnVsbEltYWdlVG9wID0gKHRoaXMubGF0ZXN0TW91c2VUb3AgKiAtdGhpcy55UmF0aW8pIC0gKCh0aGlzLmVuYWJsZU92ZXJsYXkpP292ZXJsYXlUb3BNb2Q6bGVuc1RvcE1vZCkgO1xyXG4gICAgfVxyXG4gIFxyXG4gICAgcHJpdmF0ZSBjYWxjdWxhdGVSYXRpb0FuZE9mZnNldCgpIHtcclxuICAgICAgXHJcbiAgICAgICAgdGhpcy50aHVtYldpZHRoID0gdGhpcy5pbWFnZVRodW1ibmFpbC5uYXRpdmVFbGVtZW50Lm5hdHVyYWxXaWR0aDtcclxuICAgICAgICB0aGlzLnRodW1iSGVpZ2h0ID0gdGhpcy5pbWFnZVRodW1ibmFpbC5uYXRpdmVFbGVtZW50Lm5hdHVyYWxIZWlnaHQ7XHJcbiAgXHJcbiAgICAgICAgLy8gSWYgbGVucyBpcyBkaXNhYmxlZCwgc2V0IGxlbnMgc2l6ZSB0byBlcXVhbCB0aHVtYiBzaXplIGFuZCBwb3NpdGlvbiBpdCBvbiB0b3Agb2YgdGhlIHRodW1iXHJcbiAgICAgICAgaWYgKCF0aGlzLmVuYWJsZUxlbnMpIHtcclxuICAgICAgICAgICAgdGhpcy5sZW5zV2lkdGggPSB0aGlzLnRodW1iV2lkdGg7XHJcbiAgICAgICAgICAgIHRoaXMubGVuc0hlaWdodCA9IHRoaXMudGh1bWJIZWlnaHQ7XHJcbiAgICAgICAgICAgIHRoaXMubGVuc0xlZnQgPSAwO1xyXG4gICAgICAgICAgICB0aGlzLmxlbnNUb3AgPSAwO1xyXG4gICAgICAgIH1cclxuICBcclxuICAgICAgICAvLyBnZXRCb3VuZGluZ0NsaWVudFJlY3QoKSA/IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS80NDAwODg3M1xyXG4gICAgICAgIHRoaXMub2Zmc2V0VG9wID0gdGhpcy5pbWFnZVRodW1ibmFpbC5uYXRpdmVFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcDtcclxuICAgICAgICB0aGlzLm9mZnNldExlZnQgPSB0aGlzLmltYWdlVGh1bWJuYWlsLm5hdGl2ZUVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdDtcclxuICBcclxuICAgICAgICBpZiAodGhpcy5mdWxsSW1hZ2UgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmZ1bGxJbWFnZSA9IHRoaXMudGh1bWJJbWFnZTtcclxuICAgICAgICB9XHJcbiAgXHJcbiAgICAgICAgaWYgKHRoaXMuZnVsbEltYWdlTG9hZGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZnVsbFdpZHRoID0gdGhpcy5mdWxsU2l6ZUltYWdlLm5hdGl2ZUVsZW1lbnQubmF0dXJhbFdpZHRoO1xyXG4gICAgICAgICAgICB0aGlzLmZ1bGxIZWlnaHQgPSB0aGlzLmZ1bGxTaXplSW1hZ2UubmF0aXZlRWxlbWVudC5uYXR1cmFsSGVpZ2h0O1xyXG4gIFxyXG4gICAgICAgICAgICB0aGlzLmJhc2VSYXRpbyA9IE1hdGgubWF4KFxyXG4gICAgICAgICAgICAgICAgKHRoaXMudGh1bWJXaWR0aCAvIHRoaXMuZnVsbFdpZHRoKSxcclxuICAgICAgICAgICAgICAgICh0aGlzLnRodW1iSGVpZ2h0IC8gdGhpcy5mdWxsSGVpZ2h0KSk7XHJcbiAgXHJcbiAgICAgICAgICAgIC8vIERvbid0IGFsbG93IHpvb21pbmcgdG8gc21hbGxlciB0aGFuIHRodW1ibmFpbCBzaXplXHJcbiAgICAgICAgICAgIHRoaXMubWluWm9vbVJhdGlvID0gTWF0aC5tYXgodGhpcy5taW5ab29tUmF0aW8gfHwgMCwgdGhpcy5iYXNlUmF0aW8gfHwgMCk7XHJcbiAgXHJcbiAgICAgICAgICAgIHRoaXMuY2FsY3VsYXRlUmF0aW8oKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgXHJcbiAgICBwcml2YXRlIGNhbGN1bGF0ZVJhdGlvKCkge1xyXG4gICAgICAgIHRoaXMubWFnbmlmaWVkV2lkdGggPSAodGhpcy5mdWxsV2lkdGggKiB0aGlzLm1hZ25pZmljYXRpb24pO1xyXG4gICAgICAgIHRoaXMubWFnbmlmaWVkSGVpZ2h0ID0gKHRoaXMuZnVsbEhlaWdodCAqIHRoaXMubWFnbmlmaWNhdGlvbik7XHJcbiAgICAgICAgaWYgKHRoaXMuZW5hYmxlT3ZlcmxheSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICB0aGlzLmxlbnNXaWR0aD10aGlzLmRlZmF1bHRMZW5XaWR0aC90aGlzLm1hZ25pZmljYXRpb25cclxuICAgICAgICAgIHRoaXMubGVuc0hlaWdodD10aGlzLmRlZmF1bHRMZW5IZWlnaHQvdGhpcy5tYWduaWZpY2F0aW9uXHJcbiAgICAgICAgICBcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy54UmF0aW8gPSAodGhpcy5tYWduaWZpZWRXaWR0aCAtIHRoaXMudGh1bWJXaWR0aCkgLyB0aGlzLnRodW1iV2lkdGg7XHJcbiAgICAgICAgdGhpcy55UmF0aW8gPSAodGhpcy5tYWduaWZpZWRIZWlnaHQgLSB0aGlzLnRodW1iSGVpZ2h0KSAvIHRoaXMudGh1bWJIZWlnaHQ7XHJcbiAgICAgICAgXHJcbiAgICB9XHJcbiAgICBcclxuICAgIFxyXG4gIH1cclxuXHJcbiJdfQ==