import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { Attribute, ChangeDetectionStrategy, Component, EventEmitter, forwardRef, Inject, Input, Optional, Output, ViewChild, ViewEncapsulation, } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { mixinDisabled, mixinTabIndex } from 'tds-ui/shared/common';
import { TDS_CHECKBOX_DEFAULT_OPTIONS, TDS_CHECKBOX_DEFAULT_OPTIONS_FACTORY, } from './checkbox-config';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/a11y";
import * as i2 from "@angular/common";
const _c0 = ["input"];
const _c1 = function (a0) { return { "dark:text-d-neutral-3-50": a0 }; };
function TDSCheckbox__svg_svg_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵnamespaceSVG();
    i0.ɵɵelementStart(0, "svg", 10);
    i0.ɵɵelement(1, "path", 11);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵattribute("width", ctx_r2.widthHieghtSvg)("height", ctx_r2.widthHieghtSvg);
    i0.ɵɵadvance(1);
    i0.ɵɵclassMap(i0.ɵɵpureFunction1(4, _c1, ctx_r2.disabled));
} }
function TDSCheckbox__svg_svg_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵnamespaceSVG();
    i0.ɵɵelementStart(0, "svg", 12);
    i0.ɵɵelement(1, "path", 13);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵattribute("width", ctx_r3.widthHieghtSvg)("height", ctx_r3.widthHieghtSvg);
    i0.ɵɵadvance(1);
    i0.ɵɵclassMap(i0.ɵɵpureFunction1(4, _c1, ctx_r3.disabled));
} }
const _c2 = function (a0, a1, a2, a3, a4, a5) { return { "group-hover:border-primary-1  cursor-pointer": a0, "bg-primary-1 border-primary-1": a1, "bg-white dark:bg-d-neutral-3-50 ": a2, " bg-neutral-3-50 dark:bg-d-neutral-2-200": a3, " bg-neutral-2-200 dark:bg-d-neutral-1-200": a4, "cursor-not-allowed": a5 }; };
const _c3 = function (a0, a1, a2) { return { "h-3 w-3": a0, "h-2.5 w-2.5": a1, "h-3.5 w-3.5": a2 }; };
const _c4 = function (a0, a1, a2) { return { "text-neutral-1-900 dark:text-d-neutral-1-900": a0, "text-neutral-1-300 dark:text-d-neutral-1-300": a1, "ml-2": a2 }; };
const _c5 = function (a0, a1) { return { "cursor-pointer": a0, "opacity-65 cursor-not-allowed": a1 }; };
const _c6 = ["*"];
// Increasing integer for generating unique ids for checkbox components.
let nextUniqueId = 0;
// Default checkbox configuration.
const defaults = TDS_CHECKBOX_DEFAULT_OPTIONS_FACTORY();
/**
 * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.
 * This allows it to support [(ngModel)].
 * @docs-private
 */
export const TDS_CHECKBOX_CONTROL_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => TDSCheckbox),
    multi: true
};
/** Change event object emitted by MatCheckbox. */
export class TDSCheckboxChange {
}
// Boilerplate for applying mixins to MatCheckbox.
/** @docs-private */
class TDSCheckboxBase {
    constructor(_elementRef) {
        this._elementRef = _elementRef;
    }
}
const _TACheckboxMixinBase = mixinTabIndex(mixinDisabled(TDSCheckboxBase));
/**
 * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,
 * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or
 * disabled. Note that all additional accessibility attributes are taken care of by the component,
 * so there is no need to provide them yourself. However, if you want to omit a label and still
 * have the checkbox be accessible, you may supply an [aria-label] input.
 * See: https://material.io/design/components/selection-controls.html
 */
export class TDSCheckbox extends _TACheckboxMixinBase {
    constructor(elementRef, _changeDetectorRef, _focusMonitor, tabIndex, _options) {
        super(elementRef);
        this._changeDetectorRef = _changeDetectorRef;
        this._focusMonitor = _focusMonitor;
        this._options = _options;
        this._size = 'md';
        this.widthHieghtSvg = 12;
        /**
         * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will
         * take precedence so this may be omitted.
         */
        this.ariaLabel = '';
        /**
         * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element
         */
        this.ariaLabelledby = null;
        this._uniqueId = `tds-checkbox-${++nextUniqueId}`;
        /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */
        this.id = this._uniqueId;
        /** Name value will be applied to the input element if present */
        this.name = null;
        /** Event emitted when the checkbox's `checked` value changes. */
        this.tdsChange = new EventEmitter();
        /**
         * @deprecated sẽ không hỗ trợ từ bản 2.1.0, dùng tdsChange để thay thế
         */
        this.change = new EventEmitter();
        /** Event emitted when the checkbox's `indeterminate` value changes. */
        this.indeterminateChange = new EventEmitter();
        /**
         * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.
         * @docs-private
         */
        this._onTouched = () => { };
        this._controlValueAccessorChangeFn = () => { };
        this._checked = false;
        this._disabled = false;
        this._indeterminate = false;
        this._options = this._options || defaults;
        this.tabIndex = parseInt(tabIndex) || 0;
    }
    get size() { return this._size; }
    set size(value) {
        if (value !== this._size) {
            this._size = value;
            this.widthHieghtSvg = this._size == "sm" ? 10 : this._size == "lg" ? 14 : 12;
            this._changeDetectorRef.markForCheck();
        }
    }
    /** Returns the unique id for the visual hidden input. */
    get inputId() { return `${this.id || this._uniqueId}-input`; }
    /** Whether the checkbox is required. */
    get required() { return this._required; }
    set required(value) { this._required = coerceBooleanProperty(value); }
    ngAfterViewInit() {
        this._focusMonitor.monitor(this._elementRef, true).subscribe(focusOrigin => {
            if (!focusOrigin) {
                // When a focused element becomes disabled, the browser *immediately* fires a blur event.
                // Angular does not expect events to be raised during change detection, so any state change
                // (such as a form control's 'ng-touched') will cause a changed-after-checked error.
                // See https://github.com/angular/angular/issues/17793. To work around this, we defer
                // telling the form control it has been touched until the next tick.
                Promise.resolve().then(() => {
                    this._onTouched();
                    this._changeDetectorRef.markForCheck();
                });
            }
        });
        this._syncIndeterminate(this._indeterminate);
    }
    // TODO: Delete next major revision.
    ngAfterViewChecked() { }
    ngOnDestroy() {
        this._focusMonitor.stopMonitoring(this._elementRef);
    }
    /**
     * Whether the checkbox is checked.
     */
    get checked() { return this._checked; }
    set checked(value) {
        if (value != this.checked) {
            this._checked = value;
            this._changeDetectorRef.markForCheck();
        }
    }
    /**
     * Whether the checkbox is disabled. This fully overrides the implementation provided by
     * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.
     */
    get disabled() { return this._disabled; }
    set disabled(value) {
        const newValue = coerceBooleanProperty(value);
        if (newValue !== this.disabled) {
            this._disabled = newValue;
            this._changeDetectorRef.markForCheck();
        }
    }
    /**
     * Whether the checkbox is indeterminate. This is also known as "mixed" mode and can be used to
     * represent a checkbox with three states, e.g. a checkbox that represents a nested list of
     * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately
     * set to false.
     */
    get indeterminate() { return this._indeterminate; }
    set indeterminate(value) {
        const changed = value != this._indeterminate;
        this._indeterminate = coerceBooleanProperty(value);
        if (changed) {
            this.indeterminateChange.emit(this._indeterminate);
        }
        this._syncIndeterminate(this._indeterminate);
    }
    /** Method being called whenever the label text changes. */
    _onLabelTextChange() {
        // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox
        // component will be only marked for check, but no actual change detection runs automatically.
        // Instead of going back into the zone in order to trigger a change detection which causes
        // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger
        // an explicit change detection for the checkbox view and its children.
        this._changeDetectorRef.detectChanges();
    }
    // Implemented as part of ControlValueAccessor.
    writeValue(value) {
        this.checked = !!value;
    }
    // Implemented as part of ControlValueAccessor.
    registerOnChange(fn) {
        this._controlValueAccessorChangeFn = fn;
    }
    // Implemented as part of ControlValueAccessor.
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    // Implemented as part of ControlValueAccessor.
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    _getAriaChecked() {
        if (this.checked) {
            return 'true';
        }
        return this.indeterminate ? 'mixed' : 'false';
    }
    _emitChangeEvent() {
        const event = new TDSCheckboxChange();
        event.source = this;
        event.checked = this.checked;
        this._controlValueAccessorChangeFn(this.checked);
        this.change.emit(event);
        this.tdsChange.emit(event);
        // Assigning the value again here is redundant, but we have to do it in case it was
        // changed inside the `change` listener which will cause the input to be out of sync.
        if (this._inputElement) {
            this._inputElement.nativeElement.checked = this.checked;
        }
    }
    /** Toggles the `checked` state of the checkbox. */
    toggle() {
        this.checked = !this.checked;
    }
    /**
     * Event handler for checkbox input element.
     * Toggles checked state if element is not disabled.
     * Do not toggle on (change) event since IE doesn't fire change event when
     *   indeterminate checkbox is clicked.
     * @param event
     */
    _onInputClick(event) {
        const clickAction = this._options?.clickAction;
        // We have to stop propagation for click events on the visual hidden input element.
        // By default, when a user clicks on a label element, a generated click event will be
        // dispatched on the associated input element. Since we are using a label element as our
        // root container, the click event on the `checkbox` will be executed twice.
        // The real click event will bubble up, and the generated click event also tries to bubble up.
        // This will lead to multiple click events.
        // Preventing bubbling for the second event will solve that issue.
        event.stopPropagation();
        // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click
        if (!this.disabled && clickAction !== 'noop') {
            // When user manually click on the checkbox, `indeterminate` is set to false.
            if (this.indeterminate && clickAction !== 'check') {
                Promise.resolve().then(() => {
                    this._indeterminate = false;
                    this.indeterminateChange.emit(this._indeterminate);
                });
            }
            this.toggle();
            //  this._transitionCheckState(
            //      this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);
            // Emit our custom change event if the native input emitted one.
            // It is important to only emit it, if the native input triggered one, because
            // we don't want to trigger a change event, when the `checked` variable changes for example.
            this._emitChangeEvent();
        }
        else if (!this.disabled && clickAction === 'noop') {
            // Reset native input when clicked with noop. The native checkbox becomes checked after
            // click, reset it to be align with `checked` value of `mat-checkbox`.
            this._inputElement.nativeElement.checked = this.checked;
            this._inputElement.nativeElement.indeterminate = this.indeterminate;
        }
    }
    /** Focuses the checkbox. */
    focus(origin, options) {
        if (origin) {
            this._focusMonitor.focusVia(this._inputElement, origin, options);
        }
        else {
            this._inputElement.nativeElement.focus(options);
        }
    }
    _onInteractionEvent(event) {
        // We always have to stop propagation on the change event.
        // Otherwise the change event, from the input element, will bubble up and
        // emit its event object to the `change` output.
        event.stopPropagation();
    }
    /**
     * Syncs the indeterminate value with the checkbox DOM node.
     *
     * We sync `indeterminate` directly on the DOM node, because in Ivy the check for whether a
     * property is supported on an element boils down to `if (propName in element)`. Domino's
     * HTMLInputElement doesn't have an `indeterminate` property so Ivy will warn during
     * server-side rendering.
     */
    _syncIndeterminate(value) {
        const nativeCheckbox = this._inputElement;
        if (nativeCheckbox) {
            nativeCheckbox.nativeElement.indeterminate = value;
        }
    }
}
TDSCheckbox.ɵfac = function TDSCheckbox_Factory(t) { return new (t || TDSCheckbox)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.FocusMonitor), i0.ɵɵinjectAttribute('tabindex'), i0.ɵɵdirectiveInject(TDS_CHECKBOX_DEFAULT_OPTIONS, 8)); };
TDSCheckbox.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSCheckbox, selectors: [["tds-checkbox"]], viewQuery: function TDSCheckbox_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);
    } }, hostAttrs: [1, "tds-checkbox"], hostVars: 8, hostBindings: function TDSCheckbox_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵhostProperty("id", ctx.id);
        i0.ɵɵattribute("tabindex", null);
        i0.ɵɵclassProp("tds-checkbox-indeterminate", ctx.indeterminate)("opacity-65", ctx.disabled)("inline-block", true);
    } }, inputs: { color: "color", tabIndex: "tabIndex", size: "size", ariaLabel: ["aria-label", "ariaLabel"], ariaLabelledby: ["aria-labelledby", "ariaLabelledby"], ariaDescribedby: ["aria-describedby", "ariaDescribedby"], id: "id", required: "required", name: "name", value: "value", checked: "checked", disabled: "disabled", indeterminate: "indeterminate" }, outputs: { tdsChange: "tdsChange", change: "change", indeterminateChange: "indeterminateChange" }, exportAs: ["taCheckbox"], features: [i0.ɵɵProvidersFeature([TDS_CHECKBOX_CONTROL_VALUE_ACCESSOR]), i0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c6, decls: 11, vars: 36, consts: [[1, "flex", "items-center", "group"], ["label", ""], [1, "p-0.5", "border", "rounded", "relative", "flex", "items-center", "justify-center", "box-content", "border-neutral-2-200", "dark:border-d-neutral-2-200", 3, "ngClass"], ["type", "checkbox", 1, "border-0", "overflow-hidden", "padding-0", "absolute", "whitespace-nowrap", "outline", "outline-none", 2, "height", "1px", "margin", "-1px", "clip", "rect(0 0 0 0)", "width", "1px", 3, "id", "required", "checked", "disabled", "tabIndex", "change", "click"], ["input", ""], [3, "ngClass"], ["viewBox", "0 0 12 8", "fill", "none", "xmlns", "http://www.w3.org/2000/svg", 4, "ngIf"], ["xmlns", "http://www.w3.org/2000/svg", "viewBox", "0 0 12 4", "fill", "none", 4, "ngIf"], [1, "ml-2", "text-body-2", "font-regular", "select-none", "empty:hidden", 3, "ngClass", "cdkObserveContent"], ["checkboxLabel", ""], ["viewBox", "0 0 12 8", "fill", "none", "xmlns", "http://www.w3.org/2000/svg"], ["d", "M10.7307 0.90316C10.5348 0.707751 10.2694 0.598045 9.99275 0.598045C9.71605 0.598045 9.45061 0.707751 9.25471 0.90316L4.75471 5.40316L2.78572 3.4352C2.68953 3.33465 2.57426 3.25427 2.44661 3.19888C2.31895 3.14348 2.18152 3.11414 2.04237 3.11257C1.90323 3.111 1.76517 3.13728 1.6363 3.18978C1.50744 3.24229 1.39031 3.31999 1.29188 3.41836C1.19345 3.51672 1.11565 3.63376 1.06306 3.7626C1.01047 3.89143 0.984135 4.02946 0.985609 4.1686C0.987082 4.30775 1.01636 4.44521 1.07167 4.5729C1.12698 4.70059 1.20726 4.81594 1.30775 4.91219L4.01674 7.6202C4.21298 7.81573 4.47872 7.9255 4.75575 7.9255C5.03278 7.9255 5.29846 7.81573 5.4947 7.6202L10.7367 2.38021C10.8346 2.28323 10.9123 2.1678 10.9653 2.04061C11.0184 1.91343 11.0457 1.77698 11.0457 1.63918C11.0457 1.50138 11.0184 1.36494 10.9653 1.23775C10.9123 1.11057 10.8346 0.995193 10.7367 0.898216L10.7307 0.90316Z", 1, "fill-current", "text-white"], ["xmlns", "http://www.w3.org/2000/svg", "viewBox", "0 0 12 4", "fill", "none"], ["fill-rule", "evenodd", "clip-rule", "evenodd", "d", "M0.600006 2C0.600006 1.33726 1.13726 0.800003 1.80001 0.800003L10.2 0.800003C10.8627 0.800003 11.4 1.33726 11.4 2C11.4 2.66274 10.8627 3.2 10.2 3.2L1.80001 3.2C1.13726 3.2 0.600006 2.66274 0.600006 2Z", 1, "fill-current", "text-white"]], template: function TDSCheckbox_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵelementStart(0, "label", 0, 1)(2, "span", 2)(3, "input", 3, 4);
        i0.ɵɵlistener("change", function TDSCheckbox_Template_input_change_3_listener($event) { return ctx._onInteractionEvent($event); })("click", function TDSCheckbox_Template_input_click_3_listener($event) { return ctx._onInputClick($event); });
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(5, "span", 5);
        i0.ɵɵtemplate(6, TDSCheckbox__svg_svg_6_Template, 2, 6, "svg", 6);
        i0.ɵɵtemplate(7, TDSCheckbox__svg_svg_7_Template, 2, 6, "svg", 7);
        i0.ɵɵelementEnd()();
        i0.ɵɵelementStart(8, "span", 8, 9);
        i0.ɵɵlistener("cdkObserveContent", function TDSCheckbox_Template_span_cdkObserveContent_8_listener() { return ctx._onLabelTextChange(); });
        i0.ɵɵprojection(10);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const _r4 = i0.ɵɵreference(9);
        i0.ɵɵattribute("for", ctx.inputId);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction6(18, _c2, !ctx.disabled, !ctx.disabled && (ctx.checked || ctx.indeterminate), !ctx.checked && !ctx.indeterminate, ctx.disabled && !ctx.checked && !ctx.indeterminate, ctx.disabled && (ctx.checked || ctx.indeterminate), ctx.disabled));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("id", ctx.inputId)("required", ctx.required)("checked", ctx.checked)("disabled", ctx.disabled)("tabIndex", ctx.tabIndex);
        i0.ɵɵattribute("value", ctx.value)("name", ctx.name)("aria-label", ctx.ariaLabel || null)("aria-labelledby", ctx.ariaLabelledby)("aria-checked", ctx._getAriaChecked())("aria-describedby", ctx.ariaDescribedby);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction3(25, _c3, ctx.size == "md", ctx.size == "sm", ctx.size == "lg"));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx.checked && !ctx.indeterminate);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx.indeterminate);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction3(29, _c4, !ctx.disabled, ctx.disabled, _r4.children.length))("ngClass", i0.ɵɵpureFunction2(33, _c5, !ctx.disabled, ctx.disabled));
    } }, directives: [i2.NgClass, i2.NgIf], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSCheckbox, [{
        type: Component,
        args: [{ selector: 'tds-checkbox', exportAs: 'taCheckbox', host: {
                    'class': 'tds-checkbox',
                    '[id]': 'id',
                    '[attr.tabindex]': 'null',
                    '[class.tds-checkbox-indeterminate]': 'indeterminate',
                    '[class.opacity-65]': 'disabled',
                    '[class.inline-block]': 'true',
                }, providers: [TDS_CHECKBOX_CONTROL_VALUE_ACCESSOR], inputs: ['color', 'tabIndex'], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: "<label class=\"flex items-center group\" [attr.for]=\"inputId\" #label>\r\n    <span\r\n        class=\"p-0.5 border rounded   relative flex items-center justify-center box-content border-neutral-2-200 dark:border-d-neutral-2-200\"\r\n        [ngClass]=\"{'group-hover:border-primary-1  cursor-pointer':!disabled,\r\n        'bg-primary-1 border-primary-1':!disabled  && (checked || indeterminate),\r\n        'bg-white dark:bg-d-neutral-3-50 ':!checked && !indeterminate,\r\n        ' bg-neutral-3-50 dark:bg-d-neutral-2-200':disabled && !checked && !indeterminate,\r\n        ' bg-neutral-2-200 dark:bg-d-neutral-1-200':disabled && (checked || indeterminate),\r\n        'cursor-not-allowed':disabled\r\n    }\">\r\n        <input #input type=\"checkbox\"\r\n            class=\"border-0 overflow-hidden padding-0 absolute whitespace-nowrap outline outline-none\"\r\n            style=\"height: 1px; margin: -1px;clip: rect(0 0 0 0); width:1px\" [id]=\"inputId\" [required]=\"required\"\r\n            [checked]=\"checked\" [attr.value]=\"value\" [disabled]=\"disabled\" [attr.name]=\"name\" [tabIndex]=\"tabIndex\"\r\n            [attr.aria-label]=\"ariaLabel || null\" [attr.aria-labelledby]=\"ariaLabelledby\"\r\n            [attr.aria-checked]=\"_getAriaChecked()\" [attr.aria-describedby]=\"ariaDescribedby\"\r\n            (change)=\"_onInteractionEvent($event)\" (click)=\"_onInputClick($event)\" />\r\n\r\n        <span [ngClass]=\"{\r\n            'h-3 w-3':size == 'md',\r\n            'h-2.5 w-2.5':size == 'sm',\r\n            'h-3.5 w-3.5':size == 'lg'\r\n        }\">\r\n            <svg *ngIf=\"checked && !indeterminate \" [attr.width]=\"widthHieghtSvg\" [attr.height]=\"widthHieghtSvg\"\r\n                viewBox=\"0 0 12 8\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <path class=\"fill-current text-white \" [class]=\"{'dark:text-d-neutral-3-50': disabled}\"\r\n                    d=\"M10.7307 0.90316C10.5348 0.707751 10.2694 0.598045 9.99275 0.598045C9.71605 0.598045 9.45061 0.707751 9.25471 0.90316L4.75471 5.40316L2.78572 3.4352C2.68953 3.33465 2.57426 3.25427 2.44661 3.19888C2.31895 3.14348 2.18152 3.11414 2.04237 3.11257C1.90323 3.111 1.76517 3.13728 1.6363 3.18978C1.50744 3.24229 1.39031 3.31999 1.29188 3.41836C1.19345 3.51672 1.11565 3.63376 1.06306 3.7626C1.01047 3.89143 0.984135 4.02946 0.985609 4.1686C0.987082 4.30775 1.01636 4.44521 1.07167 4.5729C1.12698 4.70059 1.20726 4.81594 1.30775 4.91219L4.01674 7.6202C4.21298 7.81573 4.47872 7.9255 4.75575 7.9255C5.03278 7.9255 5.29846 7.81573 5.4947 7.6202L10.7367 2.38021C10.8346 2.28323 10.9123 2.1678 10.9653 2.04061C11.0184 1.91343 11.0457 1.77698 11.0457 1.63918C11.0457 1.50138 11.0184 1.36494 10.9653 1.23775C10.9123 1.11057 10.8346 0.995193 10.7367 0.898216L10.7307 0.90316Z\" />\r\n            </svg>\r\n            <svg *ngIf=\"indeterminate\" xmlns=\"http://www.w3.org/2000/svg\" [attr.width]=\"widthHieghtSvg\"\r\n                [attr.height]=\"widthHieghtSvg\" viewBox=\"0 0 12 4\" fill=\"none\">\r\n                <path fill-rule=\"evenodd\" clip-rule=\"evenodd\"\r\n                    d=\"M0.600006 2C0.600006 1.33726 1.13726 0.800003 1.80001 0.800003L10.2 0.800003C10.8627 0.800003 11.4 1.33726 11.4 2C11.4 2.66274 10.8627 3.2 10.2 3.2L1.80001 3.2C1.13726 3.2 0.600006 2.66274 0.600006 2Z\"\r\n                    class=\"fill-current text-white\" [class]=\"{'dark:text-d-neutral-3-50': disabled}\" />\r\n            </svg>\r\n        </span>\r\n    </span>\r\n    <span class=\"ml-2 text-body-2 font-regular  select-none empty:hidden\"\r\n        [ngClass]=\"{'text-neutral-1-900 dark:text-d-neutral-1-900':!disabled,'text-neutral-1-300 dark:text-d-neutral-1-300':disabled,'ml-2':checkboxLabel.children.length}\"\r\n        #checkboxLabel (cdkObserveContent)=\"_onLabelTextChange()\"\r\n        [ngClass]=\"{'cursor-pointer':!disabled,'opacity-65 cursor-not-allowed':disabled}\">        \r\n        <ng-content></ng-content>\r\n    </span>\r\n</label>" }]
    }], function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1.FocusMonitor }, { type: undefined, decorators: [{
                type: Attribute,
                args: ['tabindex']
            }] }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [TDS_CHECKBOX_DEFAULT_OPTIONS]
            }] }]; }, { size: [{
            type: Input
        }], ariaLabel: [{
            type: Input,
            args: ['aria-label']
        }], ariaLabelledby: [{
            type: Input,
            args: ['aria-labelledby']
        }], ariaDescribedby: [{
            type: Input,
            args: ['aria-describedby']
        }], id: [{
            type: Input
        }], required: [{
            type: Input
        }], name: [{
            type: Input
        }], tdsChange: [{
            type: Output
        }], change: [{
            type: Output
        }], indeterminateChange: [{
            type: Output
        }], value: [{
            type: Input
        }], _inputElement: [{
            type: ViewChild,
            args: ['input']
        }], checked: [{
            type: Input
        }], disabled: [{
            type: Input
        }], indeterminate: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;base64,