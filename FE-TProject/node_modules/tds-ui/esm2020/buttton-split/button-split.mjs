import { Component, ChangeDetectionStrategy, Input, ViewChild, Output, EventEmitter } from "@angular/core";
import { mixinDisabled } from "tds-ui/shared/common";
import { TDSButtonMenuTrigger } from "tds-ui/button-menu";
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "tds-ui/button-menu";
const _c0 = ["button"];
const _c1 = [[["", 8, "js-label"]], [["", 8, "js-content"]]];
const _c2 = function (a0) { return { "opacity-65": a0 }; };
const _c3 = [".js-label", ".js-content"];
class TAButtonSplitBase {
    constructor(_elementRef) {
        this._elementRef = _elementRef;
    }
}
const _TButtonSplitMixinBase = mixinDisabled(TAButtonSplitBase);
export class TDSButtonSplit extends _TButtonSplitMixinBase {
    constructor(elementRef) {
        super(elementRef);
        this.defaultColor = "primary";
        this._size = "md";
        this.listClassLabel = [];
        this.listClassButton = [];
        this.clickButton = new EventEmitter();
        this.disabled = false;
        this.color = this.defaultColor;
    }
    get color() {
        return this._color;
    }
    set color(val) {
        this._color = val;
        this.p_UpdateClass();
    }
    get size() {
        return this._size;
    }
    set size(val) {
        this._size = val;
        this.p_UpdateClass();
    }
    ngOnChanges(changes) {
        const { disabled } = changes;
        if (disabled) {
            this.p_UpdateClass();
        }
    }
    p_UpdateClass() {
        const color = {
            'bg-primary-1': this.color == 'primary',
            'border-primary-1': this.color == 'primary',
            'ring-primary-1': true,
            'hover:border-primary-2 hover:bg-primary-2 focus:bg-primary-1': this.color == 'primary' && !this.disabled,
            'text-white': this.color == 'primary',
            'disabled:cursor-not-allowed': true,
            'disabled:bg-primary-1': this.color == 'primary',
            'bg-white border-neutral-2-200 text-neutral-1-900 dark:bg-d-neutral-3-300 dark:border-d-neutral-2-200 dark:text-d-neutral-1-900': this.color == "secondary",
            'hover:bg-neutral-3-50  focus:bg-neutral-3-50 focus:border-primary-2 dark:focus:border-primary-2 dark:hover:bg-d-neutral-3-50  dark:focus:bg-d-neutral-3-50': this.color == "secondary" && !this.disabled,
        };
        this.ngClsButton = {
            "p-1": this.size == 'sm',
            "p-1.5": this.size == 'md',
            "p-2": this.size == 'lg',
            ...color
        };
        this.ngClsLabel = {
            "py-1": this.size == 'sm',
            "px-2.5": this.size == 'sm',
            "py-1.5": this.size == 'md',
            "px-3": this.size == 'md' || this.size == 'lg',
            "py-2": this.size == 'lg',
            ...color
        };
    }
    _getHostElement() {
        return this._elementRef.nativeElement;
    }
    // private p_getClassBySize(): { listClassButton: Array<string>, listClassLabel: Array<string>, } {
    //     let result: { listClassButton: Array<string>, listClassLabel: Array<string>, } = { listClassButton: [], listClassLabel: [] }
    //     switch (this.size) {
    //         case "sm":
    //             result.listClassButton = ["p-1"];
    //             result.listClassLabel = ["py-1", " px-2.5"];
    //             break;
    //         case "lg":
    //             result.listClassButton = ["p-2"];
    //             // result.listClassLabel = ["py-2", " px-3"];
    //             break;
    //         default:
    //             result.listClassButton = ["p-1.5"];
    //             result.listClassLabel = ["py-1.5", " px-3"];
    //             break;
    //     }
    //     return result;
    // }
    // private p_getClassByColor() {
    //     let result: { listClassButton: Array<string>, listClassLabel: Array<string> } = { listClassButton: [], listClassLabel: [] };
    //     switch (this.color) {
    //         case "primary":
    //             result.listClassButton = ['bg-primary-1', 'border-primary-1', 'ring-primary-1', 'hover:border-primary-2', 'hover:bg-primary-2', 'focus:bg-primary-1', 'text-white', 'disabled:cursor-default', 'disabled:bg-primary-1'];
    //             // result.listClassLabel = ['border-primary-1', 'bg-primary-1','focus:ring', 'ring-primary-1', 'text-white', 'hover:border-primary-2', 'hover:bg-primary-2', 'focus:bg-primary-1','ring-opacity-20'];
    //             break;
    //         case "secondary":
    //             result.listClassButton = ['hover:bg-neutral-3-50 ', 'bg-white', 'border-neutral-2-200', 'ring-primary-1', 'group-hover:bg-neutral-3-50 ', 'focus:bg-white', 'disabled:cursor-default', 'text-neutral-1-900', 'focus:border-primary-2'];
    //             // result.listClassLabel = ['bg-white', 'border-neutral-2-200', 'ring-primary-1', 'group-hover:bg-neutral-3-50 ', 'focus:bg-white', 'disabled:cursor-default', 'text-neutral-1-900', 'focus:border-primary-2','ring-opacity-20'];
    //             break;
    //         default:
    //             // result = ['text-white',`ring-${color}-400`,`border-${color}-400` ,`bg-${color}-400`, `hover:bg-${color}-500`, `focus:bg-${color}-400`];
    //             break;
    //     }
    //     return result;
    // }
    onClickLabel(event) {
        if (!this.disabled) {
            this.clickButton.emit(event);
        }
        else {
            event.preventDefault();
            event.stopImmediatePropagation();
        }
    }
    onClickDropdown(event) {
        if (!this.disabled) {
            this.trigger.openMenu();
        }
        else {
            event.preventDefault();
            event.stopImmediatePropagation();
        }
    }
}
TDSButtonSplit.ɵfac = function TDSButtonSplit_Factory(t) { return new (t || TDSButtonSplit)(i0.ɵɵdirectiveInject(i0.ElementRef)); };
TDSButtonSplit.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSButtonSplit, selectors: [["tds-button-split"]], viewQuery: function TDSButtonSplit_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(TDSButtonMenuTrigger, 5);
        i0.ɵɵviewQuery(_c0, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.trigger = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.buttonElement = _t.first);
    } }, hostAttrs: [1, "inline-block"], hostVars: 8, hostBindings: function TDSButtonSplit_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵhostProperty("disabled", ctx.disabled || null);
        i0.ɵɵattribute("tabindex", ctx.disabled ? -1 : ctx.tabIndex || 0);
        i0.ɵɵclassProp("disabled:opacity-65", ctx.disabled)("cursor-not-allowed", ctx.disabled)("cursor-pointer", !ctx.disabled);
    } }, inputs: { disabled: "disabled", color: "color", size: "size" }, outputs: { clickButton: "clickButton" }, features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature], ngContentSelectors: _c3, decls: 9, vars: 9, consts: [[1, "flex", "justify-between", "items-stretch", "text-body-2", "rounded-md", "font-semibold", "text-neutral-1-900", "dark:text-d-neutral-1-900", "dark:bg-d-neutral-3-300", 3, "ngClass"], [1, "flex", "items-center", "border", "rounded-l-md", "border-r-0", "disabled:opacity-65", "focus:outline-none", "box-border", "ring-opacity-20", "focus:ring", "ring-primary-1", 3, "disabled", "ngClass", "click"], [1, "flex", "items-center", "rounded-l-none", "border", "rounded-r-md", "disabled:opacity-65", "focus:outline-none", "box-border", "ring-opacity-20", "focus:ring", "ring-primary-1", 3, "tdsbuttonMenuTriggerFor", "tbuttonMenuTriggerRestoreFocus", "ngClass", "disabled", "click"], ["button", ""], [1, "text-xl", "tdsi-arrow-down-fill", "leading-none"], ["menu", "TDSButtonMenu"]], template: function TDSButtonSplit_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef(_c1);
        i0.ɵɵelementStart(0, "div", 0)(1, "button", 1);
        i0.ɵɵlistener("click", function TDSButtonSplit_Template_button_click_1_listener($event) { return ctx.onClickLabel($event); });
        i0.ɵɵprojection(2);
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(3, "button", 2, 3);
        i0.ɵɵlistener("click", function TDSButtonSplit_Template_button_click_3_listener($event) { return ctx.onClickDropdown($event); });
        i0.ɵɵelement(5, "i", 4);
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(6, "tbutton-menu", null, 5);
        i0.ɵɵprojection(8, 1);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const _r1 = i0.ɵɵreference(7);
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(7, _c2, ctx.disabled));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("disabled", ctx.disabled)("ngClass", ctx.ngClsLabel);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("tdsbuttonMenuTriggerFor", _r1)("tbuttonMenuTriggerRestoreFocus", false)("ngClass", ctx.ngClsButton)("disabled", ctx.disabled);
    } }, directives: [i1.NgClass, i2.TDSButtonMenuTrigger, i2.TDSButtonMenu], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSButtonSplit, [{
        type: Component,
        args: [{ selector: 'tds-button-split', host: {
                    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',
                    '[disabled]': 'disabled ||  null',
                    '[class.disabled:opacity-65]': 'disabled',
                    '[class.cursor-not-allowed]': 'disabled',
                    '[class.cursor-pointer]': '!disabled',
                    class: 'inline-block',
                }, changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"flex justify-between items-stretch text-body-2 rounded-md font-semibold text-neutral-1-900 dark:text-d-neutral-1-900 dark:bg-d-neutral-3-300\" [ngClass]=\"{'opacity-65':disabled}\">\r\n    <button class=\"flex items-center border rounded-l-md  border-r-0 disabled:opacity-65 focus:outline-none  box-border ring-opacity-20  focus:ring  ring-primary-1\"  [disabled]=\"disabled\"  [ngClass]=\"ngClsLabel\"\r\n    \r\n    (click)=\"onClickLabel($event)\">\r\n        <ng-content select=\".js-label\"></ng-content>\r\n    </button>\r\n    <button #button (click)=\"onClickDropdown($event)\"\r\n        class=\" flex items-center rounded-l-none border rounded-r-md disabled:opacity-65  focus:outline-none  box-border ring-opacity-20  focus:ring  ring-primary-1\"\r\n        [tdsbuttonMenuTriggerFor]=\"menu\" [tbuttonMenuTriggerRestoreFocus]=\"false\"  [ngClass]=\"ngClsButton\" [disabled]=\"disabled\">      \r\n        <i class=\"text-xl tdsi-arrow-down-fill leading-none\"></i>\r\n    </button>\r\n    <tbutton-menu #menu=\"TDSButtonMenu\">       \r\n        <ng-content select=\".js-content\"></ng-content>\r\n    </tbutton-menu>\r\n</div>" }]
    }], function () { return [{ type: i0.ElementRef }]; }, { clickButton: [{
            type: Output
        }], trigger: [{
            type: ViewChild,
            args: [TDSButtonMenuTrigger]
        }], buttonElement: [{
            type: ViewChild,
            args: ['button']
        }], disabled: [{
            type: Input,
            args: ["disabled"]
        }], color: [{
            type: Input,
            args: ["color"]
        }], size: [{
            type: Input,
            args: ["size"]
        }] }); })();
//# sourceMappingURL=data:application/json;base64,