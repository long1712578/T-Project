import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, EventEmitter, Input, Optional, Output, ViewChild, ViewEncapsulation } from '@angular/core';
import { Observable, of, Subject } from 'rxjs';
import { filter, takeUntil } from 'rxjs/operators';
import { InputBoolean, InputNumber, toBoolean } from 'tds-ui/shared/utility';
import * as i0 from "@angular/core";
import * as i1 from "tds-ui/i18n";
import * as i2 from "@angular/cdk/bidi";
import * as i3 from "@angular/common";
import * as i4 from "./upload-list.component";
import * as i5 from "./upload-btn.component";
const _c0 = ["uploadComp"];
const _c1 = ["listComp"];
const _c2 = function () { return []; };
function TDSUploadComponent_ng_template_0_tds_upload_list_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "tds-upload-list", 8, 9);
} if (rf & 2) {
    const ctx_r11 = i0.ɵɵnextContext(2);
    i0.ɵɵstyleProp("display", ctx_r11.showUploadList ? "" : "none");
    i0.ɵɵproperty("locale", ctx_r11.locale)("listType", ctx_r11.listType)("items", ctx_r11.fileList || i0.ɵɵpureFunction0(13, _c2))("icons", ctx_r11.showUploadList)("iconRender", ctx_r11.iconRender)("previewFile", ctx_r11.previewFile)("previewIsImage", ctx_r11.previewIsImage)("onPreview", ctx_r11.preview)("onRemove", ctx_r11.onRemove)("onDownload", ctx_r11.download)("dir", ctx_r11.dir);
} }
function TDSUploadComponent_ng_template_0_ng_container_1_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
const _c3 = function (a0) { return { $implicit: a0 }; };
function TDSUploadComponent_ng_template_0_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtemplate(1, TDSUploadComponent_ng_template_0_ng_container_1_ng_container_1_Template, 1, 0, "ng-container", 10);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r12 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r12.fileListRender)("ngTemplateOutletContext", i0.ɵɵpureFunction1(2, _c3, ctx_r12.fileList));
} }
function TDSUploadComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, TDSUploadComponent_ng_template_0_tds_upload_list_0_Template, 2, 14, "tds-upload-list", 6);
    i0.ɵɵtemplate(1, TDSUploadComponent_ng_template_0_ng_container_1_Template, 2, 4, "ng-container", 7);
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵproperty("ngIf", ctx_r1.locale && !ctx_r1.fileListRender);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r1.fileListRender);
} }
function TDSUploadComponent_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵprojection(0);
} }
function TDSUploadComponent_ng_template_4_ng_template_3_Template(rf, ctx) { }
function TDSUploadComponent_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 11)(1, "div", 12, 13);
    i0.ɵɵtemplate(3, TDSUploadComponent_ng_template_4_ng_template_3_Template, 0, 0, "ng-template", 14);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r5 = i0.ɵɵnextContext();
    const _r2 = i0.ɵɵreference(3);
    i0.ɵɵstyleProp("display", ctx_r5.showButton ? "" : "none");
    i0.ɵɵproperty("ngClass", ctx_r5.classList);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("options", ctx_r5._btnOptions);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngTemplateOutlet", _r2);
} }
function TDSUploadComponent_ng_container_6_ng_template_5_Template(rf, ctx) { }
function TDSUploadComponent_ng_container_6_ng_template_6_Template(rf, ctx) { }
function TDSUploadComponent_ng_container_6_Template(rf, ctx) { if (rf & 1) {
    const _r21 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "div", 15);
    i0.ɵɵlistener("drop", function TDSUploadComponent_ng_container_6_Template_div_drop_1_listener($event) { i0.ɵɵrestoreView(_r21); const ctx_r20 = i0.ɵɵnextContext(); return ctx_r20.fileDrop($event); })("dragover", function TDSUploadComponent_ng_container_6_Template_div_dragover_1_listener($event) { i0.ɵɵrestoreView(_r21); const ctx_r22 = i0.ɵɵnextContext(); return ctx_r22.fileDrop($event); })("dragleave", function TDSUploadComponent_ng_container_6_Template_div_dragleave_1_listener($event) { i0.ɵɵrestoreView(_r21); const ctx_r23 = i0.ɵɵnextContext(); return ctx_r23.fileDrop($event); });
    i0.ɵɵelementStart(2, "div", 16, 13)(4, "div", 17);
    i0.ɵɵtemplate(5, TDSUploadComponent_ng_container_6_ng_template_5_Template, 0, 0, "ng-template", 14);
    i0.ɵɵelementEnd()()();
    i0.ɵɵtemplate(6, TDSUploadComponent_ng_container_6_ng_template_6_Template, 0, 0, "ng-template", 14);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r6 = i0.ɵɵnextContext();
    const _r2 = i0.ɵɵreference(3);
    const _r0 = i0.ɵɵreference(1);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngClass", ctx_r6.classList);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("options", ctx_r6._btnOptions);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngTemplateOutlet", _r2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngTemplateOutlet", _r0);
} }
function TDSUploadComponent_ng_template_7_ng_container_0_ng_template_1_Template(rf, ctx) { }
function TDSUploadComponent_ng_template_7_ng_container_0_ng_template_2_Template(rf, ctx) { }
function TDSUploadComponent_ng_template_7_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtemplate(1, TDSUploadComponent_ng_template_7_ng_container_0_ng_template_1_Template, 0, 0, "ng-template", 14);
    i0.ɵɵtemplate(2, TDSUploadComponent_ng_template_7_ng_container_0_ng_template_2_Template, 0, 0, "ng-template", 14);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    i0.ɵɵnextContext(2);
    const _r0 = i0.ɵɵreference(1);
    const _r4 = i0.ɵɵreference(5);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngTemplateOutlet", _r0);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngTemplateOutlet", _r4);
} }
function TDSUploadComponent_ng_template_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, TDSUploadComponent_ng_template_7_ng_container_0_Template, 3, 2, "ng-container", 3);
} if (rf & 2) {
    const ctx_r8 = i0.ɵɵnextContext();
    const _r9 = i0.ɵɵreference(10);
    i0.ɵɵproperty("ngIf", ctx_r8.listType === "picture-card")("ngIfElse", _r9);
} }
function TDSUploadComponent_ng_template_9_ng_template_0_Template(rf, ctx) { }
function TDSUploadComponent_ng_template_9_ng_template_1_Template(rf, ctx) { }
function TDSUploadComponent_ng_template_9_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, TDSUploadComponent_ng_template_9_ng_template_0_Template, 0, 0, "ng-template", 14);
    i0.ɵɵtemplate(1, TDSUploadComponent_ng_template_9_ng_template_1_Template, 0, 0, "ng-template", 14);
} if (rf & 2) {
    i0.ɵɵnextContext();
    const _r4 = i0.ɵɵreference(5);
    const _r0 = i0.ɵɵreference(1);
    i0.ɵɵproperty("ngTemplateOutlet", _r4);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngTemplateOutlet", _r0);
} }
const _c4 = ["*"];
export class TDSUploadComponent {
    // #endregion
    constructor(cdr, i18n, directionality) {
        this.cdr = cdr;
        this.i18n = i18n;
        this.directionality = directionality;
        this.destroy$ = new Subject();
        this.dir = 'ltr';
        // #region fields
        this.type = 'select';
        this.limit = 0;
        this.size = 0;
        this.directory = false;
        this.isOpenFileDialogOnClick = true;
        this.filter = [];
        this.fileList = [];
        this.disabled = false;
        this.listType = 'text';
        this.multiple = false;
        this.name = 'file';
        this._showUploadList = true;
        this.showButton = true;
        this.withCredentials = false;
        this.iconRender = null;
        this.fileListRender = null;
        this.uploadChange = new EventEmitter();
        this.fileListChange = new EventEmitter();
        this.onStart = (file) => {
            if (!this.fileList) {
                this.fileList = [];
            }
            const targetItem = this.fileToObject(file);
            targetItem.status = 'uploading';
            this.fileList = this.fileList.concat(targetItem);
            this.fileListChange.emit(this.fileList);
            this.uploadChange.emit({ file: targetItem, fileList: this.fileList, type: 'start' });
            this.detectChangesList();
        };
        this.onProgress = (e, file) => {
            const fileList = this.fileList;
            const targetItem = this.getFileItem(file, fileList);
            targetItem.percent = e.percent;
            this.uploadChange.emit({
                event: e,
                file: { ...targetItem },
                fileList: this.fileList,
                type: 'progress'
            });
            this.detectChangesList();
        };
        this.onSuccess = (res, file) => {
            const fileList = this.fileList;
            const targetItem = this.getFileItem(file, fileList);
            targetItem.status = 'done';
            targetItem.response = res;
            this.uploadChange.emit({
                file: { ...targetItem },
                fileList,
                type: 'success'
            });
            this.detectChangesList();
        };
        this.onError = (err, file) => {
            const fileList = this.fileList;
            const targetItem = this.getFileItem(file, fileList);
            targetItem.error = err;
            targetItem.status = 'error';
            this.uploadChange.emit({
                file: { ...targetItem },
                fileList,
                type: 'error'
            });
            this.detectChangesList();
        };
        this.onRemove = (file) => {
            this.uploadComp.abort(file);
            file.status = 'removed';
            const fnRes = typeof this.remove === 'function' ? this.remove(file) : this.remove == null ? true : this.remove;
            (fnRes instanceof Observable ? fnRes : of(fnRes)).pipe(filter((res) => res)).subscribe(() => {
                this.fileList = this.removeFileItem(file, this.fileList);
                this.uploadChange.emit({
                    file,
                    fileList: this.fileList,
                    type: 'removed'
                });
                this.fileListChange.emit(this.fileList);
                this.cdr.detectChanges();
            });
        };
        // #endregion
        // #region styles
        this.prefixCls = 'tds-upload';
        this.classList = [];
    }
    set showUploadList(value) {
        this._showUploadList = typeof value === 'boolean' ? toBoolean(value) : value;
    }
    get showUploadList() {
        return this._showUploadList;
    }
    zipOptions() {
        if (typeof this.showUploadList === 'boolean' && this.showUploadList) {
            this.showUploadList = {
                showPreviewIcon: true,
                showRemoveIcon: true,
                showDownloadIcon: true
            };
        }
        // filters
        const filters = this.filter.slice();
        if (this.multiple && this.limit > 0 && filters.findIndex(w => w.name === 'limit') === -1) {
            filters.push({
                name: 'limit',
                fn: (fileList) => fileList.slice(-this.limit)
            });
        }
        if (this.size > 0 && filters.findIndex(w => w.name === 'size') === -1) {
            filters.push({
                name: 'size',
                fn: (fileList) => fileList.filter(w => w.size / 1024 <= this.size)
            });
        }
        if (this.fileType && this.fileType.length > 0 && filters.findIndex(w => w.name === 'type') === -1) {
            const types = this.fileType.split(',');
            filters.push({
                name: 'type',
                fn: (fileList) => fileList.filter(w => ~types.indexOf(w.type))
            });
        }
        this._btnOptions = {
            disabled: this.disabled,
            accept: this.accept,
            action: this.action,
            directory: this.directory,
            openFileDialogOnClick: this.isOpenFileDialogOnClick,
            onBeforeUpload: this.beforeUpload,
            customRequest: this.customRequest,
            data: this.data,
            headers: this.headers,
            name: this.name,
            multiple: this.multiple,
            withCredentials: this.withCredentials,
            filters,
            transformFile: this.transformFile,
            onStart: this.onStart,
            onProgress: this.onProgress,
            onSuccess: this.onSuccess,
            onError: this.onError
        };
        return this;
    }
    // #region upload
    fileToObject(file) {
        return {
            lastModified: file.lastModified,
            lastModifiedDate: file.lastModifiedDate,
            name: file.filename || file.name,
            size: file.size,
            type: file.type,
            uid: file.uid,
            response: file.response,
            error: file.error,
            percent: 0,
            originFileObj: file
        };
    }
    getFileItem(file, fileList) {
        return fileList.filter(item => item.uid === file.uid)[0];
    }
    removeFileItem(file, fileList) {
        return fileList.filter(item => item.uid !== file.uid);
    }
    // skip safari bug
    fileDrop(e) {
        if (e.type === this.dragState) {
            return;
        }
        this.dragState = e.type;
        this.setClassMap();
    }
    // #endregion
    // #region list
    detectChangesList() {
        this.cdr.detectChanges();
        this.listComp?.detectChanges();
    }
    setClassMap() {
        let subCls = [];
        if (this.type === 'drag') {
            if (this.fileList.some(file => file.status === 'uploading')) {
                subCls.push(`${this.prefixCls}-drag-uploading`);
            }
            if (this.dragState === 'dragover') {
                subCls.push(`${this.prefixCls}-drag-hover`);
            }
        }
        else {
            subCls = [`${this.prefixCls}-select-${this.listType}`];
            if (this.listType === "picture-card") {
                subCls.push('w-28 h-28 inline-flex border border-dashed border-neutral-2-200 dark:border-d-neutral-2-200 rounded  mt-2.5 items-center justify-center ');
            }
        }
        this.classList = [
            this.prefixCls,
            `${this.prefixCls}-${this.type} `,
            ...subCls,
            (this.disabled && `${this.prefixCls}-disabled`) || '',
            (this.dir === 'rtl' && `${this.prefixCls}-rtl`) || ''
        ].filter(item => !!item);
        this.cdr.detectChanges();
    }
    // #endregion
    ngOnInit() {
        this.dir = this.directionality.value;
        this.directionality.change?.pipe(takeUntil(this.destroy$)).subscribe((direction) => {
            this.dir = direction;
            this.setClassMap();
            this.cdr.detectChanges();
        });
        this.i18n.localeChange.pipe(takeUntil(this.destroy$)).subscribe(() => {
            this.locale = this.i18n.getLocaleData('Upload');
            this.detectChangesList();
        });
    }
    ngOnChanges() {
        this.zipOptions().setClassMap();
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
}
TDSUploadComponent.ɵfac = function TDSUploadComponent_Factory(t) { return new (t || TDSUploadComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.TDSI18nService), i0.ɵɵdirectiveInject(i2.Directionality, 8)); };
TDSUploadComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSUploadComponent, selectors: [["tds-upload"]], viewQuery: function TDSUploadComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 5);
        i0.ɵɵviewQuery(_c1, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.uploadComp = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.listComp = _t.first);
    } }, hostAttrs: [1, "inline"], hostVars: 2, hostBindings: function TDSUploadComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵclassProp("tds-upload-picture-card-wrapper", ctx.listType === "picture-card");
    } }, inputs: { type: "type", limit: "limit", size: "size", fileType: "fileType", accept: "accept", action: "action", directory: "directory", isOpenFileDialogOnClick: "isOpenFileDialogOnClick", beforeUpload: "beforeUpload", customRequest: "customRequest", data: "data", filter: "filter", fileList: "fileList", disabled: "disabled", headers: "headers", listType: "listType", multiple: "multiple", name: "name", showUploadList: "showUploadList", showButton: "showButton", withCredentials: "withCredentials", remove: "remove", preview: "preview", previewFile: "previewFile", previewIsImage: "previewIsImage", transformFile: "transformFile", download: "download", iconRender: "iconRender", fileListRender: "fileListRender" }, outputs: { uploadChange: "uploadChange", fileListChange: "fileListChange" }, exportAs: ["tdsUpload"], features: [i0.ɵɵNgOnChangesFeature], ngContentSelectors: _c4, decls: 11, vars: 2, consts: [["list", ""], ["con", ""], ["btn", ""], [4, "ngIf", "ngIfElse"], ["select", ""], ["pic", ""], [3, "display", "locale", "listType", "items", "icons", "iconRender", "previewFile", "previewIsImage", "onPreview", "onRemove", "onDownload", "dir", 4, "ngIf"], [4, "ngIf"], [3, "locale", "listType", "items", "icons", "iconRender", "previewFile", "previewIsImage", "onPreview", "onRemove", "onDownload", "dir"], ["listComp", ""], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "block", 3, "ngClass"], ["tds-upload-btn", "", 1, "inline-block", 3, "options"], ["uploadComp", ""], [3, "ngTemplateOutlet"], [3, "ngClass", "drop", "dragover", "dragleave"], ["tds-upload-btn", "", 1, "tds-upload-btn", 3, "options"], [1, "tds-upload-drag-container"]], template: function TDSUploadComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵtemplate(0, TDSUploadComponent_ng_template_0_Template, 2, 2, "ng-template", null, 0, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtemplate(2, TDSUploadComponent_ng_template_2_Template, 1, 0, "ng-template", null, 1, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtemplate(4, TDSUploadComponent_ng_template_4_Template, 4, 5, "ng-template", null, 2, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtemplate(6, TDSUploadComponent_ng_container_6_Template, 7, 4, "ng-container", 3);
        i0.ɵɵtemplate(7, TDSUploadComponent_ng_template_7_Template, 1, 2, "ng-template", null, 4, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtemplate(9, TDSUploadComponent_ng_template_9_Template, 2, 2, "ng-template", null, 5, i0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r7 = i0.ɵɵreference(8);
        i0.ɵɵadvance(6);
        i0.ɵɵproperty("ngIf", ctx.type === "drag")("ngIfElse", _r7);
    } }, directives: [i3.NgIf, i4.TDSUploadListComponent, i2.Dir, i3.NgTemplateOutlet, i3.NgClass, i5.TDSUploadBtnComponent], encapsulation: 2, changeDetection: 0 });
__decorate([
    InputNumber()
], TDSUploadComponent.prototype, "limit", void 0);
__decorate([
    InputNumber()
], TDSUploadComponent.prototype, "size", void 0);
__decorate([
    InputBoolean()
], TDSUploadComponent.prototype, "directory", void 0);
__decorate([
    InputBoolean()
], TDSUploadComponent.prototype, "isOpenFileDialogOnClick", void 0);
__decorate([
    InputBoolean()
], TDSUploadComponent.prototype, "disabled", void 0);
__decorate([
    InputBoolean()
], TDSUploadComponent.prototype, "multiple", void 0);
__decorate([
    InputBoolean()
], TDSUploadComponent.prototype, "showButton", void 0);
__decorate([
    InputBoolean()
], TDSUploadComponent.prototype, "withCredentials", void 0);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSUploadComponent, [{
        type: Component,
        args: [{ selector: 'tds-upload', exportAs: 'tdsUpload', preserveWhitespaces: false, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {
                    'class': "inline",
                    '[class.tds-upload-picture-card-wrapper]': 'listType === "picture-card"'
                }, template: "<ng-template #list>\r\n  <tds-upload-list\r\n    *ngIf=\"locale && !fileListRender\"\r\n    #listComp\r\n    [style.display]=\"showUploadList ? '' : 'none'\"\r\n    [locale]=\"locale\"\r\n    [listType]=\"listType\"\r\n    [items]=\"fileList || []\"\r\n    [icons]=\"$any(showUploadList)\"\r\n    [iconRender]=\"iconRender\"\r\n    [previewFile]=\"previewFile\"\r\n    [previewIsImage]=\"previewIsImage\"\r\n    [onPreview]=\"preview\"\r\n    [onRemove]=\"onRemove\"\r\n    [onDownload]=\"download\"\r\n    [dir]=\"dir\"\r\n  ></tds-upload-list>\r\n  <ng-container *ngIf=\"fileListRender\">\r\n    <ng-container *ngTemplateOutlet=\"fileListRender; context: { $implicit: fileList }\"></ng-container>\r\n  </ng-container>\r\n</ng-template>\r\n<ng-template #con>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n<ng-template #btn>\r\n  <div class=\"block\" [ngClass]=\"classList\" [style.display]=\"showButton ? '' : 'none'\">\r\n    <div tds-upload-btn #uploadComp [options]=\"_btnOptions!\" class=\"inline-block\">\r\n      <ng-template [ngTemplateOutlet]=\"con\"></ng-template>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n<ng-container *ngIf=\"type === 'drag'; else select\">\r\n  <div [ngClass]=\"classList\" (drop)=\"fileDrop($event)\" (dragover)=\"fileDrop($event)\" (dragleave)=\"fileDrop($event)\">\r\n    <div tds-upload-btn #uploadComp [options]=\"_btnOptions!\" class=\"tds-upload-btn\">\r\n      <div class=\"tds-upload-drag-container\">\r\n        <ng-template [ngTemplateOutlet]=\"con\"></ng-template>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <ng-template [ngTemplateOutlet]=\"list\"></ng-template>\r\n</ng-container>\r\n<ng-template #select>\r\n  <ng-container *ngIf=\"listType === 'picture-card'; else pic\">\r\n    <ng-template [ngTemplateOutlet]=\"list\"></ng-template>\r\n    <ng-template [ngTemplateOutlet]=\"btn\"></ng-template>\r\n  </ng-container>\r\n</ng-template>\r\n<ng-template #pic>\r\n  <ng-template [ngTemplateOutlet]=\"btn\"></ng-template>\r\n  <ng-template [ngTemplateOutlet]=\"list\"></ng-template>\r\n</ng-template>\r\n" }]
    }], function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.TDSI18nService }, { type: i2.Directionality, decorators: [{
                type: Optional
            }] }]; }, { uploadComp: [{
            type: ViewChild,
            args: ['uploadComp', { static: false }]
        }], listComp: [{
            type: ViewChild,
            args: ['listComp', { static: false }]
        }], type: [{
            type: Input
        }], limit: [{
            type: Input
        }], size: [{
            type: Input
        }], fileType: [{
            type: Input
        }], accept: [{
            type: Input
        }], action: [{
            type: Input
        }], directory: [{
            type: Input
        }], isOpenFileDialogOnClick: [{
            type: Input
        }], beforeUpload: [{
            type: Input
        }], customRequest: [{
            type: Input
        }], data: [{
            type: Input
        }], filter: [{
            type: Input
        }], fileList: [{
            type: Input
        }], disabled: [{
            type: Input
        }], headers: [{
            type: Input
        }], listType: [{
            type: Input
        }], multiple: [{
            type: Input
        }], name: [{
            type: Input
        }], showUploadList: [{
            type: Input
        }], showButton: [{
            type: Input
        }], withCredentials: [{
            type: Input
        }], remove: [{
            type: Input
        }], preview: [{
            type: Input
        }], previewFile: [{
            type: Input
        }], previewIsImage: [{
            type: Input
        }], transformFile: [{
            type: Input
        }], download: [{
            type: Input
        }], iconRender: [{
            type: Input
        }], fileListRender: [{
            type: Input
        }], uploadChange: [{
            type: Output
        }], fileListChange: [{
            type: Output
        }] }); })();
//# sourceMappingURL=data:application/json;base64,