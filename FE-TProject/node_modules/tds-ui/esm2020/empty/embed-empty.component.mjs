import { ComponentPortal, TemplatePortal } from '@angular/cdk/portal';
import { ChangeDetectionStrategy, Component, Injector, Input, TemplateRef, Type, ViewEncapsulation } from '@angular/core';
import { Subject } from 'rxjs';
import { startWith, takeUntil } from 'rxjs/operators';
import { TDS_EMPTY_COMPONENT_NAME } from './config';
import * as i0 from "@angular/core";
import * as i1 from "tds-ui/core/config";
import * as i2 from "@angular/common";
import * as i3 from "./empty.component";
import * as i4 from "@angular/cdk/portal";
function TDSEmbedEmptyComponent_ng_container_0_tds_empty_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "tds-empty", 6);
} if (rf & 2) {
    i0.ɵɵproperty("notFoundImage", "simple");
} }
function TDSEmbedEmptyComponent_ng_container_0_tds_empty_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "tds-empty", 7);
} if (rf & 2) {
    i0.ɵɵproperty("notFoundImage", "simple");
} }
function TDSEmbedEmptyComponent_ng_container_0_tds_empty_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "tds-empty");
} }
function TDSEmbedEmptyComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0, 2);
    i0.ɵɵtemplate(1, TDSEmbedEmptyComponent_ng_container_0_tds_empty_1_Template, 1, 1, "tds-empty", 3);
    i0.ɵɵtemplate(2, TDSEmbedEmptyComponent_ng_container_0_tds_empty_2_Template, 1, 1, "tds-empty", 4);
    i0.ɵɵtemplate(3, TDSEmbedEmptyComponent_ng_container_0_tds_empty_3_Template, 1, 0, "tds-empty", 5);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵproperty("ngSwitch", ctx_r0.size);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngSwitchCase", "lg");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngSwitchCase", "md");
} }
function TDSEmbedEmptyComponent_ng_container_1_1_ng_template_0_Template(rf, ctx) { }
function TDSEmbedEmptyComponent_ng_container_1_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, TDSEmbedEmptyComponent_ng_container_1_1_ng_template_0_Template, 0, 0, "ng-template", 8);
} if (rf & 2) {
    const ctx_r5 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("cdkPortalOutlet", ctx_r5.contentPortal);
} }
function TDSEmbedEmptyComponent_ng_container_1_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r6 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" ", ctx_r6.content, " ");
} }
function TDSEmbedEmptyComponent_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtemplate(1, TDSEmbedEmptyComponent_ng_container_1_1_Template, 1, 1, null, 1);
    i0.ɵɵtemplate(2, TDSEmbedEmptyComponent_ng_container_1_ng_container_2_Template, 2, 1, "ng-container", 1);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r1.contentType !== "string");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r1.contentType === "string");
} }
function getEmptySize(componentName) {
    switch (componentName) {
        case 'table':
        case 'list':
            return 'normal';
        case 'select':
        case 'tree-select':
        case 'cascader':
        case 'transfer':
            return 'small';
        default:
            return '';
    }
}
export class TDSEmbedEmptyComponent {
    constructor(configService, viewContainerRef, cdr, injector) {
        this.configService = configService;
        this.viewContainerRef = viewContainerRef;
        this.cdr = cdr;
        this.injector = injector;
        this.contentType = 'string';
        this.size = '';
        this.destroy$ = new Subject();
    }
    ngOnChanges(changes) {
        if (changes.componentName) {
            this.size = getEmptySize(changes.componentName.currentValue);
        }
        if (changes.specificContent && !changes.specificContent.isFirstChange()) {
            this.content = changes.specificContent.currentValue;
            this.renderEmpty();
        }
    }
    ngOnInit() {
        this.subscribeDefaultEmptyContentChange();
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    renderEmpty() {
        const content = this.content;
        if (typeof content === 'string') {
            this.contentType = 'string';
        }
        else if (content instanceof TemplateRef) {
            const context = { $implicit: this.componentName };
            this.contentType = 'template';
            this.contentPortal = new TemplatePortal(content, this.viewContainerRef, context);
        }
        else if (content instanceof Type) {
            const injector = Injector.create({
                parent: this.injector,
                providers: [{ provide: TDS_EMPTY_COMPONENT_NAME, useValue: this.componentName }]
            });
            this.contentType = 'component';
            this.contentPortal = new ComponentPortal(content, this.viewContainerRef, injector);
        }
        else {
            this.contentType = 'string';
            this.contentPortal = undefined;
        }
        this.cdr.detectChanges();
    }
    subscribeDefaultEmptyContentChange() {
        this.configService
            .getConfigChangeEventForComponent('empty')
            .pipe(startWith(true), takeUntil(this.destroy$))
            .subscribe(() => {
            this.content = this.specificContent || this.getUserDefaultEmptyContent();
            this.renderEmpty();
        });
    }
    getUserDefaultEmptyContent() {
        return (this.configService.getConfigForComponent('empty') || {}).TDSDefaultEmptyContent;
    }
}
TDSEmbedEmptyComponent.ɵfac = function TDSEmbedEmptyComponent_Factory(t) { return new (t || TDSEmbedEmptyComponent)(i0.ɵɵdirectiveInject(i1.TDSConfigService), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Injector)); };
TDSEmbedEmptyComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSEmbedEmptyComponent, selectors: [["tds-embed-empty"]], inputs: { componentName: "componentName", specificContent: "specificContent" }, exportAs: ["tdsEmbedEmpty"], features: [i0.ɵɵNgOnChangesFeature], decls: 2, vars: 2, consts: [[3, "ngSwitch", 4, "ngIf"], [4, "ngIf"], [3, "ngSwitch"], ["class", "tds-empty-normal", 3, "notFoundImage", 4, "ngSwitchCase"], ["class", "tds-empty-small", 3, "notFoundImage", 4, "ngSwitchCase"], [4, "ngSwitchDefault"], [1, "tds-empty-normal", 3, "notFoundImage"], [1, "tds-empty-small", 3, "notFoundImage"], [3, "cdkPortalOutlet"]], template: function TDSEmbedEmptyComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtemplate(0, TDSEmbedEmptyComponent_ng_container_0_Template, 4, 3, "ng-container", 0);
        i0.ɵɵtemplate(1, TDSEmbedEmptyComponent_ng_container_1_Template, 3, 2, "ng-container", 1);
    } if (rf & 2) {
        i0.ɵɵproperty("ngIf", !ctx.content && ctx.specificContent !== null);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx.content);
    } }, directives: [i2.NgIf, i2.NgSwitch, i2.NgSwitchCase, i3.TDSEmptyComponent, i2.NgSwitchDefault, i4.CdkPortalOutlet], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSEmbedEmptyComponent, [{
        type: Component,
        args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                selector: 'tds-embed-empty',
                exportAs: 'tdsEmbedEmpty',
                template: `
    <ng-container *ngIf="!content && specificContent !== null" [ngSwitch]="size">
      <tds-empty *ngSwitchCase="'lg'" class="tds-empty-normal" [notFoundImage]="'simple'"></tds-empty>
      <tds-empty *ngSwitchCase="'md'" class="tds-empty-small" [notFoundImage]="'simple'"></tds-empty>
      <tds-empty *ngSwitchDefault></tds-empty>
    </ng-container>
    <ng-container *ngIf="content">
      <ng-template *ngIf="contentType !== 'string'" [cdkPortalOutlet]="contentPortal"></ng-template>
      <ng-container *ngIf="contentType === 'string'">
        {{ content }}
      </ng-container>
    </ng-container>
  `
            }]
    }], function () { return [{ type: i1.TDSConfigService }, { type: i0.ViewContainerRef }, { type: i0.ChangeDetectorRef }, { type: i0.Injector }]; }, { componentName: [{
            type: Input
        }], specificContent: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;base64,