import { ChangeDetectionStrategy, Component, Input, ViewEncapsulation } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "tds-ui/i18n";
import * as i2 from "@angular/common";
import * as i3 from "tds-ui/core/outlet";
import * as i4 from "./partial/default";
import * as i5 from "./partial/simple";
function TDSEmptyComponent_ng_container_1_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelement(1, "img", 5);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r5 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("src", ctx_r5.notFoundImage, i0.ɵɵsanitizeUrl)("alt", ctx_r5.isContentString ? ctx_r5.notFoundContent : "empty");
} }
function TDSEmptyComponent_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtemplate(1, TDSEmptyComponent_ng_container_1_ng_container_1_Template, 2, 2, "ng-container", 4);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("tdsStringTemplateOutlet", ctx_r0.notFoundImage);
} }
function TDSEmptyComponent_tds_empty_default_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "tds-empty-default");
} }
function TDSEmptyComponent_tds_empty_simple_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "tds-empty-simple");
} }
function TDSEmptyComponent_p_4_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r6 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" ", ctx_r6.isContentString ? ctx_r6.notFoundContent : ctx_r6.locale["description"], " ");
} }
function TDSEmptyComponent_p_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "p", 6);
    i0.ɵɵtemplate(1, TDSEmptyComponent_p_4_ng_container_1_Template, 2, 1, "ng-container", 4);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("tdsStringTemplateOutlet", ctx_r3.notFoundContent);
} }
function TDSEmptyComponent_div_5_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r7 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" ", ctx_r7.notFoundFooter, " ");
} }
function TDSEmptyComponent_div_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 7);
    i0.ɵɵtemplate(1, TDSEmptyComponent_div_5_ng_container_1_Template, 2, 1, "ng-container", 4);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("tdsStringTemplateOutlet", ctx_r4.notFoundFooter);
} }
const TDSEmptyDefaultImages = ['default', 'simple'];
export class TDSEmptyComponent {
    constructor(i18n, cdr) {
        this.i18n = i18n;
        this.cdr = cdr;
        this.notFoundImage = 'default';
        this.isContentString = false;
        this.isImageBuildIn = true;
        this.destroy$ = new Subject();
    }
    ngOnChanges(changes) {
        const { notFoundContent, notFoundImage } = changes;
        if (notFoundContent) {
            const content = notFoundContent.currentValue;
            this.isContentString = typeof content === 'string';
        }
        if (notFoundImage) {
            const image = notFoundImage.currentValue || 'default';
            this.isImageBuildIn = TDSEmptyDefaultImages.findIndex(i => i === image) > -1;
        }
    }
    ngOnInit() {
        this.i18n.localeChange.pipe(takeUntil(this.destroy$)).subscribe(() => {
            this.locale = this.i18n.getLocaleData('Empty');
            this.cdr.markForCheck();
        });
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
}
TDSEmptyComponent.ɵfac = function TDSEmptyComponent_Factory(t) { return new (t || TDSEmptyComponent)(i0.ɵɵdirectiveInject(i1.TDSI18nService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
TDSEmptyComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSEmptyComponent, selectors: [["tds-empty"]], hostAttrs: [1, "tds-empty", "flex", "flex-col", "items-center"], inputs: { notFoundImage: "notFoundImage", notFoundContent: "notFoundContent", notFoundFooter: "notFoundFooter" }, exportAs: ["tdsEmpty"], features: [i0.ɵɵNgOnChangesFeature], decls: 6, vars: 5, consts: [[1, "tds-empty-image"], [4, "ngIf"], ["class", "tds-empty-description text-neutral-1-900 text-title-1 font-semibold mt-3", 4, "ngIf"], ["class", "tds-empty-footer mt-3", 4, "ngIf"], [4, "tdsStringTemplateOutlet"], [1, "h-full", 3, "src", "alt"], [1, "tds-empty-description", "text-neutral-1-900", "text-title-1", "font-semibold", "mt-3"], [1, "tds-empty-footer", "mt-3"]], template: function TDSEmptyComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 0);
        i0.ɵɵtemplate(1, TDSEmptyComponent_ng_container_1_Template, 2, 1, "ng-container", 1);
        i0.ɵɵtemplate(2, TDSEmptyComponent_tds_empty_default_2_Template, 1, 0, "tds-empty-default", 1);
        i0.ɵɵtemplate(3, TDSEmptyComponent_tds_empty_simple_3_Template, 1, 0, "tds-empty-simple", 1);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(4, TDSEmptyComponent_p_4_Template, 2, 1, "p", 2);
        i0.ɵɵtemplate(5, TDSEmptyComponent_div_5_Template, 2, 1, "div", 3);
    } if (rf & 2) {
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx.isImageBuildIn);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx.isImageBuildIn && ctx.notFoundImage !== "simple");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx.isImageBuildIn && ctx.notFoundImage === "simple");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx.notFoundContent !== null);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx.notFoundFooter);
    } }, directives: [i2.NgIf, i3.TDSStringTemplateOutletDirective, i4.TDSEmptyDefaultComponent, i5.TDSEmptySimpleComponent], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSEmptyComponent, [{
        type: Component,
        args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                selector: 'tds-empty',
                exportAs: 'tdsEmpty',
                template: `
    <div class="tds-empty-image">
      <ng-container *ngIf="!isImageBuildIn">
        <ng-container *tdsStringTemplateOutlet="notFoundImage">
          <img class="h-full" [src]="notFoundImage" [alt]="isContentString ? notFoundContent : 'empty'" />
        </ng-container>
      </ng-container>
      <tds-empty-default *ngIf="isImageBuildIn && notFoundImage !== 'simple'"></tds-empty-default>
      <tds-empty-simple *ngIf="isImageBuildIn && notFoundImage === 'simple'"></tds-empty-simple>
    </div>
    <p class="tds-empty-description text-neutral-1-900 text-title-1 font-semibold mt-3" *ngIf="notFoundContent !== null">
      <ng-container *tdsStringTemplateOutlet="notFoundContent">
        {{ isContentString ? notFoundContent : locale['description'] }}
      </ng-container>
    </p>
    <div class="tds-empty-footer mt-3" *ngIf="notFoundFooter">
      <ng-container *tdsStringTemplateOutlet="notFoundFooter">
        {{ notFoundFooter }}
      </ng-container>
    </div>
  `,
                host: {
                    class: 'tds-empty  flex flex-col items-center'
                }
            }]
    }], function () { return [{ type: i1.TDSI18nService }, { type: i0.ChangeDetectorRef }]; }, { notFoundImage: [{
            type: Input
        }], notFoundContent: [{
            type: Input
        }], notFoundFooter: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1wdHkuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvdGRzLXVpL2VtcHR5L2VtcHR5LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQ0wsdUJBQXVCLEVBRXZCLFNBQVMsRUFDVCxLQUFLLEVBTUwsaUJBQWlCLEVBQ2xCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDL0IsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7Ozs7OztJQWVuQyw2QkFBdUQ7SUFDckQseUJBQWdHO0lBQ2xHLDBCQUFlOzs7SUFETyxlQUFxQjtJQUFyQiw0REFBcUIsa0VBQUE7OztJQUY3Qyw2QkFBc0M7SUFDcEMsbUdBRWU7SUFDakIsMEJBQWU7OztJQUhFLGVBQXNDO0lBQXRDLDhEQUFzQzs7O0lBSXZELG9DQUE0Rjs7O0lBQzVGLG1DQUEwRjs7O0lBRzFGLDZCQUF5RDtJQUN2RCxZQUNGO0lBQUEsMEJBQWU7OztJQURiLGVBQ0Y7SUFERSwrR0FDRjs7O0lBSEYsNEJBQXFIO0lBQ25ILHdGQUVlO0lBQ2pCLGlCQUFJOzs7SUFIYSxlQUF3QztJQUF4QyxnRUFBd0M7OztJQUt2RCw2QkFBd0Q7SUFDdEQsWUFDRjtJQUFBLDBCQUFlOzs7SUFEYixlQUNGO0lBREUsc0RBQ0Y7OztJQUhGLDhCQUEwRDtJQUN4RCwwRkFFZTtJQUNqQixpQkFBTTs7O0lBSFcsZUFBdUM7SUFBdkMsK0RBQXVDOztBQXhCNUQsTUFBTSxxQkFBcUIsR0FBRyxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQVUsQ0FBQztBQWlDN0QsTUFBTSxPQUFPLGlCQUFpQjtJQVc1QixZQUFvQixJQUFvQixFQUFVLEdBQXNCO1FBQXBELFNBQUksR0FBSixJQUFJLENBQWdCO1FBQVUsUUFBRyxHQUFILEdBQUcsQ0FBbUI7UUFWL0Qsa0JBQWEsR0FBOEIsU0FBUyxDQUFDO1FBSTlELG9CQUFlLEdBQUcsS0FBSyxDQUFDO1FBQ3hCLG1CQUFjLEdBQUcsSUFBSSxDQUFDO1FBR0wsYUFBUSxHQUFHLElBQUksT0FBTyxFQUFRLENBQUM7SUFFMkIsQ0FBQztJQUU1RSxXQUFXLENBQUMsT0FBc0I7UUFDaEMsTUFBTSxFQUFFLGVBQWUsRUFBRSxhQUFhLEVBQUUsR0FBRyxPQUFPLENBQUM7UUFFbkQsSUFBSSxlQUFlLEVBQUU7WUFDbkIsTUFBTSxPQUFPLEdBQUcsZUFBZSxDQUFDLFlBQVksQ0FBQztZQUM3QyxJQUFJLENBQUMsZUFBZSxHQUFHLE9BQU8sT0FBTyxLQUFLLFFBQVEsQ0FBQztTQUNwRDtRQUVELElBQUksYUFBYSxFQUFFO1lBQ2pCLE1BQU0sS0FBSyxHQUFHLGFBQWEsQ0FBQyxZQUFZLElBQUksU0FBUyxDQUFDO1lBQ3RELElBQUksQ0FBQyxjQUFjLEdBQUcscUJBQXFCLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQzlFO0lBQ0gsQ0FBQztJQUVELFFBQVE7UUFDTixJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUU7WUFDbkUsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUMvQyxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQzFCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDM0IsQ0FBQzs7a0ZBckNVLGlCQUFpQjtvRUFBakIsaUJBQWlCO1FBeEIxQiw4QkFBNkI7UUFDM0Isb0ZBSWU7UUFDZiw4RkFBNEY7UUFDNUYsNEZBQTBGO1FBQzVGLGlCQUFNO1FBQ04sOERBSUk7UUFDSixrRUFJTTs7UUFqQlcsZUFBcUI7UUFBckIsMENBQXFCO1FBS2hCLGVBQWtEO1FBQWxELDJFQUFrRDtRQUNuRCxlQUFrRDtRQUFsRCwyRUFBa0Q7UUFFYyxlQUE4QjtRQUE5QixtREFBOEI7UUFLL0UsZUFBb0I7UUFBcEIseUNBQW9COzt1RkFVL0MsaUJBQWlCO2NBOUI3QixTQUFTO2VBQUM7Z0JBQ1QsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07Z0JBQy9DLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO2dCQUNyQyxRQUFRLEVBQUUsV0FBVztnQkFDckIsUUFBUSxFQUFFLFVBQVU7Z0JBQ3BCLFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FvQlQ7Z0JBQ0QsSUFBSSxFQUFFO29CQUNKLEtBQUssRUFBRSx1Q0FBdUM7aUJBQy9DO2FBQ0Y7aUdBRVUsYUFBYTtrQkFBckIsS0FBSztZQUNHLGVBQWU7a0JBQXZCLEtBQUs7WUFDRyxjQUFjO2tCQUF0QixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiXHJcblxyXG5pbXBvcnQge1xyXG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxyXG4gIENoYW5nZURldGVjdG9yUmVmLFxyXG4gIENvbXBvbmVudCxcclxuICBJbnB1dCxcclxuICBPbkNoYW5nZXMsXHJcbiAgT25EZXN0cm95LFxyXG4gIE9uSW5pdCxcclxuICBTaW1wbGVDaGFuZ2VzLFxyXG4gIFRlbXBsYXRlUmVmLFxyXG4gIFZpZXdFbmNhcHN1bGF0aW9uXHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBURFNFbXB0eUkxOG5JbnRlcmZhY2UsIFREU0kxOG5TZXJ2aWNlIH0gZnJvbSAndGRzLXVpL2kxOG4nO1xyXG5cclxuXHJcbmNvbnN0IFREU0VtcHR5RGVmYXVsdEltYWdlcyA9IFsnZGVmYXVsdCcsICdzaW1wbGUnXSBhcyBjb25zdDtcclxudHlwZSBURFNFbXB0eU5vdEZvdW5kSW1hZ2VUeXBlID0gdHlwZW9mIFREU0VtcHR5RGVmYXVsdEltYWdlc1tudW1iZXJdIHwgbnVsbCB8IHN0cmluZyB8IFRlbXBsYXRlUmVmPHZvaWQ+O1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXHJcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcclxuICBzZWxlY3RvcjogJ3Rkcy1lbXB0eScsXHJcbiAgZXhwb3J0QXM6ICd0ZHNFbXB0eScsXHJcbiAgdGVtcGxhdGU6IGBcclxuICAgIDxkaXYgY2xhc3M9XCJ0ZHMtZW1wdHktaW1hZ2VcIj5cclxuICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cIiFpc0ltYWdlQnVpbGRJblwiPlxyXG4gICAgICAgIDxuZy1jb250YWluZXIgKnRkc1N0cmluZ1RlbXBsYXRlT3V0bGV0PVwibm90Rm91bmRJbWFnZVwiPlxyXG4gICAgICAgICAgPGltZyBjbGFzcz1cImgtZnVsbFwiIFtzcmNdPVwibm90Rm91bmRJbWFnZVwiIFthbHRdPVwiaXNDb250ZW50U3RyaW5nID8gbm90Rm91bmRDb250ZW50IDogJ2VtcHR5J1wiIC8+XHJcbiAgICAgICAgPC9uZy1jb250YWluZXI+XHJcbiAgICAgIDwvbmctY29udGFpbmVyPlxyXG4gICAgICA8dGRzLWVtcHR5LWRlZmF1bHQgKm5nSWY9XCJpc0ltYWdlQnVpbGRJbiAmJiBub3RGb3VuZEltYWdlICE9PSAnc2ltcGxlJ1wiPjwvdGRzLWVtcHR5LWRlZmF1bHQ+XHJcbiAgICAgIDx0ZHMtZW1wdHktc2ltcGxlICpuZ0lmPVwiaXNJbWFnZUJ1aWxkSW4gJiYgbm90Rm91bmRJbWFnZSA9PT0gJ3NpbXBsZSdcIj48L3Rkcy1lbXB0eS1zaW1wbGU+XHJcbiAgICA8L2Rpdj5cclxuICAgIDxwIGNsYXNzPVwidGRzLWVtcHR5LWRlc2NyaXB0aW9uIHRleHQtbmV1dHJhbC0xLTkwMCB0ZXh0LXRpdGxlLTEgZm9udC1zZW1pYm9sZCBtdC0zXCIgKm5nSWY9XCJub3RGb3VuZENvbnRlbnQgIT09IG51bGxcIj5cclxuICAgICAgPG5nLWNvbnRhaW5lciAqdGRzU3RyaW5nVGVtcGxhdGVPdXRsZXQ9XCJub3RGb3VuZENvbnRlbnRcIj5cclxuICAgICAgICB7eyBpc0NvbnRlbnRTdHJpbmcgPyBub3RGb3VuZENvbnRlbnQgOiBsb2NhbGVbJ2Rlc2NyaXB0aW9uJ10gfX1cclxuICAgICAgPC9uZy1jb250YWluZXI+XHJcbiAgICA8L3A+XHJcbiAgICA8ZGl2IGNsYXNzPVwidGRzLWVtcHR5LWZvb3RlciBtdC0zXCIgKm5nSWY9XCJub3RGb3VuZEZvb3RlclwiPlxyXG4gICAgICA8bmctY29udGFpbmVyICp0ZHNTdHJpbmdUZW1wbGF0ZU91dGxldD1cIm5vdEZvdW5kRm9vdGVyXCI+XHJcbiAgICAgICAge3sgbm90Rm91bmRGb290ZXIgfX1cclxuICAgICAgPC9uZy1jb250YWluZXI+XHJcbiAgICA8L2Rpdj5cclxuICBgLFxyXG4gIGhvc3Q6IHtcclxuICAgIGNsYXNzOiAndGRzLWVtcHR5ICBmbGV4IGZsZXgtY29sIGl0ZW1zLWNlbnRlcidcclxuICB9XHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBURFNFbXB0eUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgT25Jbml0LCBPbkRlc3Ryb3kge1xyXG4gIEBJbnB1dCgpIG5vdEZvdW5kSW1hZ2U6IFREU0VtcHR5Tm90Rm91bmRJbWFnZVR5cGUgPSAnZGVmYXVsdCc7XHJcbiAgQElucHV0KCkgbm90Rm91bmRDb250ZW50Pzogc3RyaW5nIHwgVGVtcGxhdGVSZWY8dm9pZD4gfCBudWxsO1xyXG4gIEBJbnB1dCgpIG5vdEZvdW5kRm9vdGVyPzogc3RyaW5nIHwgVGVtcGxhdGVSZWY8dm9pZD47XHJcblxyXG4gIGlzQ29udGVudFN0cmluZyA9IGZhbHNlO1xyXG4gIGlzSW1hZ2VCdWlsZEluID0gdHJ1ZTtcclxuICBsb2NhbGUhOiBURFNFbXB0eUkxOG5JbnRlcmZhY2U7XHJcblxyXG4gIHByaXZhdGUgcmVhZG9ubHkgZGVzdHJveSQgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGkxOG46IFREU0kxOG5TZXJ2aWNlLCBwcml2YXRlIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYpIHt9XHJcblxyXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcclxuICAgIGNvbnN0IHsgbm90Rm91bmRDb250ZW50LCBub3RGb3VuZEltYWdlIH0gPSBjaGFuZ2VzO1xyXG5cclxuICAgIGlmIChub3RGb3VuZENvbnRlbnQpIHtcclxuICAgICAgY29uc3QgY29udGVudCA9IG5vdEZvdW5kQ29udGVudC5jdXJyZW50VmFsdWU7XHJcbiAgICAgIHRoaXMuaXNDb250ZW50U3RyaW5nID0gdHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChub3RGb3VuZEltYWdlKSB7XHJcbiAgICAgIGNvbnN0IGltYWdlID0gbm90Rm91bmRJbWFnZS5jdXJyZW50VmFsdWUgfHwgJ2RlZmF1bHQnO1xyXG4gICAgICB0aGlzLmlzSW1hZ2VCdWlsZEluID0gVERTRW1wdHlEZWZhdWx0SW1hZ2VzLmZpbmRJbmRleChpID0+IGkgPT09IGltYWdlKSA+IC0xO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbmdPbkluaXQoKTogdm9pZCB7XHJcbiAgICB0aGlzLmkxOG4ubG9jYWxlQ2hhbmdlLnBpcGUodGFrZVVudGlsKHRoaXMuZGVzdHJveSQpKS5zdWJzY3JpYmUoKCkgPT4ge1xyXG4gICAgICB0aGlzLmxvY2FsZSA9IHRoaXMuaTE4bi5nZXRMb2NhbGVEYXRhKCdFbXB0eScpO1xyXG4gICAgICB0aGlzLmNkci5tYXJrRm9yQ2hlY2soKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XHJcbiAgICB0aGlzLmRlc3Ryb3kkLm5leHQoKTtcclxuICAgIHRoaXMuZGVzdHJveSQuY29tcGxldGUoKTtcclxuICB9XHJcbn1cclxuIl19