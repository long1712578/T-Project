import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, Input, ViewEncapsulation } from '@angular/core';
import { InputBoolean, InputNumber } from 'tds-ui/shared/utility';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
const _c0 = function (a0, a1) { return { "h-2": a0, "w-2": a1 }; };
export class TDSSliderTrackComponent {
    constructor() {
        this.offset = 0;
        this.reverse = false;
        this.dir = 'ltr';
        this.length = 0;
        this.vertical = false;
        this.included = false;
        this.style = {};
    }
    ngOnChanges() {
        const vertical = this.vertical;
        const reverse = this.reverse;
        const visibility = this.included ? 'visible' : 'hidden';
        const offset = this.offset;
        const length = this.length;
        const positonStyle = vertical
            ? {
                [reverse ? 'top' : 'bottom']: `${offset}%`,
                [reverse ? 'bottom' : 'top']: 'auto',
                height: `${length}%`,
                visibility
            }
            : {
                ...this.getHorizontalStylePosition(),
                width: `${length}%`,
                visibility
            };
        this.style = positonStyle;
    }
    getHorizontalStylePosition() {
        let left = this.reverse ? 'auto' : `${this.offset}%`;
        let right = this.reverse ? `${this.offset}%` : 'auto';
        if (this.dir === 'rtl') {
            const tmp = left;
            left = right;
            right = tmp;
        }
        return { left, right };
    }
}
TDSSliderTrackComponent.ɵfac = function TDSSliderTrackComponent_Factory(t) { return new (t || TDSSliderTrackComponent)(); };
TDSSliderTrackComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSSliderTrackComponent, selectors: [["tds-slider-track"]], inputs: { offset: "offset", reverse: "reverse", dir: "dir", length: "length", vertical: "vertical", included: "included" }, exportAs: ["tdsSliderTrack"], features: [i0.ɵɵNgOnChangesFeature], decls: 1, vars: 5, consts: [[1, "tds-slider-track", "absolute", "rounded-full", "transition-colors", "duration-300", "bg-primary-1", "dark:bg-d-primary-1", 3, "ngStyle", "ngClass"]], template: function TDSSliderTrackComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "div", 0);
    } if (rf & 2) {
        i0.ɵɵproperty("ngStyle", ctx.style)("ngClass", i0.ɵɵpureFunction2(2, _c0, !ctx.vertical, ctx.vertical));
    } }, directives: [i1.NgStyle, i1.NgClass], encapsulation: 2, changeDetection: 0 });
__decorate([
    InputNumber()
], TDSSliderTrackComponent.prototype, "offset", void 0);
__decorate([
    InputBoolean()
], TDSSliderTrackComponent.prototype, "reverse", void 0);
__decorate([
    InputNumber()
], TDSSliderTrackComponent.prototype, "length", void 0);
__decorate([
    InputBoolean()
], TDSSliderTrackComponent.prototype, "vertical", void 0);
__decorate([
    InputBoolean()
], TDSSliderTrackComponent.prototype, "included", void 0);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSSliderTrackComponent, [{
        type: Component,
        args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                selector: 'tds-slider-track',
                exportAs: 'tdsSliderTrack',
                preserveWhitespaces: false,
                template: ` 
  <div class="tds-slider-track absolute  rounded-full transition-colors duration-300 bg-primary-1 dark:bg-d-primary-1"
   [ngStyle]="style"
   [ngClass]="{'h-2':!vertical, 'w-2':vertical}"
   ></div> 
  `
            }]
    }], null, { offset: [{
            type: Input
        }], reverse: [{
            type: Input
        }], dir: [{
            type: Input
        }], length: [{
            type: Input
        }], vertical: [{
            type: Input
        }], included: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhY2suY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvdGRzLXVpL3NsaWRlci90cmFjay5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUlBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFhLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hHLE9BQU8sRUFBRSxZQUFZLEVBQUUsV0FBVyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7Ozs7QUEwQmxFLE1BQU0sT0FBTyx1QkFBdUI7SUFicEM7UUFvQjBCLFdBQU0sR0FBVyxDQUFDLENBQUM7UUFDbEIsWUFBTyxHQUFZLEtBQUssQ0FBQztRQUN6QyxRQUFHLEdBQWMsS0FBSyxDQUFDO1FBQ1IsV0FBTSxHQUFXLENBQUMsQ0FBQztRQUNsQixhQUFRLEdBQUcsS0FBSyxDQUFDO1FBQ2pCLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFFMUMsVUFBSyxHQUF3QixFQUFFLENBQUM7S0FtQ2pDO0lBakNDLFdBQVc7UUFDVCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQy9CLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDN0IsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUM7UUFDeEQsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUMzQixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBRTNCLE1BQU0sWUFBWSxHQUF3QixRQUFRO1lBQ2hELENBQUMsQ0FBQztnQkFDQSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxHQUFHLE1BQU0sR0FBRztnQkFDMUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUUsTUFBTTtnQkFDcEMsTUFBTSxFQUFFLEdBQUcsTUFBTSxHQUFHO2dCQUNwQixVQUFVO2FBQ1g7WUFDRCxDQUFDLENBQUM7Z0JBQ0EsR0FBRyxJQUFJLENBQUMsMEJBQTBCLEVBQUU7Z0JBQ3BDLEtBQUssRUFBRSxHQUFHLE1BQU0sR0FBRztnQkFDbkIsVUFBVTthQUNYLENBQUM7UUFFSixJQUFJLENBQUMsS0FBSyxHQUFHLFlBQVksQ0FBQztJQUM1QixDQUFDO0lBRU8sMEJBQTBCO1FBQ2hDLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUM7UUFDckQsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztRQUN0RCxJQUFJLElBQUksQ0FBQyxHQUFHLEtBQUssS0FBSyxFQUFFO1lBQ3RCLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQztZQUNqQixJQUFJLEdBQUcsS0FBSyxDQUFDO1lBQ2IsS0FBSyxHQUFHLEdBQUcsQ0FBQztTQUNiO1FBQ0QsT0FBTyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQztJQUN6QixDQUFDOzs4RkFoRFUsdUJBQXVCOzBFQUF2Qix1QkFBdUI7UUFObEMseUJBR1E7O1FBRlAsbUNBQWlCLG9FQUFBOztBQVlNO0lBQWQsV0FBVyxFQUFFO3VEQUFvQjtBQUNsQjtJQUFmLFlBQVksRUFBRTt3REFBMEI7QUFFMUI7SUFBZCxXQUFXLEVBQUU7dURBQW9CO0FBQ2xCO0lBQWYsWUFBWSxFQUFFO3lEQUFrQjtBQUNqQjtJQUFmLFlBQVksRUFBRTt5REFBa0I7dUZBWi9CLHVCQUF1QjtjQWJuQyxTQUFTO2VBQUM7Z0JBQ1QsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07Z0JBQy9DLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO2dCQUNyQyxRQUFRLEVBQUUsa0JBQWtCO2dCQUM1QixRQUFRLEVBQUUsZ0JBQWdCO2dCQUMxQixtQkFBbUIsRUFBRSxLQUFLO2dCQUMxQixRQUFRLEVBQUU7Ozs7O0dBS1Q7YUFDRjtnQkFReUIsTUFBTTtrQkFBN0IsS0FBSztZQUNtQixPQUFPO2tCQUEvQixLQUFLO1lBQ0csR0FBRztrQkFBWCxLQUFLO1lBQ2tCLE1BQU07a0JBQTdCLEtBQUs7WUFDbUIsUUFBUTtrQkFBaEMsS0FBSztZQUNtQixRQUFRO2tCQUFoQyxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiXHJcblxyXG5pbXBvcnQgeyBEaXJlY3Rpb24gfSBmcm9tICdAYW5ndWxhci9jZGsvYmlkaSc7XHJcbmltcG9ydCB7IEJvb2xlYW5JbnB1dCwgTnVtYmVySW5wdXQgfSBmcm9tICdAYW5ndWxhci9jZGsvY29lcmNpb24nO1xyXG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBJbnB1dCwgT25DaGFuZ2VzLCBWaWV3RW5jYXBzdWxhdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBJbnB1dEJvb2xlYW4sIElucHV0TnVtYmVyIH0gZnJvbSAndGRzLXVpL3NoYXJlZC91dGlsaXR5JztcclxuXHJcblxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBURFNTbGlkZXJUcmFja1N0eWxlIHtcclxuICBib3R0b20/OiBzdHJpbmcgfCBudWxsO1xyXG4gIGhlaWdodD86IHN0cmluZyB8IG51bGw7XHJcbiAgbGVmdD86IHN0cmluZyB8IG51bGw7XHJcbiAgcmlnaHQ/OiBzdHJpbmcgfCBudWxsO1xyXG4gIHdpZHRoPzogc3RyaW5nIHwgbnVsbDtcclxuICB2aXNpYmlsaXR5Pzogc3RyaW5nO1xyXG59XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcclxuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxyXG4gIHNlbGVjdG9yOiAndGRzLXNsaWRlci10cmFjaycsXHJcbiAgZXhwb3J0QXM6ICd0ZHNTbGlkZXJUcmFjaycsXHJcbiAgcHJlc2VydmVXaGl0ZXNwYWNlczogZmFsc2UsXHJcbiAgdGVtcGxhdGU6IGAgXHJcbiAgPGRpdiBjbGFzcz1cInRkcy1zbGlkZXItdHJhY2sgYWJzb2x1dGUgIHJvdW5kZWQtZnVsbCB0cmFuc2l0aW9uLWNvbG9ycyBkdXJhdGlvbi0zMDAgYmctcHJpbWFyeS0xIGRhcms6YmctZC1wcmltYXJ5LTFcIlxyXG4gICBbbmdTdHlsZV09XCJzdHlsZVwiXHJcbiAgIFtuZ0NsYXNzXT1cInsnaC0yJzohdmVydGljYWwsICd3LTInOnZlcnRpY2FsfVwiXHJcbiAgID48L2Rpdj4gXHJcbiAgYFxyXG59KVxyXG5leHBvcnQgY2xhc3MgVERTU2xpZGVyVHJhY2tDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xyXG4gIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9vZmZzZXQ6IE51bWJlcklucHV0O1xyXG4gIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9sZW5ndGg6IE51bWJlcklucHV0O1xyXG4gIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV92ZXJ0aWNhbDogQm9vbGVhbklucHV0O1xyXG4gIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9pbmNsdWRlZDogQm9vbGVhbklucHV0O1xyXG4gIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9yZXZlcnNlOiBCb29sZWFuSW5wdXQ7XHJcblxyXG4gIEBJbnB1dCgpIEBJbnB1dE51bWJlcigpIG9mZnNldDogbnVtYmVyID0gMDtcclxuICBASW5wdXQoKSBASW5wdXRCb29sZWFuKCkgcmV2ZXJzZTogYm9vbGVhbiA9IGZhbHNlO1xyXG4gIEBJbnB1dCgpIGRpcjogRGlyZWN0aW9uID0gJ2x0cic7XHJcbiAgQElucHV0KCkgQElucHV0TnVtYmVyKCkgbGVuZ3RoOiBudW1iZXIgPSAwO1xyXG4gIEBJbnB1dCgpIEBJbnB1dEJvb2xlYW4oKSB2ZXJ0aWNhbCA9IGZhbHNlO1xyXG4gIEBJbnB1dCgpIEBJbnB1dEJvb2xlYW4oKSBpbmNsdWRlZCA9IGZhbHNlO1xyXG5cclxuICBzdHlsZTogVERTU2xpZGVyVHJhY2tTdHlsZSA9IHt9O1xyXG5cclxuICBuZ09uQ2hhbmdlcygpOiB2b2lkIHtcclxuICAgIGNvbnN0IHZlcnRpY2FsID0gdGhpcy52ZXJ0aWNhbDtcclxuICAgIGNvbnN0IHJldmVyc2UgPSB0aGlzLnJldmVyc2U7XHJcbiAgICBjb25zdCB2aXNpYmlsaXR5ID0gdGhpcy5pbmNsdWRlZCA/ICd2aXNpYmxlJyA6ICdoaWRkZW4nO1xyXG4gICAgY29uc3Qgb2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XHJcbiAgICBjb25zdCBsZW5ndGggPSB0aGlzLmxlbmd0aDtcclxuXHJcbiAgICBjb25zdCBwb3NpdG9uU3R5bGU6IFREU1NsaWRlclRyYWNrU3R5bGUgPSB2ZXJ0aWNhbFxyXG4gICAgICA/IHtcclxuICAgICAgICBbcmV2ZXJzZSA/ICd0b3AnIDogJ2JvdHRvbSddOiBgJHtvZmZzZXR9JWAsXHJcbiAgICAgICAgW3JldmVyc2UgPyAnYm90dG9tJyA6ICd0b3AnXTogJ2F1dG8nLFxyXG4gICAgICAgIGhlaWdodDogYCR7bGVuZ3RofSVgLFxyXG4gICAgICAgIHZpc2liaWxpdHlcclxuICAgICAgfVxyXG4gICAgICA6IHtcclxuICAgICAgICAuLi50aGlzLmdldEhvcml6b250YWxTdHlsZVBvc2l0aW9uKCksXHJcbiAgICAgICAgd2lkdGg6IGAke2xlbmd0aH0lYCxcclxuICAgICAgICB2aXNpYmlsaXR5XHJcbiAgICAgIH07XHJcblxyXG4gICAgdGhpcy5zdHlsZSA9IHBvc2l0b25TdHlsZTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0SG9yaXpvbnRhbFN0eWxlUG9zaXRpb24oKTogeyBsZWZ0OiBzdHJpbmc7IHJpZ2h0OiBzdHJpbmcgfSB7XHJcbiAgICBsZXQgbGVmdCA9IHRoaXMucmV2ZXJzZSA/ICdhdXRvJyA6IGAke3RoaXMub2Zmc2V0fSVgO1xyXG4gICAgbGV0IHJpZ2h0ID0gdGhpcy5yZXZlcnNlID8gYCR7dGhpcy5vZmZzZXR9JWAgOiAnYXV0byc7XHJcbiAgICBpZiAodGhpcy5kaXIgPT09ICdydGwnKSB7XHJcbiAgICAgIGNvbnN0IHRtcCA9IGxlZnQ7XHJcbiAgICAgIGxlZnQgPSByaWdodDtcclxuICAgICAgcmlnaHQgPSB0bXA7XHJcbiAgICB9XHJcbiAgICByZXR1cm4geyBsZWZ0LCByaWdodCB9O1xyXG4gIH1cclxufVxyXG4iXX0=