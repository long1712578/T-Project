import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, Input, ViewEncapsulation } from '@angular/core';
import { InputBoolean } from 'tds-ui/shared/utility';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
const _c0 = function (a0, a1) { return { "top-3.5": a0, "left-3.5": a1 }; };
function TDSSliderMarksComponent_span_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "span", 2);
} if (rf & 2) {
    const attr_r1 = ctx.$implicit;
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵclassProp("tds-slider-mark-active", attr_r1.active);
    i0.ɵɵproperty("ngStyle", attr_r1.style)("innerHTML", attr_r1.label, i0.ɵɵsanitizeHtml)("ngClass", i0.ɵɵpureFunction2(5, _c0, !ctx_r0.vertical, ctx_r0.vertical));
} }
const _c1 = function (a0, a1) { return { "top-3.5 left-0 w-full": a0, "top-0 left-3.5 w-4.5 h-full": a1 }; };
export class TDSSliderMarksComponent {
    constructor() {
        this.lowerBound = null;
        this.upperBound = null;
        this.marksArray = [];
        this.vertical = false;
        this.included = false;
        this.marks = [];
    }
    ngOnChanges(changes) {
        const { marksArray, lowerBound, upperBound, reverse } = changes;
        if (marksArray || reverse) {
            this.buildMarks();
        }
        if (marksArray || lowerBound || upperBound || reverse) {
            this.togglePointActive();
        }
    }
    trackById(_index, mark) {
        return mark.value;
    }
    buildMarks() {
        const range = this.max - this.min;
        this.marks = this.marksArray.map(mark => {
            const { value, offset, config } = mark;
            const style = this.getMarkStyles(value, range, config);
            const label = isConfigObject(config) ? config.label : config;
            return {
                label,
                offset,
                style,
                value,
                config,
                active: false
            };
        });
    }
    getMarkStyles(value, range, config) {
        let style;
        const markValue = this.reverse ? this.max + this.min - value : value;
        if (this.vertical) {
            style = {
                marginBottom: '-50%',
                bottom: `${((markValue - this.min) / range) * 100}%`
            };
        }
        else {
            style = {
                transform: `translate3d(-50%, 0, 0)`,
                left: `${((markValue - this.min) / range) * 100}%`
            };
        }
        if (isConfigObject(config) && config.style) {
            style = { ...style, ...config.style };
        }
        return style;
    }
    togglePointActive() {
        if (this.marks && this.lowerBound !== null && this.upperBound !== null) {
            this.marks.forEach(mark => {
                const value = mark.value;
                const isActive = (!this.included && value === this.upperBound) ||
                    (this.included && value <= this.upperBound && value >= this.lowerBound);
                mark.active = isActive;
            });
        }
    }
}
TDSSliderMarksComponent.ɵfac = function TDSSliderMarksComponent_Factory(t) { return new (t || TDSSliderMarksComponent)(); };
TDSSliderMarksComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSSliderMarksComponent, selectors: [["tds-slider-marks"]], inputs: { lowerBound: "lowerBound", upperBound: "upperBound", marksArray: "marksArray", min: "min", max: "max", vertical: "vertical", included: "included", reverse: "reverse" }, exportAs: ["tdsSliderMarks"], features: [i0.ɵɵNgOnChangesFeature], decls: 2, vars: 6, consts: [[1, "tds-slider-mark", "absolute", "text-neutral-1-600", "dark:text-d-neutral-1-600", "text-caption-2", 3, "ngClass"], ["class", "tds-slider-mark-text absolute inline-block text-center cursor-pointer select-none ", 3, "tds-slider-mark-active", "ngStyle", "innerHTML", "ngClass", 4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "tds-slider-mark-text", "absolute", "inline-block", "text-center", "cursor-pointer", "select-none", 3, "ngStyle", "innerHTML", "ngClass"]], template: function TDSSliderMarksComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 0);
        i0.ɵɵtemplate(1, TDSSliderMarksComponent_span_1_Template, 1, 8, "span", 1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction2(3, _c1, !ctx.vertical, ctx.vertical));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngForOf", ctx.marks)("ngForTrackBy", ctx.trackById);
    } }, directives: [i1.NgClass, i1.NgForOf, i1.NgStyle], encapsulation: 2, changeDetection: 0 });
__decorate([
    InputBoolean()
], TDSSliderMarksComponent.prototype, "vertical", void 0);
__decorate([
    InputBoolean()
], TDSSliderMarksComponent.prototype, "included", void 0);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSSliderMarksComponent, [{
        type: Component,
        args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                preserveWhitespaces: false,
                selector: 'tds-slider-marks',
                exportAs: 'tdsSliderMarks',
                template: `
    <div class="tds-slider-mark absolute  text-neutral-1-600 dark:text-d-neutral-1-600 text-caption-2"
    [ngClass]="{'top-3.5 left-0 w-full':!vertical,'top-0 left-3.5 w-4.5 h-full':vertical}"
    >
      <span
        class="tds-slider-mark-text absolute inline-block text-center cursor-pointer select-none "
        *ngFor="let attr of marks; trackBy: trackById"
        [class.tds-slider-mark-active]="attr.active"       
        [ngStyle]="attr.style!"
        [innerHTML]="attr.label"
        [ngClass]="{'top-3.5':!vertical,'left-3.5':vertical}"
      ></span>
    </div>
  `
            }]
    }], null, { lowerBound: [{
            type: Input
        }], upperBound: [{
            type: Input
        }], marksArray: [{
            type: Input
        }], min: [{
            type: Input
        }], max: [{
            type: Input
        }], vertical: [{
            type: Input
        }], included: [{
            type: Input
        }], reverse: [{
            type: Input
        }] }); })();
function isConfigObject(config) {
    return typeof config !== 'string';
}
//# sourceMappingURL=data:application/json;base64,