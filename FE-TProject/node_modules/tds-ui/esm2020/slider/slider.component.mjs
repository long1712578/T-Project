import { __decorate } from "tslib";
import { DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW, UP_ARROW } from '@angular/cdk/keycodes';
import { ChangeDetectionStrategy, Component, EventEmitter, forwardRef, Input, Optional, Output, ViewChild, ViewChildren, ViewEncapsulation } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { fromEvent, merge, Subject } from 'rxjs';
import { distinctUntilChanged, filter, map, pluck, takeUntil, tap } from 'rxjs/operators';
import { arraysEqual, ensureNumberInRange, getElementOffset, getPercent, getPrecision, isNil, silentEvent } from 'tds-ui/core/util';
import { InputBoolean, InputNumber } from 'tds-ui/shared/utility';
import { TDSSliderHandleComponent } from './handle.component';
import { TDSSliderService } from './slider.service';
import * as i0 from "@angular/core";
import * as i1 from "./slider.service";
import * as i2 from "@angular/cdk/platform";
import * as i3 from "@angular/cdk/bidi";
import * as i4 from "@angular/common";
import * as i5 from "./track.component";
import * as i6 from "./step.component";
import * as i7 from "./handle.component";
import * as i8 from "./marks.component";
const _c0 = ["slider"];
function TDSSliderComponent_tds_slider_step_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "tds-slider-step", 6);
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵproperty("vertical", ctx_r1.tdsVertical)("min", ctx_r1.tdsMin)("max", ctx_r1.tdsMax)("lowerBound", ctx_r1.bounds.lower)("upperBound", ctx_r1.bounds.upper)("marksArray", ctx_r1.marksArray)("included", ctx_r1.tdsIncluded)("reverse", ctx_r1.tdsReverse);
} }
function TDSSliderComponent_tds_slider_handle_5_Template(rf, ctx) { if (rf & 1) {
    const _r7 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "tds-slider-handle", 7);
    i0.ɵɵlistener("focusin", function TDSSliderComponent_tds_slider_handle_5_Template_tds_slider_handle_focusin_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r7); const handleIndex_r5 = restoredCtx.index; const ctx_r6 = i0.ɵɵnextContext(); return ctx_r6.onHandleFocusIn(handleIndex_r5); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const handle_r4 = ctx.$implicit;
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵclassProp("cursor-not-allowed", ctx_r2.tdsDisabled)("cursor-pointer", !ctx_r2.tdsDisabled);
    i0.ɵɵproperty("vertical", ctx_r2.tdsVertical)("reverse", ctx_r2.tdsReverse)("offset", handle_r4.offset)("value", handle_r4.value)("active", handle_r4.active)("tooltipFormatter", ctx_r2.tdsTipFormatter)("tooltipVisible", ctx_r2.tdsTooltipVisible)("tooltipPlacement", ctx_r2.tdsTooltipPlacement)("dir", ctx_r2.dir);
} }
function TDSSliderComponent_tds_slider_marks_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "tds-slider-marks", 6);
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵproperty("vertical", ctx_r3.tdsVertical)("min", ctx_r3.tdsMin)("max", ctx_r3.tdsMax)("lowerBound", ctx_r3.bounds.lower)("upperBound", ctx_r3.bounds.upper)("marksArray", ctx_r3.marksArray)("included", ctx_r3.tdsIncluded)("reverse", ctx_r3.tdsReverse);
} }
const _c1 = function (a0, a1, a2) { return { " mx-1.5 my-2.5 p-0 h-2": a0, "w-5 h-full mx-2.5 my-1.5 px-1 py-0": a1, "mb-7": a2 }; };
const _c2 = function (a0, a1) { return { "h-2 w-full": a0, " w-2 h-full": a1 }; };
export class TDSSliderComponent {
    constructor(sliderService, cdr, platform, directionality) {
        this.sliderService = sliderService;
        this.cdr = cdr;
        this.platform = platform;
        this.directionality = directionality;
        this.tdsDisabled = false;
        this.tdsDots = false;
        this.tdsIncluded = true;
        this.tdsRange = false;
        this.tdsVertical = false;
        this.tdsReverse = false;
        this.tdsMarks = null;
        this.tdsMax = 100;
        this.tdsMin = 0;
        this.tdsStep = 1;
        this.tdsTooltipVisible = 'default';
        this.tdsTooltipPlacement = 'top';
        this.tdsOnAfterChange = new EventEmitter();
        this.value = null;
        this.cacheSliderStart = null;
        this.cacheSliderLength = null;
        this.activeValueIndex = undefined; // Current activated handle's index ONLY for range=true
        this.track = { offset: null, length: null }; // Track's offset and length
        this.handles = []; // Handles' offset
        this.marksArray = null; // "steps" in array type with more data & FILTER out the invalid mark
        this.bounds = { lower: null, upper: null }; // now for tds-slider-step
        this.dir = 'ltr';
        this.destroy$ = new Subject();
    }
    ngOnInit() {
        this.dir = this.directionality.value;
        this.directionality.change?.pipe(takeUntil(this.destroy$)).subscribe((direction) => {
            this.dir = direction;
            this.cdr.detectChanges();
            this.updateTrackAndHandles();
            this.onValueChange(this.getValue(true));
        });
        this.handles = generateHandlers(this.tdsRange ? 2 : 1);
        this.marksArray = this.tdsMarks ? this.generateMarkItems(this.tdsMarks) : null;
        this.bindDraggingHandlers();
        this.toggleDragDisabled(this.tdsDisabled);
        if (this.getValue() === null) {
            this.setValue(this.formatValue(null));
        }
    }
    ngOnChanges(changes) {
        const { tdsDisabled, tdsMarks, tdsRange } = changes;
        if (tdsDisabled && !tdsDisabled.firstChange) {
            this.toggleDragDisabled(tdsDisabled.currentValue);
        }
        else if (tdsMarks && !tdsMarks.firstChange) {
            this.marksArray = this.tdsMarks ? this.generateMarkItems(this.tdsMarks) : null;
        }
        else if (tdsRange && !tdsRange.firstChange) {
            this.handles = generateHandlers(tdsRange.currentValue ? 2 : 1);
            this.setValue(this.formatValue(null));
        }
    }
    ngOnDestroy() {
        this.unsubscribeDrag();
        this.destroy$.next();
        this.destroy$.complete();
    }
    writeValue(val) {
        this.setValue(val, true);
    }
    onValueChange(_value) { }
    onTouched() { }
    registerOnChange(fn) {
        this.onValueChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    setDisabledState(isDisabled) {
        this.tdsDisabled = isDisabled;
        this.toggleDragDisabled(isDisabled);
    }
    /**
     * Event handler is only triggered when a slider handler is focused.
     */
    onKeyDown(e) {
        if (this.tdsDisabled) {
            return;
        }
        const code = e.keyCode;
        const isIncrease = code === RIGHT_ARROW || code === UP_ARROW;
        const isDecrease = code === LEFT_ARROW || code === DOWN_ARROW;
        if (!(isIncrease || isDecrease)) {
            return;
        }
        e.preventDefault();
        let step = (isDecrease ? -this.tdsStep : this.tdsStep) * (this.tdsReverse ? -1 : 1);
        step = this.dir === 'rtl' ? step * -1 : step;
        const newVal = this.tdsRange
            ? this.value[this.activeValueIndex] + step
            : this.value + step;
        this.setActiveValue(ensureNumberInRange(newVal, this.tdsMin, this.tdsMax));
        this.tdsOnAfterChange.emit(this.getValue(true));
    }
    onHandleFocusIn(index) {
        this.activeValueIndex = index;
    }
    setValue(value, isWriteValue = false) {
        if (isWriteValue) {
            this.value = this.formatValue(value);
            this.updateTrackAndHandles();
        }
        else if (!valuesEqual(this.value, value)) {
            this.value = value;
            this.updateTrackAndHandles();
            this.onValueChange(this.getValue(true));
        }
    }
    getValue(cloneAndSort = false) {
        if (cloneAndSort && this.value && isValueRange(this.value)) {
            return [...this.value].sort((a, b) => a - b);
        }
        return this.value;
    }
    /**
     * Clone & sort current value and convert them to offsets, then return the new one.
     */
    getValueToOffset(value) {
        let normalizedValue = value;
        if (typeof normalizedValue === 'undefined') {
            normalizedValue = this.getValue(true);
        }
        return isValueRange(normalizedValue)
            ? normalizedValue.map(val => this.valueToOffset(val))
            : this.valueToOffset(normalizedValue);
    }
    /**
     * Find the closest value to be activated.
     */
    setActiveValueIndex(pointerValue) {
        const value = this.getValue();
        if (isValueRange(value)) {
            let minimal = null;
            let gap;
            let activeIndex = -1;
            value.forEach((val, index) => {
                gap = Math.abs(pointerValue - val);
                if (minimal === null || gap < minimal) {
                    minimal = gap;
                    activeIndex = index;
                }
            });
            this.activeValueIndex = activeIndex;
            this.handlerComponents.toArray()[activeIndex].focus();
        }
        else {
            this.handlerComponents.toArray()[0].focus();
        }
    }
    setActiveValue(pointerValue) {
        if (isValueRange(this.value)) {
            const newValue = [...this.value];
            newValue[this.activeValueIndex] = pointerValue;
            this.setValue(newValue);
        }
        else {
            this.setValue(pointerValue);
        }
    }
    /**
     * Update track and handles' position and length.
     */
    updateTrackAndHandles() {
        const value = this.getValue();
        const offset = this.getValueToOffset(value);
        const valueSorted = this.getValue(true);
        const offsetSorted = this.getValueToOffset(valueSorted);
        const boundParts = isValueRange(valueSorted) ? valueSorted : [0, valueSorted];
        const trackParts = isValueRange(offsetSorted)
            ? [offsetSorted[0], offsetSorted[1] - offsetSorted[0]]
            : [0, offsetSorted];
        this.handles.forEach((handle, index) => {
            handle.offset = isValueRange(offset) ? offset[index] : offset;
            handle.value = isValueRange(value) ? value[index] : value || 0;
        });
        [this.bounds.lower, this.bounds.upper] = boundParts;
        [this.track.offset, this.track.length] = trackParts;
        this.cdr.markForCheck();
    }
    onDragStart(value) {
        this.toggleDragMoving(true);
        this.cacheSliderProperty();
        this.setActiveValueIndex(this.getLogicalValue(value));
        this.setActiveValue(this.getLogicalValue(value));
        this.showHandleTooltip(this.tdsRange ? this.activeValueIndex : 0);
    }
    onDragMove(value) {
        this.setActiveValue(this.getLogicalValue(value));
        this.cdr.markForCheck();
    }
    getLogicalValue(value) {
        if (this.tdsReverse) {
            if (!this.tdsVertical && this.dir === 'rtl') {
                return value;
            }
            return this.tdsMax - value + this.tdsMin;
        }
        if (!this.tdsVertical && this.dir === 'rtl') {
            return this.tdsMax - value + this.tdsMin;
        }
        return value;
    }
    onDragEnd() {
        this.tdsOnAfterChange.emit(this.getValue(true));
        this.toggleDragMoving(false);
        this.cacheSliderProperty(true);
        this.hideAllHandleTooltip();
        this.cdr.markForCheck();
    }
    /**
     * Create user interactions handles.
     */
    bindDraggingHandlers() {
        if (!this.platform.isBrowser) {
            return;
        }
        const sliderDOM = this.slider.nativeElement;
        const orientField = this.tdsVertical ? 'pageY' : 'pageX';
        const mouse = {
            start: 'mousedown',
            move: 'mousemove',
            end: 'mouseup',
            pluckKey: [orientField]
        };
        const touch = {
            start: 'touchstart',
            move: 'touchmove',
            end: 'touchend',
            pluckKey: ['touches', '0', orientField],
            filter: (e) => e instanceof TouchEvent
        };
        [mouse, touch].forEach(source => {
            const { start, move, end, pluckKey, filter: filterFunc = () => true } = source;
            source.startPlucked$ = fromEvent(sliderDOM, start).pipe(filter(filterFunc), tap(silentEvent), pluck(...pluckKey), map((position) => this.findClosestValue(position)));
            source.end$ = fromEvent(document, end);
            source.moveResolved$ = fromEvent(document, move).pipe(filter(filterFunc), tap(silentEvent), pluck(...pluckKey), distinctUntilChanged(), map((position) => this.findClosestValue(position)), distinctUntilChanged(), takeUntil(source.end$));
        });
        this.dragStart$ = merge(mouse.startPlucked$, touch.startPlucked$);
        this.dragMove$ = merge(mouse.moveResolved$, touch.moveResolved$);
        this.dragEnd$ = merge(mouse.end$, touch.end$);
    }
    subscribeDrag(periods = ['start', 'move', 'end']) {
        if (periods.indexOf('start') !== -1 && this.dragStart$ && !this.dragStart_) {
            this.dragStart_ = this.dragStart$.subscribe(this.onDragStart.bind(this));
        }
        if (periods.indexOf('move') !== -1 && this.dragMove$ && !this.dragMove_) {
            this.dragMove_ = this.dragMove$.subscribe(this.onDragMove.bind(this));
        }
        if (periods.indexOf('end') !== -1 && this.dragEnd$ && !this.dragEnd_) {
            this.dragEnd_ = this.dragEnd$.subscribe(this.onDragEnd.bind(this));
        }
    }
    unsubscribeDrag(periods = ['start', 'move', 'end']) {
        if (periods.indexOf('start') !== -1 && this.dragStart_) {
            this.dragStart_.unsubscribe();
            this.dragStart_ = null;
        }
        if (periods.indexOf('move') !== -1 && this.dragMove_) {
            this.dragMove_.unsubscribe();
            this.dragMove_ = null;
        }
        if (periods.indexOf('end') !== -1 && this.dragEnd_) {
            this.dragEnd_.unsubscribe();
            this.dragEnd_ = null;
        }
    }
    toggleDragMoving(movable) {
        const periods = ['move', 'end'];
        if (movable) {
            this.sliderService.isDragging = true;
            this.subscribeDrag(periods);
        }
        else {
            this.sliderService.isDragging = false;
            this.unsubscribeDrag(periods);
        }
    }
    toggleDragDisabled(disabled) {
        if (disabled) {
            this.unsubscribeDrag();
        }
        else {
            this.subscribeDrag(['start']);
        }
    }
    findClosestValue(position) {
        const sliderStart = this.getSliderStartPosition();
        const sliderLength = this.getSliderLength();
        const ratio = ensureNumberInRange((position - sliderStart) / sliderLength, 0, 1);
        const val = (this.tdsMax - this.tdsMin) * (this.tdsVertical ? 1 - ratio : ratio) + this.tdsMin;
        const points = this.tdsMarks === null
            ? []
            : Object.keys(this.tdsMarks)
                .map(parseFloat)
                .sort((a, b) => a - b);
        if (this.tdsStep !== 0 && !this.tdsDots) {
            const closestOne = Math.round(val / this.tdsStep) * this.tdsStep;
            points.push(closestOne);
        }
        const gaps = points.map(point => Math.abs(val - point));
        const closest = points[gaps.indexOf(Math.min(...gaps))];
        // return parseFloat(closest.toFixed(getPrecision(this.tdsStep)));
        return this.tdsStep === 0 ? closest : parseFloat(closest.toFixed(getPrecision(this.tdsStep)));
    }
    valueToOffset(value) {
        return getPercent(this.tdsMin, this.tdsMax, value);
    }
    getSliderStartPosition() {
        if (this.cacheSliderStart !== null) {
            return this.cacheSliderStart;
        }
        const offset = getElementOffset(this.slider.nativeElement);
        return this.tdsVertical ? offset.top : offset.left;
    }
    getSliderLength() {
        if (this.cacheSliderLength !== null) {
            return this.cacheSliderLength;
        }
        const sliderDOM = this.slider.nativeElement;
        return this.tdsVertical ? sliderDOM.clientHeight : sliderDOM.clientWidth;
    }
    /**
     * Cache DOM layout/reflow operations for performance (may not necessary?)
     */
    cacheSliderProperty(remove = false) {
        this.cacheSliderStart = remove ? null : this.getSliderStartPosition();
        this.cacheSliderLength = remove ? null : this.getSliderLength();
    }
    formatValue(value) {
        if (isNil(value)) {
            return this.tdsRange ? [this.tdsMin, this.tdsMax] : this.tdsMin;
        }
        else if (assertValueValid(value, this.tdsRange)) {
            return isValueRange(value)
                ? value.map(val => ensureNumberInRange(val, this.tdsMin, this.tdsMax))
                : ensureNumberInRange(value, this.tdsMin, this.tdsMax);
        }
        else {
            return this.tdsDefaultValue ? this.tdsDefaultValue : this.tdsRange ? [this.tdsMin, this.tdsMax] : this.tdsMin;
        }
    }
    /**
     * Show one handle's tooltip and hide others'.
     */
    showHandleTooltip(handleIndex = 0) {
        this.handles.forEach((handle, index) => {
            handle.active = index === handleIndex;
        });
    }
    hideAllHandleTooltip() {
        this.handles.forEach(handle => (handle.active = false));
    }
    generateMarkItems(marks) {
        const marksArray = [];
        for (const key in marks) {
            if (marks.hasOwnProperty(key)) {
                const mark = marks[key];
                const val = typeof key === 'number' ? key : parseFloat(key);
                if (val >= this.tdsMin && val <= this.tdsMax) {
                    marksArray.push({ value: val, offset: this.valueToOffset(val), config: mark });
                }
            }
        }
        return marksArray.length ? marksArray : null;
    }
}
TDSSliderComponent.ɵfac = function TDSSliderComponent_Factory(t) { return new (t || TDSSliderComponent)(i0.ɵɵdirectiveInject(i1.TDSSliderService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.Platform), i0.ɵɵdirectiveInject(i3.Directionality, 8)); };
TDSSliderComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSSliderComponent, selectors: [["tds-slider"]], viewQuery: function TDSSliderComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 7);
        i0.ɵɵviewQuery(TDSSliderHandleComponent, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.slider = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.handlerComponents = _t);
    } }, hostBindings: function TDSSliderComponent_HostBindings(rf, ctx) { if (rf & 1) {
        i0.ɵɵlistener("keydown", function TDSSliderComponent_keydown_HostBindingHandler($event) { return ctx.onKeyDown($event); });
    } }, inputs: { tdsDisabled: "tdsDisabled", tdsDots: "tdsDots", tdsIncluded: "tdsIncluded", tdsRange: "tdsRange", tdsVertical: "tdsVertical", tdsReverse: "tdsReverse", tdsDefaultValue: "tdsDefaultValue", tdsMarks: "tdsMarks", tdsMax: "tdsMax", tdsMin: "tdsMin", tdsStep: "tdsStep", tdsTooltipVisible: "tdsTooltipVisible", tdsTooltipPlacement: "tdsTooltipPlacement", tdsTipFormatter: "tdsTipFormatter" }, outputs: { tdsOnAfterChange: "tdsOnAfterChange" }, exportAs: ["tdsSlider"], features: [i0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => TDSSliderComponent),
                multi: true
            },
            TDSSliderService
        ]), i0.ɵɵNgOnChangesFeature], decls: 7, vars: 30, consts: [[1, "tds-slider", "box-border", "relative", "cursor-pointer", "touch-none", "disabled:cursor-not-allowed", 3, "ngClass"], ["slider", ""], [1, "tds-slider-rail", "absolute", "bg-neutral-2-100", "dark:bg-d-neutral-2-300", "rounded-full", "transition-colors", "duration-300", 3, "ngClass"], [3, "vertical", "included", "offset", "length", "reverse", "dir"], [3, "vertical", "min", "max", "lowerBound", "upperBound", "marksArray", "included", "reverse", 4, "ngIf"], [3, "cursor-not-allowed", "cursor-pointer", "vertical", "reverse", "offset", "value", "active", "tooltipFormatter", "tooltipVisible", "tooltipPlacement", "dir", "focusin", 4, "ngFor", "ngForOf"], [3, "vertical", "min", "max", "lowerBound", "upperBound", "marksArray", "included", "reverse"], [3, "vertical", "reverse", "offset", "value", "active", "tooltipFormatter", "tooltipVisible", "tooltipPlacement", "dir", "focusin"]], template: function TDSSliderComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 0, 1);
        i0.ɵɵelement(2, "div", 2)(3, "tds-slider-track", 3);
        i0.ɵɵtemplate(4, TDSSliderComponent_tds_slider_step_4_Template, 1, 8, "tds-slider-step", 4);
        i0.ɵɵtemplate(5, TDSSliderComponent_tds_slider_handle_5_Template, 1, 13, "tds-slider-handle", 5);
        i0.ɵɵtemplate(6, TDSSliderComponent_tds_slider_marks_6_Template, 1, 8, "tds-slider-marks", 4);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵclassProp("tds-slider-rtl", ctx.dir === "rtl")("tds-slider-disabled", ctx.tdsDisabled)("cursor-not-allowed", ctx.tdsDisabled)("cursor-pointer", !ctx.tdsDisabled)("tds-slider-vertical", ctx.tdsVertical)("tds-slider-with-marks", ctx.marksArray);
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction3(23, _c1, !ctx.tdsVertical, ctx.tdsVertical, ctx.marksArray));
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction2(27, _c2, !ctx.tdsVertical, ctx.tdsVertical));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("vertical", ctx.tdsVertical)("included", ctx.tdsIncluded)("offset", ctx.track.offset)("length", ctx.track.length)("reverse", ctx.tdsReverse)("dir", ctx.dir);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx.marksArray);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngForOf", ctx.handles);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx.marksArray);
    } }, directives: [i4.NgClass, i5.TDSSliderTrackComponent, i3.Dir, i4.NgIf, i6.TDSSliderStepComponent, i4.NgForOf, i7.TDSSliderHandleComponent, i8.TDSSliderMarksComponent], encapsulation: 2, changeDetection: 0 });
__decorate([
    InputBoolean()
], TDSSliderComponent.prototype, "tdsDisabled", void 0);
__decorate([
    InputBoolean()
], TDSSliderComponent.prototype, "tdsDots", void 0);
__decorate([
    InputBoolean()
], TDSSliderComponent.prototype, "tdsIncluded", void 0);
__decorate([
    InputBoolean()
], TDSSliderComponent.prototype, "tdsRange", void 0);
__decorate([
    InputBoolean()
], TDSSliderComponent.prototype, "tdsVertical", void 0);
__decorate([
    InputBoolean()
], TDSSliderComponent.prototype, "tdsReverse", void 0);
__decorate([
    InputNumber()
], TDSSliderComponent.prototype, "tdsMax", void 0);
__decorate([
    InputNumber()
], TDSSliderComponent.prototype, "tdsMin", void 0);
__decorate([
    InputNumber()
], TDSSliderComponent.prototype, "tdsStep", void 0);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSSliderComponent, [{
        type: Component,
        args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                selector: 'tds-slider',
                exportAs: 'tdsSlider',
                preserveWhitespaces: false,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => TDSSliderComponent),
                        multi: true
                    },
                    TDSSliderService
                ],
                host: {
                    '(keydown)': 'onKeyDown($event)',
                },
                template: `
    <div
      #slider
      class="tds-slider box-border relative  cursor-pointer touch-none disabled:cursor-not-allowed"
      [class.tds-slider-rtl]="dir === 'rtl'"
      [class.tds-slider-disabled]="tdsDisabled"
      [class.cursor-not-allowed] ="tdsDisabled"
      [class.cursor-pointer] ="!tdsDisabled"
      [class.tds-slider-vertical]="tdsVertical"
      [class.tds-slider-with-marks]="marksArray"
      [ngClass]="{' mx-1.5 my-2.5 p-0 h-2':!tdsVertical,'w-5 h-full mx-2.5 my-1.5 px-1 py-0':tdsVertical,'mb-7':marksArray}"
    >
      <div class="tds-slider-rail absolute bg-neutral-2-100 dark:bg-d-neutral-2-300 rounded-full transition-colors duration-300 "
      [ngClass]="{'h-2 w-full':!tdsVertical,' w-2 h-full':tdsVertical}"
      ></div>
      <tds-slider-track
        [vertical]="tdsVertical"
        [included]="tdsIncluded"
        [offset]="track.offset!"
        [length]="track.length!"
        [reverse]="tdsReverse"
        [dir]="dir"
        
      ></tds-slider-track>
      <tds-slider-step
        *ngIf="marksArray"
        [vertical]="tdsVertical"
        [min]="tdsMin"
        [max]="tdsMax"
        [lowerBound]="$any(bounds.lower)"
        [upperBound]="$any(bounds.upper)"
        [marksArray]="marksArray"
        [included]="tdsIncluded"
        [reverse]="tdsReverse"
      ></tds-slider-step>
      <tds-slider-handle
      [class.cursor-not-allowed] ="tdsDisabled"
      [class.cursor-pointer] ="!tdsDisabled"
        *ngFor="let handle of handles; index as handleIndex"
        [vertical]="tdsVertical"
        [reverse]="tdsReverse"
        [offset]="handle.offset!"
        [value]="handle.value!"
        [active]="handle.active"
        [tooltipFormatter]="tdsTipFormatter"
        [tooltipVisible]="tdsTooltipVisible"
        [tooltipPlacement]="tdsTooltipPlacement"
        [dir]="dir"
        (focusin)="onHandleFocusIn(handleIndex)"
      ></tds-slider-handle>
      <tds-slider-marks
        *ngIf="marksArray"
        [vertical]="tdsVertical"
        [min]="tdsMin"
        [max]="tdsMax"
        [lowerBound]="$any(bounds.lower)"
        [upperBound]="$any(bounds.upper)"
        [marksArray]="marksArray"
        [included]="tdsIncluded"
        [reverse]="tdsReverse"
      ></tds-slider-marks>
    </div>
  `
            }]
    }], function () { return [{ type: i1.TDSSliderService }, { type: i0.ChangeDetectorRef }, { type: i2.Platform }, { type: i3.Directionality, decorators: [{
                type: Optional
            }] }]; }, { slider: [{
            type: ViewChild,
            args: ['slider', { static: true }]
        }], handlerComponents: [{
            type: ViewChildren,
            args: [TDSSliderHandleComponent]
        }], tdsDisabled: [{
            type: Input
        }], tdsDots: [{
            type: Input
        }], tdsIncluded: [{
            type: Input
        }], tdsRange: [{
            type: Input
        }], tdsVertical: [{
            type: Input
        }], tdsReverse: [{
            type: Input
        }], tdsDefaultValue: [{
            type: Input
        }], tdsMarks: [{
            type: Input
        }], tdsMax: [{
            type: Input
        }], tdsMin: [{
            type: Input
        }], tdsStep: [{
            type: Input
        }], tdsTooltipVisible: [{
            type: Input
        }], tdsTooltipPlacement: [{
            type: Input
        }], tdsTipFormatter: [{
            type: Input
        }], tdsOnAfterChange: [{
            type: Output
        }] }); })();
function getValueTypeNotMatchError() {
    return new Error(`The "tdsRange" can't match the "ngModel"'s type, please check these properties: "tdsRange", "ngModel", "tdsDefaultValue".`);
}
function isValueRange(value) {
    if (value instanceof Array) {
        return value.length === 2;
    }
    else {
        return false;
    }
}
function generateHandlers(amount) {
    return Array(amount)
        .fill(0)
        .map(() => ({ offset: null, value: null, active: false }));
}
/**
 * Check if value is valid and throw error if value-type/range not match.
 */
function assertValueValid(value, isRange) {
    if ((!isValueRange(value) && isNaN(value)) || (isValueRange(value) && value.some(v => isNaN(v)))) {
        return false;
    }
    return assertValueTypeMatch(value, isRange);
}
/**
 * Assert that if `this.tdsRange` is `true`, value is also a range, vice versa.
 */
function assertValueTypeMatch(value, isRange = false) {
    if (isValueRange(value) !== isRange) {
        throw getValueTypeNotMatchError();
    }
    return true;
}
function valuesEqual(valA, valB) {
    if (typeof valA !== typeof valB) {
        return false;
    }
    return isValueRange(valA) && isValueRange(valB) ? arraysEqual(valA, valB) : valA === valB;
}
//# sourceMappingURL=data:application/json;base64,