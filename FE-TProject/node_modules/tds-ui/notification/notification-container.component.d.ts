import { Direction } from '@angular/cdk/bidi';
import { ChangeDetectorRef } from '@angular/core';
import { NotificationConfig, TDSConfigService } from 'tds-ui/core/config';
import { TDSMNContainerComponent } from 'tds-ui/message';
import { TDSNotificationData, TDSNotificationDataOptions } from './typings';
import * as i0 from "@angular/core";
export declare class TDSNotificationContainerComponent extends TDSMNContainerComponent {
    dir: Direction;
    bottom?: string | null;
    top?: string | null;
    config: Required<NotificationConfig>;
    instances: Array<Required<TDSNotificationData>>;
    topLeftInstances: Array<Required<TDSNotificationData>>;
    topRightInstances: Array<Required<TDSNotificationData>>;
    bottomLeftInstances: Array<Required<TDSNotificationData>>;
    bottomRightInstances: Array<Required<TDSNotificationData>>;
    constructor(cdr: ChangeDetectorRef, tdsConfigService: TDSConfigService);
    create(notification: TDSNotificationData): Required<TDSNotificationData>;
    protected onCreate(instance: TDSNotificationData): Required<TDSNotificationData>;
    protected subscribeConfigChange(): void;
    protected updateConfig(): void;
    private replaceNotification;
    protected readyInstances(): void;
    protected mergeOptions(options?: TDSNotificationDataOptions): TDSNotificationDataOptions;
    static ɵfac: i0.ɵɵFactoryDeclaration<TDSNotificationContainerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TDSNotificationContainerComponent, "tds-notification-container", ["tdsNotificationContainer"], {}, {}, never, never>;
}
//# sourceMappingURL=notification-container.component.d.ts.map