import { Constructor } from './constructor';
import { ElementRef } from '@angular/core';
import { LooseAutocomplete } from 'tds-ui/shared/type-script';
export declare type TDSColor = 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'error' | 'black' | 'white' | 'red' | 'yellow' | 'green' | 'blue' | 'indigo' | 'purple' | 'pink' | 'amber' | 'sky' | 'lime' | 'teal' | 'orange';
/** Possible color palette values. */
export declare type TDSThemePalette = TDSColor | undefined;
export declare type TDSButtonColor = LooseAutocomplete<TDSColor | 'custom'>;
/** @docs-private */
export interface CanColor {
    /** Theme color palette for the component. */
    color: TDSThemePalette;
    /** Default color to fall back to if no value is set. */
    defaultColor: TDSThemePalette | undefined;
}
/** @docs-private */
export declare type CanColorCtor = Constructor<CanColor>;
/** @docs-private */
export interface HasElementRef {
    _elementRef: ElementRef;
}
/** Mixin to augment a directive with a `color` property. */
export declare function mixinColor<T extends Constructor<HasElementRef>>(base: T, defaultColor?: TDSThemePalette): CanColorCtor & T;
//# sourceMappingURL=color.d.ts.map