/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { BooleanInput, NumberInput } from '@angular/cdk/coercion';
import { Platform } from '@angular/cdk/platform';
import { AfterViewInit, ChangeDetectorRef, EventEmitter, NgZone, OnChanges, OnDestroy, Renderer2, SimpleChanges } from '@angular/core';
import { NgStyleInterface, TDSConfigKey, TDSConfigService } from 'tds-ui/core/config';
import { TDSScrollService } from 'tds-ui/core/services';
import { TDSSafeAny } from 'tds-ui/shared/utility';
import { TDSAnchorLinkComponent } from './anchor-link.component';
import * as i0 from "@angular/core";
export declare class TDSAnchorComponent implements OnDestroy, AfterViewInit, OnChanges {
    private doc;
    tdsConfigService: TDSConfigService;
    private scrollSrv;
    private cdr;
    private platform;
    private zone;
    private renderer;
    readonly _tdsModuleName: TDSConfigKey;
    static ngAcceptInputType_tdsAffix: BooleanInput;
    static ngAcceptInputType_tdsShowInkInFixed: BooleanInput;
    static ngAcceptInputType_tdsBounds: NumberInput;
    static ngAcceptInputType_tdsOffsetTop: NumberInput;
    private ink;
    tdsAffix: boolean;
    tdsShowInkInFixed: boolean;
    tdsBounds: number;
    tdsOffsetTop?: number;
    tdsTargetOffset?: number;
    tdsContainer?: string | HTMLElement;
    tdsCurrentAnchor?: string;
    readonly tdsClick: EventEmitter<string>;
    readonly tdsChange: EventEmitter<string>;
    readonly tdsScroll: EventEmitter<TDSAnchorLinkComponent>;
    visible: boolean;
    wrapperStyle: NgStyleInterface;
    container?: HTMLElement | Window;
    activeLink?: string;
    private links;
    private animating;
    private destroy$;
    private handleScrollTimeoutID;
    constructor(doc: TDSSafeAny, tdsConfigService: TDSConfigService, scrollSrv: TDSScrollService, cdr: ChangeDetectorRef, platform: Platform, zone: NgZone, renderer: Renderer2);
    registerLink(link: TDSAnchorLinkComponent): void;
    unregisterLink(link: TDSAnchorLinkComponent): void;
    private getContainer;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    private registerScrollEvent;
    handleScroll(): void;
    private clearActive;
    private setActive;
    private handleActive;
    private setVisible;
    handleScrollTo(linkComp: TDSAnchorLinkComponent): void;
    ngOnChanges(changes: SimpleChanges): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<TDSAnchorComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TDSAnchorComponent, "tds-anchor", ["tdsAnchor"], { "tdsAffix": "tdsAffix"; "tdsShowInkInFixed": "tdsShowInkInFixed"; "tdsBounds": "tdsBounds"; "tdsOffsetTop": "tdsOffsetTop"; "tdsTargetOffset": "tdsTargetOffset"; "tdsContainer": "tdsContainer"; "tdsCurrentAnchor": "tdsCurrentAnchor"; }, { "tdsClick": "tdsClick"; "tdsChange": "tdsChange"; "tdsScroll": "tdsScroll"; }, never, ["*"]>;
}
//# sourceMappingURL=anchor.component.d.ts.map