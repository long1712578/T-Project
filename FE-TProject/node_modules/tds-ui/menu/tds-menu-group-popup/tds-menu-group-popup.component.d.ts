import { ConnectedOverlayPositionChange } from '@angular/cdk/overlay';
import { ChangeDetectorRef, ElementRef, OnChanges, OnDestroy, OnInit, QueryList, SimpleChanges } from '@angular/core';
import { RouterLink, RouterLinkWithHref, Router, IsActiveMatchOptions } from '@angular/router';
import { Subject } from 'rxjs';
import { TDSMenuOptionDTO } from '../dto/tds-menu-option.dto';
import { TDSMenuDTO } from '../dto/tds-menu.dto';
import { TDSMenuService } from '../services/menu.service';
import { TDSMenuItemComponent } from '../tds-menu-item/tds-menu-item.component';
import * as i0 from "@angular/core";
export declare class TDSMenuGroupPopupComponent implements OnInit, OnChanges, OnDestroy {
    private _cdr;
    private tdsMenuService;
    private routerLink?;
    private routerLinkWithHref?;
    private router?;
    private destroy$;
    item: TDSMenuDTO;
    isSelected: boolean;
    inlineCollapsed: boolean;
    options: TDSMenuOptionDTO;
    open$: Subject<boolean>;
    listItem: QueryList<TDSMenuItemComponent>;
    cdkOverlayOrigin: ElementRef | null;
    listOfRouterLink: QueryList<RouterLink>;
    listOfRouterLinkWithHref: QueryList<RouterLinkWithHref>;
    IsActiveMatchOptions: IsActiveMatchOptions;
    position: string | undefined;
    triggerWidth: number | null;
    overlayPositions: import("@angular/cdk/overlay").ConnectionPositionPair[];
    mode: 'dark' | 'light';
    get uid(): string | undefined;
    constructor(_cdr: ChangeDetectorRef, tdsMenuService: TDSMenuService, routerLink?: RouterLink | undefined, routerLinkWithHref?: RouterLinkWithHref | undefined, router?: Router | undefined);
    ngOnInit(): void;
    ngAfterContentInit(): void;
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    onClickItem(e: Event): void;
    get hasListChild(): boolean;
    get hasAllHidden(): boolean;
    ngOnDestroy(): void;
    setSelectedState(value: boolean): void;
    private updateRouterActive;
    private hasActiveLinks;
    private isLinkActive;
    setSelectedStateListChildren(uid: string): void;
    get hasLink(): boolean;
    get hasIcon(): boolean;
    listenItemChangeSelected(): void;
    setTriggerWidth(): void;
    onPositionChange(position: ConnectedOverlayPositionChange): void;
    setOpenStateListChildren(value: boolean): void;
    setMouseState(value: boolean): void;
    private p_NavigateByUrl;
    static ɵfac: i0.ɵɵFactoryDeclaration<TDSMenuGroupPopupComponent, [null, null, { optional: true; }, { optional: true; }, { optional: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TDSMenuGroupPopupComponent, "tds-menu-group-popup", never, { "item": "item"; "isSelected": "isSelected"; "inlineCollapsed": "inlineCollapsed"; "options": "options"; }, {}, ["listItem"], ["*"]>;
}
//# sourceMappingURL=tds-menu-group-popup.component.d.ts.map