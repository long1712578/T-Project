import { Direction, Directionality } from '@angular/cdk/bidi';
import { BooleanInput, NumberInput } from '@angular/cdk/coercion';
import { ChangeDetectorRef, EventEmitter, OnChanges, OnDestroy, OnInit, Renderer2, SimpleChanges, TemplateRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { ButtonSize, NgClassType, TDSConfigKey, TDSConfigService } from "tds-ui/core/config";
import * as i0 from "@angular/core";
export declare class TDSRateComponent implements OnInit, OnDestroy, ControlValueAccessor, OnChanges {
    tdsConfigService: TDSConfigService;
    private renderer;
    private cdr;
    private directionality;
    readonly _tdsModuleName: TDSConfigKey;
    static ngAcceptInputType_allowClear: BooleanInput;
    static ngAcceptInputType_allowHalf: BooleanInput;
    static ngAcceptInputType_disabled: BooleanInput;
    static ngAcceptInputType_autoFocus: BooleanInput;
    static ngAcceptInputType_count: NumberInput;
    private ulElement?;
    allowClear: boolean;
    allowHalf: boolean;
    disabled: boolean;
    autoFocus: boolean;
    character: TemplateRef<void>;
    count: number;
    tooltips: string[];
    readonly tdsOnBlur: EventEmitter<FocusEvent>;
    readonly tdsOnFocus: EventEmitter<FocusEvent>;
    readonly tdsOnHoverChange: EventEmitter<number>;
    readonly tdsOnKeyDown: EventEmitter<KeyboardEvent>;
    classMap: NgClassType;
    starArray: number[];
    starStyleArray: NgClassType[];
    dir: Direction;
    private readonly destroy$;
    private hasHalf;
    private hoverValue;
    private isFocused;
    private _value;
    private _size;
    get size(): ButtonSize;
    set size(size: ButtonSize);
    get value(): number;
    set value(input: number);
    constructor(tdsConfigService: TDSConfigService, renderer: Renderer2, cdr: ChangeDetectorRef, directionality: Directionality);
    ngOnChanges(changes: SimpleChanges): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    onItemClick(index: number, isHalf: boolean): void;
    onItemHover(index: number, isHalf: boolean): void;
    onRateLeave(): void;
    onFocus(e: FocusEvent): void;
    onBlur(e: FocusEvent): void;
    focus(): void;
    blur(): void;
    onKeyDown(e: KeyboardEvent): void;
    private updateStarArray;
    checkIsHalf(value: number): boolean;
    private updateStarStyle;
    writeValue(value: number | null): void;
    setDisabledState(isDisabled: boolean): void;
    registerOnChange(fn: (_: number) => void): void;
    registerOnTouched(fn: () => void): void;
    onChange: (value: number) => void;
    onTouched: () => void;
    static ɵfac: i0.ɵɵFactoryDeclaration<TDSRateComponent, [null, null, null, { optional: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TDSRateComponent, "tds-rate", ["tdsRate"], { "allowClear": "allowClear"; "allowHalf": "allowHalf"; "disabled": "disabled"; "autoFocus": "autoFocus"; "character": "character"; "count": "count"; "tooltips": "tooltips"; "size": "size"; }, { "tdsOnBlur": "tdsOnBlur"; "tdsOnFocus": "tdsOnFocus"; "tdsOnHoverChange": "tdsOnHoverChange"; "tdsOnKeyDown": "tdsOnKeyDown"; }, never, never>;
}
//# sourceMappingURL=rate.component.d.ts.map