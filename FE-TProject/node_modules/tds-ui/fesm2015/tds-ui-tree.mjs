import * as i3$2 from '@angular/cdk/bidi';
import { BidiModule } from '@angular/cdk/bidi';
import * as i6 from '@angular/cdk/scrolling';
import { CdkVirtualScrollViewport, ScrollingModule } from '@angular/cdk/scrolling';
import * as i1 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i0 from '@angular/core';
import { Component, ChangeDetectionStrategy, Input, EventEmitter, Host, Optional, Output, Injectable, SkipSelf, forwardRef, ContentChild, ViewChild, NgModule } from '@angular/core';
import * as i3$1 from 'tds-ui/core/highlight';
import { TDSHighlightModule } from 'tds-ui/core/highlight';
import * as i4 from 'tds-ui/core/no-animation';
import { TDSNoAnimationModule } from 'tds-ui/core/no-animation';
import * as i2 from 'tds-ui/core/outlet';
import { TDSOutletModule } from 'tds-ui/core/outlet';
import * as i3 from 'tds-ui/progress-spinner';
import { TDSSpinnerModule } from 'tds-ui/progress-spinner';
import { __decorate } from 'tslib';
import { Subject, fromEvent } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { InputBoolean } from 'tds-ui/shared/utility';
import * as i1$1 from 'tds-ui/core/tree';
import { TDSTreeBaseService, TDSTreeBase, flattenTreeData, TDSTreeHigherOrderServiceToken } from 'tds-ui/core/tree';
export { TDSTreeNode } from 'tds-ui/core/tree';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { treeCollapseMotion } from 'tds-ui/core/animation';
import * as i2$1 from 'tds-ui/core/config';
import { WithConfig } from 'tds-ui/core/config';

class TDSTreeDropIndicatorComponent {
    constructor(cdr) {
        this.cdr = cdr;
        this.level = 1;
        this.direction = 'ltr';
        this.style = {};
    }
    ngOnChanges(_changes) {
        this.renderIndicator(this.dropPosition, this.direction);
    }
    renderIndicator(dropPosition, direction = 'ltr') {
        const offset = 4;
        const startPosition = direction === 'ltr' ? 'left' : 'right';
        const endPosition = direction === 'ltr' ? 'right' : 'left';
        const style = {
            [startPosition]: `${offset}px`,
            [endPosition]: '0px'
        };
        switch (dropPosition) {
            case -1:
                style.top = `${-3}px`;
                break;
            case 1:
                style.bottom = `${-3}px`;
                break;
            case 0:
                // dropPosition === 0
                style.bottom = `${-3}px`;
                style[startPosition] = `${offset + 24}px`;
                break;
            default:
                style.display = 'none';
                break;
        }
        this.style = style;
        this.cdr.markForCheck();
    }
}
TDSTreeDropIndicatorComponent.ɵfac = function TDSTreeDropIndicatorComponent_Factory(t) { return new (t || TDSTreeDropIndicatorComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
TDSTreeDropIndicatorComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSTreeDropIndicatorComponent, selectors: [["tds-tree-drop-indicator"]], hostVars: 4, hostBindings: function TDSTreeDropIndicatorComponent_HostBindings(rf, ctx) {
        if (rf & 2) {
            i0.ɵɵstyleMap(ctx.style);
            i0.ɵɵclassProp("tds-tree-drop-indicator", true);
        }
    }, inputs: { dropPosition: "dropPosition", level: "level", direction: "direction" }, exportAs: ["TDSTreeDropIndicator"], features: [i0.ɵɵNgOnChangesFeature], decls: 0, vars: 0, template: function TDSTreeDropIndicatorComponent_Template(rf, ctx) { }, encapsulation: 2, changeDetection: 0 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSTreeDropIndicatorComponent, [{
            type: Component,
            args: [{
                    selector: 'tds-tree-drop-indicator',
                    exportAs: 'TDSTreeDropIndicator',
                    template: ``,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false,
                    host: {
                        '[class.tds-tree-drop-indicator]': 'true',
                        '[style]': 'style'
                    }
                }]
        }], function () { return [{ type: i0.ChangeDetectorRef }]; }, { dropPosition: [{
                type: Input
            }], level: [{
                type: Input
            }], direction: [{
                type: Input
            }] });
})();

function TDSTreeIndentComponent_span_0_span_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 3);
        i0.ɵɵtext(1, " \u00A0 ");
        i0.ɵɵelementEnd();
    }
}
const _c0$5 = function (a0) { return { "inline-block w-7": a0 }; };
function TDSTreeIndentComponent_span_0_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 1);
        i0.ɵɵtemplate(1, TDSTreeIndentComponent_span_0_span_1_Template, 2, 0, "span", 2);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const i_r2 = ctx.index;
        const ctx_r0 = i0.ɵɵnextContext();
        i0.ɵɵclassProp("tds-tree-indent-unit", !ctx_r0.selectMode)("tds-select-tree-indent-unit", ctx_r0.selectMode)("tds-select-tree-indent-unit-start", ctx_r0.selectMode && ctx_r0.isStart[i_r2])("tds-tree-indent-unit-start", !ctx_r0.selectMode && ctx_r0.isStart[i_r2])("tds-select-tree-indent-unit-end", ctx_r0.selectMode && ctx_r0.isEnd[i_r2])("tds-tree-indent-unit-end", !ctx_r0.selectMode && ctx_r0.isEnd[i_r2]);
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(14, _c0$5, !ctx_r0.selectMode));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !(!ctx_r0.selectMode && ctx_r0.isEnd[i_r2]));
    }
}
class TDSTreeIndentComponent {
    constructor() {
        this.treeLevel = 0;
        this.isStart = [];
        this.isEnd = [];
        this.selectMode = false;
        this.listOfUnit = [];
    }
    ngOnChanges(changes) {
        const { treeLevel } = changes;
        if (treeLevel) {
            this.listOfUnit = [...new Array(treeLevel.currentValue || 0)];
        }
    }
}
TDSTreeIndentComponent.ɵfac = function TDSTreeIndentComponent_Factory(t) { return new (t || TDSTreeIndentComponent)(); };
TDSTreeIndentComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSTreeIndentComponent, selectors: [["tds-tree-indent"]], hostAttrs: [1, "items-stretch", "whitespace-nowrap", "select-none", "flex"], hostVars: 5, hostBindings: function TDSTreeIndentComponent_HostBindings(rf, ctx) {
        if (rf & 2) {
            i0.ɵɵattribute("aria-hidden", true);
            i0.ɵɵclassProp("tds-tree-indent", !ctx.selectMode)("tds-select-tree-indent", ctx.selectMode);
        }
    }, inputs: { treeLevel: "treeLevel", isStart: "isStart", isEnd: "isEnd", selectMode: "selectMode" }, exportAs: ["tdsTreeIndent"], features: [i0.ɵɵNgOnChangesFeature], decls: 1, vars: 1, consts: [["class", "relative ", 3, "tds-tree-indent-unit", "tds-select-tree-indent-unit", "tds-select-tree-indent-unit-start", "tds-tree-indent-unit-start", "tds-select-tree-indent-unit-end", "tds-tree-indent-unit-end", "ngClass", 4, "ngFor", "ngForOf"], [1, "relative", 3, "ngClass"], ["class", "absolute inset-0  -inset-y-1.5 border-l border-neutral-2-200", "style", "left:10px", 4, "ngIf"], [1, "absolute", "inset-0", "-inset-y-1.5", "border-l", "border-neutral-2-200", 2, "left", "10px"]], template: function TDSTreeIndentComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵtemplate(0, TDSTreeIndentComponent_span_0_Template, 2, 16, "span", 0);
        }
        if (rf & 2) {
            i0.ɵɵproperty("ngForOf", ctx.listOfUnit);
        }
    }, directives: [i1.NgForOf, i1.NgClass, i1.NgIf], encapsulation: 2, changeDetection: 0 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSTreeIndentComponent, [{
            type: Component,
            args: [{
                    selector: 'tds-tree-indent',
                    exportAs: 'tdsTreeIndent',
                    template: `
    <span      
      [class.tds-tree-indent-unit]="!selectMode"
      [class.tds-select-tree-indent-unit]="selectMode"
      [class.tds-select-tree-indent-unit-start]="selectMode && isStart[i]"
      [class.tds-tree-indent-unit-start]="!selectMode && isStart[i]"
      [class.tds-select-tree-indent-unit-end]="selectMode && isEnd[i]"
      [class.tds-tree-indent-unit-end]="!selectMode && isEnd[i]"
      [ngClass] ="{'inline-block w-7':!selectMode}"
      class="relative "
      *ngFor="let _ of listOfUnit; let i = index"
    >    
      <span class="absolute inset-0  -inset-y-1.5 border-l border-neutral-2-200" style="left:10px" *ngIf="!(!selectMode && isEnd[i])">
        &nbsp;        
      </span>
    </span>
  `,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false,
                    host: {
                        '[attr.aria-hidden]': 'true',
                        '[class.tds-tree-indent]': '!selectMode',
                        '[class.tds-select-tree-indent]': 'selectMode',
                        'class': "items-stretch whitespace-nowrap select-none flex"
                    }
                }]
        }], null, { treeLevel: [{
                type: Input
            }], isStart: [{
                type: Input
            }], isEnd: [{
                type: Input
            }], selectMode: [{
                type: Input
            }] });
})();

const _c0$4 = ["builtin", ""];
const _c1$2 = function (a0, a1) { return { "opacity-65 cursor-not-allowed": a0, "group cursor-pointer ": a1 }; };
function TDSTreeNodeBuiltinCheckboxComponent_label_0_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "label", 1)(1, "span", 2);
        i0.ɵɵelement(2, "span", 3);
        i0.ɵɵelementEnd()();
    }
    if (rf & 2) {
        const ctx_r0 = i0.ɵɵnextContext();
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction2(1, _c1$2, ctx_r0.disabled, !ctx_r0.disabled));
    }
}
function TDSTreeNodeBuiltinCheckboxComponent_label_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "label", 1)(1, "span", 4)(2, "span", 3);
        i0.ɵɵnamespaceSVG();
        i0.ɵɵelementStart(3, "svg", 5);
        i0.ɵɵelement(4, "path", 6);
        i0.ɵɵelementEnd()()()();
    }
    if (rf & 2) {
        const ctx_r1 = i0.ɵɵnextContext();
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction2(1, _c1$2, ctx_r1.disabled, !ctx_r1.disabled));
    }
}
const _c2 = function (a0, a1) { return { "opacity-65 cursor-not-allowed": a0, "group cursor-pointer": a1 }; };
function TDSTreeNodeBuiltinCheckboxComponent_label_2_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "label", 1)(1, "span", 4)(2, "span", 3);
        i0.ɵɵnamespaceSVG();
        i0.ɵɵelementStart(3, "svg", 7);
        i0.ɵɵelement(4, "path", 8);
        i0.ɵɵelementEnd()()()();
    }
    if (rf & 2) {
        const ctx_r2 = i0.ɵɵnextContext();
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction2(1, _c2, ctx_r2.disabled, !ctx_r2.disabled));
    }
}
class TDSTreeNodeBuiltinCheckboxComponent {
    constructor() {
        this.selectMode = false;
    }
    get checked() {
        return !this.selectMode && this.isChecked;
    }
    get indeterminate() {
        return !this.selectMode && this.isHalfChecked;
    }
    get disabled() {
        return !this.selectMode && (this.isDisabled || this.isDisableCheckbox);
    }
}
TDSTreeNodeBuiltinCheckboxComponent.ɵfac = function TDSTreeNodeBuiltinCheckboxComponent_Factory(t) { return new (t || TDSTreeNodeBuiltinCheckboxComponent)(); };
TDSTreeNodeBuiltinCheckboxComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSTreeNodeBuiltinCheckboxComponent, selectors: [["tds-tree-node-checkbox", "builtin", ""]], hostAttrs: [1, "flex", "items-center"], hostVars: 16, hostBindings: function TDSTreeNodeBuiltinCheckboxComponent_HostBindings(rf, ctx) {
        if (rf & 2) {
            i0.ɵɵclassProp("tds-select-tree-checkbox", ctx.selectMode)("tds-select-tree-checkbox-checked", ctx.selectMode && ctx.isChecked)("tds-select-tree-checkbox-indeterminate", ctx.selectMode && ctx.isHalfChecked)("tds-select-tree-checkbox-disabled", ctx.selectMode && (ctx.isDisabled || ctx.isDisableCheckbox))("tds-tree-checkbox", !ctx.selectMode)("tds-tree-checkbox-checked", !ctx.selectMode && ctx.isChecked)("tds-tree-checkbox-indeterminate", !ctx.selectMode && ctx.isHalfChecked)("tds-tree-checkbox-disabled", !ctx.selectMode && (ctx.isDisabled || ctx.isDisableCheckbox));
        }
    }, inputs: { selectMode: "selectMode", isChecked: "isChecked", isHalfChecked: "isHalfChecked", isDisabled: "isDisabled", isDisableCheckbox: "isDisableCheckbox" }, attrs: _c0$4, decls: 3, vars: 3, consts: [["class", "flex items-center mr-3", 3, "ngClass", 4, "ngIf"], [1, "flex", "items-center", "mr-3", 3, "ngClass"], [1, "p-0.5", "border", "rounded", "relative", "flex", "items-center", "justify-center", "box-content", "group-hover:ring", "group-hover:border-primary-1", "group-hover:ring-opacity-20", "group-hover:ring-primary-1", "bg-white"], [1, "h-3", "w-3"], [1, "p-0.5", "border", "rounded", "relative", "flex", "items-center", "justify-center", "box-content", "group-hover:ring", "group-hover:border-primary-1", "group-hover:ring-opacity-20", "group-hover:ring-primary-1", "bg-primary-1", "border-primary-1"], ["viewBox", "0 0 12 8", "fill", "none", "xmlns", "http://www.w3.org/2000/svg", "width", "12", "height", "12"], ["d", "M10.7307 0.90316C10.5348 0.707751 10.2694 0.598045 9.99275 0.598045C9.71605 0.598045 9.45061 0.707751 9.25471 0.90316L4.75471 5.40316L2.78572 3.4352C2.68953 3.33465 2.57426 3.25427 2.44661 3.19888C2.31895 3.14348 2.18152 3.11414 2.04237 3.11257C1.90323 3.111 1.76517 3.13728 1.6363 3.18978C1.50744 3.24229 1.39031 3.31999 1.29188 3.41836C1.19345 3.51672 1.11565 3.63376 1.06306 3.7626C1.01047 3.89143 0.984135 4.02946 0.985609 4.1686C0.987082 4.30775 1.01636 4.44521 1.07167 4.5729C1.12698 4.70059 1.20726 4.81594 1.30775 4.91219L4.01674 7.6202C4.21298 7.81573 4.47872 7.9255 4.75575 7.9255C5.03278 7.9255 5.29846 7.81573 5.4947 7.6202L10.7367 2.38021C10.8346 2.28323 10.9123 2.1678 10.9653 2.04061C11.0184 1.91343 11.0457 1.77698 11.0457 1.63918C11.0457 1.50138 11.0184 1.36494 10.9653 1.23775C10.9123 1.11057 10.8346 0.995193 10.7367 0.898216L10.7307 0.90316Z", "fill", "#FFFFFF"], ["xmlns", "http://www.w3.org/2000/svg", "viewBox", "0 0 12 4", "fill", "none", "width", "12", "height", "12"], ["fill-rule", "evenodd", "clip-rule", "evenodd", "d", "M0.600006 2C0.600006 1.33726 1.13726 0.800003 1.80001 0.800003L10.2 0.800003C10.8627 0.800003 11.4 1.33726 11.4 2C11.4 2.66274 10.8627 3.2 10.2 3.2L1.80001 3.2C1.13726 3.2 0.600006 2.66274 0.600006 2Z", "fill", "#FFFFFF"]], template: function TDSTreeNodeBuiltinCheckboxComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵtemplate(0, TDSTreeNodeBuiltinCheckboxComponent_label_0_Template, 3, 4, "label", 0);
            i0.ɵɵtemplate(1, TDSTreeNodeBuiltinCheckboxComponent_label_1_Template, 5, 4, "label", 0);
            i0.ɵɵtemplate(2, TDSTreeNodeBuiltinCheckboxComponent_label_2_Template, 5, 4, "label", 0);
        }
        if (rf & 2) {
            i0.ɵɵproperty("ngIf", !ctx.checked && !ctx.indeterminate);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.checked);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.indeterminate);
        }
    }, directives: [i1.NgIf, i1.NgClass], encapsulation: 2, changeDetection: 0 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSTreeNodeBuiltinCheckboxComponent, [{
            type: Component,
            args: [{ selector: 'tds-tree-node-checkbox[builtin]', changeDetection: ChangeDetectionStrategy.OnPush, preserveWhitespaces: false, host: {
                        '[class.tds-select-tree-checkbox]': `selectMode`,
                        '[class.tds-select-tree-checkbox-checked]': `selectMode && isChecked`,
                        '[class.tds-select-tree-checkbox-indeterminate]': `selectMode && isHalfChecked`,
                        '[class.tds-select-tree-checkbox-disabled]': `selectMode && (isDisabled || isDisableCheckbox)`,
                        '[class.tds-tree-checkbox]': `!selectMode`,
                        '[class.tds-tree-checkbox-checked]': `!selectMode && isChecked`,
                        '[class.tds-tree-checkbox-indeterminate]': `!selectMode && isHalfChecked`,
                        '[class.tds-tree-checkbox-disabled]': `!selectMode && (isDisabled || isDisableCheckbox)`,
                        class: "flex items-center"
                    }, template: "<!-- uncheck -->\r\n<label *ngIf=\"!checked && !indeterminate\" class=\"flex items-center mr-3\" [ngClass]=\"{'opacity-65 cursor-not-allowed':disabled,'group cursor-pointer ':!disabled}\">\r\n    <span\r\n        class=\"p-0.5 border rounded relative flex items-center justify-center box-content group-hover:ring group-hover:border-primary-1 group-hover:ring-opacity-20 group-hover:ring-primary-1 bg-white\">\r\n        <span class=\"h-3 w-3\">\r\n        </span>\r\n    </span>\r\n\r\n</label>\r\n<!-- check -->\r\n<label *ngIf=\"checked\" class=\"flex items-center mr-3\" [ngClass]=\"{'opacity-65 cursor-not-allowed':disabled,'group cursor-pointer ':!disabled}\">\r\n    <span\r\n        class=\"p-0.5 border rounded relative flex items-center justify-center box-content group-hover:ring group-hover:border-primary-1 group-hover:ring-opacity-20 group-hover:ring-primary-1 bg-primary-1 border-primary-1\">\r\n        <span class=\"h-3 w-3\">\r\n            <svg viewBox=\"0 0 12 8\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"12\">\r\n                <path\r\n                    d=\"M10.7307 0.90316C10.5348 0.707751 10.2694 0.598045 9.99275 0.598045C9.71605 0.598045 9.45061 0.707751 9.25471 0.90316L4.75471 5.40316L2.78572 3.4352C2.68953 3.33465 2.57426 3.25427 2.44661 3.19888C2.31895 3.14348 2.18152 3.11414 2.04237 3.11257C1.90323 3.111 1.76517 3.13728 1.6363 3.18978C1.50744 3.24229 1.39031 3.31999 1.29188 3.41836C1.19345 3.51672 1.11565 3.63376 1.06306 3.7626C1.01047 3.89143 0.984135 4.02946 0.985609 4.1686C0.987082 4.30775 1.01636 4.44521 1.07167 4.5729C1.12698 4.70059 1.20726 4.81594 1.30775 4.91219L4.01674 7.6202C4.21298 7.81573 4.47872 7.9255 4.75575 7.9255C5.03278 7.9255 5.29846 7.81573 5.4947 7.6202L10.7367 2.38021C10.8346 2.28323 10.9123 2.1678 10.9653 2.04061C11.0184 1.91343 11.0457 1.77698 11.0457 1.63918C11.0457 1.50138 11.0184 1.36494 10.9653 1.23775C10.9123 1.11057 10.8346 0.995193 10.7367 0.898216L10.7307 0.90316Z\"\r\n                    fill=\"#FFFFFF\"></path>\r\n            </svg>\r\n        </span>\r\n    </span>\r\n</label>\r\n\r\n\r\n<!-- indeterminate -->\r\n\r\n<label *ngIf=\"indeterminate\" class=\"flex items-center mr-3\" [ngClass]=\"{'opacity-65 cursor-not-allowed':disabled,'group cursor-pointer':!disabled}\">\r\n    <span\r\n        class=\"p-0.5 border rounded relative flex items-center justify-center box-content group-hover:ring group-hover:border-primary-1 group-hover:ring-opacity-20 group-hover:ring-primary-1 bg-primary-1 border-primary-1\">\r\n        <span class=\"h-3 w-3\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 12 4\" fill=\"none\" width=\"12\" height=\"12\">\r\n                <path fill-rule=\"evenodd\" clip-rule=\"evenodd\"\r\n                    d=\"M0.600006 2C0.600006 1.33726 1.13726 0.800003 1.80001 0.800003L10.2 0.800003C10.8627 0.800003 11.4 1.33726 11.4 2C11.4 2.66274 10.8627 3.2 10.2 3.2L1.80001 3.2C1.13726 3.2 0.600006 2.66274 0.600006 2Z\"\r\n                    fill=\"#FFFFFF\">\r\n                </path>\r\n            </svg>\r\n        </span>\r\n    </span>\r\n</label>" }]
        }], null, { selectMode: [{
                type: Input
            }], isChecked: [{
                type: Input
            }], isHalfChecked: [{
                type: Input
            }], isDisabled: [{
                type: Input
            }], isDisableCheckbox: [{
                type: Input
            }] });
})();

const _c0$3 = function (a0, a1) { return { "tdsi-arrow-down-fill": a0, "tdsi-arrow-right-fill": a1 }; };
function TDSTreeNodeSwitcherComponent_ng_container_0_ng_container_1_ng_container_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelement(1, "span", 4);
        i0.ɵɵelementContainerEnd();
    }
    if (rf & 2) {
        const ctx_r5 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction2(1, _c0$3, !ctx_r5.selectMode && ctx_r5.isSwitcherOpen, !(!ctx_r5.selectMode && ctx_r5.isSwitcherOpen)));
    }
}
const _c1$1 = function (a0, a1) { return { $implicit: a0, origin: a1 }; };
function TDSTreeNodeSwitcherComponent_ng_container_0_ng_container_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵtemplate(1, TDSTreeNodeSwitcherComponent_ng_container_0_ng_container_1_ng_container_1_Template, 2, 4, "ng-container", 3);
        i0.ɵɵelementContainerEnd();
    }
    if (rf & 2) {
        const ctx_r4 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("tdsStringTemplateOutlet", ctx_r4.expandedIcon)("tdsStringTemplateOutletContext", i0.ɵɵpureFunction2(2, _c1$1, ctx_r4.context, ctx_r4.context.origin));
    }
}
function TDSTreeNodeSwitcherComponent_ng_container_0_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵtemplate(1, TDSTreeNodeSwitcherComponent_ng_container_0_ng_container_1_Template, 2, 5, "ng-container", 2);
        i0.ɵɵelementContainerEnd();
    }
    if (rf & 2) {
        const ctx_r0 = i0.ɵɵnextContext();
        const _r2 = i0.ɵɵreference(3);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r0.isLoading)("ngIfElse", _r2);
    }
}
function TDSTreeNodeSwitcherComponent_ng_container_1_ng_container_1_ng_container_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainer(0);
    }
}
function TDSTreeNodeSwitcherComponent_ng_container_1_ng_container_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵtemplate(1, TDSTreeNodeSwitcherComponent_ng_container_1_ng_container_1_ng_container_1_Template, 1, 0, "ng-container", 3);
        i0.ɵɵelementContainerEnd();
    }
    if (rf & 2) {
        const ctx_r6 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("tdsStringTemplateOutlet", ctx_r6.expandedIcon)("tdsStringTemplateOutletContext", i0.ɵɵpureFunction2(2, _c1$1, ctx_r6.context, ctx_r6.context.origin));
    }
}
function TDSTreeNodeSwitcherComponent_ng_container_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵtemplate(1, TDSTreeNodeSwitcherComponent_ng_container_1_ng_container_1_Template, 2, 5, "ng-container", 2);
        i0.ɵɵelementContainerEnd();
    }
    if (rf & 2) {
        const ctx_r1 = i0.ɵɵnextContext();
        const _r2 = i0.ɵɵreference(3);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r1.isLoading)("ngIfElse", _r2);
    }
}
function TDSTreeNodeSwitcherComponent_ng_template_2_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "tds-spinner", 5);
    }
}
class TDSTreeNodeSwitcherComponent {
    constructor() {
        this.selectMode = false;
    }
    get isShowLineIcon() {
        return !this.isLeaf && !!this.showLine;
    }
    get isShowSwitchIcon() {
        return !this.isLeaf && !this.showLine;
    }
    get isSwitcherOpen() {
        return !!this.isExpanded && !this.isLeaf;
    }
    get isSwitcherClose() {
        return !this.isExpanded && !this.isLeaf;
    }
}
TDSTreeNodeSwitcherComponent.ɵfac = function TDSTreeNodeSwitcherComponent_Factory(t) { return new (t || TDSTreeNodeSwitcherComponent)(); };
TDSTreeNodeSwitcherComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSTreeNodeSwitcherComponent, selectors: [["tds-tree-node-switcher"]], hostAttrs: [1, "flex", "items-center"], hostVars: 16, hostBindings: function TDSTreeNodeSwitcherComponent_HostBindings(rf, ctx) {
        if (rf & 2) {
            i0.ɵɵclassProp("tds-select-tree-switcher", ctx.selectMode)("tds-select-tree-switcher-noop", ctx.selectMode && ctx.isLeaf)("tds-select-tree-switcher_open", ctx.selectMode && ctx.isSwitcherOpen)("tds-select-tree-switcher_close", ctx.selectMode && ctx.isSwitcherClose)("tds-tree-switcher", !ctx.selectMode)("tds-tree-switcher-noop", !ctx.selectMode && ctx.isLeaf)("tds-tree-switcher_open", !ctx.selectMode && ctx.isSwitcherOpen)("tds-tree-switcher_close", !ctx.selectMode && ctx.isSwitcherClose);
        }
    }, inputs: { showExpand: "showExpand", showLine: "showLine", expandedIcon: "expandedIcon", selectMode: "selectMode", context: "context", isLeaf: "isLeaf", isLoading: "isLoading", isExpanded: "isExpanded" }, decls: 4, vars: 2, consts: [[4, "ngIf"], ["loadingTemplate", ""], [4, "ngIf", "ngIfElse"], [4, "tdsStringTemplateOutlet", "tdsStringTemplateOutletContext"], [1, "text-neutral-1-900", "text-xl", "leading-none", "mr-2", "cursor-pointer", 3, "ngClass"], [1, "mr-2", "w-4", "h-4"]], template: function TDSTreeNodeSwitcherComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵtemplate(0, TDSTreeNodeSwitcherComponent_ng_container_0_Template, 2, 2, "ng-container", 0);
            i0.ɵɵtemplate(1, TDSTreeNodeSwitcherComponent_ng_container_1_Template, 2, 2, "ng-container", 0);
            i0.ɵɵtemplate(2, TDSTreeNodeSwitcherComponent_ng_template_2_Template, 1, 0, "ng-template", null, 1, i0.ɵɵtemplateRefExtractor);
        }
        if (rf & 2) {
            i0.ɵɵproperty("ngIf", ctx.isShowSwitchIcon);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.showLine);
        }
    }, directives: [i1.NgIf, i2.TDSStringTemplateOutletDirective, i1.NgClass, i3.TDSProgressSpinnerComponent], encapsulation: 2, changeDetection: 0 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSTreeNodeSwitcherComponent, [{
            type: Component,
            args: [{ selector: 'tds-tree-node-switcher', changeDetection: ChangeDetectionStrategy.OnPush, preserveWhitespaces: false, host: {
                        '[class.tds-select-tree-switcher]': 'selectMode',
                        '[class.tds-select-tree-switcher-noop]': 'selectMode && isLeaf',
                        '[class.tds-select-tree-switcher_open]': 'selectMode && isSwitcherOpen',
                        '[class.tds-select-tree-switcher_close]': 'selectMode && isSwitcherClose',
                        '[class.tds-tree-switcher]': '!selectMode',
                        '[class.tds-tree-switcher-noop]': '!selectMode && isLeaf',
                        '[class.tds-tree-switcher_open]': '!selectMode && isSwitcherOpen',
                        '[class.tds-tree-switcher_close]': '!selectMode && isSwitcherClose',
                        'class': 'flex items-center'
                    }, template: "<ng-container *ngIf=\"isShowSwitchIcon\">\r\n    <ng-container *ngIf=\"!isLoading; else loadingTemplate\">\r\n      <ng-container *tdsStringTemplateOutlet=\"expandedIcon; context: { $implicit: context, origin: context.origin }\">\r\n        <!-- <i\r\n          nz-icon\r\n          nzType=\"caret-down\"\r\n          [class.tds-select-tree-switcher-icon]=\"selectMode\"\r\n          [class.tds-tree-switcher-icon]=\"!selectMode\"\r\n        ></i> -->\r\n        <span class=\"text-neutral-1-900 text-xl leading-none mr-2 cursor-pointer\" [ngClass]=\"{'tdsi-arrow-down-fill':!selectMode && isSwitcherOpen,'tdsi-arrow-right-fill':!(!selectMode && isSwitcherOpen)}\"></span>\r\n      </ng-container>\r\n    </ng-container>\r\n  </ng-container>\r\n  <ng-container *ngIf=\"showLine\">\r\n    <ng-container *ngIf=\"!isLoading; else loadingTemplate\">\r\n      <ng-container *tdsStringTemplateOutlet=\"expandedIcon; context: { $implicit: context, origin: context.origin }\">\r\n        <!-- <i\r\n          *ngIf=\"isShowLineIcon\"\r\n          nz-icon\r\n          [nzType]=\"isSwitcherOpen ? 'minus-square' : 'plus-square'\"\r\n          class=\"tds-tree-switcher-line-icon\"\r\n        ></i>\r\n        <i *ngIf=\"!isShowLineIcon\" nz-icon nzType=\"file\" class=\"tds-tree-switcher-line-icon\"></i> -->\r\n      </ng-container>\r\n    </ng-container>\r\n  </ng-container>\r\n  <ng-template #loadingTemplate>\r\n    <tds-spinner class=\"mr-2 w-4 h-4\">                          \r\n    </tds-spinner>\r\n    \r\n  </ng-template>" }]
        }], null, { showExpand: [{
                type: Input
            }], showLine: [{
                type: Input
            }], expandedIcon: [{
                type: Input
            }], selectMode: [{
                type: Input
            }], context: [{
                type: Input
            }], isLeaf: [{
                type: Input
            }], isLoading: [{
                type: Input
            }], isExpanded: [{
                type: Input
            }] });
})();

function TDSTreeNodeTitleComponent_ng_template_0_Template(rf, ctx) { }
function TDSTreeNodeTitleComponent_ng_container_1_span_1_i_2_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "i", 6);
    }
    if (rf & 2) {
        const ctx_r4 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("ngClass", ctx_r4.icon);
    }
}
function TDSTreeNodeTitleComponent_ng_container_1_span_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "span")(1, "span");
        i0.ɵɵtemplate(2, TDSTreeNodeTitleComponent_ng_container_1_span_1_i_2_Template, 1, 1, "i", 5);
        i0.ɵɵelementEnd()();
    }
    if (rf & 2) {
        const ctx_r2 = i0.ɵɵnextContext(2);
        i0.ɵɵclassProp("tds-tree-icon__open", ctx_r2.isSwitcherOpen)("tds-tree-icon__close", ctx_r2.isSwitcherClose)("tds-tree-icon_loading", ctx_r2.isLoading)("tds-select-tree-iconEle", ctx_r2.selectMode)("tds-tree-iconEle", !ctx_r2.selectMode);
        i0.ɵɵadvance(1);
        i0.ɵɵclassProp("tds-select-tree-iconEle", ctx_r2.selectMode)("tds-select-tree-icon__customize", ctx_r2.selectMode)("tds-tree-iconEle", !ctx_r2.selectMode)("tds-tree-icon__customize", !ctx_r2.selectMode);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r2.icon);
    }
}
function TDSTreeNodeTitleComponent_ng_container_1_tds_tree_drop_indicator_4_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "tds-tree-drop-indicator", 7);
    }
    if (rf & 2) {
        const ctx_r3 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("dropPosition", ctx_r3.dragPosition)("level", ctx_r3.context.level);
    }
}
function TDSTreeNodeTitleComponent_ng_container_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵtemplate(1, TDSTreeNodeTitleComponent_ng_container_1_span_1_Template, 3, 19, "span", 2);
        i0.ɵɵelement(2, "span", 3);
        i0.ɵɵpipe(3, "tdsHighlight");
        i0.ɵɵtemplate(4, TDSTreeNodeTitleComponent_ng_container_1_tds_tree_drop_indicator_4_Template, 1, 2, "tds-tree-drop-indicator", 4);
        i0.ɵɵelementContainerEnd();
    }
    if (rf & 2) {
        const ctx_r1 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r1.icon && ctx_r1.showIcon);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("innerHTML", i0.ɵɵpipeBind4(3, 3, ctx_r1.title, ctx_r1.matchedValue, "i", "font-semibold"), i0.ɵɵsanitizeHtml);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r1.showIndicator);
    }
}
const _c0$2 = function (a0, a1) { return { $implicit: a0, origin: a1 }; };
class TDSTreeNodeTitleComponent {
    constructor(cdr) {
        this.cdr = cdr;
        this.treeTemplate = null;
        this.selectMode = false;
        // Drag indicator
        this.showIndicator = true;
    }
    get canDraggable() {
        return this.draggable && !this.isDisabled ? true : null;
    }
    get matchedValue() {
        return this.isMatched ? this.searchValue : '';
    }
    get isSwitcherOpen() {
        return this.isExpanded && !this.isLeaf;
    }
    get isSwitcherClose() {
        return !this.isExpanded && !this.isLeaf;
    }
    ngOnChanges(changes) {
        const { showIndicator, dragPosition } = changes;
        if (showIndicator || dragPosition) {
            this.cdr.markForCheck();
        }
    }
}
TDSTreeNodeTitleComponent.ɵfac = function TDSTreeNodeTitleComponent_Factory(t) { return new (t || TDSTreeNodeTitleComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
TDSTreeNodeTitleComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSTreeNodeTitleComponent, selectors: [["tds-tree-node-title"]], hostAttrs: [1, "flex", "items-center"], hostVars: 21, hostBindings: function TDSTreeNodeTitleComponent_HostBindings(rf, ctx) {
        if (rf & 2) {
            i0.ɵɵattribute("title", ctx.title)("draggable", ctx.canDraggable)("aria-grabbed", ctx.canDraggable);
            i0.ɵɵclassProp("draggable", ctx.canDraggable)("tds-select-tree-node-content-wrapper", ctx.selectMode)("tds-select-tree-node-content-wrapper-open", ctx.selectMode && ctx.isSwitcherOpen)("tds-select-tree-node-content-wrapper-close", ctx.selectMode && ctx.isSwitcherClose)("tds-select-tree-node-selected", ctx.selectMode && ctx.isSelected)("tds-tree-node-content-wrapper", !ctx.selectMode)("tds-tree-node-content-wrapper-open", !ctx.selectMode && ctx.isSwitcherOpen)("tds-tree-node-content-wrapper-close", !ctx.selectMode && ctx.isSwitcherClose)("tds-tree-node-selected", !ctx.selectMode && ctx.isSelected);
        }
    }, inputs: { searchValue: "searchValue", treeTemplate: "treeTemplate", draggable: "draggable", showIcon: "showIcon", selectMode: "selectMode", context: "context", icon: "icon", title: "title", isLoading: "isLoading", isSelected: "isSelected", isDisabled: "isDisabled", isMatched: "isMatched", isExpanded: "isExpanded", isLeaf: "isLeaf", showIndicator: "showIndicator", dragPosition: "dragPosition" }, features: [i0.ɵɵNgOnChangesFeature], decls: 2, vars: 6, consts: [[3, "ngTemplateOutlet", "ngTemplateOutletContext"], [4, "ngIf"], [3, "tds-tree-icon__open", "tds-tree-icon__close", "tds-tree-icon_loading", "tds-select-tree-iconEle", "tds-tree-iconEle", 4, "ngIf"], [1, "tds-tree-title", "text-body-2", "font-regular", "text-neutral-1-900", 3, "innerHTML"], [3, "dropPosition", "level", 4, "ngIf"], ["class", "text-neutral-1-900 text-xl leading-none mr-2", 3, "ngClass", 4, "ngIf"], [1, "text-neutral-1-900", "text-xl", "leading-none", "mr-2", 3, "ngClass"], [3, "dropPosition", "level"]], template: function TDSTreeNodeTitleComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵtemplate(0, TDSTreeNodeTitleComponent_ng_template_0_Template, 0, 0, "ng-template", 0);
            i0.ɵɵtemplate(1, TDSTreeNodeTitleComponent_ng_container_1_Template, 5, 8, "ng-container", 1);
        }
        if (rf & 2) {
            i0.ɵɵproperty("ngTemplateOutlet", ctx.treeTemplate)("ngTemplateOutletContext", i0.ɵɵpureFunction2(3, _c0$2, ctx.context, ctx.context.origin));
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", !ctx.treeTemplate);
        }
    }, directives: [i1.NgTemplateOutlet, i1.NgIf, i1.NgClass, TDSTreeDropIndicatorComponent], pipes: [i3$1.TDSHighlightPipe], encapsulation: 2, changeDetection: 0 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSTreeNodeTitleComponent, [{
            type: Component,
            args: [{
                    selector: 'tds-tree-node-title',
                    template: `
    <ng-template
      [ngTemplateOutlet]="treeTemplate"
      [ngTemplateOutletContext]="{ $implicit: context, origin: context.origin }"
    ></ng-template>
    <ng-container *ngIf="!treeTemplate">
      <span
        *ngIf="icon && showIcon"
        [class.tds-tree-icon__open]="isSwitcherOpen"
        [class.tds-tree-icon__close]="isSwitcherClose"
        [class.tds-tree-icon_loading]="isLoading"
        [class.tds-select-tree-iconEle]="selectMode"
        [class.tds-tree-iconEle]="!selectMode"
      >
        <span
          [class.tds-select-tree-iconEle]="selectMode"
          [class.tds-select-tree-icon__customize]="selectMode"
          [class.tds-tree-iconEle]="!selectMode"
          [class.tds-tree-icon__customize]="!selectMode"
        >
          <i  *ngIf="icon" [ngClass]="icon" class="text-neutral-1-900 text-xl leading-none mr-2"></i>
        </span>
      </span>
      <span class="tds-tree-title text-body-2 font-regular text-neutral-1-900" [innerHTML]="title | tdsHighlight: matchedValue:'i':'font-semibold'"></span>
      <tds-tree-drop-indicator
        *ngIf="showIndicator"
        [dropPosition]="dragPosition"
        [level]="context.level"
      ></tds-tree-drop-indicator>
    </ng-container>
  `,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false,
                    host: {
                        '[attr.title]': 'title',
                        '[attr.draggable]': 'canDraggable',
                        '[attr.aria-grabbed]': 'canDraggable',
                        '[class.draggable]': 'canDraggable',
                        '[class.tds-select-tree-node-content-wrapper]': `selectMode`,
                        '[class.tds-select-tree-node-content-wrapper-open]': `selectMode && isSwitcherOpen`,
                        '[class.tds-select-tree-node-content-wrapper-close]': `selectMode && isSwitcherClose`,
                        '[class.tds-select-tree-node-selected]': `selectMode && isSelected`,
                        '[class.tds-tree-node-content-wrapper]': `!selectMode`,
                        '[class.tds-tree-node-content-wrapper-open]': `!selectMode && isSwitcherOpen`,
                        '[class.tds-tree-node-content-wrapper-close]': `!selectMode && isSwitcherClose`,
                        '[class.tds-tree-node-selected]': `!selectMode && isSelected`,
                        'class': "flex items-center"
                    }
                }]
        }], function () { return [{ type: i0.ChangeDetectorRef }]; }, { searchValue: [{
                type: Input
            }], treeTemplate: [{
                type: Input
            }], draggable: [{
                type: Input
            }], showIcon: [{
                type: Input
            }], selectMode: [{
                type: Input
            }], context: [{
                type: Input
            }], icon: [{
                type: Input
            }], title: [{
                type: Input
            }], isLoading: [{
                type: Input
            }], isSelected: [{
                type: Input
            }], isDisabled: [{
                type: Input
            }], isMatched: [{
                type: Input
            }], isExpanded: [{
                type: Input
            }], isLeaf: [{
                type: Input
            }], showIndicator: [{
                type: Input
            }], dragPosition: [{
                type: Input
            }] });
})();

const _c0$1 = ["builtin", ""];
function TDSTreeNodeBuiltinComponent_tds_tree_node_switcher_1_Template(rf, ctx) {
    if (rf & 1) {
        const _r3 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "tds-tree-node-switcher", 4);
        i0.ɵɵlistener("click", function TDSTreeNodeBuiltinComponent_tds_tree_node_switcher_1_Template_tds_tree_node_switcher_click_0_listener($event) { i0.ɵɵrestoreView(_r3); const ctx_r2 = i0.ɵɵnextContext(); return ctx_r2.clickExpand($event); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r0 = i0.ɵɵnextContext();
        i0.ɵɵproperty("showExpand", ctx_r0.showExpand)("showLine", ctx_r0.showLine)("expandedIcon", ctx_r0.expandedIcon)("selectMode", ctx_r0.selectMode)("context", ctx_r0.treeNode)("isLeaf", ctx_r0.isLeaf)("isExpanded", ctx_r0.isExpanded)("isLoading", ctx_r0.isLoading);
    }
}
function TDSTreeNodeBuiltinComponent_tds_tree_node_checkbox_2_Template(rf, ctx) {
    if (rf & 1) {
        const _r5 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "tds-tree-node-checkbox", 5);
        i0.ɵɵlistener("click", function TDSTreeNodeBuiltinComponent_tds_tree_node_checkbox_2_Template_tds_tree_node_checkbox_click_0_listener($event) { i0.ɵɵrestoreView(_r5); const ctx_r4 = i0.ɵɵnextContext(); return ctx_r4.clickCheckBox($event); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r1 = i0.ɵɵnextContext();
        i0.ɵɵproperty("selectMode", ctx_r1.selectMode)("isChecked", ctx_r1.isChecked)("isHalfChecked", ctx_r1.isHalfChecked)("isDisabled", ctx_r1.isDisabled)("isDisableCheckbox", ctx_r1.isDisableCheckbox);
    }
}
class TDSTreeNodeBuiltinComponent {
    constructor(tdsTreeService, ngZone, renderer, elementRef, cdr, tdsnoAnimation) {
        this.tdsTreeService = tdsTreeService;
        this.ngZone = ngZone;
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.cdr = cdr;
        this.tdsnoAnimation = tdsnoAnimation;
        /**
         * for global property
         */
        this.icon = '';
        this.title = '';
        this.isLoading = false;
        this.isSelected = false;
        this.isDisabled = false;
        this.isMatched = false;
        this.isStart = [];
        this.isEnd = [];
        this.hideUnMatched = false;
        this.noAnimation = false;
        this.selectMode = false;
        this.showIcon = false;
        this.treeTemplate = null;
        this.searchValue = '';
        this.draggable = false;
        this.onClick = new EventEmitter();
        this.onDblClick = new EventEmitter();
        this.onContextMenu = new EventEmitter();
        this.onCheckBoxChange = new EventEmitter();
        this.onExpandChange = new EventEmitter();
        this.onDragStart = new EventEmitter();
        this.onDragEnter = new EventEmitter();
        this.onDragOver = new EventEmitter();
        this.onDragLeave = new EventEmitter();
        this.onDrop = new EventEmitter();
        this.tdsOnDragEnd = new EventEmitter();
        /**
         * drag var
         */
        this.destroy$ = new Subject();
        this.dragPos = 2;
        this.dragPosClass = {
            0: 'drag-over',
            1: 'drag-over-gap-bottom',
            '-1': 'drag-over-gap-top'
        };
        this.showIndicator = false;
    }
    /**
     * default set
     */
    get displayStyle() {
        // to hide unmatched nodes
        return this.searchValue && this.hideUnMatched && !this.isMatched && !this.isExpanded && this.canHide
            ? 'none'
            : '';
    }
    get isSwitcherOpen() {
        return this.isExpanded && !this.isLeaf;
    }
    get isSwitcherClose() {
        return !this.isExpanded && !this.isLeaf;
    }
    onMousedown(event) {
        if (this.selectMode) {
            event.preventDefault();
        }
    }
    /**
     * collapse node
     *
     * @param event
     */
    clickExpand(event) {
        event.preventDefault();
        if (!this.isLoading && !this.isLeaf) {
            // set async state
            if (this.asyncData && this.treeNode.children.length === 0 && !this.isExpanded) {
                this.treeNode.isLoading = true;
            }
            this.treeNode.setExpanded(!this.isExpanded);
        }
        this.tdsTreeService.setExpandedNodeList(this.treeNode);
        const eventNext = this.tdsTreeService.formatEvent('expand', this.treeNode, event);
        this.onExpandChange.emit(eventNext);
    }
    clickSelect(event) {
        event.preventDefault();
        if (this.isSelectable && !this.isDisabled) {
            this.treeNode.isSelected = !this.treeNode.isSelected;
        }
        this.tdsTreeService.setSelectedNodeList(this.treeNode);
        const eventNext = this.tdsTreeService.formatEvent('click', this.treeNode, event);
        this.onClick.emit(eventNext);
    }
    dblClick(event) {
        event.preventDefault();
        const eventNext = this.tdsTreeService.formatEvent('dblclick', this.treeNode, event);
        this.onDblClick.emit(eventNext);
    }
    contextMenu(event) {
        event.preventDefault();
        const eventNext = this.tdsTreeService.formatEvent('contextmenu', this.treeNode, event);
        this.onContextMenu.emit(eventNext);
    }
    /**
     * check node
     *
     * @param event
     */
    clickCheckBox(event) {
        event.preventDefault();
        // return if node is disabled
        if (this.isDisabled || this.isDisableCheckbox) {
            return;
        }
        this.treeNode.isChecked = !this.treeNode.isChecked;
        this.treeNode.isHalfChecked = false;
        this.tdsTreeService.setCheckedNodeList(this.treeNode);
        const eventNext = this.tdsTreeService.formatEvent('check', this.treeNode, event);
        this.onCheckBoxChange.emit(eventNext);
    }
    clearDragClass() {
        const dragClass = ['drag-over-gap-top', 'drag-over-gap-bottom', 'drag-over', 'drop-target'];
        dragClass.forEach(e => {
            this.renderer.removeClass(this.elementRef.nativeElement, e);
        });
    }
    /**
     * drag event
     *
     * @param e
     */
    handleDragStart(e) {
        try {
            // ie throw error
            // firefox-need-it
            e.dataTransfer.setData('text/plain', this.treeNode.key);
        }
        catch (error) {
            // empty
        }
        this.tdsTreeService.setSelectedNode(this.treeNode);
        const eventNext = this.tdsTreeService.formatEvent('dragstart', this.treeNode, e);
        this.onDragStart.emit(eventNext);
    }
    handleDragEnter(e) {
        var _a;
        e.preventDefault();
        // reset position
        this.showIndicator = this.treeNode.key !== ((_a = this.tdsTreeService.getSelectedNode()) === null || _a === void 0 ? void 0 : _a.key);
        this.renderIndicator(2);
        this.ngZone.run(() => {
            const eventNext = this.tdsTreeService.formatEvent('dragenter', this.treeNode, e);
            this.onDragEnter.emit(eventNext);
        });
    }
    handleDragOver(e) {
        e.preventDefault();
        const dropPosition = this.tdsTreeService.calcDropPosition(e);
        if (this.dragPos !== dropPosition) {
            this.clearDragClass();
            this.renderIndicator(dropPosition);
            // leaf node will pass
            if (!(this.dragPos === 0 && this.isLeaf)) {
                this.renderer.addClass(this.elementRef.nativeElement, this.dragPosClass[this.dragPos]);
                this.renderer.addClass(this.elementRef.nativeElement, 'drop-target');
            }
        }
        const eventNext = this.tdsTreeService.formatEvent('dragover', this.treeNode, e);
        this.onDragOver.emit(eventNext);
    }
    handleDragLeave(e) {
        e.preventDefault();
        this.renderIndicator(2);
        this.clearDragClass();
        const eventNext = this.tdsTreeService.formatEvent('dragleave', this.treeNode, e);
        this.onDragLeave.emit(eventNext);
    }
    handleDragDrop(e) {
        e.preventDefault();
        e.stopPropagation();
        this.ngZone.run(() => {
            this.showIndicator = false;
            this.clearDragClass();
            const node = this.tdsTreeService.getSelectedNode();
            if (!node || (node && node.key === this.treeNode.key) || (this.dragPos === 0 && this.isLeaf)) {
                return;
            }
            // pass if node is leafNo
            const dropEvent = this.tdsTreeService.formatEvent('drop', this.treeNode, e);
            const dragEndEvent = this.tdsTreeService.formatEvent('dragend', this.treeNode, e);
            if (this.beforeDrop) {
                this.beforeDrop({
                    dragNode: this.tdsTreeService.getSelectedNode(),
                    node: this.treeNode,
                    pos: this.dragPos
                }).subscribe((canDrop) => {
                    if (canDrop) {
                        this.tdsTreeService.dropAndApply(this.treeNode, this.dragPos);
                    }
                    this.onDrop.emit(dropEvent);
                    this.tdsOnDragEnd.emit(dragEndEvent);
                });
            }
            else if (this.treeNode) {
                this.tdsTreeService.dropAndApply(this.treeNode, this.dragPos);
                this.onDrop.emit(dropEvent);
            }
        });
    }
    handleDragEnd(e) {
        e.preventDefault();
        this.ngZone.run(() => {
            // if user do not custom beforeDrop
            if (!this.beforeDrop) {
                const eventNext = this.tdsTreeService.formatEvent('dragend', this.treeNode, e);
                this.tdsOnDragEnd.emit(eventNext);
            }
        });
    }
    /**
     * Listening to dragging events.
     */
    handDragEvent() {
        this.ngZone.runOutsideAngular(() => {
            if (this.draggable) {
                const nativeElement = this.elementRef.nativeElement;
                this.destroy$ = new Subject();
                fromEvent(nativeElement, 'dragstart')
                    .pipe(takeUntil(this.destroy$))
                    .subscribe((e) => this.handleDragStart(e));
                fromEvent(nativeElement, 'dragenter')
                    .pipe(takeUntil(this.destroy$))
                    .subscribe((e) => this.handleDragEnter(e));
                fromEvent(nativeElement, 'dragover')
                    .pipe(takeUntil(this.destroy$))
                    .subscribe((e) => this.handleDragOver(e));
                fromEvent(nativeElement, 'dragleave')
                    .pipe(takeUntil(this.destroy$))
                    .subscribe((e) => this.handleDragLeave(e));
                fromEvent(nativeElement, 'drop')
                    .pipe(takeUntil(this.destroy$))
                    .subscribe((e) => this.handleDragDrop(e));
                fromEvent(nativeElement, 'dragend')
                    .pipe(takeUntil(this.destroy$))
                    .subscribe((e) => this.handleDragEnd(e));
            }
            else {
                this.destroy$.next();
                this.destroy$.complete();
            }
        });
    }
    markForCheck() {
        this.cdr.markForCheck();
    }
    ngOnInit() {
        this.treeNode.component = this;
    }
    ngOnChanges(changes) {
        const { draggable } = changes;
        if (draggable) {
            this.handDragEvent();
        }
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    renderIndicator(dropPosition) {
        this.ngZone.run(() => {
            var _a;
            this.showIndicator = dropPosition !== 2;
            if (this.treeNode.key === ((_a = this.tdsTreeService.getSelectedNode()) === null || _a === void 0 ? void 0 : _a.key) || (dropPosition === 0 && this.isLeaf)) {
                return;
            }
            this.dragPos = dropPosition;
            this.cdr.markForCheck();
        });
    }
}
TDSTreeNodeBuiltinComponent.ɵfac = function TDSTreeNodeBuiltinComponent_Factory(t) { return new (t || TDSTreeNodeBuiltinComponent)(i0.ɵɵdirectiveInject(i1$1.TDSTreeBaseService), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i4.TDSNoAnimationDirective, 9)); };
TDSTreeNodeBuiltinComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSTreeNodeBuiltinComponent, selectors: [["tds-tree-node", "builtin", ""]], hostAttrs: [1, "flex", "items-stretch", "py-1.5", "hover:bg-neutral-3-50"], hostVars: 36, hostBindings: function TDSTreeNodeBuiltinComponent_HostBindings(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵlistener("mousedown", function TDSTreeNodeBuiltinComponent_mousedown_HostBindingHandler($event) { return ctx.onMousedown($event); });
        }
        if (rf & 2) {
            i0.ɵɵstyleProp("display", ctx.displayStyle);
            i0.ɵɵclassProp("tds-select-tree-treenode", ctx.selectMode)("tds-select-tree-treenode-disabled", ctx.selectMode && ctx.isDisabled)("tds-select-tree-treenode-switcher-open", ctx.selectMode && ctx.isSwitcherOpen)("tds-select-tree-treenode-switcher-close", ctx.selectMode && ctx.isSwitcherClose)("tds-select-tree-treenode-checkbox-checked", ctx.selectMode && ctx.isChecked)("tds-select-tree-treenode-checkbox-indeterminate", ctx.selectMode && ctx.isHalfChecked)("tds-select-tree-treenode-selected", ctx.selectMode && ctx.isSelected)("tds-select-tree-treenode-loading", ctx.selectMode && ctx.isLoading)("tds-tree-treenode", !ctx.selectMode)("tds-tree-treenode-disabled", !ctx.selectMode && ctx.isDisabled)("tds-tree-treenode-switcher-open", !ctx.selectMode && ctx.isSwitcherOpen)("tds-tree-treenode-switcher-close", !ctx.selectMode && ctx.isSwitcherClose)("tds-tree-treenode-checkbox-checked", !ctx.selectMode && ctx.isChecked)("tds-tree-treenode-checkbox-indeterminate", !ctx.selectMode && ctx.isHalfChecked)("tds-tree-treenode-selected", !ctx.selectMode && ctx.isSelected)("tds-tree-treenode-loading", !ctx.selectMode && ctx.isLoading)("opacity-65", !ctx.selectMode && ctx.isDisabled);
        }
    }, inputs: { icon: "icon", title: "title", isLoading: "isLoading", isSelected: "isSelected", isDisabled: "isDisabled", isMatched: "isMatched", isExpanded: "isExpanded", isLeaf: "isLeaf", isChecked: "isChecked", isHalfChecked: "isHalfChecked", isDisableCheckbox: "isDisableCheckbox", isSelectable: "isSelectable", canHide: "canHide", isStart: "isStart", isEnd: "isEnd", treeNode: "treeNode", showLine: "showLine", showExpand: "showExpand", checkable: "checkable", asyncData: "asyncData", hideUnMatched: "hideUnMatched", noAnimation: "noAnimation", selectMode: "selectMode", showIcon: "showIcon", expandedIcon: "expandedIcon", treeTemplate: "treeTemplate", beforeDrop: "beforeDrop", searchValue: "searchValue", draggable: "draggable" }, outputs: { onClick: "onClick", onDblClick: "onDblClick", onContextMenu: "onContextMenu", onCheckBoxChange: "onCheckBoxChange", onExpandChange: "onExpandChange", onDragStart: "onDragStart", onDragEnter: "onDragEnter", onDragOver: "onDragOver", onDragLeave: "onDragLeave", onDrop: "onDrop", tdsOnDragEnd: "tdsOnDragEnd" }, exportAs: ["tdsTreeBuiltinNode"], features: [i0.ɵɵNgOnChangesFeature], attrs: _c0$1, decls: 4, vars: 22, consts: [[3, "treeLevel", "selectMode", "isStart", "isEnd"], [3, "showExpand", "showLine", "expandedIcon", "selectMode", "context", "isLeaf", "isExpanded", "isLoading", "click", 4, "ngIf"], ["builtin", "", 3, "selectMode", "isChecked", "isHalfChecked", "isDisabled", "isDisableCheckbox", "click", 4, "ngIf"], [3, "icon", "title", "isLoading", "isSelected", "isDisabled", "isMatched", "isExpanded", "isLeaf", "searchValue", "treeTemplate", "draggable", "showIcon", "selectMode", "context", "showIndicator", "dragPosition", "dblclick", "click", "contextmenu"], [3, "showExpand", "showLine", "expandedIcon", "selectMode", "context", "isLeaf", "isExpanded", "isLoading", "click"], ["builtin", "", 3, "selectMode", "isChecked", "isHalfChecked", "isDisabled", "isDisableCheckbox", "click"]], template: function TDSTreeNodeBuiltinComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelement(0, "tds-tree-indent", 0);
            i0.ɵɵtemplate(1, TDSTreeNodeBuiltinComponent_tds_tree_node_switcher_1_Template, 1, 8, "tds-tree-node-switcher", 1);
            i0.ɵɵtemplate(2, TDSTreeNodeBuiltinComponent_tds_tree_node_checkbox_2_Template, 1, 5, "tds-tree-node-checkbox", 2);
            i0.ɵɵelementStart(3, "tds-tree-node-title", 3);
            i0.ɵɵlistener("dblclick", function TDSTreeNodeBuiltinComponent_Template_tds_tree_node_title_dblclick_3_listener($event) { return ctx.dblClick($event); })("click", function TDSTreeNodeBuiltinComponent_Template_tds_tree_node_title_click_3_listener($event) { return ctx.clickSelect($event); })("contextmenu", function TDSTreeNodeBuiltinComponent_Template_tds_tree_node_title_contextmenu_3_listener($event) { return ctx.contextMenu($event); });
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵproperty("treeLevel", ctx.treeNode.level)("selectMode", ctx.selectMode)("isStart", ctx.isStart)("isEnd", ctx.isEnd);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.showExpand);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.checkable);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("icon", ctx.icon)("title", ctx.title)("isLoading", ctx.isLoading)("isSelected", ctx.isSelected)("isDisabled", ctx.isDisabled)("isMatched", ctx.isMatched)("isExpanded", ctx.isExpanded)("isLeaf", ctx.isLeaf)("searchValue", ctx.searchValue)("treeTemplate", ctx.treeTemplate)("draggable", ctx.draggable)("showIcon", ctx.showIcon)("selectMode", ctx.selectMode)("context", ctx.treeNode)("showIndicator", ctx.showIndicator)("dragPosition", ctx.dragPos);
        }
    }, directives: [TDSTreeIndentComponent, i1.NgIf, TDSTreeNodeSwitcherComponent, TDSTreeNodeBuiltinCheckboxComponent, TDSTreeNodeTitleComponent], encapsulation: 2, changeDetection: 0 });
__decorate([
    InputBoolean()
], TDSTreeNodeBuiltinComponent.prototype, "showLine", void 0);
__decorate([
    InputBoolean()
], TDSTreeNodeBuiltinComponent.prototype, "showExpand", void 0);
__decorate([
    InputBoolean()
], TDSTreeNodeBuiltinComponent.prototype, "checkable", void 0);
__decorate([
    InputBoolean()
], TDSTreeNodeBuiltinComponent.prototype, "asyncData", void 0);
__decorate([
    InputBoolean()
], TDSTreeNodeBuiltinComponent.prototype, "hideUnMatched", void 0);
__decorate([
    InputBoolean()
], TDSTreeNodeBuiltinComponent.prototype, "noAnimation", void 0);
__decorate([
    InputBoolean()
], TDSTreeNodeBuiltinComponent.prototype, "selectMode", void 0);
__decorate([
    InputBoolean()
], TDSTreeNodeBuiltinComponent.prototype, "showIcon", void 0);
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSTreeNodeBuiltinComponent, [{
            type: Component,
            args: [{
                    selector: 'tds-tree-node[builtin]',
                    exportAs: 'tdsTreeBuiltinNode',
                    template: `
    <tds-tree-indent
      [treeLevel]="treeNode.level"
      [selectMode]="selectMode"
      [isStart]="isStart"
      [isEnd]="isEnd"
    ></tds-tree-indent>
    <tds-tree-node-switcher
      *ngIf="showExpand"
      [showExpand]="showExpand"
      [showLine]="showLine"
      [expandedIcon]="expandedIcon"
      [selectMode]="selectMode"
      [context]="treeNode"
      [isLeaf]="isLeaf"
      [isExpanded]="isExpanded"
      [isLoading]="isLoading"
      (click)="clickExpand($event)"
    ></tds-tree-node-switcher>
    <tds-tree-node-checkbox
      builtin
      *ngIf="checkable"
      (click)="clickCheckBox($event)"
      [selectMode]="selectMode"
      [isChecked]="isChecked"
      [isHalfChecked]="isHalfChecked"
      [isDisabled]="isDisabled"
      [isDisableCheckbox]="isDisableCheckbox"
    ></tds-tree-node-checkbox>
    <tds-tree-node-title
      [icon]="icon"
      [title]="title"
      [isLoading]="isLoading"
      [isSelected]="isSelected"
      [isDisabled]="isDisabled"
      [isMatched]="isMatched"
      [isExpanded]="isExpanded"
      [isLeaf]="isLeaf"
      [searchValue]="searchValue"
      [treeTemplate]="treeTemplate"
      [draggable]="draggable"
      [showIcon]="showIcon"
      [selectMode]="selectMode"
      [context]="treeNode"
      [showIndicator]="showIndicator"
      [dragPosition]="dragPos"
      (dblclick)="dblClick($event)"
      (click)="clickSelect($event)"
      (contextmenu)="contextMenu($event)"
    ></tds-tree-node-title>
  `,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false,
                    host: {
                        '[class.tds-select-tree-treenode]': `selectMode`,
                        '[class.tds-select-tree-treenode-disabled]': `selectMode && isDisabled`,
                        '[class.tds-select-tree-treenode-switcher-open]': `selectMode && isSwitcherOpen`,
                        '[class.tds-select-tree-treenode-switcher-close]': `selectMode && isSwitcherClose`,
                        '[class.tds-select-tree-treenode-checkbox-checked]': `selectMode && isChecked`,
                        '[class.tds-select-tree-treenode-checkbox-indeterminate]': `selectMode && isHalfChecked`,
                        '[class.tds-select-tree-treenode-selected]': `selectMode && isSelected`,
                        '[class.tds-select-tree-treenode-loading]': `selectMode && isLoading`,
                        '[class.tds-tree-treenode]': `!selectMode`,
                        '[class.tds-tree-treenode-disabled]': `!selectMode && isDisabled`,
                        '[class.tds-tree-treenode-switcher-open]': `!selectMode && isSwitcherOpen`,
                        '[class.tds-tree-treenode-switcher-close]': `!selectMode && isSwitcherClose`,
                        '[class.tds-tree-treenode-checkbox-checked]': `!selectMode && isChecked`,
                        '[class.tds-tree-treenode-checkbox-indeterminate]': `!selectMode && isHalfChecked`,
                        '[class.tds-tree-treenode-selected]': `!selectMode && isSelected`,
                        '[class.tds-tree-treenode-loading]': `!selectMode && isLoading`,
                        '[style.display]': 'displayStyle',
                        '(mousedown)': 'onMousedown($event)',
                        'class': 'flex items-stretch py-1.5 hover:bg-neutral-3-50',
                        '[class.opacity-65]': `!selectMode && isDisabled`,
                    }
                }]
        }], function () {
        return [{ type: i1$1.TDSTreeBaseService }, { type: i0.NgZone }, { type: i0.Renderer2 }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i4.TDSNoAnimationDirective, decorators: [{
                        type: Host
                    }, {
                        type: Optional
                    }] }];
    }, { icon: [{
                type: Input
            }], title: [{
                type: Input
            }], isLoading: [{
                type: Input
            }], isSelected: [{
                type: Input
            }], isDisabled: [{
                type: Input
            }], isMatched: [{
                type: Input
            }], isExpanded: [{
                type: Input
            }], isLeaf: [{
                type: Input
            }], isChecked: [{
                type: Input
            }], isHalfChecked: [{
                type: Input
            }], isDisableCheckbox: [{
                type: Input
            }], isSelectable: [{
                type: Input
            }], canHide: [{
                type: Input
            }], isStart: [{
                type: Input
            }], isEnd: [{
                type: Input
            }], treeNode: [{
                type: Input
            }], showLine: [{
                type: Input
            }], showExpand: [{
                type: Input
            }], checkable: [{
                type: Input
            }], asyncData: [{
                type: Input
            }], hideUnMatched: [{
                type: Input
            }], noAnimation: [{
                type: Input
            }], selectMode: [{
                type: Input
            }], showIcon: [{
                type: Input
            }], expandedIcon: [{
                type: Input
            }], treeTemplate: [{
                type: Input
            }], beforeDrop: [{
                type: Input
            }], searchValue: [{
                type: Input
            }], draggable: [{
                type: Input
            }], onClick: [{
                type: Output
            }], onDblClick: [{
                type: Output
            }], onContextMenu: [{
                type: Output
            }], onCheckBoxChange: [{
                type: Output
            }], onExpandChange: [{
                type: Output
            }], onDragStart: [{
                type: Output
            }], onDragEnter: [{
                type: Output
            }], onDragOver: [{
                type: Output
            }], onDragLeave: [{
                type: Output
            }], onDrop: [{
                type: Output
            }], tdsOnDragEnd: [{
                type: Output
            }] });
})();

class TDSTreeService extends TDSTreeBaseService {
    constructor() {
        super();
    }
}
TDSTreeService.ɵfac = function TDSTreeService_Factory(t) { return new (t || TDSTreeService)(); };
TDSTreeService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: TDSTreeService, factory: TDSTreeService.ɵfac });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSTreeService, [{
            type: Injectable
        }], function () { return []; }, null);
})();

const _c0 = ["treeTemplate"];
function TDSTreeComponent_cdk_virtual_scroll_viewport_4_ng_container_1_ng_template_1_Template(rf, ctx) { }
const _c1 = function (a0) { return { $implicit: a0 }; };
function TDSTreeComponent_cdk_virtual_scroll_viewport_4_ng_container_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵtemplate(1, TDSTreeComponent_cdk_virtual_scroll_viewport_4_ng_container_1_ng_template_1_Template, 0, 0, "ng-template", 8);
        i0.ɵɵelementContainerEnd();
    }
    if (rf & 2) {
        const node_r5 = ctx.$implicit;
        i0.ɵɵnextContext(2);
        const _r2 = i0.ɵɵreference(7);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngTemplateOutlet", _r2)("ngTemplateOutletContext", i0.ɵɵpureFunction1(2, _c1, node_r5));
    }
}
function TDSTreeComponent_cdk_virtual_scroll_viewport_4_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "cdk-virtual-scroll-viewport", 6);
        i0.ɵɵtemplate(1, TDSTreeComponent_cdk_virtual_scroll_viewport_4_ng_container_1_Template, 2, 4, "ng-container", 7);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r0 = i0.ɵɵnextContext();
        i0.ɵɵstyleProp("height", ctx_r0.virtualHeight);
        i0.ɵɵclassProp("tds-select-tree-list-holder-inner", ctx_r0.selectMode)("tds-tree-list-holder-inner", !ctx_r0.selectMode);
        i0.ɵɵproperty("itemSize", ctx_r0.virtualItemSize)("minBufferPx", ctx_r0.virtualMinBufferPx)("maxBufferPx", ctx_r0.virtualMaxBufferPx);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("cdkVirtualForOf", ctx_r0.flattenNodes)("cdkVirtualForTrackBy", ctx_r0.trackByFlattenNode);
    }
}
function TDSTreeComponent_div_5_ng_container_1_ng_template_1_Template(rf, ctx) { }
function TDSTreeComponent_div_5_ng_container_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵtemplate(1, TDSTreeComponent_div_5_ng_container_1_ng_template_1_Template, 0, 0, "ng-template", 8);
        i0.ɵɵelementContainerEnd();
    }
    if (rf & 2) {
        const node_r8 = ctx.$implicit;
        i0.ɵɵnextContext(2);
        const _r2 = i0.ɵɵreference(7);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngTemplateOutlet", _r2)("ngTemplateOutletContext", i0.ɵɵpureFunction1(2, _c1, node_r8));
    }
}
function TDSTreeComponent_div_5_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 9);
        i0.ɵɵtemplate(1, TDSTreeComponent_div_5_ng_container_1_Template, 2, 4, "ng-container", 10);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r1 = i0.ɵɵnextContext();
        i0.ɵɵclassProp("tds-select-tree-list-holder-inner", ctx_r1.selectMode)("tds-tree-list-holder-inner", !ctx_r1.selectMode);
        i0.ɵɵproperty("@.disabled", ctx_r1.beforeInit || (ctx_r1.noAnimation == null ? null : ctx_r1.noAnimation.noAnimation))("noAnimation", ctx_r1.noAnimation == null ? null : ctx_r1.noAnimation.noAnimation)("@treeCollapseMotion", ctx_r1.flattenNodes.length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngForOf", ctx_r1.flattenNodes)("ngForTrackBy", ctx_r1.trackByFlattenNode);
    }
}
function TDSTreeComponent_ng_template_6_Template(rf, ctx) {
    if (rf & 1) {
        const _r12 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "tds-tree-node", 11);
        i0.ɵɵlistener("onExpandChange", function TDSTreeComponent_ng_template_6_Template_tds_tree_node_onExpandChange_0_listener($event) { i0.ɵɵrestoreView(_r12); const ctx_r11 = i0.ɵɵnextContext(); return ctx_r11.eventTriggerChanged($event); })("onClick", function TDSTreeComponent_ng_template_6_Template_tds_tree_node_onClick_0_listener($event) { i0.ɵɵrestoreView(_r12); const ctx_r13 = i0.ɵɵnextContext(); return ctx_r13.eventTriggerChanged($event); })("onDblClick", function TDSTreeComponent_ng_template_6_Template_tds_tree_node_onDblClick_0_listener($event) { i0.ɵɵrestoreView(_r12); const ctx_r14 = i0.ɵɵnextContext(); return ctx_r14.eventTriggerChanged($event); })("onContextMenu", function TDSTreeComponent_ng_template_6_Template_tds_tree_node_onContextMenu_0_listener($event) { i0.ɵɵrestoreView(_r12); const ctx_r15 = i0.ɵɵnextContext(); return ctx_r15.eventTriggerChanged($event); })("onCheckBoxChange", function TDSTreeComponent_ng_template_6_Template_tds_tree_node_onCheckBoxChange_0_listener($event) { i0.ɵɵrestoreView(_r12); const ctx_r16 = i0.ɵɵnextContext(); return ctx_r16.eventTriggerChanged($event); })("onDragStart", function TDSTreeComponent_ng_template_6_Template_tds_tree_node_onDragStart_0_listener($event) { i0.ɵɵrestoreView(_r12); const ctx_r17 = i0.ɵɵnextContext(); return ctx_r17.eventTriggerChanged($event); })("onDragEnter", function TDSTreeComponent_ng_template_6_Template_tds_tree_node_onDragEnter_0_listener($event) { i0.ɵɵrestoreView(_r12); const ctx_r18 = i0.ɵɵnextContext(); return ctx_r18.eventTriggerChanged($event); })("onDragOver", function TDSTreeComponent_ng_template_6_Template_tds_tree_node_onDragOver_0_listener($event) { i0.ɵɵrestoreView(_r12); const ctx_r19 = i0.ɵɵnextContext(); return ctx_r19.eventTriggerChanged($event); })("onDragLeave", function TDSTreeComponent_ng_template_6_Template_tds_tree_node_onDragLeave_0_listener($event) { i0.ɵɵrestoreView(_r12); const ctx_r20 = i0.ɵɵnextContext(); return ctx_r20.eventTriggerChanged($event); })("onDragEnd", function TDSTreeComponent_ng_template_6_Template_tds_tree_node_onDragEnd_0_listener($event) { i0.ɵɵrestoreView(_r12); const ctx_r21 = i0.ɵɵnextContext(); return ctx_r21.eventTriggerChanged($event); })("onDrop", function TDSTreeComponent_ng_template_6_Template_tds_tree_node_onDrop_0_listener($event) { i0.ɵɵrestoreView(_r12); const ctx_r22 = i0.ɵɵnextContext(); return ctx_r22.eventTriggerChanged($event); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const treeNode_r10 = ctx.$implicit;
        const ctx_r3 = i0.ɵɵnextContext();
        i0.ɵɵproperty("icon", treeNode_r10.icon)("title", treeNode_r10.title)("isLoading", treeNode_r10.isLoading)("isSelected", treeNode_r10.isSelected)("isDisabled", treeNode_r10.isDisabled)("isMatched", treeNode_r10.isMatched)("isExpanded", treeNode_r10.isExpanded)("isLeaf", treeNode_r10.isLeaf)("isStart", treeNode_r10.isStart)("isEnd", treeNode_r10.isEnd)("isChecked", treeNode_r10.isChecked)("isHalfChecked", treeNode_r10.isHalfChecked)("isDisableCheckbox", treeNode_r10.isDisableCheckbox)("isSelectable", treeNode_r10.isSelectable)("canHide", treeNode_r10.canHide)("treeNode", treeNode_r10)("selectMode", ctx_r3.selectMode)("showLine", ctx_r3.showLine)("expandedIcon", ctx_r3.expandedIcon)("draggable", ctx_r3.draggable)("checkable", ctx_r3.checkable)("showExpand", ctx_r3.showExpand)("asyncData", ctx_r3.asyncData)("searchValue", ctx_r3.searchValue)("hideUnMatched", ctx_r3.hideUnMatched)("beforeDrop", ctx_r3.beforeDrop)("showIcon", ctx_r3.showIcon)("treeTemplate", ctx_r3.treeTemplate || ctx_r3.tdsTreeTemplateChild);
    }
}
function TDSTreeServiceFactory(higherOrderService, treeService) {
    return higherOrderService ? higherOrderService : treeService;
}
const TDS_CONFIG_MODULE_NAME = 'tree';
class TDSTreeComponent extends TDSTreeBase {
    // Handle emit event end
    constructor(tdsTreeService, tdsConfigService, cdr, directionality, noAnimation) {
        super(tdsTreeService);
        this.tdsConfigService = tdsConfigService;
        this.cdr = cdr;
        this.directionality = directionality;
        this.noAnimation = noAnimation;
        this._tdsModuleName = TDS_CONFIG_MODULE_NAME;
        this.showIcon = false;
        this.hideUnMatched = false;
        this.blockNode = false;
        this.expandAll = false;
        this.selectMode = false;
        this.checkStrictly = false;
        this.showExpand = true;
        this.showLine = false;
        this.checkable = false;
        this.asyncData = false;
        this.draggable = false;
        this.multiple = false;
        this.virtualItemSize = 28;
        this.virtualMaxBufferPx = 500;
        this.virtualMinBufferPx = 28;
        this.virtualHeight = null;
        this.data = [];
        this.expandedKeys = [];
        this.selectedKeys = [];
        this.checkedKeys = [];
        this.searchValue = '';
        this.flattenNodes = [];
        this.beforeInit = true;
        this.dir = 'ltr';
        this.onExpandedKeysChange = new EventEmitter();
        this.onSelectedKeysChange = new EventEmitter();
        this.onCheckedKeysChange = new EventEmitter();
        this.onSearchValueChange = new EventEmitter();
        this.onClick = new EventEmitter();
        this.onDblClick = new EventEmitter();
        this.onContextMenu = new EventEmitter();
        this.onCheckBoxChange = new EventEmitter();
        this.onExpandChange = new EventEmitter();
        this.onDragStart = new EventEmitter();
        this.onDragEnter = new EventEmitter();
        this.onDragOver = new EventEmitter();
        this.onDragLeave = new EventEmitter();
        this.onDrop = new EventEmitter();
        this.onDragEnd = new EventEmitter();
        this.HIDDEN_STYLE = {
            width: 0,
            height: 0,
            display: 'flex',
            overflow: 'hidden',
            opacity: 0,
            border: 0,
            padding: 0,
            margin: 0
        };
        this.destroy$ = new Subject();
        this.onChange = () => null;
        this.onTouched = () => null;
    }
    writeValue(value) {
        this.handleNzData(value);
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * Render all properties of nzTree
     *
     * @param changes: all changes from @Input
     */
    renderTreeProperties(changes) {
        let useDefaultExpandedKeys = false;
        let _expandAll = false;
        const { data, expandedKeys, selectedKeys, checkedKeys, checkStrictly, expandAll, multiple, searchValue } = changes;
        if (expandAll) {
            useDefaultExpandedKeys = true;
            _expandAll = this.expandAll;
        }
        if (multiple) {
            this.tdsTreeService.isMultiple = this.multiple;
        }
        if (checkStrictly) {
            this.tdsTreeService.isCheckStrictly = this.checkStrictly;
        }
        if (data) {
            this.handleNzData(this.data);
        }
        if (checkedKeys) {
            this.handleCheckedKeys(this.checkedKeys);
        }
        if (checkStrictly) {
            this.handleCheckedKeys(null);
        }
        if (expandedKeys || expandAll) {
            useDefaultExpandedKeys = true;
            this.handleExpandedKeys(_expandAll || this.expandedKeys);
        }
        if (selectedKeys) {
            this.handleSelectedKeys(this.selectedKeys, this.multiple);
        }
        if (searchValue) {
            if (!(searchValue.firstChange && !this.searchValue)) {
                useDefaultExpandedKeys = false;
                this.handleSearchValue(searchValue.currentValue, this.searchFunc);
                this.onSearchValueChange.emit(this.tdsTreeService.formatEvent('search', null, null));
            }
        }
        // flatten data
        const currentExpandedKeys = this.getExpandedNodeList().map(v => v.key);
        const newExpandedKeys = useDefaultExpandedKeys ? _expandAll || this.expandedKeys : currentExpandedKeys;
        this.handleFlattenNodes(this.tdsTreeService.rootNodes, newExpandedKeys);
    }
    trackByFlattenNode(_, node) {
        return node.key;
    }
    // Deal with properties
    /**
     * data
     *
     * @param value
     */
    handleNzData(value) {
        if (Array.isArray(value)) {
            const data = this.coerceTreeNodes(value);
            this.tdsTreeService.initTree(data);
        }
    }
    handleFlattenNodes(data, expandKeys = []) {
        this.tdsTreeService.flattenTreeData(data, expandKeys);
    }
    handleCheckedKeys(keys) {
        this.tdsTreeService.conductCheck(keys, this.checkStrictly);
    }
    handleExpandedKeys(keys = []) {
        this.tdsTreeService.conductExpandedKeys(keys);
    }
    handleSelectedKeys(keys, isMulti) {
        this.tdsTreeService.conductSelectedKeys(keys, isMulti);
    }
    handleSearchValue(value, searchFunc) {
        const dataList = flattenTreeData(this.tdsTreeService.rootNodes, true).map(v => v.data);
        const checkIfMatched = (node) => {
            if (searchFunc) {
                return searchFunc(node.origin);
            }
            return !value || !node.title.toLowerCase().includes(value.toLowerCase()) ? false : true;
        };
        dataList.forEach(v => {
            v.isMatched = checkIfMatched(v);
            v.canHide = !v.isMatched;
            if (!v.isMatched) {
                v.setExpanded(false);
                this.tdsTreeService.setExpandedNodeList(v);
            }
            else {
                // expand
                this.tdsTreeService.expandNodeAllParentBySearch(v);
            }
            this.tdsTreeService.setMatchedNodeList(v);
        });
    }
    /**
     * Handle emit event
     *
     * @param event
     * handle each event
     */
    eventTriggerChanged(event) {
        const node = event.node;
        switch (event.eventName) {
            case 'expand':
                this.renderTree();
                this.onExpandChange.emit(event);
                break;
            case 'click':
                this.onClick.emit(event);
                break;
            case 'dblclick':
                this.onDblClick.emit(event);
                break;
            case 'contextmenu':
                this.onContextMenu.emit(event);
                break;
            case 'check':
                // Render checked state with nodes' property `isChecked`
                this.tdsTreeService.setCheckedNodeList(node);
                if (!this.checkStrictly) {
                    this.tdsTreeService.conduct(node);
                }
                // Cause check method will rerender list, so we need recover it and next the new event to user
                const eventNext = this.tdsTreeService.formatEvent('check', node, event.event);
                this.onCheckBoxChange.emit(eventNext);
                break;
            case 'dragstart':
                // if node is expanded
                if (node.isExpanded) {
                    node.setExpanded(!node.isExpanded);
                    this.renderTree();
                }
                this.onDragStart.emit(event);
                break;
            case 'dragenter':
                const selectedNode = this.tdsTreeService.getSelectedNode();
                if (selectedNode && selectedNode.key !== node.key && !node.isExpanded && !node.isLeaf) {
                    node.setExpanded(true);
                    this.renderTree();
                }
                this.onDragEnter.emit(event);
                break;
            case 'dragover':
                this.onDragOver.emit(event);
                break;
            case 'dragleave':
                this.onDragLeave.emit(event);
                break;
            case 'dragend':
                this.onDragEnd.emit(event);
                break;
            case 'drop':
                this.renderTree();
                this.onDrop.emit(event);
                break;
        }
    }
    /**
     * Click expand icon
     */
    renderTree() {
        this.handleFlattenNodes(this.tdsTreeService.rootNodes, this.getExpandedNodeList().map(v => v.key));
        this.cdr.markForCheck();
    }
    ngOnInit() {
        var _a;
        this.tdsTreeService.flattenNodes$.pipe(takeUntil(this.destroy$)).subscribe(data => {
            this.flattenNodes = data;
            this.cdr.markForCheck();
        });
        this.dir = this.directionality.value;
        (_a = this.directionality.change) === null || _a === void 0 ? void 0 : _a.pipe(takeUntil(this.destroy$)).subscribe((direction) => {
            this.dir = direction;
            this.cdr.detectChanges();
        });
    }
    ngOnChanges(changes) {
        this.renderTreeProperties(changes);
    }
    ngAfterViewInit() {
        this.beforeInit = false;
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
}
TDSTreeComponent.ɵfac = function TDSTreeComponent_Factory(t) { return new (t || TDSTreeComponent)(i0.ɵɵdirectiveInject(i1$1.TDSTreeBaseService), i0.ɵɵdirectiveInject(i2$1.TDSConfigService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i3$2.Directionality, 8), i0.ɵɵdirectiveInject(i4.TDSNoAnimationDirective, 9)); };
TDSTreeComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSTreeComponent, selectors: [["tds-tree"]], contentQueries: function TDSTreeComponent_ContentQueries(rf, ctx, dirIndex) {
        if (rf & 1) {
            i0.ɵɵcontentQuery(dirIndex, _c0, 7);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tdsTreeTemplateChild = _t.first);
        }
    }, viewQuery: function TDSTreeComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(CdkVirtualScrollViewport, 5, CdkVirtualScrollViewport);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.cdkVirtualScrollViewport = _t.first);
        }
    }, hostAttrs: [1, "box-border", "m-0", "p-0", "border-0"], hostVars: 20, hostBindings: function TDSTreeComponent_HostBindings(rf, ctx) {
        if (rf & 2) {
            i0.ɵɵclassProp("tds-select-tree", ctx.selectMode)("tds-select-tree-show-line", ctx.selectMode && ctx.showLine)("tds-select-tree-icon-hide", ctx.selectMode && !ctx.showIcon)("tds-select-tree-block-node", ctx.selectMode && ctx.blockNode)("tds-tree", !ctx.selectMode)("tds-tree-rtl", ctx.dir === "rtl")("tds-tree-show-line", !ctx.selectMode && ctx.showLine)("tds-tree-icon-hide", !ctx.selectMode && !ctx.showIcon)("tds-tree-block-node", !ctx.selectMode && ctx.blockNode)("draggable-tree", ctx.draggable);
        }
    }, inputs: { showIcon: "showIcon", hideUnMatched: "hideUnMatched", blockNode: "blockNode", expandAll: "expandAll", selectMode: "selectMode", checkStrictly: "checkStrictly", showExpand: "showExpand", showLine: "showLine", checkable: "checkable", asyncData: "asyncData", draggable: "draggable", multiple: "multiple", expandedIcon: "expandedIcon", virtualItemSize: "virtualItemSize", virtualMaxBufferPx: "virtualMaxBufferPx", virtualMinBufferPx: "virtualMinBufferPx", virtualHeight: "virtualHeight", treeTemplate: "treeTemplate", beforeDrop: "beforeDrop", data: "data", expandedKeys: "expandedKeys", selectedKeys: "selectedKeys", checkedKeys: "checkedKeys", searchValue: "searchValue", searchFunc: "searchFunc" }, outputs: { onExpandedKeysChange: "onExpandedKeysChange", onSelectedKeysChange: "onSelectedKeysChange", onCheckedKeysChange: "onCheckedKeysChange", onSearchValueChange: "onSearchValueChange", onClick: "onClick", onDblClick: "onDblClick", onContextMenu: "onContextMenu", onCheckBoxChange: "onCheckBoxChange", onExpandChange: "onExpandChange", onDragStart: "onDragStart", onDragEnter: "onDragEnter", onDragOver: "onDragOver", onDragLeave: "onDragLeave", onDrop: "onDrop", onDragEnd: "onDragEnd" }, exportAs: ["tdsTree"], features: [i0.ɵɵProvidersFeature([
            TDSTreeService,
            {
                provide: TDSTreeBaseService,
                useFactory: TDSTreeServiceFactory,
                deps: [[new SkipSelf(), new Optional(), TDSTreeHigherOrderServiceToken], TDSTreeService]
            },
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => TDSTreeComponent),
                multi: true
            }
        ]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature], decls: 8, vars: 5, consts: [["role", "tree"], [3, "ngStyle"], [1, "tds-tree-list"], [3, "tds-select-tree-list-holder-inner", "tds-tree-list-holder-inner", "itemSize", "minBufferPx", "maxBufferPx", "height", 4, "ngIf"], [3, "tds-select-tree-list-holder-inner", "tds-tree-list-holder-inner", "noAnimation", 4, "ngIf"], ["nodeTemplate", ""], [3, "itemSize", "minBufferPx", "maxBufferPx"], [4, "cdkVirtualFor", "cdkVirtualForOf", "cdkVirtualForTrackBy"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [3, "noAnimation"], [4, "ngFor", "ngForOf", "ngForTrackBy"], ["builtin", "", 3, "icon", "title", "isLoading", "isSelected", "isDisabled", "isMatched", "isExpanded", "isLeaf", "isStart", "isEnd", "isChecked", "isHalfChecked", "isDisableCheckbox", "isSelectable", "canHide", "treeNode", "selectMode", "showLine", "expandedIcon", "draggable", "checkable", "showExpand", "asyncData", "searchValue", "hideUnMatched", "beforeDrop", "showIcon", "treeTemplate", "onExpandChange", "onClick", "onDblClick", "onContextMenu", "onCheckBoxChange", "onDragStart", "onDragEnter", "onDragOver", "onDragLeave", "onDragEnd", "onDrop"]], template: function TDSTreeComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵelement(1, "input", 1);
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(2, "div", 2)(3, "div");
            i0.ɵɵtemplate(4, TDSTreeComponent_cdk_virtual_scroll_viewport_4_Template, 2, 11, "cdk-virtual-scroll-viewport", 3);
            i0.ɵɵtemplate(5, TDSTreeComponent_div_5_Template, 2, 9, "div", 4);
            i0.ɵɵelementEnd()();
            i0.ɵɵtemplate(6, TDSTreeComponent_ng_template_6_Template, 1, 28, "ng-template", null, 5, i0.ɵɵtemplateRefExtractor);
        }
        if (rf & 2) {
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngStyle", ctx.HIDDEN_STYLE);
            i0.ɵɵadvance(1);
            i0.ɵɵclassProp("tds-select-tree-list", ctx.selectMode);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", ctx.virtualHeight);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", !ctx.virtualHeight);
        }
    }, directives: [i1.NgStyle, i1.NgIf, i6.CdkVirtualScrollViewport, i6.CdkFixedSizeVirtualScroll, i6.CdkVirtualForOf, i1.NgTemplateOutlet, i4.TDSNoAnimationDirective, i1.NgForOf, TDSTreeNodeBuiltinComponent], encapsulation: 2, data: { animation: [treeCollapseMotion] }, changeDetection: 0 });
__decorate([
    InputBoolean(),
    WithConfig()
], TDSTreeComponent.prototype, "showIcon", void 0);
__decorate([
    InputBoolean(),
    WithConfig()
], TDSTreeComponent.prototype, "hideUnMatched", void 0);
__decorate([
    InputBoolean(),
    WithConfig()
], TDSTreeComponent.prototype, "blockNode", void 0);
__decorate([
    InputBoolean()
], TDSTreeComponent.prototype, "expandAll", void 0);
__decorate([
    InputBoolean()
], TDSTreeComponent.prototype, "selectMode", void 0);
__decorate([
    InputBoolean()
], TDSTreeComponent.prototype, "checkStrictly", void 0);
__decorate([
    InputBoolean()
], TDSTreeComponent.prototype, "showExpand", void 0);
__decorate([
    InputBoolean()
], TDSTreeComponent.prototype, "showLine", void 0);
__decorate([
    InputBoolean()
], TDSTreeComponent.prototype, "checkable", void 0);
__decorate([
    InputBoolean()
], TDSTreeComponent.prototype, "asyncData", void 0);
__decorate([
    InputBoolean()
], TDSTreeComponent.prototype, "draggable", void 0);
__decorate([
    InputBoolean()
], TDSTreeComponent.prototype, "multiple", void 0);
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSTreeComponent, [{
            type: Component,
            args: [{ selector: 'tds-tree', exportAs: 'tdsTree', animations: [treeCollapseMotion], changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        TDSTreeService,
                        {
                            provide: TDSTreeBaseService,
                            useFactory: TDSTreeServiceFactory,
                            deps: [[new SkipSelf(), new Optional(), TDSTreeHigherOrderServiceToken], TDSTreeService]
                        },
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => TDSTreeComponent),
                            multi: true
                        }
                    ], host: {
                        '[class.tds-select-tree]': `selectMode`,
                        '[class.tds-select-tree-show-line]': `selectMode && showLine`,
                        '[class.tds-select-tree-icon-hide]': `selectMode && !showIcon`,
                        '[class.tds-select-tree-block-node]': `selectMode && blockNode`,
                        '[class.tds-tree]': `!selectMode`,
                        '[class.tds-tree-rtl]': `dir === 'rtl'`,
                        '[class.tds-tree-show-line]': `!selectMode && showLine`,
                        '[class.tds-tree-icon-hide]': `!selectMode && !showIcon`,
                        '[class.tds-tree-block-node]': `!selectMode && blockNode`,
                        '[class.draggable-tree]': `draggable`,
                        'class': "box-border m-0 p-0 border-0"
                    }, template: "<div role=\"tree\">\r\n    <input [ngStyle]=\"HIDDEN_STYLE\" />\r\n  </div>\r\n  <div class=\"tds-tree-list\" [class.tds-select-tree-list]=\"selectMode\">\r\n    <div>     \r\n      <cdk-virtual-scroll-viewport\r\n        *ngIf=\"virtualHeight\"\r\n        [class.tds-select-tree-list-holder-inner]=\"selectMode\"\r\n        [class.tds-tree-list-holder-inner]=\"!selectMode\"\r\n        [itemSize]=\"virtualItemSize\"\r\n        [minBufferPx]=\"virtualMinBufferPx\"\r\n        [maxBufferPx]=\"virtualMaxBufferPx\"\r\n        [style.height]=\"virtualHeight\"\r\n      >\r\n        <ng-container *cdkVirtualFor=\"let node of flattenNodes; trackBy: trackByFlattenNode\">\r\n          <ng-template\r\n            [ngTemplateOutlet]=\"nodeTemplate\"\r\n            [ngTemplateOutletContext]=\"{ $implicit: node }\"\r\n          ></ng-template>\r\n        </ng-container>\r\n      </cdk-virtual-scroll-viewport>\r\n\r\n      <div\r\n        *ngIf=\"!virtualHeight\"\r\n        [class.tds-select-tree-list-holder-inner]=\"selectMode\"\r\n        [class.tds-tree-list-holder-inner]=\"!selectMode\"\r\n        [@.disabled]=\"beforeInit || noAnimation?.noAnimation\"\r\n        [noAnimation]=\"noAnimation?.noAnimation\"\r\n        [@treeCollapseMotion]=\"flattenNodes.length\"\r\n      >\r\n        <ng-container *ngFor=\"let node of flattenNodes; trackBy: trackByFlattenNode\">\r\n          <ng-template\r\n            [ngTemplateOutlet]=\"nodeTemplate\"\r\n            [ngTemplateOutletContext]=\"{ $implicit: node }\"\r\n          ></ng-template>\r\n        </ng-container>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <ng-template #nodeTemplate let-treeNode>    \r\n    <tds-tree-node\r\n      builtin\r\n      [icon]=\"treeNode.icon\"\r\n      [title]=\"treeNode.title\"\r\n      [isLoading]=\"treeNode.isLoading\"\r\n      [isSelected]=\"treeNode.isSelected\"\r\n      [isDisabled]=\"treeNode.isDisabled\"\r\n      [isMatched]=\"treeNode.isMatched\"\r\n      [isExpanded]=\"treeNode.isExpanded\"\r\n      [isLeaf]=\"treeNode.isLeaf\"\r\n      [isStart]=\"treeNode.isStart\"\r\n      [isEnd]=\"treeNode.isEnd\"\r\n      [isChecked]=\"treeNode.isChecked\"\r\n      [isHalfChecked]=\"treeNode.isHalfChecked\"\r\n      [isDisableCheckbox]=\"treeNode.isDisableCheckbox\"\r\n      [isSelectable]=\"treeNode.isSelectable\"\r\n      [canHide]=\"treeNode.canHide\"\r\n      [treeNode]=\"treeNode\"\r\n      [selectMode]=\"selectMode\"\r\n      [showLine]=\"showLine\"\r\n      [expandedIcon]=\"expandedIcon\"\r\n      [draggable]=\"draggable\"\r\n      [checkable]=\"checkable\"\r\n      [showExpand]=\"showExpand\"\r\n      [asyncData]=\"asyncData\"\r\n      [searchValue]=\"searchValue\"\r\n      [hideUnMatched]=\"hideUnMatched\"\r\n      [beforeDrop]=\"beforeDrop\"\r\n      [showIcon]=\"showIcon\"\r\n      [treeTemplate]=\"treeTemplate || tdsTreeTemplateChild\"\r\n      (onExpandChange)=\"eventTriggerChanged($event)\"\r\n      (onClick)=\"eventTriggerChanged($event)\"\r\n      (onDblClick)=\"eventTriggerChanged($event)\"\r\n      (onContextMenu)=\"eventTriggerChanged($event)\"\r\n      (onCheckBoxChange)=\"eventTriggerChanged($event)\"\r\n      (onDragStart)=\"eventTriggerChanged($event)\"\r\n      (onDragEnter)=\"eventTriggerChanged($event)\"\r\n      (onDragOver)=\"eventTriggerChanged($event)\"\r\n      (onDragLeave)=\"eventTriggerChanged($event)\"\r\n      (onDragEnd)=\"eventTriggerChanged($any($event))\"\r\n      (onDrop)=\"eventTriggerChanged($event)\"\r\n    ></tds-tree-node>\r\n  </ng-template>" }]
        }], function () {
        return [{ type: i1$1.TDSTreeBaseService }, { type: i2$1.TDSConfigService }, { type: i0.ChangeDetectorRef }, { type: i3$2.Directionality, decorators: [{
                        type: Optional
                    }] }, { type: i4.TDSNoAnimationDirective, decorators: [{
                        type: Host
                    }, {
                        type: Optional
                    }] }];
    }, { showIcon: [{
                type: Input
            }], hideUnMatched: [{
                type: Input
            }], blockNode: [{
                type: Input
            }], expandAll: [{
                type: Input
            }], selectMode: [{
                type: Input
            }], checkStrictly: [{
                type: Input
            }], showExpand: [{
                type: Input
            }], showLine: [{
                type: Input
            }], checkable: [{
                type: Input
            }], asyncData: [{
                type: Input
            }], draggable: [{
                type: Input
            }], multiple: [{
                type: Input
            }], expandedIcon: [{
                type: Input
            }], virtualItemSize: [{
                type: Input
            }], virtualMaxBufferPx: [{
                type: Input
            }], virtualMinBufferPx: [{
                type: Input
            }], virtualHeight: [{
                type: Input
            }], treeTemplate: [{
                type: Input
            }], beforeDrop: [{
                type: Input
            }], data: [{
                type: Input
            }], expandedKeys: [{
                type: Input
            }], selectedKeys: [{
                type: Input
            }], checkedKeys: [{
                type: Input
            }], searchValue: [{
                type: Input
            }], searchFunc: [{
                type: Input
            }], tdsTreeTemplateChild: [{
                type: ContentChild,
                args: ['treeTemplate', { static: true }]
            }], cdkVirtualScrollViewport: [{
                type: ViewChild,
                args: [CdkVirtualScrollViewport, { read: CdkVirtualScrollViewport }]
            }], onExpandedKeysChange: [{
                type: Output
            }], onSelectedKeysChange: [{
                type: Output
            }], onCheckedKeysChange: [{
                type: Output
            }], onSearchValueChange: [{
                type: Output
            }], onClick: [{
                type: Output
            }], onDblClick: [{
                type: Output
            }], onContextMenu: [{
                type: Output
            }], onCheckBoxChange: [{
                type: Output
            }], onExpandChange: [{
                type: Output
            }], onDragStart: [{
                type: Output
            }], onDragEnter: [{
                type: Output
            }], onDragOver: [{
                type: Output
            }], onDragLeave: [{
                type: Output
            }], onDrop: [{
                type: Output
            }], onDragEnd: [{
                type: Output
            }] });
})();

class TDSTreeModule {
}
TDSTreeModule.ɵfac = function TDSTreeModule_Factory(t) { return new (t || TDSTreeModule)(); };
TDSTreeModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: TDSTreeModule });
TDSTreeModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [[
            BidiModule,
            CommonModule,
            TDSOutletModule,
            TDSNoAnimationModule,
            TDSHighlightModule,
            ScrollingModule,
            TDSSpinnerModule
        ]] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSTreeModule, [{
            type: NgModule,
            args: [{
                    imports: [
                        BidiModule,
                        CommonModule,
                        TDSOutletModule,
                        TDSNoAnimationModule,
                        TDSHighlightModule,
                        ScrollingModule,
                        TDSSpinnerModule
                    ],
                    declarations: [
                        TDSTreeComponent,
                        TDSTreeNodeBuiltinComponent,
                        TDSTreeIndentComponent,
                        TDSTreeNodeSwitcherComponent,
                        TDSTreeNodeBuiltinCheckboxComponent,
                        TDSTreeNodeTitleComponent,
                        TDSTreeDropIndicatorComponent
                    ],
                    exports: [TDSTreeComponent, TDSTreeNodeBuiltinComponent, TDSTreeIndentComponent]
                }]
        }], null, null);
})();
(function () {
    (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(TDSTreeModule, { declarations: [TDSTreeComponent,
            TDSTreeNodeBuiltinComponent,
            TDSTreeIndentComponent,
            TDSTreeNodeSwitcherComponent,
            TDSTreeNodeBuiltinCheckboxComponent,
            TDSTreeNodeTitleComponent,
            TDSTreeDropIndicatorComponent], imports: [BidiModule,
            CommonModule,
            TDSOutletModule,
            TDSNoAnimationModule,
            TDSHighlightModule,
            ScrollingModule,
            TDSSpinnerModule], exports: [TDSTreeComponent, TDSTreeNodeBuiltinComponent, TDSTreeIndentComponent] });
})();

/**
 * Generated bundle index. Do not edit.
 */

export { TDSTreeComponent, TDSTreeDropIndicatorComponent, TDSTreeIndentComponent, TDSTreeModule, TDSTreeNodeBuiltinCheckboxComponent, TDSTreeNodeBuiltinComponent, TDSTreeNodeSwitcherComponent, TDSTreeNodeTitleComponent, TDSTreeService, TDSTreeServiceFactory };
//# sourceMappingURL=tds-ui-tree.mjs.map
