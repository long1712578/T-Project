import { __decorate } from 'tslib';
import * as i0 from '@angular/core';
import { Component, ViewEncapsulation, ChangeDetectionStrategy, Input, Optional, Host, NgModule } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { InputBoolean } from 'tds-ui/shared/utility';
import * as i1 from 'tds-ui/core/config';
import { WithConfig } from 'tds-ui/core/config';
import { zoomBadgeMotion } from 'tds-ui/core/animation';
import * as i2 from '@angular/cdk/bidi';
import { BidiModule } from '@angular/cdk/bidi';
import * as i3 from 'tds-ui/core/no-animation';
import { TDSNoAnimationModule } from 'tds-ui/core/no-animation';
import * as i4 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i5 from 'tds-ui/core/outlet';
import { TDSOutletModule } from 'tds-ui/core/outlet';
import { ObserversModule } from '@angular/cdk/observers';

const badgePresetColors = [
    'pink',
    'red',
    'yellow',
    'orange',
    'cyan',
    'green',
    'blue',
    'purple',
    'geekblue',
    'magenta',
    'volcano',
    'gold',
    'lime'
];

function TDSBadgeSupComponent_ng_container_0_span_1_ng_container_1_p_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "p", 6);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const p_r8 = ctx.$implicit;
        const i_r5 = i0.ɵɵnextContext(2).index;
        const ctx_r7 = i0.ɵɵnextContext(2);
        i0.ɵɵclassProp("current", p_r8 === ctx_r7.countArray[i_r5]);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", p_r8, " ");
    }
}
function TDSBadgeSupComponent_ng_container_0_span_1_ng_container_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵtemplate(1, TDSBadgeSupComponent_ng_container_0_span_1_ng_container_1_p_1_Template, 2, 3, "p", 5);
        i0.ɵɵelementContainerEnd();
    }
    if (rf & 2) {
        const ctx_r6 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngForOf", ctx_r6.countSingleArray);
    }
}
function TDSBadgeSupComponent_ng_container_0_span_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 3);
        i0.ɵɵtemplate(1, TDSBadgeSupComponent_ng_container_0_span_1_ng_container_1_Template, 2, 1, "ng-container", 4);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const i_r5 = ctx.index;
        const ctx_r3 = i0.ɵɵnextContext(2);
        i0.ɵɵstyleProp("transform", "translateY(" + -ctx_r3.countArray[i_r5] * 100 + "%)");
        i0.ɵɵproperty("noAnimation", ctx_r3.noAnimation);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r3.dot && ctx_r3.countArray[i_r5] !== undefined);
    }
}
function TDSBadgeSupComponent_ng_container_0_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵtemplate(1, TDSBadgeSupComponent_ng_container_0_span_1_Template, 2, 4, "span", 2);
        i0.ɵɵelementContainerEnd();
    }
    if (rf & 2) {
        const ctx_r0 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngForOf", ctx_r0.maxNumberArray);
    }
}
function TDSBadgeSupComponent_ng_template_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵtext(0);
    }
    if (rf & 2) {
        const ctx_r2 = i0.ɵɵnextContext();
        i0.ɵɵtextInterpolate1("", ctx_r2.overflowCount, "+");
    }
}
class TDSBadgeSupComponent {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.tdsStyle = null;
        this.dot = false;
        this.overflowCount = 99;
        this.disableAnimation = false;
        this.noAnimation = false;
        this.standalone = false;
        this.size = 'md';
        this.placement = 'topRight';
        // @Input() tdsClass: string | null = null;
        this._cls = '';
        this.maxNumberArray = [];
        this.countArray = [];
        this._count = 0;
        this.countSingleArray = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
        // TODO: move to host after View Engine deprecation
        this.elementRef.nativeElement.classList.add('tds-scroll-number');
    }
    generateMaxNumberArray() {
        this.maxNumberArray = this.overflowCount.toString().split('');
    }
    ngOnInit() {
        this.generateMaxNumberArray();
        this.buildCls();
    }
    get cls() {
        return this._cls;
    }
    ngOnChanges(changes) {
        const { overflowCount, count, standalone, tdsStyle, tdsClass } = changes;
        if (count && typeof count.currentValue === 'number') {
            this._count = Math.max(0, count.currentValue);
            this.countArray = this._count
                .toString()
                .split('')
                .map(item => +item);
        }
        if (overflowCount) {
            this.generateMaxNumberArray();
        }
        // if (bgColor) {
        //   this.buildCls();
        // }
    }
    buildCls() {
        let placement = this.getPlacement();
        let str = "overflow-hidden  min-w-5 h-5 py-0 text-xs  text-center font-semibold whitespace-nowrap rounded-full  leading-5 ";
        if (!this.dot) {
            if (!this.standalone)
                this._cls = str + " absolute " + placement;
            else {
                this._cls = str + " relative block ";
            }
        }
        else {
            this._cls = "absolute z-auto overflow-hidden py-0  rounded-full ";
            switch (this.size) {
                case 'sm':
                    this._cls += 'h-1.5 w-1.5 ';
                    break;
                case 'md':
                    this._cls += 'h-2 w-2 ';
                    break;
                case 'lg':
                    this._cls += 'h-2.5 w-2.5 ';
                    break;
                default:
                    this._cls += 'h-2 w-2 ';
                    break;
            }
            this._cls += placement;
        }
        // if (this.tdsClass) {
        //   this._cls = this._cls + this.tdsClass;
        // }
    }
    get styleCss() {
        let style = null;
        if (!this.standalone) {
            switch (this.placement) {
                case 'topRight':
                    style = {
                        ['transform']: 'translate(50%,-50%)',
                        ['transform-origin']: '100% 0'
                    };
                    break;
                case 'topLeft':
                    style = {
                        ['transform']: 'translate(-50%,-50%)',
                        ['transform-origin']: '0 0'
                    };
                    break;
                case 'bottomLeft':
                    style = {
                        ['transform']: 'translate(-50%,50%)',
                        ['transform-origin']: '100% 0'
                    };
                    break;
                case 'bottomRight':
                    style = {
                        ['transform']: 'translate(50%,50%)',
                        ['transform-origin']: '0 100%'
                    };
                    break;
                default:
                    style = {
                        ['transform']: 'translate(-50%,50%)',
                        ['transform-origin']: '100% 0'
                    };
                    break;
            }
        }
        if (!!this.tdsStyle) {
            if (style != null)
                return Object.assign({}, style, this.tdsStyle);
            return this.tdsStyle;
        }
        return style;
    }
    getPlacement() {
        let result = "top-0 right-0";
        switch (this.placement) {
            case 'topRight':
                result = "top-0 right-0";
                break;
            case 'topLeft':
                result = "top-0 left-0";
                break;
            case 'bottomLeft':
                result = "bottom-0 left-0";
                break;
            case 'bottomRight':
                result = "bottom-0 right-0";
                break;
            default:
                result = "top-0 right-0";
                break;
        }
        return result;
    }
}
TDSBadgeSupComponent.ɵfac = function TDSBadgeSupComponent_Factory(t) { return new (t || TDSBadgeSupComponent)(i0.ɵɵdirectiveInject(i0.ElementRef)); };
TDSBadgeSupComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSBadgeSupComponent, selectors: [["tds-badge-sup"]], hostVars: 21, hostBindings: function TDSBadgeSupComponent_HostBindings(rf, ctx) {
        if (rf & 2) {
            i0.ɵɵattribute("title", ctx.title === null ? "" : ctx.title || ctx.count);
            i0.ɵɵsyntheticHostProperty("@.disabled", ctx.disableAnimation)("@zoomBadgeMotion", undefined);
            i0.ɵɵstyleMap(ctx.styleCss);
            i0.ɵɵclassMap(ctx.cls);
            i0.ɵɵstyleProp("right", ctx.offset && ctx.offset[0] ? -ctx.offset[0] : null, "px")("margin-top", ctx.offset && ctx.offset[1] ? ctx.offset[1] : null, "px");
            i0.ɵɵclassProp("tds-badge-count", !ctx.dot)("tds-badge-dot", ctx.dot)("tds-badge-multiple-words", ctx.countArray.length >= 2)("px-1", !ctx.dot && ctx.countArray.length < 2)("px-2", !ctx.dot && ctx.countArray.length >= 2);
        }
    }, inputs: { offset: "offset", title: "title", tdsStyle: "tdsStyle", dot: "dot", overflowCount: "overflowCount", disableAnimation: "disableAnimation", count: "count", noAnimation: "noAnimation", standalone: "standalone", size: "size", placement: "placement" }, exportAs: ["tdsBadgeSup"], features: [i0.ɵɵNgOnChangesFeature], decls: 3, vars: 2, consts: [[4, "ngIf", "ngIfElse"], ["overflowTemplate", ""], ["class", "tds-scroll-number-only relative inline-block h-5", "style", "transition: all .3s cubic-bezier(.645,.045,.355,1)", 3, "noAnimation", "transform", 4, "ngFor", "ngForOf"], [1, "tds-scroll-number-only", "relative", "inline-block", "h-5", 2, "transition", "all .3s cubic-bezier(.645,.045,.355,1)", 3, "noAnimation"], [4, "ngIf"], ["class", "tds-scroll-number-only-unit h-5 m-0 ", 3, "current", 4, "ngFor", "ngForOf"], [1, "tds-scroll-number-only-unit", "h-5", "m-0"]], template: function TDSBadgeSupComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵtemplate(0, TDSBadgeSupComponent_ng_container_0_Template, 2, 1, "ng-container", 0);
            i0.ɵɵtemplate(1, TDSBadgeSupComponent_ng_template_1_Template, 1, 1, "ng-template", null, 1, i0.ɵɵtemplateRefExtractor);
        }
        if (rf & 2) {
            const _r1 = i0.ɵɵreference(2);
            i0.ɵɵproperty("ngIf", ctx._count <= ctx.overflowCount)("ngIfElse", _r1);
        }
    }, directives: [i4.NgIf, i4.NgForOf, i3.TDSNoAnimationDirective], encapsulation: 2, data: { animation: [zoomBadgeMotion] }, changeDetection: 0 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSBadgeSupComponent, [{
            type: Component,
            args: [{
                    selector: 'tds-badge-sup',
                    exportAs: 'tdsBadgeSup',
                    preserveWhitespaces: false,
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    animations: [zoomBadgeMotion],
                    template: `
    <ng-container *ngIf="_count <= overflowCount; else overflowTemplate">
      <span
        [noAnimation]="noAnimation"
        *ngFor="let n of maxNumberArray; let i = index"
        class="tds-scroll-number-only relative inline-block h-5"
        [style.transform]="'translateY(' + -countArray[i] * 100 + '%)'"
        style="transition: all .3s cubic-bezier(.645,.045,.355,1)"
      >
        <ng-container *ngIf="!dot && countArray[i] !== undefined">
          <p
            *ngFor="let p of countSingleArray"
            class="tds-scroll-number-only-unit h-5 m-0 " 
            [class.current]="p === countArray[i]"
          >
            {{ p }}
          </p>
        </ng-container>
      </span>
    </ng-container>
    <ng-template #overflowTemplate>{{ overflowCount }}+</ng-template>
  `,
                    host: {
                        '[@.disabled]': `disableAnimation`,
                        '[@zoomBadgeMotion]': '',
                        '[attr.title]': `title === null ? '' : title || count`,
                        '[style]': `styleCss`,
                        '[style.right.px]': `offset && offset[0] ? -offset[0] : null`,
                        '[style.margin-top.px]': `offset && offset[1] ? offset[1] : null`,
                        '[class.tds-badge-count]': `!dot`,
                        '[class.tds-badge-dot]': `dot`,
                        '[class.tds-badge-multiple-words]': `countArray.length >= 2`,
                        '[class.px-1.5]': `!dot && countArray.length < 2`,
                        '[class.px-2]': `!dot && countArray.length >= 2`,
                        '[class]': "cls"
                    }
                }]
        }], function () { return [{ type: i0.ElementRef }]; }, { offset: [{
                type: Input
            }], title: [{
                type: Input
            }], tdsStyle: [{
                type: Input
            }], dot: [{
                type: Input
            }], overflowCount: [{
                type: Input
            }], disableAnimation: [{
                type: Input
            }], count: [{
                type: Input
            }], noAnimation: [{
                type: Input
            }], standalone: [{
                type: Input
            }], size: [{
                type: Input
            }], placement: [{
                type: Input
            }] });
})();

function TDSBadgeComponent_ng_container_1_span_2_ng_container_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵtext(1);
        i0.ɵɵelementContainerEnd();
    }
    if (rf & 2) {
        const ctx_r3 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx_r3.text);
    }
}
function TDSBadgeComponent_ng_container_1_span_2_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 5);
        i0.ɵɵtemplate(1, TDSBadgeComponent_ng_container_1_span_2_ng_container_1_Template, 2, 1, "ng-container", 2);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r2 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("tdsStringTemplateOutlet", ctx_r2.text);
    }
}
const _c0$1 = function (a0, a1, a2) { return { "w-2 h-2": a0, "w-1.5 h-1.5": a1, "w-2.5 h-2.5": a2 }; };
function TDSBadgeComponent_ng_container_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelement(1, "span", 3);
        i0.ɵɵtemplate(2, TDSBadgeComponent_ng_container_1_span_2_Template, 2, 1, "span", 4);
        i0.ɵɵelementContainerEnd();
    }
    if (rf & 2) {
        const ctx_r0 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵclassMapInterpolate1("tds-badge-status-dot ", ctx_r0.colorStatus || ctx_r0.presetColor, " relative -top-px inline-block  align-middle rounded-full");
        i0.ɵɵstyleProp("background", !ctx_r0.presetColor && ctx_r0.color);
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction3(8, _c0$1, ctx_r0.size == "md", ctx_r0.size == "sm", ctx_r0.size == "lg"))("ngStyle", ctx_r0.tdsStyle);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r0.text);
    }
}
function TDSBadgeComponent_ng_container_3_tds_badge_sup_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "tds-badge-sup", 7);
    }
    if (rf & 2) {
        const ctx_r4 = i0.ɵɵnextContext(2);
        i0.ɵɵclassMap(ctx_r4.tdsClass);
        i0.ɵɵproperty("offset", ctx_r4.offset)("title", ctx_r4.title)("tdsStyle", ctx_r4.tdsStyle)("dot", ctx_r4.dot)("size", ctx_r4.size)("overflowCount", ctx_r4.overflowCount)("disableAnimation", !!(ctx_r4.standalone || ctx_r4.status || ctx_r4.color || (ctx_r4.noAnimation == null ? null : ctx_r4.noAnimation.noAnimation)))("count", ctx_r4.count)("noAnimation", !!(ctx_r4.noAnimation == null ? null : ctx_r4.noAnimation.noAnimation))("standalone", ctx_r4.standalone)("placement", ctx_r4.placement);
    }
}
function TDSBadgeComponent_ng_container_3_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵtemplate(1, TDSBadgeComponent_ng_container_3_tds_badge_sup_1_Template, 1, 13, "tds-badge-sup", 6);
        i0.ɵɵelementContainerEnd();
    }
    if (rf & 2) {
        const ctx_r1 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r1.showSup);
    }
}
const _c1 = ["*"];
const TDS_CONFIG_MODULE_NAME = 'badge';
class TDSBadgeComponent {
    constructor(tdsConfigService, renderer, cdr, elementRef, directionality, noAnimation) {
        this.tdsConfigService = tdsConfigService;
        this.renderer = renderer;
        this.cdr = cdr;
        this.elementRef = elementRef;
        this.directionality = directionality;
        this.noAnimation = noAnimation;
        this._tdsModuleName = TDS_CONFIG_MODULE_NAME;
        this.showSup = false;
        this.presetColor = null;
        this.dir = 'ltr';
        this.destroy$ = new Subject();
        this.showZero = false;
        this.showDot = true;
        this.standalone = false;
        this.dot = false;
        this.overflowCount = 99;
        this.color = undefined;
        this.tdsStyle = null;
        this.text = null;
        this.tdsClass = "bg-primary-1 dark:bg-d-primary-1 text-white";
        /**
         * dùng cho status
         */
        this.size = 'md';
        this.placement = 'topRight';
        // TODO: move to host after View Engine deprecation
        this.elementRef.nativeElement.classList.add('tds-badge');
    }
    ngOnInit() {
        var _a;
        (_a = this.directionality.change) === null || _a === void 0 ? void 0 : _a.pipe(takeUntil(this.destroy$)).subscribe((direction) => {
            this.dir = direction;
            this.prepareBadgeForRtl();
            this.cdr.detectChanges();
        });
        this.dir = this.directionality.value;
        this.prepareBadgeForRtl();
    }
    ngOnChanges(changes) {
        const { color, showDot, dot, count, showZero } = changes;
        if (color) {
            this.presetColor = this.color && badgePresetColors.indexOf(this.color) !== -1 ? this.color : null;
        }
        if (showDot || dot || count || showZero) {
            this.showSup = (this.showDot && this.dot) || this.count > 0 || (this.count <= 0 && this.showZero);
        }
    }
    prepareBadgeForRtl() {
        if (this.isRtlLayout) {
            this.renderer.addClass(this.elementRef.nativeElement, 'tds-badge-rtl');
        }
        else {
            this.renderer.removeClass(this.elementRef.nativeElement, 'tds-badge-rtl');
        }
    }
    get isRtlLayout() {
        return this.dir === 'rtl';
    }
    get colorStatus() {
        if (!!this.status) {
            return this.convertClass();
        }
        return null;
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    convertClass() {
        let result = null;
        switch (this.status) {
            case 'primary':
                result = 'bg-primary-1 dark:bg-d-primary-1';
                break;
            case 'secondary':
                result = 'bg-neutral-1-400 dark:bg-d-neutral-1-400';
                break;
            case 'success':
                result = 'bg-success-400 dark:bg-d-success-400';
                break;
            case 'info':
                result = 'bg-info-400 dark:bg-d-info-400';
                break;
            case 'warning':
                result = 'bg-warning-400 dark:bg-d-warning-400';
                break;
            case 'error':
                result = 'bg-error-400 dark:bg-d-error-400';
                break;
            default:
                result = this.status;
                break;
        }
        return result;
    }
}
TDSBadgeComponent.ɵfac = function TDSBadgeComponent_Factory(t) { return new (t || TDSBadgeComponent)(i0.ɵɵdirectiveInject(i1.TDSConfigService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i2.Directionality, 8), i0.ɵɵdirectiveInject(i3.TDSNoAnimationDirective, 9)); };
TDSBadgeComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSBadgeComponent, selectors: [["tds-badge"]], hostAttrs: [1, "box-border", "m-0", "p-0", "relative", "inline-block", "leading-none"], hostVars: 8, hostBindings: function TDSBadgeComponent_HostBindings(rf, ctx) {
        if (rf & 2) {
            i0.ɵɵclassProp("tds-badge-status", ctx.status)("tds-badge-not-a-wrapper", !!(ctx.standalone || ctx.status || ctx.color))("align-middle", !!(ctx.standalone || ctx.status || ctx.color) && !ctx.status)("align-baseline", ctx.status);
        }
    }, inputs: { showZero: "showZero", showDot: "showDot", standalone: "standalone", dot: "dot", overflowCount: "overflowCount", color: "color", tdsStyle: "tdsStyle", text: "text", title: "title", status: "status", count: "count", offset: "offset", tdsClass: "tdsClass", size: "size", placement: "placement" }, exportAs: ["tdsBadge"], features: [i0.ɵɵNgOnChangesFeature], ngContentSelectors: _c1, decls: 4, vars: 2, consts: [[1, "box-border", "m-0", "p-0", "relative", "inline-block", "leading-none"], [4, "ngIf"], [4, "tdsStringTemplateOutlet"], [3, "ngClass", "ngStyle"], ["class", "tds-badge-status-text ml-2", 4, "ngIf"], [1, "tds-badge-status-text", "ml-2"], [3, "offset", "title", "tdsStyle", "dot", "size", "overflowCount", "disableAnimation", "count", "noAnimation", "standalone", "class", "placement", 4, "ngIf"], [3, "offset", "title", "tdsStyle", "dot", "size", "overflowCount", "disableAnimation", "count", "noAnimation", "standalone", "placement"]], template: function TDSBadgeComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵprojectionDef();
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵtemplate(1, TDSBadgeComponent_ng_container_1_Template, 3, 12, "ng-container", 1);
            i0.ɵɵprojection(2);
            i0.ɵɵtemplate(3, TDSBadgeComponent_ng_container_3_Template, 2, 1, "ng-container", 2);
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", (ctx.status || ctx.color && !ctx.standalone) && !ctx.dot);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("tdsStringTemplateOutlet", ctx.count);
        }
    }, directives: [i4.NgIf, i4.NgClass, i4.NgStyle, i5.TDSStringTemplateOutletDirective, TDSBadgeSupComponent, i3.TDSNoAnimationDirective], encapsulation: 2, data: { animation: [zoomBadgeMotion] }, changeDetection: 0 });
__decorate([
    InputBoolean()
], TDSBadgeComponent.prototype, "showZero", void 0);
__decorate([
    InputBoolean()
], TDSBadgeComponent.prototype, "showDot", void 0);
__decorate([
    InputBoolean()
], TDSBadgeComponent.prototype, "standalone", void 0);
__decorate([
    InputBoolean()
], TDSBadgeComponent.prototype, "dot", void 0);
__decorate([
    WithConfig()
], TDSBadgeComponent.prototype, "overflowCount", void 0);
__decorate([
    WithConfig()
], TDSBadgeComponent.prototype, "color", void 0);
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSBadgeComponent, [{
            type: Component,
            args: [{
                    selector: 'tds-badge',
                    exportAs: 'tdsBadge',
                    preserveWhitespaces: false,
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    animations: [zoomBadgeMotion],
                    template: `
  <div class="box-border m-0 p-0 relative inline-block leading-none">
  <ng-container *ngIf="(status || (color && !standalone)) && !dot">
      <span
        class="tds-badge-status-dot {{ colorStatus || presetColor }} relative -top-px inline-block  align-middle rounded-full"
        [style.background]="!presetColor && color"
        [ngClass]="{'w-2 h-2':size =='md','w-1.5 h-1.5':size == 'sm','w-2.5 h-2.5':size =='lg'}"
        [ngStyle]="tdsStyle"
      ></span>
      <span class="tds-badge-status-text ml-2" *ngIf='text'>
        <ng-container *tdsStringTemplateOutlet="text">{{ text }}</ng-container>
      </span>
    </ng-container>
    <ng-content></ng-content>
    <ng-container *tdsStringTemplateOutlet="count">
      <tds-badge-sup
        *ngIf="showSup"
        [offset]="offset"
        [title]="title"
        [tdsStyle]="tdsStyle"
        [dot]="dot"
        [size]="size"
        [overflowCount]="overflowCount"
        [disableAnimation]="!!(standalone || status || color || noAnimation?.noAnimation)"
        [count]="count"
        [noAnimation]="!!noAnimation?.noAnimation"
        [standalone]="standalone"
        [class]="tdsClass"
        [placement]="placement"
      ></tds-badge-sup>
    </ng-container>
  </div>

    
    
  `,
                    host: {
                        '[class.tds-badge-status]': 'status',
                        '[class.tds-badge-not-a-wrapper]': '!!(standalone || status || color)',
                        '[class.align-middle]': '!!(standalone || status || color) && !status',
                        '[class.align-baseline]': 'status',
                        'class': "box-border m-0 p-0 relative inline-block leading-none"
                    }
                }]
        }], function () {
        return [{ type: i1.TDSConfigService }, { type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i2.Directionality, decorators: [{
                        type: Optional
                    }] }, { type: i3.TDSNoAnimationDirective, decorators: [{
                        type: Host
                    }, {
                        type: Optional
                    }] }];
    }, { showZero: [{
                type: Input
            }], showDot: [{
                type: Input
            }], standalone: [{
                type: Input
            }], dot: [{
                type: Input
            }], overflowCount: [{
                type: Input
            }], color: [{
                type: Input
            }], tdsStyle: [{
                type: Input
            }], text: [{
                type: Input
            }], title: [{
                type: Input
            }], status: [{
                type: Input
            }], count: [{
                type: Input
            }], offset: [{
                type: Input
            }], tdsClass: [{
                type: Input
            }], size: [{
                type: Input
            }], placement: [{
                type: Input
            }] });
})();

function TDSRibbonComponent_ng_container_2_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵtext(1);
        i0.ɵɵelementContainerEnd();
    }
    if (rf & 2) {
        const ctx_r0 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx_r0.text);
    }
}
const _c0 = ["*"];
class TDSRibbonComponent {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.placement = 'end';
        this.text = null;
        this.presetColor = null;
        // TODO: move to host after View Engine deprecation
        this.elementRef.nativeElement.classList.add('tds-ribbon-wrapper');
    }
    ngOnChanges(changes) {
        const { color } = changes;
        if (color) {
            this.presetColor = this.color && badgePresetColors.indexOf(this.color) !== -1 ? this.color : null;
        }
    }
}
TDSRibbonComponent.ɵfac = function TDSRibbonComponent_Factory(t) { return new (t || TDSRibbonComponent)(i0.ɵɵdirectiveInject(i0.ElementRef)); };
TDSRibbonComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSRibbonComponent, selectors: [["tds-ribbon"]], inputs: { color: "color", placement: "placement", text: "text" }, exportAs: ["tdsRibbon"], features: [i0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0, decls: 4, vars: 11, consts: [[1, "tds-ribbon"], [4, "tdsStringTemplateOutlet"], [1, "tds-ribbon-corner"]], template: function TDSRibbonComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵprojectionDef();
            i0.ɵɵprojection(0);
            i0.ɵɵelementStart(1, "div", 0);
            i0.ɵɵtemplate(2, TDSRibbonComponent_ng_container_2_Template, 2, 1, "ng-container", 1);
            i0.ɵɵelement(3, "div", 2);
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵadvance(1);
            i0.ɵɵclassMap(ctx.presetColor && "tds-ribbon-color-" + ctx.presetColor);
            i0.ɵɵstyleProp("background-color", !ctx.presetColor && ctx.color);
            i0.ɵɵclassProp("tds-ribbon-placement-end", ctx.placement === "end")("tds-ribbon-placement-start", ctx.placement === "start");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("tdsStringTemplateOutlet", ctx.text);
            i0.ɵɵadvance(1);
            i0.ɵɵstyleProp("color", !ctx.presetColor && ctx.color);
        }
    }, directives: [i5.TDSStringTemplateOutletDirective], encapsulation: 2, changeDetection: 0 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSRibbonComponent, [{
            type: Component,
            args: [{
                    selector: 'tds-ribbon',
                    exportAs: 'tdsRibbon',
                    preserveWhitespaces: false,
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: `
    <ng-content></ng-content>
    <div
      class="tds-ribbon"
      [class]="presetColor && 'tds-ribbon-color-' + presetColor"
      [class.tds-ribbon-placement-end]="placement === 'end'"
      [class.tds-ribbon-placement-start]="placement === 'start'"
      [style.background-color]="!presetColor && color"
    >
      <ng-container *tdsStringTemplateOutlet="text">{{ text }}</ng-container>
      <div class="tds-ribbon-corner" [style.color]="!presetColor && color"></div>
    </div>
  `
                }]
        }], function () { return [{ type: i0.ElementRef }]; }, { color: [{
                type: Input
            }], placement: [{
                type: Input
            }], text: [{
                type: Input
            }] });
})();

class TDSBadgeModule {
}
TDSBadgeModule.ɵfac = function TDSBadgeModule_Factory(t) { return new (t || TDSBadgeModule)(); };
TDSBadgeModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: TDSBadgeModule });
TDSBadgeModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [[BidiModule, CommonModule, ObserversModule, TDSOutletModule, TDSNoAnimationModule]] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSBadgeModule, [{
            type: NgModule,
            args: [{
                    declarations: [TDSBadgeComponent, TDSBadgeSupComponent, TDSRibbonComponent],
                    exports: [TDSBadgeComponent, TDSRibbonComponent],
                    imports: [BidiModule, CommonModule, ObserversModule, TDSOutletModule, TDSNoAnimationModule]
                }]
        }], null, null);
})();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(TDSBadgeModule, { declarations: [TDSBadgeComponent, TDSBadgeSupComponent, TDSRibbonComponent], imports: [BidiModule, CommonModule, ObserversModule, TDSOutletModule, TDSNoAnimationModule], exports: [TDSBadgeComponent, TDSRibbonComponent] }); })();

/**
 * Generated bundle index. Do not edit.
 */

export { TDSBadgeComponent, TDSBadgeModule, TDSBadgeSupComponent, TDSRibbonComponent, badgePresetColors };
//# sourceMappingURL=tds-ui-badges.mjs.map
