import { __decorate } from 'tslib';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import * as i7 from '@angular/cdk/overlay';
import { CdkOverlayOrigin, OverlayModule } from '@angular/cdk/overlay';
import * as i0 from '@angular/core';
import { EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, Input, Output, forwardRef, Optional, Inject, Host, Self, NgModule } from '@angular/core';
import { isValid } from 'date-fns';
import { Subject, of } from 'rxjs';
import { takeUntil, map } from 'rxjs/operators';
import { TDSHelperObject, InputBoolean } from 'tds-ui/shared/utility';
import { reqAnimFrame, slideMotion } from 'tds-ui/core/animation';
import * as i9 from 'tds-ui/form-field';
import { TDS_FORM_FIELD, TDSFormFieldControl } from 'tds-ui/form-field';
import { isNotNil, isNil } from 'tds-ui/core/util';
import * as i1 from 'tds-ui/i18n';
import { TDSI18nModule } from 'tds-ui/i18n';
import * as i2$1 from '@angular/cdk/platform';
import * as i3$1 from '@angular/cdk/bidi';
import { BidiModule } from '@angular/cdk/bidi';
import * as i4$1 from '@angular/forms';
import { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';
import * as i2 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i6 from 'tds-ui/core/outlet';
import { TDSOutletModule } from 'tds-ui/core/outlet';
import * as i3 from 'tds-ui/button';
import { TDSButtonModule } from 'tds-ui/button';
import * as i4 from 'tds-ui/select';
import { TDSSelectModule } from 'tds-ui/select';

class TimeHolder {
    constructor() {
        this.selected12Hours = undefined;
        this._use12Hours = false;
        this._changes = new Subject();
        this._strAM = 'AM';
        this._strPM = 'PM';
    }
    setMinutes(value, disabled) {
        if (value !== this.minutes && !disabled) {
            this.initValue();
            this.value.setMinutes(value);
            this.update();
        }
        return this;
    }
    setHours(value, disabled) {
        if (value !== this.hours && !disabled) {
            this.initValue();
            if (this._use12Hours) {
                if (this.selected12Hours === this._strPM && value !== 12) {
                    this.value.setHours(value + 12);
                }
                else if (this.selected12Hours === this._strAM && value === 12) {
                    this.value.setHours(0);
                }
                else {
                    this.value.setHours(value);
                }
            }
            else {
                this.value.setHours(value);
            }
            this.update();
        }
        return this;
    }
    setSeconds(value, disabled) {
        if (value !== this.seconds && !disabled) {
            this.initValue();
            this.value.setSeconds(value);
            this.update();
        }
        return this;
    }
    setUse12Hours(value) {
        this._use12Hours = value;
        return this;
    }
    setStrAM(value) {
        this._strAM = value;
    }
    setStrPM(value) {
        this._strPM = value;
    }
    get changes() {
        return this._changes.asObservable();
    }
    get textAM() {
        return this._strAM;
    }
    get textPM() {
        return this._strPM;
    }
    setValue(value, use12Hours) {
        if (isNotNil(use12Hours)) {
            this._use12Hours = use12Hours;
        }
        if (value !== this.value) {
            this._value = value;
            if (isNotNil(this.value)) {
                if (this._use12Hours && isNotNil(this.hours)) {
                    this.selected12Hours = this.hours >= 12 ? this._strPM : this._strAM;
                }
            }
            else {
                this._clear();
            }
        }
        return this;
    }
    initValue() {
        if (isNil(this.value)) {
            this.setValue(new Date(), this._use12Hours);
        }
    }
    clear() {
        this._clear();
        this.update();
    }
    get isEmpty() {
        return !(isNotNil(this.hours) || isNotNil(this.minutes) || isNotNil(this.seconds));
    }
    _clear() {
        this._value = undefined;
        //mặc định AM
        this.selected12Hours = this._strAM;
    }
    update() {
        if (this.isEmpty) {
            this._value = undefined;
        }
        else {
            if (isNotNil(this.hours)) {
                this.value.setHours(this.hours);
            }
            if (isNotNil(this.minutes)) {
                this.value.setMinutes(this.minutes);
            }
            if (isNotNil(this.seconds)) {
                this.value.setSeconds(this.seconds);
            }
            if (this._use12Hours) {
                if (this.selected12Hours === this._strPM && this.hours < 12) {
                    this.value.setHours(this.hours + 12);
                }
                if (this.selected12Hours === this._strAM && this.hours >= 12) {
                    this.value.setHours(this.hours - 12);
                }
            }
        }
        this.changed();
    }
    changed() {
        this._changes.next(this.value);
    }
    /**
     * @description
     * UI view hours
     * Get viewHours which is selected in `time-picker-panel` and its range is [12, 1, 2, ..., 11]
     */
    get viewHours() {
        return this._use12Hours && isNotNil(this.hours) ? this.calculateViewHour(this.hours) : this.hours;
    }
    setSelected12Hours(value) {
        if (value.toUpperCase() !== this.selected12Hours) {
            this.selected12Hours = value.toUpperCase();
            this.update();
        }
    }
    get value() {
        return this._value || this._defaultOpenValue;
    }
    get hours() {
        var _a;
        return (_a = this.value) === null || _a === void 0 ? void 0 : _a.getHours();
    }
    get minutes() {
        var _a;
        return (_a = this.value) === null || _a === void 0 ? void 0 : _a.getMinutes();
    }
    get seconds() {
        var _a;
        return (_a = this.value) === null || _a === void 0 ? void 0 : _a.getSeconds();
    }
    setDefaultOpenValue(value) {
        this._defaultOpenValue = value;
        return this;
    }
    calculateViewHour(value) {
        const selected12Hours = this.selected12Hours;
        if (selected12Hours === this._strPM && value > 12) {
            return value - 12;
        }
        if (selected12Hours === this._strAM && value === 0) {
            return 12;
        }
        return value;
    }
}

const _c0$1 = ["hourListElement"];
const _c1$1 = ["minuteListElement"];
const _c2$1 = ["secondListElement"];
const _c3$1 = ["use12HoursListElement"];
const _c4 = function (a0, a1, a2) { return { "dark:text-d-primary-1 text-primary-1 tds-picker-time-panel-cell-selected font-semibold": a0, "tds-picker-time-panel-cell-disabled cursor-not-allowed": a1, "cursor-pointer hover:text-primary-1 dark:hover:text-d-primary-1": a2 }; };
function TDSTimePickerPanelComponent_ng_container_0_ul_4_ng_container_2_li_1_Template(rf, ctx) {
    if (rf & 1) {
        const _r14 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "li", 17);
        i0.ɵɵlistener("click", function TDSTimePickerPanelComponent_ng_container_0_ul_4_ng_container_2_li_1_Template_li_click_0_listener() { i0.ɵɵrestoreView(_r14); const hour_r10 = i0.ɵɵnextContext().$implicit; const ctx_r12 = i0.ɵɵnextContext(3); return ctx_r12.selectHour(hour_r10); });
        i0.ɵɵelementStart(1, "div", 18);
        i0.ɵɵtext(2);
        i0.ɵɵpipe(3, "number");
        i0.ɵɵelementEnd()();
    }
    if (rf & 2) {
        const hour_r10 = i0.ɵɵnextContext().$implicit;
        const ctx_r11 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction3(5, _c4, ctx_r11.isSelectedHour(hour_r10), hour_r10.disabled, !hour_r10.disabled));
        i0.ɵɵadvance(2);
        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(3, 2, hour_r10.index, "2.0-0"));
    }
}
function TDSTimePickerPanelComponent_ng_container_0_ul_4_ng_container_2_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵtemplate(1, TDSTimePickerPanelComponent_ng_container_0_ul_4_ng_container_2_li_1_Template, 4, 9, "li", 16);
        i0.ɵɵelementContainerEnd();
    }
    if (rf & 2) {
        const hour_r10 = ctx.$implicit;
        const ctx_r9 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !(ctx_r9.hideDisabledOptions && hour_r10.disabled));
    }
}
function TDSTimePickerPanelComponent_ng_container_0_ul_4_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "ul", 13, 14);
        i0.ɵɵtemplate(2, TDSTimePickerPanelComponent_ng_container_0_ul_4_ng_container_2_Template, 2, 1, "ng-container", 15);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r3 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngForOf", ctx_r3.hourRange)("ngForTrackBy", ctx_r3.trackByFn);
    }
}
function TDSTimePickerPanelComponent_ng_container_0_ul_5_ng_container_2_li_1_Template(rf, ctx) {
    if (rf & 1) {
        const _r22 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "li", 21);
        i0.ɵɵlistener("click", function TDSTimePickerPanelComponent_ng_container_0_ul_5_ng_container_2_li_1_Template_li_click_0_listener() { i0.ɵɵrestoreView(_r22); const minute_r18 = i0.ɵɵnextContext().$implicit; const ctx_r20 = i0.ɵɵnextContext(3); return ctx_r20.selectMinute(minute_r18); });
        i0.ɵɵelementStart(1, "div", 18);
        i0.ɵɵtext(2);
        i0.ɵɵpipe(3, "number");
        i0.ɵɵelementEnd()();
    }
    if (rf & 2) {
        const minute_r18 = i0.ɵɵnextContext().$implicit;
        const ctx_r19 = i0.ɵɵnextContext(3);
        i0.ɵɵclassProp("text-primary-1", ctx_r19.isSelectedMinute(minute_r18))("tds-picker-time-panel-cell-selected", ctx_r19.isSelectedMinute(minute_r18))("tds-picker-time-panel-cell-disabled", minute_r18.disabled);
        i0.ɵɵadvance(2);
        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(3, 7, minute_r18.index, "2.0-0"));
    }
}
function TDSTimePickerPanelComponent_ng_container_0_ul_5_ng_container_2_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵtemplate(1, TDSTimePickerPanelComponent_ng_container_0_ul_5_ng_container_2_li_1_Template, 4, 10, "li", 20);
        i0.ɵɵelementContainerEnd();
    }
    if (rf & 2) {
        const minute_r18 = ctx.$implicit;
        const ctx_r17 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !(ctx_r17.hideDisabledOptions && minute_r18.disabled));
    }
}
function TDSTimePickerPanelComponent_ng_container_0_ul_5_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "ul", 13, 19);
        i0.ɵɵtemplate(2, TDSTimePickerPanelComponent_ng_container_0_ul_5_ng_container_2_Template, 2, 1, "ng-container", 15);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r4 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngForOf", ctx_r4.minuteRange)("ngForTrackBy", ctx_r4.trackByFn);
    }
}
function TDSTimePickerPanelComponent_ng_container_0_ul_6_ng_container_2_li_1_Template(rf, ctx) {
    if (rf & 1) {
        const _r30 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "li", 21);
        i0.ɵɵlistener("click", function TDSTimePickerPanelComponent_ng_container_0_ul_6_ng_container_2_li_1_Template_li_click_0_listener() { i0.ɵɵrestoreView(_r30); const second_r26 = i0.ɵɵnextContext().$implicit; const ctx_r28 = i0.ɵɵnextContext(3); return ctx_r28.selectSecond(second_r26); });
        i0.ɵɵelementStart(1, "div", 18);
        i0.ɵɵtext(2);
        i0.ɵɵpipe(3, "number");
        i0.ɵɵelementEnd()();
    }
    if (rf & 2) {
        const second_r26 = i0.ɵɵnextContext().$implicit;
        const ctx_r27 = i0.ɵɵnextContext(3);
        i0.ɵɵclassProp("text-primary-1", ctx_r27.isSelectedSecond(second_r26))("tds-picker-time-panel-cell-selected", ctx_r27.isSelectedSecond(second_r26))("tds-picker-time-panel-cell-disabled", second_r26.disabled);
        i0.ɵɵadvance(2);
        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(3, 7, second_r26.index, "2.0-0"));
    }
}
function TDSTimePickerPanelComponent_ng_container_0_ul_6_ng_container_2_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵtemplate(1, TDSTimePickerPanelComponent_ng_container_0_ul_6_ng_container_2_li_1_Template, 4, 10, "li", 20);
        i0.ɵɵelementContainerEnd();
    }
    if (rf & 2) {
        const second_r26 = ctx.$implicit;
        const ctx_r25 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !(ctx_r25.hideDisabledOptions && second_r26.disabled));
    }
}
function TDSTimePickerPanelComponent_ng_container_0_ul_6_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "ul", 13, 22);
        i0.ɵɵtemplate(2, TDSTimePickerPanelComponent_ng_container_0_ul_6_ng_container_2_Template, 2, 1, "ng-container", 15);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r5 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngForOf", ctx_r5.secondRange)("ngForTrackBy", ctx_r5.trackByFn);
    }
}
function TDSTimePickerPanelComponent_ng_container_0_ul_7_ng_container_2_li_1_button_2_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "button", 31);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const range_r34 = i0.ɵɵnextContext(2).$implicit;
        i0.ɵɵproperty("color", "primary");
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(range_r34.value);
    }
}
function TDSTimePickerPanelComponent_ng_container_0_ul_7_ng_container_2_li_1_button_3_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "button", 32);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const range_r34 = i0.ɵɵnextContext(2).$implicit;
        i0.ɵɵproperty("color", "secondary");
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(range_r34.value);
    }
}
function TDSTimePickerPanelComponent_ng_container_0_ul_7_ng_container_2_li_1_Template(rf, ctx) {
    if (rf & 1) {
        const _r42 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "li", 27);
        i0.ɵɵlistener("click", function TDSTimePickerPanelComponent_ng_container_0_ul_7_ng_container_2_li_1_Template_li_click_0_listener() { i0.ɵɵrestoreView(_r42); const range_r34 = i0.ɵɵnextContext().$implicit; const ctx_r40 = i0.ɵɵnextContext(3); return ctx_r40.select12Hours(range_r34); });
        i0.ɵɵelementStart(1, "div", 28);
        i0.ɵɵtemplate(2, TDSTimePickerPanelComponent_ng_container_0_ul_7_ng_container_2_li_1_button_2_Template, 2, 2, "button", 29);
        i0.ɵɵtemplate(3, TDSTimePickerPanelComponent_ng_container_0_ul_7_ng_container_2_li_1_button_3_Template, 2, 2, "button", 30);
        i0.ɵɵelementEnd()();
    }
    if (rf & 2) {
        const range_r34 = i0.ɵɵnextContext().$implicit;
        const ctx_r35 = i0.ɵɵnextContext(3);
        i0.ɵɵclassProp("tds-picker-time-panel-cell-selected", ctx_r35.isSelected12Hours(range_r34));
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r35.isSelected12Hours(range_r34));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r35.isSelected12Hours(range_r34));
    }
}
function TDSTimePickerPanelComponent_ng_container_0_ul_7_ng_container_2_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵtemplate(1, TDSTimePickerPanelComponent_ng_container_0_ul_7_ng_container_2_li_1_Template, 4, 4, "li", 26);
        i0.ɵɵelementContainerEnd();
    }
    if (rf & 2) {
        const ctx_r33 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r33.hideDisabledOptions);
    }
}
function TDSTimePickerPanelComponent_ng_container_0_ul_7_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "ul", 23, 24);
        i0.ɵɵtemplate(2, TDSTimePickerPanelComponent_ng_container_0_ul_7_ng_container_2_Template, 2, 1, "ng-container", 25);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r6 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngForOf", ctx_r6.use12HoursRange);
    }
}
function TDSTimePickerPanelComponent_ng_container_0_div_9_ng_template_1_Template(rf, ctx) { }
function TDSTimePickerPanelComponent_ng_container_0_div_9_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 33);
        i0.ɵɵtemplate(1, TDSTimePickerPanelComponent_ng_container_0_div_9_ng_template_1_Template, 0, 0, "ng-template", 34);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r7 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngTemplateOutlet", ctx_r7.addOn);
    }
}
function TDSTimePickerPanelComponent_ng_container_0_Template(rf, ctx) {
    if (rf & 1) {
        const _r46 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "div", 2)(2, "div", 3)(3, "div", 4);
        i0.ɵɵtemplate(4, TDSTimePickerPanelComponent_ng_container_0_ul_4_Template, 3, 2, "ul", 5);
        i0.ɵɵtemplate(5, TDSTimePickerPanelComponent_ng_container_0_ul_5_Template, 3, 2, "ul", 6);
        i0.ɵɵtemplate(6, TDSTimePickerPanelComponent_ng_container_0_ul_6_Template, 3, 2, "ul", 6);
        i0.ɵɵtemplate(7, TDSTimePickerPanelComponent_ng_container_0_ul_7_Template, 3, 1, "ul", 7);
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(8, "div", 8);
        i0.ɵɵtemplate(9, TDSTimePickerPanelComponent_ng_container_0_div_9_Template, 2, 1, "div", 9);
        i0.ɵɵelementStart(10, "ul", 10)(11, "li", 11)(12, "button", 12);
        i0.ɵɵlistener("click", function TDSTimePickerPanelComponent_ng_container_0_Template_button_click_12_listener() { i0.ɵɵrestoreView(_r46); const ctx_r45 = i0.ɵɵnextContext(); return ctx_r45.onClickNow(); });
        i0.ɵɵtext(13);
        i0.ɵɵpipe(14, "tdsI18n");
        i0.ɵɵelementEnd()()()()()();
        i0.ɵɵelementContainerEnd();
    }
    if (rf & 2) {
        const ctx_r0 = i0.ɵɵnextContext();
        i0.ɵɵadvance(4);
        i0.ɵɵproperty("ngIf", ctx_r0.hourEnabled);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r0.minuteEnabled);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r0.secondEnabled);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r0.use12Hours);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r0.addOn);
        i0.ɵɵadvance(4);
        i0.ɵɵtextInterpolate1(" ", ctx_r0.nowText || i0.ɵɵpipeBind1(14, 6, "Calendar.lang.now"), " ");
    }
}
function TDSTimePickerPanelComponent_ng_template_1_ng_template_6_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵtext(0);
        i0.ɵɵpipe(1, "number");
    }
    if (rf & 2) {
        const item_r52 = ctx.item;
        i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind2(1, 1, item_r52.data.index, "2.0-0"), " ");
    }
}
const _c5 = function (a0) { return { "text-primary-1 dark:text-d-primary-1": a0 }; };
function TDSTimePickerPanelComponent_ng_template_1_ng_template_7_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 43);
        i0.ɵɵtext(1);
        i0.ɵɵpipe(2, "number");
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const item_r54 = ctx.item;
        const selected_r56 = ctx.selected;
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(5, _c5, selected_r56));
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind2(2, 2, item_r54.index, "2.0-0"), " ");
    }
}
function TDSTimePickerPanelComponent_ng_template_1_ng_template_12_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵtext(0);
        i0.ɵɵpipe(1, "number");
    }
    if (rf & 2) {
        const item_r57 = ctx.item;
        i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind2(1, 1, item_r57.data.index, "2.0-0"), " ");
    }
}
function TDSTimePickerPanelComponent_ng_template_1_ng_template_13_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 43);
        i0.ɵɵtext(1);
        i0.ɵɵpipe(2, "number");
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const item_r59 = ctx.item;
        const selected_r61 = ctx.selected;
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(5, _c5, selected_r61));
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind2(2, 2, item_r59.index, "2.0-0"), " ");
    }
}
function TDSTimePickerPanelComponent_ng_template_1_ng_template_16_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 43);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const item_r63 = ctx.item;
        const ctx_r51 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(2, _c5, ctx_r51.time.selected12Hours == item_r63.value));
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", item_r63.value, " ");
    }
}
function TDSTimePickerPanelComponent_ng_template_1_Template(rf, ctx) {
    if (rf & 1) {
        const _r67 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 35)(1, "div", 36);
        i0.ɵɵtext(2);
        i0.ɵɵpipe(3, "async");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "div", 37)(5, "tds-select", 38);
        i0.ɵɵlistener("selectChange", function TDSTimePickerPanelComponent_ng_template_1_Template_tds_select_selectChange_5_listener($event) { i0.ɵɵrestoreView(_r67); const ctx_r66 = i0.ɵɵnextContext(); return ctx_r66.selectHour($event); });
        i0.ɵɵtemplate(6, TDSTimePickerPanelComponent_ng_template_1_ng_template_6_Template, 2, 4, "ng-template", 39);
        i0.ɵɵtemplate(7, TDSTimePickerPanelComponent_ng_template_1_ng_template_7_Template, 3, 7, "ng-template", 40);
        i0.ɵɵelementEnd()();
        i0.ɵɵelementStart(8, "div");
        i0.ɵɵtext(9, " : ");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(10, "div", 37)(11, "tds-select", 38);
        i0.ɵɵlistener("selectChange", function TDSTimePickerPanelComponent_ng_template_1_Template_tds_select_selectChange_11_listener($event) { i0.ɵɵrestoreView(_r67); const ctx_r68 = i0.ɵɵnextContext(); return ctx_r68.selectMinute($event); });
        i0.ɵɵtemplate(12, TDSTimePickerPanelComponent_ng_template_1_ng_template_12_Template, 2, 4, "ng-template", 39);
        i0.ɵɵtemplate(13, TDSTimePickerPanelComponent_ng_template_1_ng_template_13_Template, 3, 7, "ng-template", 40);
        i0.ɵɵelementEnd()();
        i0.ɵɵelementStart(14, "div", 41)(15, "tds-select", 42);
        i0.ɵɵlistener("selectChange", function TDSTimePickerPanelComponent_ng_template_1_Template_tds_select_selectChange_15_listener($event) { i0.ɵɵrestoreView(_r67); const ctx_r69 = i0.ɵɵnextContext(); return ctx_r69.select12Hours($event); });
        i0.ɵɵtemplate(16, TDSTimePickerPanelComponent_ng_template_1_ng_template_16_Template, 2, 4, "ng-template", 40);
        i0.ɵɵelementEnd()()();
    }
    if (rf & 2) {
        const ctx_r2 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind1(3, 13, ctx_r2.i18nTime$), " ");
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("data", ctx_r2.hourRange)("ngModel", ctx_r2.time.viewHours)("valuePrimitive", false)("classIcon", null);
        i0.ɵɵadvance(6);
        i0.ɵɵproperty("data", ctx_r2.minuteRange)("ngModel", ctx_r2.time.minutes)("valuePrimitive", false)("classIcon", null);
        i0.ɵɵadvance(4);
        i0.ɵɵproperty("data", ctx_r2.use12HoursRange)("ngModel", ctx_r2.time.selected12Hours)("valuePrimitive", false)("classIcon", null);
    }
}
function makeRange(length, step = 1, start = 0) {
    return new Array(Math.ceil(length / step)).fill(0).map((_, i) => (i + start) * step);
}
class TDSTimePickerPanelComponent {
    constructor(cdr, dateHelper, elementRef, i18n) {
        this.cdr = cdr;
        this.dateHelper = dateHelper;
        this.elementRef = elementRef;
        this.i18n = i18n;
        this._hourStep = 1;
        this._minuteStep = 1;
        this._secondStep = 1;
        this.unsubscribe$ = new Subject();
        this._format = 'hh:mm:ss a';
        this._disabledHours = () => [];
        this._disabledMinutes = () => [];
        this._disabledSeconds = () => [];
        this._allowEmpty = true;
        this._strAM = 'AM';
        this._strPM = 'PM';
        this.time = new TimeHolder();
        this.hourEnabled = true;
        this.minuteEnabled = true;
        this.secondEnabled = true;
        this.firstScrolled = false;
        this.enabledColumns = 3;
        this.select12HoursRange = [];
        this.select12HoursRangeDefault = [
            {
                index: 0,
                value: this._strAM
            },
            {
                index: 1,
                value: this._strPM
            }
        ];
        this.i18nTime$ = of(undefined);
        this.inDatePicker = false; // If inside a date-picker, more diff works need to be done
        this.hideDisabledOptions = false;
        this.use12Hours = true;
        this.closePanel = new EventEmitter();
        // TODO: move to host after View Engine deprecation
        this.elementRef.nativeElement.classList.add('tds-picker-time-panel');
    }
    set allowEmpty(value) {
        if (isNotNil(value)) {
            this._allowEmpty = value;
        }
    }
    get allowEmpty() {
        return this._allowEmpty;
    }
    set disabledHours(value) {
        this._disabledHours = value;
        if (!!this._disabledHours) {
            this.buildHours();
        }
    }
    get disabledHours() {
        return this._disabledHours;
    }
    set disabledMinutes(value) {
        if (isNotNil(value)) {
            this._disabledMinutes = value;
            this.buildMinutes();
        }
    }
    get disabledMinutes() {
        return this._disabledMinutes;
    }
    set disabledSeconds(value) {
        if (isNotNil(value)) {
            this._disabledSeconds = value;
            this.buildSeconds();
        }
    }
    get disabledSeconds() {
        return this._disabledSeconds;
    }
    set format(value) {
        if (isNotNil(value)) {
            this._format = value;
            this.enabledColumns = 0;
            const charSet = new Set(value);
            this.hourEnabled = charSet.has('H') || charSet.has('h');
            this.minuteEnabled = charSet.has('m');
            this.secondEnabled = charSet.has('s');
            if (this.hourEnabled) {
                this.enabledColumns++;
            }
            if (this.minuteEnabled) {
                this.enabledColumns++;
            }
            if (this.secondEnabled) {
                this.enabledColumns++;
            }
            if (this.use12Hours) {
                this.build12Hours();
            }
        }
    }
    get format() {
        return this._format;
    }
    set hourStep(value) {
        if (isNotNil(value)) {
            this._hourStep = value;
            this.buildHours();
        }
    }
    get hourStep() {
        return this._hourStep;
    }
    set minuteStep(value) {
        if (isNotNil(value)) {
            this._minuteStep = value;
            this.buildMinutes();
        }
    }
    get minuteStep() {
        return this._minuteStep;
    }
    set secondStep(value) {
        if (isNotNil(value)) {
            this._secondStep = value;
            this.buildSeconds();
        }
    }
    get secondStep() {
        return this._secondStep;
    }
    trackByFn(index) {
        return index;
    }
    buildHours() {
        var _a;
        let hourRanges = 24;
        let disabledHours = (_a = this.disabledHours) === null || _a === void 0 ? void 0 : _a.call(this);
        let startIndex = 0;
        if (this.use12Hours) {
            hourRanges = 12;
            if (disabledHours) {
                if (this.time.selected12Hours === this._strPM) {
                    /**
                     * Filter and transform hours which greater or equal to 12
                     * [0, 1, 2, ..., 12, 13, 14, 15, ..., 23] => [12, 1, 2, 3, ..., 11]
                     */
                    disabledHours = disabledHours.filter(i => i >= 12).map(i => (i > 12 ? i - 12 : i));
                }
                else {
                    /**
                     * Filter and transform hours which less than 12
                     * [0, 1, 2,..., 12, 13, 14, 15, ...23] => [12, 1, 2, 3, ..., 11]
                     */
                    disabledHours = disabledHours.filter(i => i < 12 || i === 24).map(i => (i === 24 || i === 0 ? 12 : i));
                }
            }
            startIndex = 1;
        }
        this.hourRange = makeRange(hourRanges, this.hourStep, startIndex).map(r => {
            return {
                index: r,
                disabled: !!disabledHours && disabledHours.indexOf(r) !== -1
            };
        });
        if (this.use12Hours && this.hourRange[this.hourRange.length - 1].index === 12) {
            const temp = [...this.hourRange];
            temp.unshift(temp[temp.length - 1]);
            temp.splice(temp.length - 1, 1);
            this.hourRange = temp;
        }
    }
    buildMinutes() {
        this.minuteRange = makeRange(60, this.minuteStep).map(r => {
            return {
                index: r,
                disabled: !!this.disabledMinutes && this.disabledMinutes(this.time.hours).indexOf(r) !== -1
            };
        });
    }
    buildSeconds() {
        this.secondRange = makeRange(60, this.secondStep).map(r => {
            return {
                index: r,
                disabled: !!this.disabledSeconds && this.disabledSeconds(this.time.hours, this.time.minutes).indexOf(r) !== -1
            };
        });
    }
    build12Hours() {
        const local = this.i18n.getLocale();
        const isUpperFormat = this._format.includes('A');
        if (local.locale === 'vi') {
            this._strAM = 'SA';
            this._strPM = 'CH';
            this.time.setStrAM('SA');
            this.time.setStrPM('CH');
        }
        this.use12HoursRange = [
            {
                index: 0,
                value: this._strAM
            },
            {
                index: 1,
                value: this._strPM
            }
        ];
        this.select12HoursRangeDefault = [
            {
                index: 0,
                value: this._strAM
            },
            {
                index: 1,
                value: this._strPM
            }
        ];
    }
    buildSelect12Hours() {
        this.select12HoursRange = [];
        let array = [];
        if (this.use12Hours && TDSHelperObject.hasValue(this.hourRange)) {
            this.hourRange.forEach(h => {
                array.push({
                    hour: h.index,
                    minute: 0,
                    second: 0,
                    disabled: h.disabled,
                    label: `${h.index}:00`
                });
                array.push({
                    hour: h.index,
                    minute: 30,
                    second: 0,
                    disabled: h.disabled,
                    label: `${h.index}:30`
                });
            });
            this.select12HoursRange = array.sort((a, b) => a.hour - b.hour);
        }
    }
    buildTimes() {
        this.buildHours();
        this.buildMinutes();
        this.buildSeconds();
        this.build12Hours();
        this.buildSelect12Hours();
    }
    scrollToTime(delay = 0) {
        if (this.hourEnabled && this.hourListElement) {
            this.scrollToSelected(this.hourListElement.nativeElement, this.time.viewHours, delay, 'hour');
        }
        if (this.minuteEnabled && this.minuteListElement) {
            this.scrollToSelected(this.minuteListElement.nativeElement, this.time.minutes, delay, 'minute');
        }
        if (this.secondEnabled && this.secondListElement) {
            this.scrollToSelected(this.secondListElement.nativeElement, this.time.seconds, delay, 'second');
        }
        if (this.use12Hours && this.use12HoursListElement) {
            const selectedHours = this.time.selected12Hours;
            const index = selectedHours === this._strAM ? 0 : 1;
            this.scrollToSelected(this.use12HoursListElement.nativeElement, index, delay, '12-hour');
        }
    }
    selectHour(hour) {
        this.time.setHours(hour.index, hour.disabled);
        if (!!this._disabledMinutes) {
            this.buildMinutes();
        }
        if (this._disabledSeconds || this._disabledMinutes) {
            this.buildSeconds();
        }
    }
    selectMinute(minute) {
        this.time.setMinutes(minute.index, minute.disabled);
        if (!!this._disabledSeconds) {
            this.buildSeconds();
        }
    }
    selectSecond(second) {
        this.time.setSeconds(second.index, second.disabled);
    }
    select12Hours(value) {
        var _a;
        const select12h = (_a = this.select12HoursRangeDefault.find(f => f.index == value.index)) === null || _a === void 0 ? void 0 : _a.value;
        this.time.setSelected12Hours(select12h);
        if (!!this._disabledHours) {
            this.buildHours();
        }
        if (!!this._disabledMinutes) {
            this.buildMinutes();
        }
        if (!!this._disabledSeconds) {
            this.buildSeconds();
        }
    }
    selectCutom12Hours(data, str) {
        var _a;
        const select12h = (_a = this.select12HoursRangeDefault.find(f => f.index == str.index)) === null || _a === void 0 ? void 0 : _a.value;
        this.time.setHours(data.hour, data.disabled);
        this.time.setMinutes(data.minute, data.disabled);
        this.time.setSeconds(data.second, data.disabled);
        this.time.setSelected12Hours(select12h);
        if (!!this._disabledHours) {
            this.buildHours();
        }
        if (!!this._disabledMinutes) {
            this.buildMinutes();
        }
        if (!!this._disabledSeconds) {
            this.buildSeconds();
        }
    }
    scrollToSelected(instance, index, duration = 0, unit) {
        if (!instance) {
            return;
        }
        const transIndex = this.translateIndex(index, unit);
        const currentOption = (instance.children[transIndex] || instance.children[0]);
        this.scrollTo(instance, currentOption.offsetTop, duration);
    }
    translateIndex(index, unit) {
        var _a, _b, _c;
        if (unit === 'hour') {
            return this.calcIndex((_a = this.disabledHours) === null || _a === void 0 ? void 0 : _a.call(this), this.hourRange.map(item => item.index).indexOf(index));
        }
        else if (unit === 'minute') {
            return this.calcIndex((_b = this.disabledMinutes) === null || _b === void 0 ? void 0 : _b.call(this, this.time.hours), this.minuteRange.map(item => item.index).indexOf(index));
        }
        else if (unit === 'second') {
            // second
            return this.calcIndex((_c = this.disabledSeconds) === null || _c === void 0 ? void 0 : _c.call(this, this.time.hours, this.time.minutes), this.secondRange.map(item => item.index).indexOf(index));
        }
        else {
            // 12-hour
            return this.calcIndex([], this.use12HoursRange.map(item => item.index).indexOf(index));
        }
    }
    scrollTo(element, to, duration) {
        if (duration <= 0) {
            element.scrollTop = to;
            return;
        }
        const difference = to - element.scrollTop;
        const perTick = (difference / duration) * 10;
        reqAnimFrame(() => {
            element.scrollTop = element.scrollTop + perTick;
            if (element.scrollTop === to) {
                return;
            }
            this.scrollTo(element, to, duration - 10);
        });
    }
    calcIndex(array, index) {
        if ((array === null || array === void 0 ? void 0 : array.length) && this.hideDisabledOptions) {
            return (index -
                array.reduce((pre, value) => {
                    return pre + (value < index ? 1 : 0);
                }, 0));
        }
        else {
            return index;
        }
    }
    changed() {
        if (this.onChange) {
            this.onChange(this.time.value);
        }
    }
    touched() {
        if (this.onTouch) {
            this.onTouch();
        }
    }
    timeDisabled(value) {
        var _a, _b, _c, _d, _e, _f;
        const hour = value.getHours();
        const minute = value.getMinutes();
        const second = value.getSeconds();
        return (((_b = (_a = this.disabledHours) === null || _a === void 0 ? void 0 : _a.call(this).indexOf(hour)) !== null && _b !== void 0 ? _b : -1) > -1 ||
            ((_d = (_c = this.disabledMinutes) === null || _c === void 0 ? void 0 : _c.call(this, hour).indexOf(minute)) !== null && _d !== void 0 ? _d : -1) > -1 ||
            ((_f = (_e = this.disabledSeconds) === null || _e === void 0 ? void 0 : _e.call(this, hour, minute).indexOf(second)) !== null && _f !== void 0 ? _f : -1) > -1);
    }
    onClickNow() {
        const now = new Date();
        if (this.timeDisabled(now)) {
            return;
        }
        this.time.setValue(now);
        this.changed();
        this.closePanel.emit();
    }
    onClickOk() {
        this.closePanel.emit();
    }
    isSelectedHour(hour) {
        return hour.index === this.time.viewHours;
    }
    isSelectedMinute(minute) {
        return minute.index === this.time.minutes;
    }
    isSelectedSecond(second) {
        return second.index === this.time.seconds;
    }
    // isSelected12Hours(value: { hour: number; minute: number; second: number; label: string; disabled: boolean }, range: { index: number; value: string }): boolean {
    //   const select12h = this.select12HoursRangeDefault.find(f => f.index == range.index)?.value?.toUpperCase();
    //   return value.hour === this.time.viewHours
    //     && value.minute === this.time.minutes
    //     && value.second === this.time.seconds
    //     && select12h === this.time.selected12Hours?.toUpperCase();
    // }
    isSelected12Hours(value) {
        var _a, _b, _c;
        const select12h = (_b = (_a = this.select12HoursRangeDefault.find(f => f.index == value.index)) === null || _a === void 0 ? void 0 : _a.value) === null || _b === void 0 ? void 0 : _b.toUpperCase();
        return select12h === ((_c = this.time.selected12Hours) === null || _c === void 0 ? void 0 : _c.toUpperCase());
    }
    ngOnInit() {
        this.time.changes.pipe(takeUntil(this.unsubscribe$)).subscribe(() => {
            this.changed();
            this.touched();
            this.scrollToTime(120);
        });
        this.buildTimes();
        setTimeout(() => {
            this.scrollToTime();
            this.firstScrolled = true;
        });
        this.i18nTime$ = this.i18n.localeChange.pipe(map((locale) => locale.TimePicker.time));
    }
    ngOnDestroy() {
        this.unsubscribe$.next();
        this.unsubscribe$.complete();
    }
    ngOnChanges(changes) {
        const { use12Hours, defaultOpenValue } = changes;
        if (!(use12Hours === null || use12Hours === void 0 ? void 0 : use12Hours.previousValue) && (use12Hours === null || use12Hours === void 0 ? void 0 : use12Hours.currentValue)) {
            this.build12Hours();
            this.enabledColumns++;
        }
        if (defaultOpenValue === null || defaultOpenValue === void 0 ? void 0 : defaultOpenValue.currentValue) {
            this.time.setDefaultOpenValue(this.defaultOpenValue || new Date());
        }
    }
    writeValue(value) {
        this.time.setValue(value, this.use12Hours);
        this.buildTimes();
        if (value && this.firstScrolled) {
            this.scrollToTime(120);
        }
        // Mark this component to be checked manually with internal properties changing (see: https://github.com/angular/angular/issues/10816)
        this.cdr.markForCheck();
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouch = fn;
    }
    /**
     * Prevent input losing focus when click panel
     * @param event
     */
    onMousedown(event) {
        event.preventDefault();
    }
}
TDSTimePickerPanelComponent.ɵfac = function TDSTimePickerPanelComponent_Factory(t) { return new (t || TDSTimePickerPanelComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.DateHelperService), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.TDSI18nService)); };
TDSTimePickerPanelComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSTimePickerPanelComponent, selectors: [["tds-time-picker-panel"]], viewQuery: function TDSTimePickerPanelComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(_c0$1, 5);
            i0.ɵɵviewQuery(_c1$1, 5);
            i0.ɵɵviewQuery(_c2$1, 5);
            i0.ɵɵviewQuery(_c3$1, 5);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.hourListElement = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.minuteListElement = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.secondListElement = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.use12HoursListElement = _t.first);
        }
    }, hostAttrs: [1, "flex", "flex-col", "pr-0", "border-box"], hostVars: 12, hostBindings: function TDSTimePickerPanelComponent_HostBindings(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵlistener("mousedown", function TDSTimePickerPanelComponent_mousedown_HostBindingHandler($event) { return ctx.onMousedown($event); });
        }
        if (rf & 2) {
            i0.ɵɵclassProp("tds-picker-time-panel-column-0", ctx.enabledColumns === 0 && !ctx.inDatePicker)("tds-picker-time-panel-column-1", ctx.enabledColumns === 1 && !ctx.inDatePicker)("tds-picker-time-panel-column-2", ctx.enabledColumns === 2 && !ctx.inDatePicker)("tds-picker-time-panel-column-3", ctx.enabledColumns === 3 && !ctx.inDatePicker)("tds-picker-time-panel-narrow", ctx.enabledColumns < 3)("tds-picker-time-panel-placement-bottomLeft", !ctx.inDatePicker);
        }
    }, inputs: { inDatePicker: "inDatePicker", addOn: "addOn", hideDisabledOptions: "hideDisabledOptions", clearText: "clearText", nowText: "nowText", okText: "okText", placeHolder: "placeHolder", use12Hours: "use12Hours", defaultOpenValue: "defaultOpenValue", allowEmpty: "allowEmpty", disabledHours: "disabledHours", disabledMinutes: "disabledMinutes", disabledSeconds: "disabledSeconds", format: "format", hourStep: "hourStep", minuteStep: "minuteStep", secondStep: "secondStep" }, outputs: { closePanel: "closePanel" }, exportAs: ["tdsTimePickerPanel"], features: [i0.ɵɵProvidersFeature([{ provide: NG_VALUE_ACCESSOR, useExisting: TDSTimePickerPanelComponent, multi: true }]), i0.ɵɵNgOnChangesFeature], decls: 3, vars: 2, consts: [[4, "ngIf", "ngIfElse"], ["datePickerTpl", ""], [1, "w-full", "py-1"], [1, "text-body-2", "bg-white", "dark:bg-d-neutral-3-200", "shadow-1-xl", "text-neutral-1-900", "dark:text-d-neutral-1-900", "rounded"], [1, "tds-picker-content", "flex", "justify-between", "h-56", "overflow-y-hidde"], ["class", "tds-picker-time-panel-column h-full relative overflow-y-hidden hover:overflow-y-auto tds-panel-scroll border-r border-neutral-2-100 dark:border-d-neutral-2-100 flex flex-col w-14 py-2.5", 4, "ngIf"], ["class", "tds-picker-time-panel-column  h-full relative overflow-y-hidden hover:overflow-y-auto tds-panel-scroll border-r border-neutral-2-100 dark:border-d-neutral-2-100 flex flex-col w-14 py-2.5", 4, "ngIf"], ["class", "tds-picker-time-panel-column h-full relative overflow-y-hidden flex flex-col px-3 py-2.5 min-w-[70px] ", 4, "ngIf"], [1, "tds-picker-footer", "p-2", "border-t", "border-neutral-2-100", "dark:border-d-neutral-2-100"], ["class", "tds-picker-footer-extra", 4, "ngIf"], [1, "tds-picker-ranges", "flex", "justify-center", "items-center"], [1, "tds-picker-now"], ["tds-button-flat", "", "type", "button", "color", "primary", 1, "uppercase", 2, "min-width", "0", 3, "click"], [1, "tds-picker-time-panel-column", "h-full", "relative", "overflow-y-hidden", "hover:overflow-y-auto", "tds-panel-scroll", "border-r", "border-neutral-2-100", "dark:border-d-neutral-2-100", "flex", "flex-col", "w-14", "py-2.5"], ["hourListElement", ""], [4, "ngFor", "ngForOf", "ngForTrackBy"], ["class", "tds-picker-time-panel-cell  flex-auto  px-3 py-2 items-center justify-center", 3, "ngClass", "click", 4, "ngIf"], [1, "tds-picker-time-panel-cell", "flex-auto", "px-3", "py-2", "items-center", "justify-center", 3, "ngClass", "click"], [1, "tds-picker-time-panel-cell-inner"], ["minuteListElement", ""], ["class", "tds-picker-time-panel-cell cursor-pointer hover:text-primary-1 px-3 py-2 items-center justify-center", 3, "text-primary-1", "tds-picker-time-panel-cell-selected", "tds-picker-time-panel-cell-disabled", "click", 4, "ngIf"], [1, "tds-picker-time-panel-cell", "cursor-pointer", "hover:text-primary-1", "px-3", "py-2", "items-center", "justify-center", 3, "click"], ["secondListElement", ""], [1, "tds-picker-time-panel-column", "h-full", "relative", "overflow-y-hidden", "flex", "flex-col", "px-3", "py-2.5", "min-w-[70px]"], ["use12HoursListElement", ""], [4, "ngFor", "ngForOf"], ["class", "tds-picker-time-panel-cell flex pb-2", 3, "tds-picker-time-panel-cell-selected", "click", 4, "ngIf"], [1, "tds-picker-time-panel-cell", "flex", "pb-2", 3, "click"], [1, "tds-picker-time-panel-cell-inner", "flex", "items-center", "justify-center"], ["tds-button", "", "type", "button", "size", "sm", 3, "color", 4, "ngIf"], ["tds-button-flat", "", "type", "button", "size", "sm", 3, "color", 4, "ngIf"], ["tds-button", "", "type", "button", "size", "sm", 3, "color"], ["tds-button-flat", "", "type", "button", "size", "sm", 3, "color"], [1, "tds-picker-footer-extra"], [3, "ngTemplateOutlet"], [1, "w-full", "flex", "items-center", "text-neutral-1-900", "dark:text-d-neutral-1-900"], [1, "text-body-2", "font-semibold"], [1, "w-14", "mx-2"], ["valueField", "index", "textField", "index", 3, "data", "ngModel", "valuePrimitive", "classIcon", "selectChange"], ["tds-label-tmp", ""], ["tds-option-tmp", ""], [1, "w-14"], ["valueField", "index", "textField", "value", 3, "data", "ngModel", "valuePrimitive", "classIcon", "selectChange"], [3, "ngClass"]], template: function TDSTimePickerPanelComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵtemplate(0, TDSTimePickerPanelComponent_ng_container_0_Template, 15, 8, "ng-container", 0);
            i0.ɵɵtemplate(1, TDSTimePickerPanelComponent_ng_template_1_Template, 17, 15, "ng-template", null, 1, i0.ɵɵtemplateRefExtractor);
        }
        if (rf & 2) {
            const _r1 = i0.ɵɵreference(2);
            i0.ɵɵproperty("ngIf", !ctx.inDatePicker)("ngIfElse", _r1);
        }
    }, directives: [i2.NgIf, i2.NgForOf, i2.NgClass, i3.TDSButtonComponent, i3.TDSButtonFlatComponent, i2.NgTemplateOutlet, i4.TDSSelect, i4$1.NgControlStatus, i4$1.NgModel, i4.TDSLabelTemplateDirective, i4.TDSOptionTemplateDirective], pipes: [i2.DecimalPipe, i1.TDSI18nPipe, i2.AsyncPipe], encapsulation: 2, changeDetection: 0 });
__decorate([
    InputBoolean()
], TDSTimePickerPanelComponent.prototype, "use12Hours", void 0);
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSTimePickerPanelComponent, [{
            type: Component,
            args: [{ encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, selector: 'tds-time-picker-panel', exportAs: 'tdsTimePickerPanel', host: {
                        class: "flex flex-col pr-0 border-box ",
                        '[class.tds-picker-time-panel-column-0]': `enabledColumns === 0 && !inDatePicker`,
                        '[class.tds-picker-time-panel-column-1]': `enabledColumns === 1 && !inDatePicker`,
                        '[class.tds-picker-time-panel-column-2]': `enabledColumns === 2 && !inDatePicker`,
                        '[class.tds-picker-time-panel-column-3]': `enabledColumns === 3 && !inDatePicker`,
                        '[class.tds-picker-time-panel-narrow]': `enabledColumns < 3`,
                        '[class.tds-picker-time-panel-placement-bottomLeft]': `!inDatePicker`,
                        '(mousedown)': 'onMousedown($event)'
                    }, providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: TDSTimePickerPanelComponent, multi: true }], template: "<ng-container *ngIf=\"!inDatePicker;else datePickerTpl\">\r\n    <div class=\"w-full py-1\">\r\n        <div\r\n            class=\"text-body-2 bg-white dark:bg-d-neutral-3-200 shadow-1-xl text-neutral-1-900 dark:text-d-neutral-1-900 rounded\">\r\n            <!-- <div *ngIf=\"inDatePicker\" class=\"tds-picker-header\">\r\n             <div class=\"tds-picker-header-view\">{{ dateHelper.format($any(time?.value), format) || '&nbsp;' }}</div>\r\n         </div> -->\r\n            <div class=\"tds-picker-content flex justify-between  h-56 overflow-y-hidde \">\r\n                <ul *ngIf=\"hourEnabled\" #hourListElement\r\n                    class=\"tds-picker-time-panel-column h-full relative overflow-y-hidden hover:overflow-y-auto tds-panel-scroll border-r border-neutral-2-100 dark:border-d-neutral-2-100 flex flex-col w-14 py-2.5\">\r\n                    <ng-container *ngFor=\"let hour of hourRange; trackBy: trackByFn\">\r\n                        <li *ngIf=\"!(hideDisabledOptions && hour.disabled)\"\r\n                            class=\"tds-picker-time-panel-cell  flex-auto  px-3 py-2 items-center justify-center\"\r\n                            (click)=\"selectHour(hour)\" [ngClass]=\"{'dark:text-d-primary-1 text-primary-1 tds-picker-time-panel-cell-selected font-semibold':isSelectedHour(hour),\r\n                         'tds-picker-time-panel-cell-disabled cursor-not-allowed':hour.disabled,\r\n                         'cursor-pointer hover:text-primary-1 dark:hover:text-d-primary-1':!hour.disabled\r\n                     }\">\r\n                            <div class=\"tds-picker-time-panel-cell-inner\">{{ hour.index | number: '2.0-0' }}</div>\r\n                        </li>\r\n                    </ng-container>\r\n                </ul>\r\n                <ul *ngIf=\"minuteEnabled\" #minuteListElement\r\n                    class=\"tds-picker-time-panel-column  h-full relative overflow-y-hidden hover:overflow-y-auto tds-panel-scroll border-r border-neutral-2-100 dark:border-d-neutral-2-100 flex flex-col w-14 py-2.5\">\r\n                    <ng-container *ngFor=\"let minute of minuteRange; trackBy: trackByFn\">\r\n                        <li *ngIf=\"!(hideDisabledOptions && minute.disabled)\"\r\n                            class=\"tds-picker-time-panel-cell cursor-pointer hover:text-primary-1 px-3 py-2 items-center justify-center\"\r\n                            (click)=\"selectMinute(minute)\" [class.text-primary-1]=\"isSelectedMinute(minute)\"\r\n                            [class.tds-picker-time-panel-cell-selected]=\"isSelectedMinute(minute)\"\r\n                            [class.tds-picker-time-panel-cell-disabled]=\"minute.disabled\">\r\n                            <div class=\"tds-picker-time-panel-cell-inner\">{{ minute.index | number: '2.0-0' }}</div>\r\n                        </li>\r\n                    </ng-container>\r\n                </ul>\r\n                <ul *ngIf=\"secondEnabled\" #secondListElement\r\n                    class=\"tds-picker-time-panel-column  h-full relative overflow-y-hidden hover:overflow-y-auto tds-panel-scroll border-r border-neutral-2-100 dark:border-d-neutral-2-100 flex flex-col w-14 py-2.5\">\r\n                    <ng-container *ngFor=\"let second of secondRange; trackBy: trackByFn\">\r\n                        <li *ngIf=\"!(hideDisabledOptions && second.disabled)\"\r\n                            class=\"tds-picker-time-panel-cell cursor-pointer hover:text-primary-1 px-3 py-2 items-center justify-center\"\r\n                            (click)=\"selectSecond(second)\" [class.text-primary-1]=\"isSelectedSecond(second)\"\r\n                            [class.tds-picker-time-panel-cell-selected]=\"isSelectedSecond(second)\"\r\n                            [class.tds-picker-time-panel-cell-disabled]=\"second.disabled\">\r\n                            <div class=\"tds-picker-time-panel-cell-inner\">{{ second.index | number: '2.0-0' }}</div>\r\n                        </li>\r\n                    </ng-container>\r\n                </ul>\r\n                <ul *ngIf=\"use12Hours\" #use12HoursListElement\r\n                    class=\"tds-picker-time-panel-column h-full relative overflow-y-hidden flex flex-col px-3 py-2.5 min-w-[70px] \">\r\n                    <ng-container *ngFor=\"let range of use12HoursRange\">\r\n                        <li *ngIf=\"!hideDisabledOptions\" (click)=\"select12Hours(range)\"\r\n                            class=\"tds-picker-time-panel-cell flex pb-2\"\r\n                            [class.tds-picker-time-panel-cell-selected]=\"isSelected12Hours(range)\">\r\n                            <div class=\"tds-picker-time-panel-cell-inner flex items-center justify-center \">\r\n                                <button tds-button type=\"button\" size=\"sm\" *ngIf=\"isSelected12Hours(range)\"\r\n                                    [color]=\"'primary'\">{{ range.value }}</button>\r\n                                <button tds-button-flat type=\"button\" size=\"sm\" *ngIf=\"!isSelected12Hours(range)\"\r\n                                    [color]=\"'secondary'\">{{ range.value }}</button>\r\n                            </div>\r\n                        </li>\r\n                    </ng-container>\r\n                </ul>\r\n            </div>\r\n            <div class=\"tds-picker-footer p-2 border-t  border-neutral-2-100 dark:border-d-neutral-2-100\">\r\n                <div *ngIf=\"addOn\" class=\"tds-picker-footer-extra\">\r\n                    <ng-template [ngTemplateOutlet]=\"addOn\"></ng-template>\r\n                </div>\r\n                <ul class=\"tds-picker-ranges flex justify-center items-center\">\r\n                    <li class=\"tds-picker-now\">\r\n                        <button tds-button-flat type=\"button\" class=\"uppercase\" color=\"primary\" (click)=\"onClickNow()\"\r\n                            style=\"min-width:0\">\r\n                            {{ nowText || ('Calendar.lang.now' | tdsI18n) }}\r\n                        </button>\r\n\r\n                    </li>\r\n                    <!-- <li class=\"tds-picker-ok\">\r\n                     <button tds-button type=\"button\" size=\"sm\" color=\"primary\"  (click)=\"onClickOk()\" style=\"min-width:0\">\r\n                         {{ okText || ('Calendar.lang.ok' | tdsI18n) }}\r\n                     </button>\r\n                 </li> -->\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</ng-container>\r\n\r\n<ng-template #datePickerTpl>\r\n    <div class=\"w-full flex items-center text-neutral-1-900 dark:text-d-neutral-1-900\">\r\n        <div class=\"text-body-2 font-semibold \">\r\n            {{(i18nTime$ | async)}}\r\n        </div>\r\n        <div class=\"w-14 mx-2\">\r\n            <tds-select [data]=\"hourRange\" [ngModel]=\"time.viewHours\" (selectChange)=\"selectHour($event)\"\r\n                [valuePrimitive]=\"false\" valueField=\"index\" textField=\"index\" [classIcon]=\"null\">\r\n                <ng-template tds-label-tmp let-item=\"item\">\r\n                    {{item.data.index | number: '2.0-0'}}\r\n                </ng-template>\r\n                <ng-template tds-option-tmp let-label='label' let-item=\"item\" let-value='value' let-selected=\"selected\">\r\n                    <span [ngClass]=\"{'text-primary-1 dark:text-d-primary-1':selected}\">\r\n                        {{ item.index | number: '2.0-0' }}\r\n                    </span>\r\n                </ng-template>\r\n            </tds-select>\r\n        </div>\r\n        <div>\r\n            :\r\n        </div>\r\n        <div class=\"w-14 mx-2\">\r\n            <tds-select [data]=\"minuteRange\" [ngModel]=\"time.minutes\" (selectChange)=\"selectMinute($event)\"\r\n                [valuePrimitive]=\"false\" valueField=\"index\" textField=\"index\" [classIcon]=\"null\">\r\n                <ng-template tds-label-tmp let-item=\"item\">\r\n                    {{item.data.index | number: '2.0-0'}}\r\n                </ng-template>\r\n                <ng-template tds-option-tmp let-label='label' let-item=\"item\" let-value='value' let-selected=\"selected\">\r\n                    <span [ngClass]=\"{'text-primary-1 dark:text-d-primary-1':selected}\">\r\n                        {{ item.index | number: '2.0-0' }}\r\n                    </span>\r\n                </ng-template>\r\n            </tds-select>\r\n        </div>\r\n        <div class=\"w-14\">\r\n            <tds-select [data]=\"use12HoursRange\" [ngModel]=\"time.selected12Hours\" (selectChange)=\"select12Hours($event)\"\r\n                [valuePrimitive]=\"false\" valueField=\"index\" textField=\"value\" [classIcon]=\"null\">\r\n                <ng-template tds-option-tmp let-label='label' let-item=\"item\" let-value='value' let-selected=\"selected\">\r\n                    <span [ngClass]=\"{'text-primary-1 dark:text-d-primary-1':time.selected12Hours == item.value}\">\r\n                        {{ item.value }}\r\n                    </span>\r\n                </ng-template>\r\n            </tds-select>\r\n        </div>\r\n\r\n    </div>\r\n</ng-template>" }]
        }], function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.DateHelperService }, { type: i0.ElementRef }, { type: i1.TDSI18nService }]; }, { hourListElement: [{
                type: ViewChild,
                args: ['hourListElement', { static: false }]
            }], minuteListElement: [{
                type: ViewChild,
                args: ['minuteListElement', { static: false }]
            }], secondListElement: [{
                type: ViewChild,
                args: ['secondListElement', { static: false }]
            }], use12HoursListElement: [{
                type: ViewChild,
                args: ['use12HoursListElement', { static: false }]
            }], inDatePicker: [{
                type: Input
            }], addOn: [{
                type: Input
            }], hideDisabledOptions: [{
                type: Input
            }], clearText: [{
                type: Input
            }], nowText: [{
                type: Input
            }], okText: [{
                type: Input
            }], placeHolder: [{
                type: Input
            }], use12Hours: [{
                type: Input
            }], defaultOpenValue: [{
                type: Input
            }], closePanel: [{
                type: Output
            }], allowEmpty: [{
                type: Input
            }], disabledHours: [{
                type: Input
            }], disabledMinutes: [{
                type: Input
            }], disabledSeconds: [{
                type: Input
            }], format: [{
                type: Input
            }], hourStep: [{
                type: Input
            }], minuteStep: [{
                type: Input
            }], secondStep: [{
                type: Input
            }] });
})();

const _c0 = ["inputElement"];
const _c1 = function (a0, a1, a2) { return { "px-1": a0, "px-1.5": a1, "px-2": a2 }; };
function TDSTimePickerComponent_div_5_Template(rf, ctx) {
    if (rf & 1) {
        const _r5 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 8);
        i0.ɵɵlistener("click", function TDSTimePickerComponent_div_5_Template_div_click_0_listener($event) { i0.ɵɵrestoreView(_r5); const ctx_r4 = i0.ɵɵnextContext(); return ctx_r4.onClickClearBtn($event); });
        i0.ɵɵelement(1, "span", 9);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r1 = i0.ɵɵnextContext();
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction3(1, _c1, ctx_r1.size === "sm", ctx_r1.size === "md", ctx_r1.size === "lg"));
    }
}
function TDSTimePickerComponent_ng_container_7_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelement(1, "span", 10);
        i0.ɵɵelementContainerEnd();
    }
    if (rf & 2) {
        const suffixIcon_r6 = ctx.$implicit;
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngClass", suffixIcon_r6);
    }
}
function TDSTimePickerComponent_ng_template_8_Template(rf, ctx) {
    if (rf & 1) {
        const _r8 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 11)(1, "div", 12)(2, "div", 13)(3, "tds-time-picker-panel", 14);
        i0.ɵɵlistener("ngModelChange", function TDSTimePickerComponent_ng_template_8_Template_tds_time_picker_panel_ngModelChange_3_listener($event) { i0.ɵɵrestoreView(_r8); const ctx_r7 = i0.ɵɵnextContext(); return ctx_r7.value = $event; })("ngModelChange", function TDSTimePickerComponent_ng_template_8_Template_tds_time_picker_panel_ngModelChange_3_listener($event) { i0.ɵɵrestoreView(_r8); const ctx_r9 = i0.ɵɵnextContext(); return ctx_r9.onPanelValueChange($event); })("closePanel", function TDSTimePickerComponent_ng_template_8_Template_tds_time_picker_panel_closePanel_3_listener() { i0.ɵɵrestoreView(_r8); const ctx_r10 = i0.ɵɵnextContext(); return ctx_r10.setCurrentValueAndClose(); });
        i0.ɵɵpipe(4, "async");
        i0.ɵɵelementEnd()()()();
    }
    if (rf & 2) {
        const ctx_r3 = i0.ɵɵnextContext();
        i0.ɵɵproperty("@slideMotion", "enter");
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngClass", ctx_r3.popupClassName)("format", ctx_r3.format)("hourStep", ctx_r3.hourStep)("minuteStep", ctx_r3.minuteStep)("secondStep", ctx_r3.secondStep)("disabledHours", ctx_r3.disabledHours)("disabledMinutes", ctx_r3.disabledMinutes)("disabledSeconds", ctx_r3.disabledSeconds)("placeHolder", ctx_r3.placeholder || i0.ɵɵpipeBind1(4, 19, ctx_r3.i18nPlaceHolder$))("hideDisabledOptions", ctx_r3.hideDisabledOptions)("use12Hours", ctx_r3.use12Hours)("defaultOpenValue", ctx_r3.defaultOpenValue)("addOn", ctx_r3.addOn)("clearText", ctx_r3.clearText)("nowText", ctx_r3.nowText)("okText", ctx_r3.okText)("allowEmpty", ctx_r3.allowEmpty)("ngModel", ctx_r3.value);
    }
}
const _c2 = function (a0) { return { "border border-neutral-2-200 dark:border-d-neutral-2-200 rounded": a0 }; };
const _c3 = function (a0, a1, a2) { return { "pl-2.5 py-1": a0, "pl-3 py-1.5": a1, "pl-4 py-2": a2 }; };
class TDSTimePickerComponent {
    constructor(
    // public tdsConfigService: TDSConfigService,
    i18n, element, renderer, cdr, dateHelper, platform, elementRef, directionality, _formField, ngControl) {
        this.i18n = i18n;
        this.element = element;
        this.renderer = renderer;
        this.cdr = cdr;
        this.dateHelper = dateHelper;
        this.platform = platform;
        this.elementRef = elementRef;
        this.directionality = directionality;
        this._formField = _formField;
        this.ngControl = ngControl;
        this.destroy$ = new Subject();
        this.isInit = false;
        this.focused = false;
        this.inputValue = '';
        this.value = null;
        this.preValue = null;
        this.i18nPlaceHolder$ = of(undefined);
        this.overlayPositions = [
            {
                originX: 'start',
                originY: 'bottom',
                overlayX: 'start',
                overlayY: 'top',
                offsetY: 3
            }
        ];
        this.dir = 'ltr';
        this.parentIsFormField = false;
        this.tdsId = null;
        this._size = "md";
        this.hourStep = 1;
        this.minuteStep = 1;
        this.secondStep = 1;
        this.clearText = 'clear';
        this.nowText = '';
        this.okText = '';
        this.popupClassName = '';
        this.placeholder = 'hh:mm a';
        this.format = 'hh:mm a';
        this.isOpen = false;
        this.use12Hours = true;
        this.suffixIcon = 'tdsi-time-line';
        this.openChange = new EventEmitter();
        this.hideDisabledOptions = false;
        this.allowEmpty = true;
        this.disabled = false;
        this.autoFocus = false;
        this.backdrop = false;
        this.id = null;
        this.stateChanges = new Subject();
        this._required = false;
        // TODO: move to host after View Engine deprecation
        this.elementRef.nativeElement.classList.add('tds-picker');
        if (this.ngControl != null) {
            this.ngControl.valueAccessor = this;
        }
        if (this._formField) {
            // this.size = this._formField.size;
            this.parentIsFormField = true;
        }
    }
    get size() {
        return this._size;
    }
    set size(value) {
        if (this._size != value) {
            this._size = value;
            this.stateChanges.next();
        }
    }
    get empty() {
        return false;
    }
    get required() {
        return this._required;
    }
    set required(value) {
        this._required = coerceBooleanProperty(value);
        this.stateChanges.next();
    }
    emitValue(value) {
        this.setValue(value, true);
        if (this._onChange) {
            this._onChange(this.value);
        }
        if (this._onTouched) {
            this._onTouched();
        }
    }
    setValue(value, syncPreValue = false) {
        if (syncPreValue) {
            this.preValue = isValid(value) ? new Date(value) : null;
        }
        this.value = isValid(value) ? new Date(value) : null;
        this.setInputValue(value);
    }
    setInputValue(value) {
        this.inputValue = this.dateHelper.format(value, this.format);
        this.cdr.markForCheck();
    }
    open() {
        if (this.disabled || this.isOpen) {
            return;
        }
        this.focus();
        this.isOpen = true;
        this.openChange.emit(this.isOpen);
    }
    close() {
        this.isOpen = false;
        this.cdr.markForCheck();
        this.openChange.emit(this.isOpen);
    }
    updateAutoFocus() {
        if (this.isInit && !this.disabled) {
            if (this.autoFocus) {
                this.renderer.setAttribute(this.inputRef.nativeElement, 'autofocus', 'autofocus');
            }
            else {
                this.renderer.removeAttribute(this.inputRef.nativeElement, 'autofocus');
            }
        }
    }
    onClickClearBtn(event) {
        event.stopPropagation();
        this.emitValue(null);
    }
    onClickOutside(event) {
        if (!this.element.nativeElement.contains(event.target)) {
            this.setCurrentValueAndClose();
        }
    }
    onFocus(value) {
        this.focused = value;
    }
    focus() {
        if (this.inputRef.nativeElement) {
            this.inputRef.nativeElement.focus();
        }
    }
    blur() {
        if (this.inputRef.nativeElement) {
            this.inputRef.nativeElement.blur();
        }
    }
    onKeyupEsc() {
        this.setValue(this.preValue);
    }
    onKeyupEnter() {
        if (this.isOpen && isValid(this.value)) {
            this.setCurrentValueAndClose();
        }
        else if (!this.isOpen) {
            this.open();
        }
    }
    onInputChange(str) {
        if (!this.platform.TRIDENT && document.activeElement === this.inputRef.nativeElement) {
            this.open();
            this.parseTimeString(str);
        }
    }
    onPanelValueChange(value) {
        this.setValue(value);
        this.focus();
    }
    setCurrentValueAndClose() {
        this.emitValue(this.value);
        this.close();
    }
    ngOnInit() {
        var _a;
        this.inputSize = Math.max(8, this.format.length) + 2;
        this.origin = new CdkOverlayOrigin(this.element);
        //cập nhật input value khi local change
        this.i18n.localeChange.pipe(takeUntil(this.destroy$)).subscribe(() => {
            if (this.value) {
                this.setInputValue(this.value);
            }
        });
        this.i18nPlaceHolder$ = this.i18n.localeChange.pipe(map((locale) => locale.TimePicker.placeholder));
        this.dir = this.directionality.value;
        (_a = this.directionality.change) === null || _a === void 0 ? void 0 : _a.pipe(takeUntil(this.destroy$)).subscribe((direction) => {
            this.dir = direction;
        });
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    ngOnChanges(changes) {
        const { use12Hours, format, disabled, autoFocus } = changes;
        if (use12Hours && !use12Hours.previousValue && use12Hours.currentValue && !format) {
            this.format = 'h:mm a';
        }
        if (disabled) {
            const value = disabled.currentValue;
            const input = this.inputRef.nativeElement;
            if (value) {
                this.renderer.setAttribute(input, 'disabled', '');
            }
            else {
                this.renderer.removeAttribute(input, 'disabled');
            }
        }
        if (autoFocus) {
            this.updateAutoFocus();
        }
    }
    parseTimeString(str) {
        const value = this.dateHelper.parseTime(str, this.format) || null;
        if (isValid(value)) {
            this.value = value;
            this.cdr.markForCheck();
        }
    }
    ngAfterViewInit() {
        this.isInit = true;
        this.updateAutoFocus();
    }
    writeValue(time) {
        let result;
        if (time instanceof Date) {
            result = time;
        }
        else if (isNil(time)) {
            result = null;
        }
        else {
            console.warn('Non-Date type is not recommended for time-picker, use "Date" type.');
            result = new Date(time);
        }
        this.setValue(result, true);
    }
    registerOnChange(fn) {
        this._onChange = fn;
    }
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this.cdr.markForCheck();
    }
    get errorState() {
        return this.ngControl && this.ngControl.errors !== null && !!this.ngControl.touched;
    }
    setDescribedByIds(ids) {
        // if (ids.length) {
        //   this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));
        // } else {
        //   this._elementRef.nativeElement.removeAttribute('aria-describedby');
        // }
    }
    onContainerClick(e) {
        // e.preventDefault();
        // e.stopPropagation();
    }
}
TDSTimePickerComponent.ɵfac = function TDSTimePickerComponent_Factory(t) { return new (t || TDSTimePickerComponent)(i0.ɵɵdirectiveInject(i1.TDSI18nService), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.DateHelperService), i0.ɵɵdirectiveInject(i2$1.Platform), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i3$1.Directionality, 8), i0.ɵɵdirectiveInject(TDS_FORM_FIELD, 9), i0.ɵɵdirectiveInject(i4$1.NgControl, 10)); };
TDSTimePickerComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSTimePickerComponent, selectors: [["tds-time-picker"]], viewQuery: function TDSTimePickerComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(_c0, 7);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputRef = _t.first);
        }
    }, hostAttrs: [1, "w-full", "block", "relative", "box-border", "m-0", "p-0"], hostVars: 6, hostBindings: function TDSTimePickerComponent_HostBindings(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵlistener("click", function TDSTimePickerComponent_click_HostBindingHandler() { return ctx.open(); });
        }
        if (rf & 2) {
            i0.ɵɵclassProp("tds-picker-disabled", ctx.disabled)("tds-picker-focused", ctx.focused)("tds-picker-rtl", ctx.dir === "rtl");
        }
    }, inputs: { tdsId: "tdsId", size: "size", hourStep: "hourStep", minuteStep: "minuteStep", secondStep: "secondStep", clearText: "clearText", nowText: "nowText", okText: "okText", popupClassName: "popupClassName", placeholder: "placeholder", addOn: "addOn", defaultOpenValue: "defaultOpenValue", disabledHours: "disabledHours", disabledMinutes: "disabledMinutes", disabledSeconds: "disabledSeconds", format: "format", isOpen: "isOpen", use12Hours: "use12Hours", suffixIcon: "suffixIcon", hideDisabledOptions: "hideDisabledOptions", allowEmpty: "allowEmpty", disabled: "disabled", autoFocus: "autoFocus", backdrop: "backdrop", id: "id", required: "required" }, outputs: { openChange: "openChange" }, exportAs: ["tdsTimePicker"], features: [i0.ɵɵProvidersFeature([
            // { provide: NG_VALUE_ACCESSOR, useExisting: TDSTimePickerComponent, multi: true }
            {
                provide: TDSFormFieldControl,
                useExisting: forwardRef(() => TDSTimePickerComponent)
            }
        ]), i0.ɵɵNgOnChangesFeature], decls: 9, vars: 27, consts: [[1, "tds-picker-input", "flex", "items-stretch", "w-full", "group", 3, "ngClass"], [1, "flex-auto", "flex", "items-center", 3, "ngClass"], ["type", "text", 1, "text-body-2", "font-regular", "dark:text-d-neutral-1-40", "text-neutral-1-40", "focus:outline-none", "focus:ring-transparent", "focus:border-transparent", "shadow-none", "border-0", "bg-transparent", "text-current", "pl-0", "pb-0", "pt-0", "m-0", "w-full", "outline-none", "box-border", 3, "placeholder", "ngModel", "disabled", "ngModelChange", "focus", "blur", "keyup.enter", "keyup.escape"], ["inputElement", ""], ["class", "tds-picker-clear flex items-center cursor-pointer", 3, "ngClass", "click", 4, "ngIf"], [1, "tds-picker-suffix", "text-neutral-1-900", "dark:text-d-neutral-1-900", "group-hover:bg-neutral-3-50", "dark:group-hover:bg-d-neutral-3-300", "flex", "items-center", "group-hover:border-transparent", 2, "border-top-right-radius", "0.2rem", "border-bottom-right-radius", "0.2rem", 3, "ngClass"], [4, "tdsStringTemplateOutlet"], ["cdkConnectedOverlay", "", 3, "cdkConnectedOverlayHasBackdrop", "cdkConnectedOverlayPositions", "cdkConnectedOverlayOrigin", "cdkConnectedOverlayOpen", "cdkConnectedOverlayOffsetY", "cdkConnectedOverlayTransformOriginOn", "detach", "overlayOutsideClick"], [1, "tds-picker-clear", "flex", "items-center", "cursor-pointer", 3, "ngClass", "click"], [1, "tdsi-close-fill", "text-base", "leading-4", "text-neutral-1-500", "dark:text-d-neutral-1-500"], [1, "text-lg", "leading-5", "text-neutral-1-900", "dark:text-d-neutral-1-900", 3, "ngClass"], [1, "tds-picker-dropdown"], [1, "tds-picker-panel-container"], ["tabindex", "-1", 1, "tds-picker-panel"], [3, "ngClass", "format", "hourStep", "minuteStep", "secondStep", "disabledHours", "disabledMinutes", "disabledSeconds", "placeHolder", "hideDisabledOptions", "use12Hours", "defaultOpenValue", "addOn", "clearText", "nowText", "okText", "allowEmpty", "ngModel", "ngModelChange", "closePanel"]], template: function TDSTimePickerComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0)(1, "div", 1)(2, "input", 2, 3);
            i0.ɵɵlistener("ngModelChange", function TDSTimePickerComponent_Template_input_ngModelChange_2_listener($event) { return ctx.inputValue = $event; })("focus", function TDSTimePickerComponent_Template_input_focus_2_listener() { return ctx.onFocus(true); })("blur", function TDSTimePickerComponent_Template_input_blur_2_listener() { return ctx.onFocus(false); })("keyup.enter", function TDSTimePickerComponent_Template_input_keyup_enter_2_listener() { return ctx.onKeyupEnter(); })("keyup.escape", function TDSTimePickerComponent_Template_input_keyup_escape_2_listener() { return ctx.onKeyupEsc(); })("ngModelChange", function TDSTimePickerComponent_Template_input_ngModelChange_2_listener($event) { return ctx.onInputChange($event); });
            i0.ɵɵpipe(4, "async");
            i0.ɵɵelementEnd()();
            i0.ɵɵtemplate(5, TDSTimePickerComponent_div_5_Template, 2, 5, "div", 4);
            i0.ɵɵelementStart(6, "div", 5);
            i0.ɵɵtemplate(7, TDSTimePickerComponent_ng_container_7_Template, 2, 1, "ng-container", 6);
            i0.ɵɵelementEnd()();
            i0.ɵɵtemplate(8, TDSTimePickerComponent_ng_template_8_Template, 5, 21, "ng-template", 7);
            i0.ɵɵlistener("detach", function TDSTimePickerComponent_Template_ng_template_detach_8_listener() { return ctx.close(); })("overlayOutsideClick", function TDSTimePickerComponent_Template_ng_template_overlayOutsideClick_8_listener($event) { return ctx.onClickOutside($event); });
        }
        if (rf & 2) {
            i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(17, _c2, !ctx.parentIsFormField));
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction3(19, _c3, ctx.size === "sm", ctx.size === "md", ctx.size === "lg"));
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("placeholder", ctx.placeholder || i0.ɵɵpipeBind1(4, 15, ctx.i18nPlaceHolder$))("ngModel", ctx.inputValue)("disabled", ctx.disabled);
            i0.ɵɵattribute("id", ctx.tdsId);
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("ngIf", ctx.allowEmpty && !ctx.disabled && ctx.value);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction3(23, _c1, ctx.size === "sm", ctx.size === "md", ctx.size === "lg"));
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("tdsStringTemplateOutlet", ctx.suffixIcon);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("cdkConnectedOverlayHasBackdrop", ctx.backdrop)("cdkConnectedOverlayPositions", ctx.overlayPositions)("cdkConnectedOverlayOrigin", ctx.origin)("cdkConnectedOverlayOpen", ctx.isOpen)("cdkConnectedOverlayOffsetY", -2)("cdkConnectedOverlayTransformOriginOn", ".tds-picker-dropdown");
        }
    }, directives: [i2.NgClass, i4$1.DefaultValueAccessor, i4$1.NgControlStatus, i4$1.NgModel, i2.NgIf, i6.TDSStringTemplateOutletDirective, i7.CdkConnectedOverlay, TDSTimePickerPanelComponent], pipes: [i2.AsyncPipe], encapsulation: 2, data: { animation: [slideMotion] }, changeDetection: 0 });
__decorate([
    InputBoolean()
], TDSTimePickerComponent.prototype, "use12Hours", void 0);
__decorate([
    InputBoolean()
], TDSTimePickerComponent.prototype, "hideDisabledOptions", void 0);
__decorate([
    InputBoolean()
], TDSTimePickerComponent.prototype, "allowEmpty", void 0);
__decorate([
    InputBoolean()
], TDSTimePickerComponent.prototype, "disabled", void 0);
__decorate([
    InputBoolean()
], TDSTimePickerComponent.prototype, "autoFocus", void 0);
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSTimePickerComponent, [{
            type: Component,
            args: [{
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'tds-time-picker',
                    exportAs: 'tdsTimePicker',
                    template: `
  <div class="tds-picker-input flex items-stretch w-full group" 
  [ngClass]="{ 'border border-neutral-2-200 dark:border-d-neutral-2-200 rounded':!parentIsFormField}">
  <div class="flex-auto flex items-center" [ngClass]="{
    'pl-2.5 py-1':size ==='sm', 
    'pl-3 py-1.5':size ==='md' ,                                              
    'pl-4 py-2':size ==='lg'        
  }">
  <input
  class="text-body-2 font-regular dark:text-d-neutral-1-40 text-neutral-1-40 focus:outline-none focus:ring-transparent focus:border-transparent shadow-none border-0 bg-transparent text-current pl-0 pb-0 pt-0 m-0 w-full outline-none  box-border"
  #inputElement [attr.id]="tdsId" type="text" [placeholder]="placeholder || (i18nPlaceHolder$ | async)"
  [(ngModel)]="inputValue" [disabled]="disabled" (focus)="onFocus(true)" (blur)="onFocus(false)"
  (keyup.enter)="onKeyupEnter()" (keyup.escape)="onKeyupEsc()" (ngModelChange)="onInputChange($event)" />
    </div>
    <div *ngIf="allowEmpty && !disabled && value" class="tds-picker-clear flex items-center cursor-pointer" (click)="onClickClearBtn($event)"
    [ngClass]="{
    'px-1':size ==='sm',
    'px-1.5':size ==='md',                                          
    'px-2':size ==='lg'
  }">
    <span class="tdsi-close-fill text-base leading-4 text-neutral-1-500 dark:text-d-neutral-1-500"></span>
  </div>
  <div
    class="tds-picker-suffix text-neutral-1-900 dark:text-d-neutral-1-900  group-hover:bg-neutral-3-50 dark:group-hover:bg-d-neutral-3-300 flex items-center  group-hover:border-transparent"
    style="border-top-right-radius: 0.2rem;border-bottom-right-radius: 0.2rem;" [ngClass]="{
      'px-1':size ==='sm',
      'px-1.5':size ==='md',                                          
      'px-2':size ==='lg'
  }">
    <ng-container *tdsStringTemplateOutlet="suffixIcon; let suffixIcon">
      <span [ngClass]="suffixIcon" class="text-lg leading-5 text-neutral-1-900 dark:text-d-neutral-1-900"></span>
    </ng-container>
  </div>
   
  </div>
  
  <ng-template cdkConnectedOverlay [cdkConnectedOverlayHasBackdrop]="backdrop"
    [cdkConnectedOverlayPositions]="overlayPositions" [cdkConnectedOverlayOrigin]="origin"
    [cdkConnectedOverlayOpen]="isOpen" [cdkConnectedOverlayOffsetY]="-2"
    [cdkConnectedOverlayTransformOriginOn]="'.tds-picker-dropdown'" (detach)="close()"
    (overlayOutsideClick)="onClickOutside($event)">
    <div [@slideMotion]="'enter'" class="tds-picker-dropdown">
      <div class="tds-picker-panel-container">
        <div tabindex="-1" class="tds-picker-panel">
          <tds-time-picker-panel [ngClass]="popupClassName" [format]="format" [hourStep]="hourStep"
            [minuteStep]="minuteStep" [secondStep]="secondStep" [disabledHours]="disabledHours"
            [disabledMinutes]="disabledMinutes" [disabledSeconds]="disabledSeconds"
            [placeHolder]="placeholder || (i18nPlaceHolder$ | async)" [hideDisabledOptions]="hideDisabledOptions"
            [use12Hours]="use12Hours" [defaultOpenValue]="defaultOpenValue" [addOn]="addOn" [clearText]="clearText"
            [nowText]="nowText" [okText]="okText" [allowEmpty]="allowEmpty" [(ngModel)]="value"
            (ngModelChange)="onPanelValueChange($event)" (closePanel)="setCurrentValueAndClose()"></tds-time-picker-panel>
        </div>
      </div>
    </div>
  </ng-template>
  `,
                    host: {
                        '[class.tds-picker-disabled]': `disabled`,
                        '[class.tds-picker-focused]': `focused`,
                        '[class.tds-picker-rtl]': `dir === 'rtl'`,
                        '(click)': 'open()',
                        'class': 'w-full block relative box-border m-0 p-0',
                    },
                    animations: [slideMotion],
                    providers: [
                        // { provide: NG_VALUE_ACCESSOR, useExisting: TDSTimePickerComponent, multi: true }
                        {
                            provide: TDSFormFieldControl,
                            useExisting: forwardRef(() => TDSTimePickerComponent)
                        }
                    ]
                }]
        }], function () {
        return [{ type: i1.TDSI18nService }, { type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }, { type: i1.DateHelperService }, { type: i2$1.Platform }, { type: i0.ElementRef }, { type: i3$1.Directionality, decorators: [{
                        type: Optional
                    }] }, { type: i9.TDSFormField, decorators: [{
                        type: Optional
                    }, {
                        type: Inject,
                        args: [TDS_FORM_FIELD]
                    }, {
                        type: Host
                    }] }, { type: i4$1.NgControl, decorators: [{
                        type: Optional
                    }, {
                        type: Self
                    }] }];
    }, { inputRef: [{
                type: ViewChild,
                args: ['inputElement', { static: true }]
            }], tdsId: [{
                type: Input
            }], size: [{
                type: Input
            }], hourStep: [{
                type: Input
            }], minuteStep: [{
                type: Input
            }], secondStep: [{
                type: Input
            }], clearText: [{
                type: Input
            }], nowText: [{
                type: Input
            }], okText: [{
                type: Input
            }], popupClassName: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], addOn: [{
                type: Input
            }], defaultOpenValue: [{
                type: Input
            }], disabledHours: [{
                type: Input
            }], disabledMinutes: [{
                type: Input
            }], disabledSeconds: [{
                type: Input
            }], format: [{
                type: Input
            }], isOpen: [{
                type: Input
            }], use12Hours: [{
                type: Input
            }], suffixIcon: [{
                type: Input
            }], openChange: [{
                type: Output
            }], hideDisabledOptions: [{
                type: Input
            }], allowEmpty: [{
                type: Input
            }], disabled: [{
                type: Input
            }], autoFocus: [{
                type: Input
            }], backdrop: [{
                type: Input
            }], id: [{
                type: Input
            }], required: [{
                type: Input
            }] });
})();

class TDSTimePickerModule {
}
TDSTimePickerModule.ɵfac = function TDSTimePickerModule_Factory(t) { return new (t || TDSTimePickerModule)(); };
TDSTimePickerModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: TDSTimePickerModule });
TDSTimePickerModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [[
            BidiModule,
            CommonModule,
            FormsModule,
            TDSI18nModule,
            OverlayModule,
            TDSOutletModule,
            TDSButtonModule,
            TDSSelectModule
        ]] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSTimePickerModule, [{
            type: NgModule,
            args: [{
                    declarations: [TDSTimePickerComponent, TDSTimePickerPanelComponent],
                    exports: [TDSTimePickerPanelComponent, TDSTimePickerComponent],
                    imports: [
                        BidiModule,
                        CommonModule,
                        FormsModule,
                        TDSI18nModule,
                        OverlayModule,
                        TDSOutletModule,
                        TDSButtonModule,
                        TDSSelectModule
                    ]
                }]
        }], null, null);
})();
(function () {
    (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(TDSTimePickerModule, { declarations: [TDSTimePickerComponent, TDSTimePickerPanelComponent], imports: [BidiModule,
            CommonModule,
            FormsModule,
            TDSI18nModule,
            OverlayModule,
            TDSOutletModule,
            TDSButtonModule,
            TDSSelectModule], exports: [TDSTimePickerPanelComponent, TDSTimePickerComponent] });
})();

/**
 * Generated bundle index. Do not edit.
 */

export { TDSTimePickerComponent, TDSTimePickerModule, TDSTimePickerPanelComponent };
//# sourceMappingURL=tds-ui-time-picker.mjs.map
