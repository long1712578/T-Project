{"version":3,"file":"tds-ui-core-resize-observers.mjs","sources":["../../../projects/tds-ui/core/resize-observers/resize-observer.service.ts","../../../projects/tds-ui/core/resize-observers/resize-observer.directive.ts","../../../projects/tds-ui/core/resize-observers/resize-observer.module.ts","../../../projects/tds-ui/core/resize-observers/tds-ui-core-resize-observers.ts"],"sourcesContent":["\r\n\r\nimport { coerceElement } from '@angular/cdk/coercion';\r\nimport { ElementRef, Injectable, OnDestroy } from '@angular/core';\r\nimport { Observable, Observer, Subject } from 'rxjs';\r\n\r\n/**\r\n * Factory that creates a new ResizeObserver and allows us to stub it out in unit tests.\r\n */\r\n@Injectable({ providedIn: 'root' })\r\nexport class TDSResizeObserverFactory {\r\n  create(callback: ResizeObserverCallback): ResizeObserver | null {\r\n    return typeof ResizeObserver === 'undefined' ? null : new ResizeObserver(callback);\r\n  }\r\n}\r\n\r\n/** An injectable service that allows watching elements for changes to their content. */\r\n@Injectable({ providedIn: 'root' })\r\nexport class TDSResizeObserver implements OnDestroy {\r\n  /** Keeps track of the existing ResizeObservers so they can be reused. */\r\n  private observedElements = new Map<\r\n    Element,\r\n    {\r\n      observer: ResizeObserver | null;\r\n      stream: Subject<ResizeObserverEntry[]>;\r\n      count: number;\r\n    }\r\n  >();\r\n\r\n  constructor(private tdsResizeObserverFactory: TDSResizeObserverFactory) { }\r\n\r\n  ngOnDestroy(): void {\r\n    this.observedElements.forEach((_, element) => this.cleanupObserver(element));\r\n  }\r\n\r\n  observe(elementOrRef: Element | ElementRef<Element>): Observable<ResizeObserverEntry[]> {\r\n    const element = coerceElement(elementOrRef);\r\n    return new Observable((observer: Observer<ResizeObserverEntry[]>) => {\r\n      const stream = this.observeElement(element);\r\n      const subscription = stream.subscribe(observer);\r\n\r\n      return () => {\r\n        subscription.unsubscribe();\r\n        this.unobserveElement(element);\r\n      };\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Observes the given element by using the existing ResizeObserver if available, or creating a\r\n   * new one if not.\r\n   */\r\n  private observeElement(element: Element): Subject<ResizeObserverEntry[]> {\r\n    if (!this.observedElements.has(element)) {\r\n      const stream = new Subject<ResizeObserverEntry[]>();\r\n      const observer = this.tdsResizeObserverFactory.create((mutations: ResizeObserverEntry[]) =>\r\n        stream.next(mutations)\r\n      );\r\n      if (observer) {\r\n        observer.observe(element);\r\n      }\r\n      this.observedElements.set(element, { observer, stream, count: 1 });\r\n    } else {\r\n      this.observedElements.get(element)!.count++;\r\n    }\r\n    return this.observedElements.get(element)!.stream;\r\n  }\r\n\r\n  /**\r\n   * Un-observes the given element and cleans up the underlying ResizeObserver if nobody else is\r\n   * observing this element.\r\n   */\r\n  private unobserveElement(element: Element): void {\r\n    if (this.observedElements.has(element)) {\r\n      this.observedElements.get(element)!.count--;\r\n      if (!this.observedElements.get(element)!.count) {\r\n        this.cleanupObserver(element);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Clean up the underlying ResizeObserver for the specified element. */\r\n  private cleanupObserver(element: Element): void {\r\n    if (this.observedElements.has(element)) {\r\n      const { observer, stream } = this.observedElements.get(element)!;\r\n      if (observer) {\r\n        observer.disconnect();\r\n      }\r\n      stream.complete();\r\n      this.observedElements.delete(element);\r\n    }\r\n  }\r\n}\r\n","\r\n\r\nimport { BooleanInput } from '@angular/cdk/coercion';\r\nimport {\r\n  AfterContentInit,\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  Output,\r\n  SimpleChanges\r\n} from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { InputBoolean } from 'tds-ui/shared/utility';\r\n\r\nimport { TDSResizeObserver } from './resize-observer.service';\r\n\r\n@Directive({\r\n  selector: '[resizeObserver]'\r\n})\r\nexport class TDSResizeObserverDirective implements AfterContentInit, OnDestroy, OnChanges {\r\n  static ngAcceptInputType_resizeObserverDisabled: BooleanInput;\r\n  @Output() readonly resizeObserve = new EventEmitter<ResizeObserverEntry[]>();\r\n  @Input() @InputBoolean() resizeObserverDisabled = false;\r\n  private currentSubscription: Subscription | null = null;\r\n\r\n  private subscribe(): void {\r\n    this.unsubscribe();\r\n    this.currentSubscription = this.resizeObserver.observe(this.elementRef).subscribe(this.resizeObserve);\r\n  }\r\n\r\n  private unsubscribe(): void {\r\n    this.currentSubscription?.unsubscribe();\r\n  }\r\n\r\n  constructor(private resizeObserver: TDSResizeObserver, private elementRef: ElementRef<HTMLElement>) {}\r\n\r\n  ngAfterContentInit(): void {\r\n    if (!this.currentSubscription && !this.resizeObserverDisabled) {\r\n      this.subscribe();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.unsubscribe();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    const { resizeObserve } = changes;\r\n    if (resizeObserve) {\r\n      if (this.resizeObserverDisabled) {\r\n        this.unsubscribe();\r\n      } else {\r\n        this.subscribe();\r\n      }\r\n    }\r\n  }\r\n}\r\n","\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { TDSResizeObserverDirective } from './resize-observer.directive';\r\nimport { TDSResizeObserverFactory } from './resize-observer.service';\r\n\r\n@NgModule({\r\n  providers: [TDSResizeObserverFactory],\r\n  declarations: [TDSResizeObserverDirective],\r\n  exports: [TDSResizeObserverDirective]\r\n})\r\nexport class TDSResizeObserverModule {}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1.TDSResizeObserver"],"mappings":"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"}