import { ComponentPortal } from '@angular/cdk/portal';
import * as i0 from '@angular/core';
import { Directive, EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, Input, Output, NgModule, Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { filter, take, takeUntil } from 'rxjs/operators';
import * as i1 from 'tds-ui/core/config';
import { toCssPixel } from 'tds-ui/shared/utility';
import * as i1$1 from '@angular/common';
import { CommonModule } from '@angular/common';
import { moveUpMotion } from 'tds-ui/core/animation';
import * as i2 from 'tds-ui/progress-spinner';
import { TDSSpinnerModule } from 'tds-ui/progress-spinner';
import * as i3 from 'tds-ui/core/outlet';
import { TDSOutletModule } from 'tds-ui/core/outlet';
import * as i1$2 from 'tds-ui/core/services';
import * as i2$1 from '@angular/cdk/overlay';
import { OverlayModule } from '@angular/cdk/overlay';
import { BidiModule } from '@angular/cdk/bidi';

let globalCounter = 0;
class TDSMNService {
    constructor(tdsSingletonService, overlay, injector) {
        this.tdsSingletonService = tdsSingletonService;
        this.overlay = overlay;
        this.injector = injector;
        //set zIndex 70, do  cdk-global-overlay-wrapper có z-index 60
        this.zIndexMessage = '70';
    }
    remove(id) {
        if (this.container) {
            if (id) {
                this.container.remove(id);
            }
            else {
                this.container.removeAll();
            }
        }
    }
    getInstanceId() {
        return `${this.componentPrefix}-${globalCounter++}`;
    }
    withContainer(ctor) {
        let containerInstance = this.tdsSingletonService.getSingletonWithKey(this.componentPrefix);
        if (containerInstance) {
            return containerInstance;
        }
        const overlayRef = this.overlay.create({
            hasBackdrop: false,
            scrollStrategy: this.overlay.scrollStrategies.noop(),
            positionStrategy: this.overlay.position().global(),
        });
        //add class tds-global-overlay-wrapper-message cùng cấp cdk-global-overlay-wrapper để custom css
        overlayRef.hostElement.classList.add('tds-global-overlay-wrapper-message');
        //fix lỗi message bị ẩn bên dưới modal
        overlayRef.hostElement.style.zIndex = this.zIndexMessage;
        const componentPortal = new ComponentPortal(ctor, null, this.injector);
        const componentRef = overlayRef.attach(componentPortal);
        const overlayPane = overlayRef.overlayElement;
        overlayPane.style.zIndex = '1010';
        if (!containerInstance) {
            this.container = containerInstance = componentRef.instance;
            this.tdsSingletonService.registerSingletonWithKey(this.componentPrefix, containerInstance);
        }
        return containerInstance;
    }
}
class TDSMNContainerComponent {
    constructor(cdr, tdsConfigService) {
        this.cdr = cdr;
        this.tdsConfigService = tdsConfigService;
        this.instances = [];
        this.destroy$ = new Subject();
        this.updateConfig();
    }
    ngOnInit() {
        this.subscribeConfigChange();
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    create(data) {
        const instance = this.onCreate(data);
        if (this.instances.length >= this.config.maxStack) {
            this.instances = this.instances.slice(1);
        }
        this.instances = [...this.instances, instance];
        this.readyInstances();
        return instance;
    }
    remove(id, userAction = false) {
        this.instances.some((instance, index) => {
            if (instance.messageId === id) {
                this.instances.splice(index, 1);
                this.instances = [...this.instances];
                this.onRemove(instance, userAction);
                this.readyInstances();
                return true;
            }
            return false;
        });
    }
    removeAll() {
        this.instances.forEach(i => this.onRemove(i, false));
        this.instances = [];
        this.readyInstances();
    }
    onCreate(instance) {
        instance.options = this.mergeOptions(instance.options);
        instance.onClose = new Subject();
        return instance;
    }
    onRemove(instance, userAction) {
        instance.onClose.next(userAction);
        instance.onClose.complete();
    }
    readyInstances() {
        this.cdr.detectChanges();
    }
    mergeOptions(options) {
        const { duration, animate, pauseOnHover } = this.config;
        return Object.assign({ duration, animate, pauseOnHover }, options);
    }
}
TDSMNContainerComponent.ɵfac = function TDSMNContainerComponent_Factory(t) { return new (t || TDSMNContainerComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.TDSConfigService)); };
TDSMNContainerComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: TDSMNContainerComponent });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSMNContainerComponent, [{
            type: Directive
        }], function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.TDSConfigService }]; }, null);
})();
class TDSMNComponent {
    constructor(cdr) {
        this.cdr = cdr;
        this.destroyed = new EventEmitter();
        this.animationStateChanged = new Subject();
        this.userAction = false;
        this.eraseTimer = null;
    }
    ngOnInit() {
        this.options = this.instance.options;
        if (this.options.animate) {
            this.instance.state = 'enter';
            this.animationStateChanged
                .pipe(filter(event => event.phaseName === 'done' && event.toState === 'leave'), take(1))
                .subscribe(() => {
                clearTimeout(this.closeTimer);
                this.destroyed.next({ id: this.instance.messageId, userAction: this.userAction });
            });
        }
        this.autoClose = this.options.duration > 0;
        if (this.autoClose) {
            this.initErase();
            this.startEraseTimeout();
        }
    }
    ngOnDestroy() {
        if (this.autoClose) {
            this.clearEraseTimeout();
        }
        this.animationStateChanged.complete();
    }
    onEnter() {
        if (this.autoClose && this.options.pauseOnHover) {
            this.clearEraseTimeout();
            this.updateTTL();
        }
    }
    onLeave() {
        if (this.autoClose && this.options.pauseOnHover) {
            this.startEraseTimeout();
        }
    }
    destroy(userAction = false) {
        this.userAction = userAction;
        if (this.options.animate) {
            this.instance.state = 'leave';
            this.cdr.detectChanges();
            this.closeTimer = setTimeout(() => {
                this.closeTimer = undefined;
                this.destroyed.next({ id: this.instance.messageId, userAction: userAction });
            }, 200);
        }
        else {
            this.destroyed.next({ id: this.instance.messageId, userAction: userAction });
        }
    }
    initErase() {
        this.eraseTTL = this.options.duration;
        this.eraseTimingStart = Date.now();
    }
    updateTTL() {
        if (this.autoClose) {
            this.eraseTTL -= Date.now() - this.eraseTimingStart;
        }
    }
    startEraseTimeout() {
        if (this.eraseTTL > 0) {
            this.clearEraseTimeout();
            this.eraseTimer = setTimeout(() => this.destroy(), this.eraseTTL);
            this.eraseTimingStart = Date.now();
        }
        else {
            this.destroy();
        }
    }
    clearEraseTimeout() {
        if (this.eraseTimer !== null) {
            clearTimeout(this.eraseTimer);
            this.eraseTimer = null;
        }
    }
}
TDSMNComponent.ɵfac = function TDSMNComponent_Factory(t) { return new (t || TDSMNComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
TDSMNComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: TDSMNComponent });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSMNComponent, [{
            type: Directive
        }], function () { return [{ type: i0.ChangeDetectorRef }]; }, null);
})();

function TDSMessageComponent_i_4_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "i", 10);
    }
}
function TDSMessageComponent_i_5_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "i", 11);
    }
}
function TDSMessageComponent_i_6_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "i", 12);
    }
}
function TDSMessageComponent_i_7_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "i", 13);
    }
}
function TDSMessageComponent_tds_spinner_8_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "tds-spinner", 14);
    }
    if (rf & 2) {
        i0.ɵɵproperty("color", "primary");
    }
}
function TDSMessageComponent_ng_container_9_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelement(1, "span", 15);
        i0.ɵɵelementContainerEnd();
    }
    if (rf & 2) {
        const ctx_r5 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("innerHTML", ctx_r5.instance.content, i0.ɵɵsanitizeHtml);
    }
}
class TDSMessageComponent extends TDSMNComponent {
    constructor(cdr) {
        super(cdr);
        this.destroyed = new EventEmitter();
    }
}
TDSMessageComponent.ɵfac = function TDSMessageComponent_Factory(t) { return new (t || TDSMessageComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
TDSMessageComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSMessageComponent, selectors: [["tds-message"]], inputs: { instance: "instance" }, outputs: { destroyed: "destroyed" }, exportAs: ["tdsMessage"], features: [i0.ɵɵInheritDefinitionFeature], decls: 10, vars: 9, consts: [[1, "tds-message-notice", "pb-1", 3, "mouseenter", "mouseleave"], [1, "tds-message-notice-content", "bg-white", "dark:bg-d-neutral-3-300", "px-4", "py-3", "shadow-1-xl", "rounded-md"], [1, "tds-message-custom-content", "flex", "items-center", "text-center", 3, "ngClass"], [3, "ngSwitch"], ["class", "text-success-400 tdsi-success-fill text-2xl leading-6 mr-2.5", 4, "ngSwitchCase"], ["class", "text-info-400 tdsi-information-fill text-2xl leading-6 mr-2.5", 4, "ngSwitchCase"], ["class", "text-warning-400  tdsi-warning-fill text-2xl leading-6 mr-2.5", 4, "ngSwitchCase"], ["class", "text-error-400  tdsi-error-fill text-2xl leading-6 mr-2.5", 4, "ngSwitchCase"], ["class", "w-5 h-5 mr-2.5", 3, "color", 4, "ngSwitchCase"], [4, "tdsStringTemplateOutlet"], [1, "text-success-400", "tdsi-success-fill", "text-2xl", "leading-6", "mr-2.5"], [1, "text-info-400", "tdsi-information-fill", "text-2xl", "leading-6", "mr-2.5"], [1, "text-warning-400", "tdsi-warning-fill", "text-2xl", "leading-6", "mr-2.5"], [1, "text-error-400", "tdsi-error-fill", "text-2xl", "leading-6", "mr-2.5"], [1, "w-5", "h-5", "mr-2.5", 3, "color"], [1, "text-body-2", "text-neutral-1-900", "dark:text-d-neutral-1-900", "font-regular", 3, "innerHTML"]], template: function TDSMessageComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵlistener("@moveUpMotion.done", function TDSMessageComponent_Template_div_animation_moveUpMotion_done_0_listener($event) { return ctx.animationStateChanged.next($event); })("mouseenter", function TDSMessageComponent_Template_div_mouseenter_0_listener() { return ctx.onEnter(); })("mouseleave", function TDSMessageComponent_Template_div_mouseleave_0_listener() { return ctx.onLeave(); });
            i0.ɵɵelementStart(1, "div", 1)(2, "div", 2);
            i0.ɵɵelementContainerStart(3, 3);
            i0.ɵɵtemplate(4, TDSMessageComponent_i_4_Template, 1, 0, "i", 4);
            i0.ɵɵtemplate(5, TDSMessageComponent_i_5_Template, 1, 0, "i", 5);
            i0.ɵɵtemplate(6, TDSMessageComponent_i_6_Template, 1, 0, "i", 6);
            i0.ɵɵtemplate(7, TDSMessageComponent_i_7_Template, 1, 0, "i", 7);
            i0.ɵɵtemplate(8, TDSMessageComponent_tds_spinner_8_Template, 1, 1, "tds-spinner", 8);
            i0.ɵɵelementContainerEnd();
            i0.ɵɵtemplate(9, TDSMessageComponent_ng_container_9_Template, 2, 1, "ng-container", 9);
            i0.ɵɵelementEnd()()();
        }
        if (rf & 2) {
            i0.ɵɵproperty("@moveUpMotion", ctx.instance.state);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngClass", "tds-message-" + ctx.instance.type);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngSwitch", ctx.instance.type);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngSwitchCase", "success");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngSwitchCase", "info");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngSwitchCase", "warning");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngSwitchCase", "error");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngSwitchCase", "loading");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("tdsStringTemplateOutlet", ctx.instance.content);
        }
    }, directives: [i1$1.NgClass, i1$1.NgSwitch, i1$1.NgSwitchCase, i2.TDSProgressSpinnerComponent, i3.TDSStringTemplateOutletDirective], encapsulation: 2, data: { animation: [moveUpMotion] }, changeDetection: 0 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSMessageComponent, [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None,
                    selector: 'tds-message',
                    exportAs: 'tdsMessage',
                    preserveWhitespaces: false,
                    animations: [moveUpMotion],
                    template: `
    <div
      class="tds-message-notice pb-1"
      [@moveUpMotion]="instance.state"
      (@moveUpMotion.done)="animationStateChanged.next($event)"
      (mouseenter)="onEnter()"
      (mouseleave)="onLeave()"
    >
      <div class="tds-message-notice-content  bg-white dark:bg-d-neutral-3-300 px-4 py-3 shadow-1-xl rounded-md ">
        <div class="tds-message-custom-content flex items-center text-center" [ngClass]="'tds-message-' + instance.type">
          <ng-container [ngSwitch]="instance.type">
            <i *ngSwitchCase="'success'" class="text-success-400 tdsi-success-fill text-2xl leading-6 mr-2.5"></i>
            <i *ngSwitchCase="'info'" class="text-info-400 tdsi-information-fill text-2xl leading-6 mr-2.5"></i>
            <i *ngSwitchCase="'warning'" class="text-warning-400  tdsi-warning-fill text-2xl leading-6 mr-2.5"></i>
            <i *ngSwitchCase="'error'" class="text-error-400  tdsi-error-fill text-2xl leading-6 mr-2.5"></i> 
            <tds-spinner *ngSwitchCase="'loading'"  [color]="'primary'" class="w-5 h-5 mr-2.5"></tds-spinner>
               
          </ng-container>
          <ng-container *tdsStringTemplateOutlet="instance.content">
            <span class="text-body-2 text-neutral-1-900 dark:text-d-neutral-1-900 font-regular" [innerHTML]="instance.content"></span>
          </ng-container>
        </div>
      </div>
    </div>
  `,
                }]
        }], function () { return [{ type: i0.ChangeDetectorRef }]; }, { instance: [{
                type: Input
            }], destroyed: [{
                type: Output
            }] });
})();

function TDSMessageContainerComponent_tds_message_2_Template(rf, ctx) {
    if (rf & 1) {
        const _r3 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "tds-message", 3);
        i0.ɵɵlistener("destroyed", function TDSMessageContainerComponent_tds_message_2_Template_tds_message_destroyed_0_listener($event) { i0.ɵɵrestoreView(_r3); const ctx_r2 = i0.ɵɵnextContext(); return ctx_r2.remove($event.id, $event.userAction); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const instance_r1 = ctx.$implicit;
        i0.ɵɵproperty("instance", instance_r1);
    }
}
const TDS_CONFIG_COMPONENT_NAME = 'message';
const TDS_MESSAGE_DEFAULT_CONFIG = {
    animate: true,
    duration: 3000,
    maxStack: 7,
    pauseOnHover: true,
    top: 24,
    direction: 'ltr'
};
class TDSMessageContainerComponent extends TDSMNContainerComponent {
    constructor(cdr, tdsConfigService) {
        super(cdr, tdsConfigService);
        this.destroy$ = new Subject();
        this.dir = 'ltr';
        this.instances = [];
        const config = TDS_MESSAGE_DEFAULT_CONFIG;
        this.dir = (config === null || config === void 0 ? void 0 : config.direction) || 'ltr';
    }
    subscribeConfigChange() {
        this.tdsConfigService
            .getConfigChangeEventForComponent(TDS_CONFIG_COMPONENT_NAME)
            .pipe(takeUntil(this.destroy$))
            .subscribe(() => {
            this.updateConfig();
            const config = this.tdsConfigService.getConfigForComponent(TDS_CONFIG_COMPONENT_NAME);
            if (config) {
                const { direction } = config;
                this.dir = direction || this.dir;
            }
        });
    }
    updateConfig() {
        this.config = Object.assign(Object.assign(Object.assign({}, TDS_MESSAGE_DEFAULT_CONFIG), this.config), this.tdsConfigService.getConfigForComponent(TDS_CONFIG_COMPONENT_NAME));
        this.top = toCssPixel(this.config.top);
        this.cdr.markForCheck();
    }
}
TDSMessageContainerComponent.ɵfac = function TDSMessageContainerComponent_Factory(t) { return new (t || TDSMessageContainerComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.TDSConfigService)); };
TDSMessageContainerComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSMessageContainerComponent, selectors: [["tds-message-container"]], exportAs: ["tdsMessageContainer"], features: [i0.ɵɵInheritDefinitionFeature], decls: 3, vars: 5, consts: [[1, "tds-message", "pointer-events-none", "w-full", "left-0", "fixed"], [1, "w-full", "flex", "items-center", "flex-col"], [3, "instance", "destroyed", 4, "ngFor", "ngForOf"], [3, "instance", "destroyed"]], template: function TDSMessageContainerComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0)(1, "div", 1);
            i0.ɵɵtemplate(2, TDSMessageContainerComponent_tds_message_2_Template, 1, 1, "tds-message", 2);
            i0.ɵɵelementEnd()();
        }
        if (rf & 2) {
            i0.ɵɵstyleProp("top", ctx.top);
            i0.ɵɵclassProp("tds-message-rtl", ctx.dir === "rtl");
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngForOf", ctx.instances);
        }
    }, directives: [i1$1.NgForOf, TDSMessageComponent], encapsulation: 2, changeDetection: 0 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSMessageContainerComponent, [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None,
                    selector: 'tds-message-container',
                    exportAs: 'tdsMessageContainer',
                    preserveWhitespaces: false,
                    template: `
    <div class="tds-message pointer-events-none w-full left-0 fixed "  [class.tds-message-rtl]="dir === 'rtl'" [style.top]="top">
      <div class="w-full flex items-center flex-col">
          <tds-message *ngFor="let instance of instances" [instance]="instance" (destroyed)="remove($event.id, $event.userAction)"></tds-message>
      </div>
    </div>
  `
                }]
        }], function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.TDSConfigService }]; }, null);
})();

class TDSMessageServiceModule {
}
TDSMessageServiceModule.ɵfac = function TDSMessageServiceModule_Factory(t) { return new (t || TDSMessageServiceModule)(); };
TDSMessageServiceModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: TDSMessageServiceModule });
TDSMessageServiceModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({});
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSMessageServiceModule, [{
            type: NgModule
        }], null, null);
})();

class TDSMessageService extends TDSMNService {
    constructor(tdsSingletonService, overlay, injector) {
        super(tdsSingletonService, overlay, injector);
        this.componentPrefix = 'message-';
    }
    success(content, options) {
        return this.createInstance({ type: 'success', content }, options);
    }
    error(content, options) {
        return this.createInstance({ type: 'error', content }, options);
    }
    info(content, options) {
        return this.createInstance({ type: 'info', content }, options);
    }
    warning(content, options) {
        return this.createInstance({ type: 'warning', content }, options);
    }
    loading(content, options) {
        return this.createInstance({ type: 'loading', content }, options);
    }
    create(type, content, options) {
        return this.createInstance({ type, content }, options);
    }
    createInstance(message, options) {
        this.container = this.withContainer(TDSMessageContainerComponent);
        return this.container.create(Object.assign(Object.assign({}, message), {
            createdAt: new Date(),
            messageId: this.getInstanceId(),
            options
        }));
    }
}
TDSMessageService.ɵfac = function TDSMessageService_Factory(t) { return new (t || TDSMessageService)(i0.ɵɵinject(i1$2.TDSSingletonService), i0.ɵɵinject(i2$1.Overlay), i0.ɵɵinject(i0.Injector)); };
TDSMessageService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: TDSMessageService, factory: TDSMessageService.ɵfac, providedIn: TDSMessageServiceModule });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSMessageService, [{
            type: Injectable,
            args: [{
                    providedIn: TDSMessageServiceModule
                }]
        }], function () { return [{ type: i1$2.TDSSingletonService }, { type: i2$1.Overlay }, { type: i0.Injector }]; }, null);
})();

class TDSMessageModule {
}
TDSMessageModule.ɵfac = function TDSMessageModule_Factory(t) { return new (t || TDSMessageModule)(); };
TDSMessageModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: TDSMessageModule });
TDSMessageModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [[BidiModule, CommonModule, OverlayModule, TDSOutletModule, TDSMessageServiceModule, TDSSpinnerModule]] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSMessageModule, [{
            type: NgModule,
            args: [{
                    imports: [BidiModule, CommonModule, OverlayModule, TDSOutletModule, TDSMessageServiceModule, TDSSpinnerModule],
                    declarations: [TDSMessageContainerComponent, TDSMessageComponent]
                }]
        }], null, null);
})();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(TDSMessageModule, { declarations: [TDSMessageContainerComponent, TDSMessageComponent], imports: [BidiModule, CommonModule, OverlayModule, TDSOutletModule, TDSMessageServiceModule, TDSSpinnerModule] }); })();

/**
 * Generated bundle index. Do not edit.
 */

export { TDSMNComponent, TDSMNContainerComponent, TDSMNService, TDSMessageComponent, TDSMessageContainerComponent, TDSMessageModule, TDSMessageService, TDSMessageServiceModule };
//# sourceMappingURL=tds-ui-message.mjs.map
