import * as i0 from '@angular/core';
import { Directive, Component, ContentChildren, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { mixinDisabled } from 'tds-ui/shared/common';

const _c0 = ["*"];
class TDSScrollIntoViewBase {
    constructor(_elementRef) {
        this._elementRef = _elementRef;
    }
}
const _TDSScrollIntoViewBase = mixinDisabled(TDSScrollIntoViewBase);
class TDSScrollIntoView extends _TDSScrollIntoViewBase {
    constructor(elementRef) {
        super(elementRef);
    }
    get scrollID() {
        return this._scrollID;
    }
    set scrollID(val) {
        this._scrollID = val;
    }
    getScrollID() {
        return this._scrollID;
    }
    getElement() {
        return this._elementRef;
    }
}
TDSScrollIntoView.ɵfac = function TDSScrollIntoView_Factory(t) { return new (t || TDSScrollIntoView)(i0.ɵɵdirectiveInject(i0.ElementRef)); };
TDSScrollIntoView.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: TDSScrollIntoView, selectors: [["", "tds-scroll-into-view", ""]], hostVars: 1, hostBindings: function TDSScrollIntoView_HostBindings(rf, ctx) {
        if (rf & 2) {
            i0.ɵɵhostProperty("disabled", ctx.disabled || null);
        }
    }, inputs: { disabled: "disabled", scrollID: "scrollID" }, features: [i0.ɵɵInheritDefinitionFeature] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSScrollIntoView, [{
            type: Directive,
            args: [{
                    selector: `[tds-scroll-into-view]`,
                    host: {
                        '[disabled]': 'disabled ||  null',
                    },
                    inputs: ['disabled', 'scrollID']
                }]
        }], function () { return [{ type: i0.ElementRef }]; }, null);
})();
class TDSScrollIntoViewComponent extends _TDSScrollIntoViewBase {
    constructor(elementRef) {
        super(elementRef);
    }
    ngOnInit() {
    }
    scrollIntoView(dataID) {
        console.log(dataID);
        const children = this.lstChildren.find(e => {
            return e.getScrollID() === dataID;
        });
        if (children) {
            children.getElement().nativeElement.scrollIntoView({ behavior: "smooth", block: "end" });
        }
    }
}
TDSScrollIntoViewComponent.ɵfac = function TDSScrollIntoViewComponent_Factory(t) { return new (t || TDSScrollIntoViewComponent)(i0.ɵɵdirectiveInject(i0.ElementRef)); };
TDSScrollIntoViewComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSScrollIntoViewComponent, selectors: [["tds-scroll-into-view"]], contentQueries: function TDSScrollIntoViewComponent_ContentQueries(rf, ctx, dirIndex) {
        if (rf & 1) {
            i0.ɵɵcontentQuery(dirIndex, TDSScrollIntoView, 4);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.lstChildren = _t);
        }
    }, hostAttrs: [1, "block", "relative", "w-full", "overflow-auto"], features: [i0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function TDSScrollIntoViewComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵprojectionDef();
            i0.ɵɵprojection(0);
        }
    }, encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSScrollIntoViewComponent, [{
            type: Component,
            args: [{
                    selector: 'tds-scroll-into-view',
                    template: `
  <ng-content></ng-content>
  `,
                    host: {
                        'class': "block relative w-full overflow-auto"
                    }
                }]
        }], function () { return [{ type: i0.ElementRef }]; }, { lstChildren: [{
                type: ContentChildren,
                args: [TDSScrollIntoView]
            }] });
})();

class TDSScrollIntoViewModule {
}
TDSScrollIntoViewModule.ɵfac = function TDSScrollIntoViewModule_Factory(t) { return new (t || TDSScrollIntoViewModule)(); };
TDSScrollIntoViewModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: TDSScrollIntoViewModule });
TDSScrollIntoViewModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [[
            CommonModule
        ]] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSScrollIntoViewModule, [{
            type: NgModule,
            args: [{
                    declarations: [
                        TDSScrollIntoViewComponent,
                        TDSScrollIntoView
                    ],
                    imports: [
                        CommonModule
                    ],
                    exports: [
                        TDSScrollIntoViewComponent,
                        TDSScrollIntoView
                    ],
                }]
        }], null, null);
})();
(function () {
    (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(TDSScrollIntoViewModule, { declarations: [TDSScrollIntoViewComponent,
            TDSScrollIntoView], imports: [CommonModule], exports: [TDSScrollIntoViewComponent,
            TDSScrollIntoView] });
})();

/**
 * Generated bundle index. Do not edit.
 */

export { TDSScrollIntoView, TDSScrollIntoViewComponent, TDSScrollIntoViewModule };
//# sourceMappingURL=tds-ui-scroll-into-view.mjs.map
