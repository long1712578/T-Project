{"version":3,"file":"tds-ui-core-outlet.mjs","sources":["../../../projects/tds-ui/core/outlet/string_template_outlet.directive.ts","../../../projects/tds-ui/core/outlet/outlet.module.ts","../../../projects/tds-ui/core/outlet/tds-ui-core-outlet.ts"],"sourcesContent":["\r\n\r\nimport {\r\n  Directive,\r\n  EmbeddedViewRef,\r\n  Input,\r\n  OnChanges,\r\n  SimpleChange,\r\n  SimpleChanges,\r\n  TemplateRef,\r\n  ViewContainerRef\r\n} from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[tdsStringTemplateOutlet]',\r\n  exportAs: 'tdsStringTemplateOutlet'\r\n})\r\nexport class TDSStringTemplateOutletDirective<_T = unknown> implements OnChanges {\r\n  private embeddedViewRef: EmbeddedViewRef<any> | null = null;\r\n  private context = new TDSStringTemplateOutletContext();\r\n  @Input() tdsStringTemplateOutletContext: any | null = null;\r\n  @Input() tdsStringTemplateOutlet: any | TemplateRef<any> = null;\r\n\r\n  static ngTemplateContextGuard<T>(_dir: TDSStringTemplateOutletDirective<T>, _ctx: any): _ctx is TDSStringTemplateOutletContext {\r\n    return true;\r\n  }\r\n\r\n  private recreateView(): void {\r\n    this.viewContainer.clear();\r\n    const isTemplateRef = this.tdsStringTemplateOutlet instanceof TemplateRef;\r\n    const templateRef = (isTemplateRef ? this.tdsStringTemplateOutlet : this.templateRef) as any;\r\n    this.embeddedViewRef = this.viewContainer.createEmbeddedView(\r\n      templateRef,\r\n      isTemplateRef ? this.tdsStringTemplateOutletContext : this.context\r\n    );\r\n  }\r\n\r\n  private updateContext(): void {\r\n    const isTemplateRef = this.tdsStringTemplateOutlet instanceof TemplateRef;\r\n    const newCtx = isTemplateRef ? this.tdsStringTemplateOutletContext : this.context;\r\n    const oldCtx = this.embeddedViewRef!.context as any;\r\n    if (newCtx) {\r\n      for (const propName of Object.keys(newCtx)) {\r\n        oldCtx[propName] = newCtx[propName];\r\n      }\r\n    }\r\n  }\r\n\r\n  constructor(private viewContainer: ViewContainerRef, private templateRef: TemplateRef<any>) { }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    const { tdsStringTemplateOutletContext, tdsStringTemplateOutlet } = changes;\r\n    const shouldRecreateView = (): boolean => {\r\n      let shouldOutletRecreate = false;\r\n      if (tdsStringTemplateOutlet) {\r\n        if (tdsStringTemplateOutlet.firstChange) {\r\n          shouldOutletRecreate = true;\r\n        } else {\r\n          const isPreviousOutletTemplate = tdsStringTemplateOutlet.previousValue instanceof TemplateRef;\r\n          const isCurrentOutletTemplate = tdsStringTemplateOutlet.currentValue instanceof TemplateRef;\r\n          shouldOutletRecreate = isPreviousOutletTemplate || isCurrentOutletTemplate;\r\n        }\r\n      }\r\n      const hasContextShapeChanged = (ctxChange: SimpleChange): boolean => {\r\n        const prevCtxKeys = Object.keys(ctxChange.previousValue || {});\r\n        const currCtxKeys = Object.keys(ctxChange.currentValue || {});\r\n        if (prevCtxKeys.length === currCtxKeys.length) {\r\n          for (const propName of currCtxKeys) {\r\n            if (prevCtxKeys.indexOf(propName) === -1) {\r\n              return true;\r\n            }\r\n          }\r\n          return false;\r\n        } else {\r\n          return true;\r\n        }\r\n      };\r\n      const shouldContextRecreate = tdsStringTemplateOutletContext && hasContextShapeChanged(tdsStringTemplateOutletContext);\r\n      return shouldContextRecreate || shouldOutletRecreate;\r\n    };\r\n\r\n    if (tdsStringTemplateOutlet) {\r\n      this.context.$implicit = tdsStringTemplateOutlet.currentValue;\r\n    }\r\n\r\n    const recreateView = shouldRecreateView();\r\n    if (recreateView) {\r\n      /** recreate view when context shape or outlet change **/\r\n      this.recreateView();\r\n    } else {\r\n      /** update context **/\r\n      this.updateContext();\r\n    }\r\n  }\r\n}\r\n\r\nexport class TDSStringTemplateOutletContext {\r\n  public $implicit: any;\r\n}\r\n","\r\n\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { TDSStringTemplateOutletDirective } from './string_template_outlet.directive';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  exports: [TDSStringTemplateOutletDirective],\r\n  declarations: [TDSStringTemplateOutletDirective]\r\n})\r\nexport class TDSOutletModule {}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}