import * as i0 from '@angular/core';
import { Injectable, Optional, Inject, InjectionToken } from '@angular/core';
import { Subject } from 'rxjs';
import { filter, mapTo } from 'rxjs/operators';

const isDefined = function (value) {
    return value !== undefined;
};
class TDSConfigService {
    constructor(defaultConfig) {
        this.configUpdated$ = new Subject();
        this.config = defaultConfig || {};
    }
    getConfig() {
        return this.config;
    }
    getConfigForComponent(componentName) {
        return this.config[componentName];
    }
    getConfigChangeEventForComponent(componentName) {
        return this.configUpdated$.pipe(filter(n => n === componentName), mapTo(undefined));
    }
    set(componentName, value) {
        this.config[componentName] = Object.assign(Object.assign({}, this.config[componentName]), value);
        this.configUpdated$.next(componentName);
    }
}
TDSConfigService.ɵfac = function TDSConfigService_Factory(t) { return new (t || TDSConfigService)(i0.ɵɵinject(TDS_CONFIG, 8)); };
TDSConfigService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: TDSConfigService, factory: TDSConfigService.ɵfac, providedIn: 'root' });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSConfigService, [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], function () {
        return [{ type: undefined, decorators: [{
                        type: Optional
                    }, {
                        type: Inject,
                        args: [TDS_CONFIG]
                    }] }];
    }, null);
})();
function WithConfig() {
    return function ConfigDecorator(target, propName, originalDescriptor) {
        const privatePropName = `$$__zorroConfigDecorator__${propName}`;
        Object.defineProperty(target, privatePropName, {
            configurable: true,
            writable: true,
            enumerable: false
        });
        return {
            get() {
                var _a, _b;
                const originalValue = (originalDescriptor === null || originalDescriptor === void 0 ? void 0 : originalDescriptor.get) ? originalDescriptor.get.bind(this)() : this[privatePropName];
                const assignedByUser = (((_a = this.propertyAssignCounter) === null || _a === void 0 ? void 0 : _a[propName]) || 0) > 1;
                const configValue = (_b = this.tdsConfigService.getConfigForComponent(this._tdsModuleName)) === null || _b === void 0 ? void 0 : _b[propName];
                if (assignedByUser && isDefined(originalValue)) {
                    return originalValue;
                }
                else {
                    return isDefined(configValue) ? configValue : originalValue;
                }
            },
            set(value) {
                this.propertyAssignCounter = this.propertyAssignCounter || {};
                this.propertyAssignCounter[propName] = (this.propertyAssignCounter[propName] || 0) + 1;
                if (originalDescriptor === null || originalDescriptor === void 0 ? void 0 : originalDescriptor.set) {
                    originalDescriptor.set.bind(this)(value);
                }
                else {
                    this[privatePropName] = value;
                }
            },
            configurable: true,
            enumerable: true
        };
    };
}
const TDS_CONFIG = new InjectionToken('tds-config');

/**
 * Generated bundle index. Do not edit.
 */

export { TDSConfigService, TDS_CONFIG, WithConfig };
//# sourceMappingURL=tds-ui-core-config.mjs.map
