import * as i0 from '@angular/core';
import { Directive, Injectable, forwardRef, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Input, ViewChild, NgModule } from '@angular/core';
import { __decorate } from 'tslib';
import { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';
import { ReplaySubject, Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { InputBoolean } from 'tds-ui/shared/utility';
import * as i2 from '@angular/cdk/bidi';
import { BidiModule } from '@angular/cdk/bidi';
import * as i1 from '@angular/cdk/a11y';
import * as i5 from '@angular/common';
import { CommonModule } from '@angular/common';

class TDSRadioButtonDirective {
}
TDSRadioButtonDirective.ɵfac = function TDSRadioButtonDirective_Factory(t) { return new (t || TDSRadioButtonDirective)(); };
TDSRadioButtonDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: TDSRadioButtonDirective, selectors: [["", "tds-radio-button", ""]] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSRadioButtonDirective, [{
            type: Directive,
            args: [{
                    selector: '[tds-radio-button]'
                }]
        }], null, null);
})();

class TDSRadioService {
    constructor() {
        this.selected$ = new ReplaySubject(1);
        this.touched$ = new Subject();
        this.disabled$ = new ReplaySubject(1);
        this.name$ = new ReplaySubject(1);
        this.size$ = new ReplaySubject(1);
    }
    touch() {
        this.touched$.next();
    }
    select(value) {
        this.selected$.next(value);
    }
    setDisabled(value) {
        this.disabled$.next(value);
    }
    setName(value) {
        this.name$.next(value);
    }
    setSize(value) {
        this.size$.next(value);
    }
}
TDSRadioService.ɵfac = function TDSRadioService_Factory(t) { return new (t || TDSRadioService)(); };
TDSRadioService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: TDSRadioService, factory: TDSRadioService.ɵfac });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSRadioService, [{
            type: Injectable
        }], null, null);
})();

const _c0$1 = ["*"];
class TDSRadioGroupComponent {
    constructor(cdr, tdsRadioService, elementRef, directionality) {
        this.cdr = cdr;
        this.tdsRadioService = tdsRadioService;
        this.elementRef = elementRef;
        this.directionality = directionality;
        this.value = null;
        this.destroy$ = new Subject();
        this.onChange = () => { };
        this.onTouched = () => { };
        this.disabled = false;
        this.buttonStyle = 'outline';
        this.size = 'md';
        this.tdsName = null;
        this.dir = 'ltr';
        // TODO: move to host after View Engine deprecation
        this.elementRef.nativeElement.classList.add('tds-radio-group');
    }
    ngOnInit() {
        var _a;
        this.tdsRadioService.selected$.pipe(takeUntil(this.destroy$)).subscribe(value => {
            if (this.value !== value) {
                this.value = value;
                this.onChange(this.value);
            }
        });
        this.tdsRadioService.touched$.pipe(takeUntil(this.destroy$)).subscribe(() => {
            Promise.resolve().then(() => this.onTouched());
        });
        (_a = this.directionality.change) === null || _a === void 0 ? void 0 : _a.pipe(takeUntil(this.destroy$)).subscribe((direction) => {
            this.dir = direction;
            this.cdr.detectChanges();
        });
        this.dir = this.directionality.value;
    }
    ngOnChanges(changes) {
        const { disabled, tdsName, size } = changes;
        if (disabled) {
            this.tdsRadioService.setDisabled(this.disabled);
        }
        if (tdsName) {
            this.tdsRadioService.setName(this.tdsName);
        }
        if (size) {
            this.tdsRadioService.setSize(this.size);
        }
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    writeValue(value) {
        this.value = value;
        this.tdsRadioService.select(value);
        this.cdr.markForCheck();
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this.tdsRadioService.setDisabled(isDisabled);
        this.cdr.markForCheck();
    }
}
TDSRadioGroupComponent.ɵfac = function TDSRadioGroupComponent_Factory(t) { return new (t || TDSRadioGroupComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(TDSRadioService), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i2.Directionality, 8)); };
TDSRadioGroupComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSRadioGroupComponent, selectors: [["tds-radio-group"]], hostVars: 8, hostBindings: function TDSRadioGroupComponent_HostBindings(rf, ctx) {
        if (rf & 2) {
            i0.ɵɵclassProp("tds-radio-group-lg", ctx.size === "lg")("tds-radio-group-sm", ctx.size === "sm")("tds-radio-group-solid", ctx.buttonStyle === "solid")("tds-radio-group-rtl", ctx.dir === "rtl");
        }
    }, inputs: { disabled: "disabled", buttonStyle: "buttonStyle", size: "size", tdsName: "tdsName" }, exportAs: ["tdsRadioGroup"], features: [i0.ɵɵProvidersFeature([
            TDSRadioService,
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => TDSRadioGroupComponent),
                multi: true
            }
        ]), i0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0$1, decls: 1, vars: 0, template: function TDSRadioGroupComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵprojectionDef();
            i0.ɵɵprojection(0);
        }
    }, encapsulation: 2, changeDetection: 0 });
__decorate([
    InputBoolean()
], TDSRadioGroupComponent.prototype, "disabled", void 0);
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSRadioGroupComponent, [{
            type: Component,
            args: [{
                    selector: 'tds-radio-group',
                    exportAs: 'tdsRadioGroup',
                    preserveWhitespaces: false,
                    template: ` <ng-content></ng-content> `,
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        TDSRadioService,
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => TDSRadioGroupComponent),
                            multi: true
                        }
                    ],
                    host: {
                        '[class.tds-radio-group-lg]': `size === 'lg'`,
                        '[class.tds-radio-group-sm]': `size === 'sm'`,
                        '[class.tds-radio-group-solid]': `buttonStyle === 'solid'`,
                        '[class.tds-radio-group-rtl]': `dir === 'rtl'`
                    }
                }]
        }], function () {
        return [{ type: i0.ChangeDetectorRef }, { type: TDSRadioService }, { type: i0.ElementRef }, { type: i2.Directionality, decorators: [{
                        type: Optional
                    }] }];
    }, { disabled: [{
                type: Input
            }], buttonStyle: [{
                type: Input
            }], size: [{
                type: Input
            }], tdsName: [{
                type: Input
            }] });
})();

const _c0 = ["inputElement"];
const _c1 = ["tds-radio", ""];
function TDSRadioComponent_span_3_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "span", 4);
    }
    if (rf & 2) {
        const ctx_r1 = i0.ɵɵnextContext();
        i0.ɵɵstyleProp("width", ctx_r1.widthHeight, "px")("height", ctx_r1.widthHeight, "px");
        i0.ɵɵproperty("ngClass", ctx_r1.contentClass);
    }
}
const _c2 = function (a0) { return { "relative p-0 m-0 inline-block outline-none": a0 }; };
const _c3 = ["*"];
class TDSRadioComponent {
    constructor(elementRef, cdr, focusMonitor, directionality, tdsRadioService, tdsRadioButtonDirective) {
        this.elementRef = elementRef;
        this.cdr = cdr;
        this.focusMonitor = focusMonitor;
        this.directionality = directionality;
        this.tdsRadioService = tdsRadioService;
        this.tdsRadioButtonDirective = tdsRadioButtonDirective;
        this.isNgModel = false;
        this.destroy$ = new Subject();
        this.isChecked = false;
        this.name = null;
        this.isRadioButton = !!this.tdsRadioButtonDirective;
        this.onChange = () => { };
        this.onTouched = () => { };
        this.value = null;
        this.disabled = false;
        this.autoFocus = false;
        this.size = "md";
        this.dir = 'ltr';
        this.contentClass = {};
    }
    onHostClick(event) {
        /** prevent label click triggered twice. **/
        event.stopPropagation();
        event.preventDefault();
        if (!this.disabled && !this.isChecked) {
            if (this.tdsRadioService) {
                this.tdsRadioService.select(this.value);
            }
            if (this.isNgModel) {
                this.isChecked = true;
                this.buildNgClass();
                this.onChange(true);
            }
        }
    }
    focus() {
        this.focusMonitor.focusVia(this.inputElement, 'keyboard');
    }
    blur() {
        this.inputElement.nativeElement.blur();
    }
    setDisabledState(disabled) {
        this.disabled = disabled;
        this.buildNgClass();
        this.cdr.markForCheck();
    }
    writeValue(value) {
        this.isChecked = value;
        this.buildNgClass();
        this.cdr.markForCheck();
    }
    registerOnChange(fn) {
        this.isNgModel = true;
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    ngOnInit() {
        var _a;
        if (this.tdsRadioService) {
            this.tdsRadioService.name$.pipe(takeUntil(this.destroy$)).subscribe(name => {
                this.name = name;
                this.cdr.markForCheck();
            });
            this.tdsRadioService.disabled$.pipe(takeUntil(this.destroy$)).subscribe(disabled => {
                this.disabled = disabled;
                this.buildNgClass();
                this.cdr.markForCheck();
            });
            this.tdsRadioService.selected$.pipe(takeUntil(this.destroy$)).subscribe(value => {
                this.isChecked = this.value === value;
                this.buildNgClass();
                this.cdr.markForCheck();
            });
            this.tdsRadioService.size$.pipe(takeUntil(this.destroy$)).subscribe(size => {
                this.size = size;
                this.buildNgClass();
                this.cdr.markForCheck();
            });
        }
        this.focusMonitor
            .monitor(this.elementRef, true)
            .pipe(takeUntil(this.destroy$))
            .subscribe(focusOrigin => {
            if (!focusOrigin) {
                Promise.resolve().then(() => this.onTouched());
                if (this.tdsRadioService) {
                    this.tdsRadioService.touch();
                }
            }
        });
        (_a = this.directionality.change) === null || _a === void 0 ? void 0 : _a.pipe(takeUntil(this.destroy$)).subscribe((direction) => {
            this.dir = direction;
            this.cdr.detectChanges();
        });
        this.dir = this.directionality.value;
    }
    ngAfterViewInit() {
        if (this.autoFocus) {
            this.focus();
        }
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
        this.focusMonitor.stopMonitoring(this.elementRef);
    }
    get widthHeight() {
        let result = 18;
        switch (this.size) {
            case 'sm':
                result = 16;
                break;
            case 'md':
                result = 18;
                break;
            case 'lg':
                result = 20;
                break;
            default:
                result = 18;
                break;
        }
        return result;
    }
    buildNgClass() {
        let cls = {
            'border-4 ': this.isChecked,
            'border-primary-1 ': this.isChecked && !this.disabled,
            'border-neutral-2-200 dark:border-d-neutral-2-200': !this.isChecked || this.disabled,
            'border dark:bg-d-neutral-3-50': !this.isChecked,
            'bg-neutral-3-100': !this.isChecked && this.disabled,
            'bg-white group-hover:border-primary-1 ': !this.disabled,
        };
        this.contentClass = cls;
    }
}
TDSRadioComponent.ɵfac = function TDSRadioComponent_Factory(t) { return new (t || TDSRadioComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.FocusMonitor), i0.ɵɵdirectiveInject(i2.Directionality, 8), i0.ɵɵdirectiveInject(TDSRadioService, 8), i0.ɵɵdirectiveInject(TDSRadioButtonDirective, 8)); };
TDSRadioComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSRadioComponent, selectors: [["", "tds-radio", ""], ["", "tds-radio-button", ""]], viewQuery: function TDSRadioComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(_c0, 5);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputElement = _t.first);
        }
    }, hostAttrs: [1, "relative", "inline-flex", "box-border", "p-0", "mr-2", "items-center", "text-neutral-1-900", "dark:text-d-neutral-1-900", "text-body-2", "font-regular"], hostVars: 22, hostBindings: function TDSRadioComponent_HostBindings(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵlistener("click", function TDSRadioComponent_click_HostBindingHandler($event) { return ctx.onHostClick($event); });
        }
        if (rf & 2) {
            i0.ɵɵclassProp("tds-radio-wrapper", !ctx.isRadioButton)("tds-radio-button-wrapper", ctx.isRadioButton)("tds-radio-wrapper-checked", ctx.isChecked && !ctx.isRadioButton)("tds-radio-button-wrapper-checked", ctx.isChecked && ctx.isRadioButton)("tds-radio-wrapper-disabled", ctx.disabled && !ctx.isRadioButton)("tds-radio-button-wrapper-disabled", ctx.disabled && ctx.isRadioButton)("tds-radio-wrapper-rtl", !ctx.isRadioButton && ctx.dir === "rtl")("tds-radio-button-wrapper-rtl", ctx.isRadioButton && ctx.dir === "rtl")("cursor-pointer", !ctx.disabled)("cursor-not-allowed", ctx.disabled)("group", !ctx.disabled);
        }
    }, inputs: { value: "value", disabled: "disabled", autoFocus: "autoFocus", size: "size" }, exportAs: ["tdsRadio"], features: [i0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => TDSRadioComponent),
                multi: true
            }
        ])], attrs: _c1, ngContentSelectors: _c3, decls: 6, vars: 28, consts: [[3, "ngClass"], ["type", "radio", 1, "absolute", "inset-0", "opacity-0", "z-10", 3, "disabled", "checked"], ["inputElement", ""], ["class", "relative top-0 left-0 block tds-radio-inner rounded-full mr-2", 3, "ngClass", "width", "height", 4, "ngIf"], [1, "relative", "top-0", "left-0", "block", "tds-radio-inner", "rounded-full", "mr-2", 3, "ngClass"]], template: function TDSRadioComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵprojectionDef();
            i0.ɵɵelementStart(0, "span", 0);
            i0.ɵɵelement(1, "input", 1, 2);
            i0.ɵɵtemplate(3, TDSRadioComponent_span_3_Template, 1, 5, "span", 3);
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(4, "span");
            i0.ɵɵprojection(5);
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵclassProp("tds-radio", !ctx.isRadioButton)("tds-radio-checked", ctx.isChecked && !ctx.isRadioButton)("tds-radio-disabled", ctx.disabled && !ctx.isRadioButton)("tds-radio-button", ctx.isRadioButton)("tds-radio-button-checked", ctx.isChecked && ctx.isRadioButton)("tds-radio-button-disabled", ctx.disabled && ctx.isRadioButton);
            i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(26, _c2, !ctx.isRadioButton));
            i0.ɵɵadvance(1);
            i0.ɵɵclassProp("tds-radio-input", !ctx.isRadioButton)("tds-radio-button-input", ctx.isRadioButton)("cursor-pointer", !ctx.disabled)("cursor-not-allowed", ctx.disabled);
            i0.ɵɵproperty("disabled", ctx.disabled)("checked", ctx.isChecked);
            i0.ɵɵattribute("autofocus", ctx.autoFocus ? "autofocus" : null)("name", ctx.name);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", !ctx.isRadioButton);
        }
    }, directives: [i5.NgClass, TDSRadioComponent, TDSRadioButtonDirective, i5.NgIf], encapsulation: 2, changeDetection: 0 });
__decorate([
    InputBoolean()
], TDSRadioComponent.prototype, "disabled", void 0);
__decorate([
    InputBoolean()
], TDSRadioComponent.prototype, "autoFocus", void 0);
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSRadioComponent, [{
            type: Component,
            args: [{
                    selector: '[tds-radio],[tds-radio-button]',
                    exportAs: 'tdsRadio',
                    preserveWhitespaces: false,
                    template: `
    <span
    [ngClass]="{'relative p-0 m-0 inline-block outline-none':!isRadioButton}"
      [class.tds-radio]="!isRadioButton"
      [class.tds-radio-checked]="isChecked && !isRadioButton"
      [class.tds-radio-disabled]="disabled && !isRadioButton"
      [class.tds-radio-button]="isRadioButton"
      [class.tds-radio-button-checked]="isChecked && isRadioButton"
      [class.tds-radio-button-disabled]="disabled && isRadioButton"
    >
      <input
        #inputElement
        type="radio"
        [attr.autofocus]="autoFocus ? 'autofocus' : null"
        [class.tds-radio-input]="!isRadioButton"
        [class.tds-radio-button-input]="isRadioButton"
        [disabled]="disabled"
        [checked]="isChecked"
        [attr.name]="name"
        class="absolute inset-0 opacity-0 z-10"
       [class.cursor-pointer]="!this.disabled"
       [class.cursor-not-allowed]="this.disabled"
      />
      <span 
      *ngIf="!isRadioButton"
      [ngClass]="contentClass"
      class="relative top-0 left-0 block tds-radio-inner rounded-full mr-2"
      [style.width.px]="widthHeight"
      [style.height.px]="widthHeight"
      ></span>
      <!-- <span
      *ngIf="isRadioButton"      
      class="relative top-0 left-0 block tds-radio-button-inner  w-4 h-4 rounded-full mr-2"
      [ngClass]="{'border-4 border-primary-1':isChecked && !isRadioButton,
      'border border-neutral-2-200 dark:border-d-neutral-2-200':!isChecked && !isRadioButton}"
      ></span> -->
    </span>
    <span><ng-content></ng-content></span>
  `,
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => TDSRadioComponent),
                            multi: true
                        }
                    ],
                    host: {
                        '[class.tds-radio-wrapper]': '!isRadioButton',
                        '[class.tds-radio-button-wrapper]': 'isRadioButton',
                        '[class.tds-radio-wrapper-checked]': 'isChecked && !isRadioButton',
                        '[class.tds-radio-button-wrapper-checked]': 'isChecked && isRadioButton',
                        '[class.tds-radio-wrapper-disabled]': 'disabled && !isRadioButton',
                        '[class.tds-radio-button-wrapper-disabled]': 'disabled && isRadioButton',
                        '[class.tds-radio-wrapper-rtl]': `!isRadioButton && dir === 'rtl'`,
                        '[class.tds-radio-button-wrapper-rtl]': `isRadioButton && dir === 'rtl'`,
                        'class': "relative inline-flex box-border p-0 mr-2 items-center text-neutral-1-900 dark:text-d-neutral-1-900 text-body-2 font-regular",
                        '[class.cursor-pointer]': '!disabled',
                        '[class.cursor-not-allowed]': 'disabled',
                        '[class.group]': '!disabled',
                        '(click)': 'onHostClick($event)'
                    }
                }]
        }], function () {
        return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1.FocusMonitor }, { type: i2.Directionality, decorators: [{
                        type: Optional
                    }] }, { type: TDSRadioService, decorators: [{
                        type: Optional
                    }] }, { type: TDSRadioButtonDirective, decorators: [{
                        type: Optional
                    }] }];
    }, { inputElement: [{
                type: ViewChild,
                args: ['inputElement', { static: false }]
            }], value: [{
                type: Input
            }], disabled: [{
                type: Input
            }], autoFocus: [{
                type: Input
            }], size: [{
                type: Input
            }] });
})();

class TDSRadioModule {
}
TDSRadioModule.ɵfac = function TDSRadioModule_Factory(t) { return new (t || TDSRadioModule)(); };
TDSRadioModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: TDSRadioModule });
TDSRadioModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [[BidiModule, CommonModule, FormsModule]] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSRadioModule, [{
            type: NgModule,
            args: [{
                    imports: [BidiModule, CommonModule, FormsModule],
                    exports: [TDSRadioComponent, TDSRadioButtonDirective, TDSRadioGroupComponent],
                    declarations: [TDSRadioComponent, TDSRadioButtonDirective, TDSRadioGroupComponent]
                }]
        }], null, null);
})();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(TDSRadioModule, { declarations: [TDSRadioComponent, TDSRadioButtonDirective, TDSRadioGroupComponent], imports: [BidiModule, CommonModule, FormsModule], exports: [TDSRadioComponent, TDSRadioButtonDirective, TDSRadioGroupComponent] }); })();

/**
 * Generated bundle index. Do not edit.
 */

export { TDSRadioButtonDirective, TDSRadioComponent, TDSRadioGroupComponent, TDSRadioModule, TDSRadioService };
//# sourceMappingURL=tds-ui-radio.mjs.map
