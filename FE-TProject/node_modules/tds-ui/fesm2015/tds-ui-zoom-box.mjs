import { BidiModule } from '@angular/cdk/bidi';
import * as i1 from '@angular/cdk/overlay';
import { OverlayModule } from '@angular/cdk/overlay';
import * as i2 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i0 from '@angular/core';
import { EventEmitter, Component, ChangeDetectionStrategy, ViewChild, Output, Input, NgModule } from '@angular/core';
import { POSITION_MAP, DEFAULT_TOOLTIP_POSITIONS } from 'tds-ui/core/overlay';

const _c0 = ["zoomContainer"];
const _c1 = ["imageThumbnail"];
const _c2 = ["fullSizeImage"];
const _c3 = function (a0, a1) { return { "border border-red-500 cursor-move": a0, "rounded-full": a1 }; };
function TDSZoomBoxComponent_ng_template_8_Template(rf, ctx) {
    if (rf & 1) {
        const _r7 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 8)(1, "img", 9, 6);
        i0.ɵɵlistener("load", function TDSZoomBoxComponent_ng_template_8_Template_img_load_1_listener() { i0.ɵɵrestoreView(_r7); const ctx_r6 = i0.ɵɵnextContext(); return ctx_r6.onFullImageLoaded(); });
        i0.ɵɵelementEnd()();
    }
    if (rf & 2) {
        const ctx_r4 = i0.ɵɵnextContext();
        i0.ɵɵstyleProp("display", ctx_r4.displayOverlay)("top", ctx_r4.extendY, "px")("left", ctx_r4.extendX, "px")("width", ctx_r4.overlayWidth, "px")("height", ctx_r4.overlayHeight, "px");
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction2(22, _c3, ctx_r4.enableLens, ctx_r4.circularLens));
        i0.ɵɵadvance(1);
        i0.ɵɵstyleProp("display", ctx_r4.displayOverlay)("top", ctx_r4.fullImageTop, "px")("left", ctx_r4.fullImageLeft, "px")("width", ctx_r4.magnifiedWidth, "px")("height", ctx_r4.magnifiedHeight, "px");
        i0.ɵɵproperty("src", ctx_r4.fullImage, i0.ɵɵsanitizeUrl);
    }
}
const _c4 = function (a0, a1) { return { "border border-red-500 cursor-move ": a0, "rounded-full": a1 }; };
class TDSZoomBoxComponent {
    constructor(renderer, cd) {
        this.renderer = renderer;
        this.cd = cd;
        this.zoomScroll = new EventEmitter();
        this.zoomPosition = new EventEmitter();
        this.enableLens = false;
        //scale to apply to len, will be change when zoom
        this.lensWidth = 100;
        this.lensHeight = 100;
        //default scale to calculate zoom value, will not be change
        this.defaultLenWidth = 100;
        this.defaultLenHeight = 100;
        this.overlayWidth = 200;
        this.overlayHeight = 200;
        this.overlayVisible = false;
        this.zoomMode = 'hover';
        this.magnification = 1;
        this.enableScrollZoom = false;
        this.scrollStepSize = 0.1;
        this.circularLens = false;
        this.minZoomRatio = 0;
        this.maxZoomRatio = 2;
        this.zoomingEnabled = false;
        this.zoomFrozen = false;
        this.isReady = false;
        this.thumbImageLoaded = false;
        this.fullImageLoaded = false;
        this.eventListeners = [];
        this.position = [POSITION_MAP.right];
        this.enableOverlay = false;
    }
    set setExtendX(value) {
        this.extendX = Number(value) || 0;
    }
    set setExtendY(value) {
        this.extendY = Number(value) || 0;
    }
    set setThumbImage(thumbImage) {
        this.thumbImageLoaded = false;
        this.isReady = false;
        this.thumbImage = thumbImage;
    }
    set setFullImage(fullImage) {
        this.fullImageLoaded = false;
        this.isReady = false;
        this.fullImage = fullImage;
    }
    set setZoomMode(zoomMode) {
        if (TDSZoomBoxComponent.validZoomModes.some(m => m === zoomMode)) {
            this.zoomContainer.nativeElement.removeAllListeners();
            this.eventListeners = [];
            this.zoomMode = zoomMode;
            this.setUpEventListeners();
        }
    }
    set setMagnification(magnification) {
        this.magnification = Math.round((Number(magnification) || this.magnification) * 10) / 10;
        this.zoomScroll.emit(this.magnification);
    }
    set setMinZoomRatio(minZoomRatio) {
        const ratio = Number(minZoomRatio) || this.minZoomRatio || this.baseRatio || 0;
        this.minZoomRatio = Math.max(ratio, this.baseRatio || 0);
    }
    set setMaxZoomRatio(maxZoomRatio) {
        this.maxZoomRatio = Number(maxZoomRatio) || this.maxZoomRatio;
    }
    set setScrollStepSize(stepSize) {
        this.scrollStepSize = Number(stepSize) || this.scrollStepSize;
    }
    set setEnableLens(enable) {
        this.enableLens = Boolean(enable);
    }
    set setLensWidth(width) {
        this.defaultLenWidth = this.lensWidth = Number(width) || this.lensWidth;
    }
    set setLensHeight(height) {
        this.defaultLenHeight = this.lensHeight = Number(height) || this.lensHeight;
    }
    set setCircularLens(enable) {
        this.circularLens = Boolean(enable);
    }
    set setEnableScrollZoom(enable) {
        this.enableScrollZoom = Boolean(enable);
    }
    set setPositon(pos) {
        this.setOverlayPositon(pos);
    }
    ngOnInit() {
        this.setUpEventListeners();
    }
    ngOnDestroy() {
        this.eventListeners.forEach((destroyFn) => destroyFn());
    }
    setOverlayPositon(pos) {
        let preferredPosition;
        if (Array.isArray(pos))
            preferredPosition = pos.map(placement => POSITION_MAP[placement]);
        else
            preferredPosition = [pos].map(placement => POSITION_MAP[placement]);
        this.position = [...preferredPosition, ...DEFAULT_TOOLTIP_POSITIONS];
    }
    onThumbImageLoaded() {
        this.thumbImageLoaded = true;
        this.checkImagesLoaded();
    }
    onFullImageLoaded() {
        this.fullImageLoaded = true;
        this.checkImagesLoaded();
    }
    setUpEventListeners() {
        switch (this.zoomMode) {
            case 'hover':
                this.eventListeners.push(this.renderer.listen(this.zoomContainer.nativeElement, 'mouseenter', ($event) => this.hoverMouseEnter($event)));
                this.eventListeners.push(this.renderer.listen(this.zoomContainer.nativeElement, 'mouseleave', () => this.hoverMouseLeave()));
                this.eventListeners.push(this.renderer.listen(this.zoomContainer.nativeElement, 'mousemove', ($event) => this.hoverMouseMove($event)));
                break;
            case 'toggle':
                this.eventListeners.push(this.renderer.listen(this.zoomContainer.nativeElement, 'click', ($event) => this.toggleClick($event)));
                break;
            case 'click':
                this.eventListeners.push(this.renderer.listen(this.zoomContainer.nativeElement, 'click', ($event) => this.clickStarter($event)));
                this.eventListeners.push(this.renderer.listen(this.zoomContainer.nativeElement, 'mouseleave', () => this.clickMouseLeave()));
                this.eventListeners.push(this.renderer.listen(this.zoomContainer.nativeElement, 'mousemove', ($event) => this.clickMouseMove($event)));
                break;
            case 'toggle-click':
                this.eventListeners.push(this.renderer.listen(this.zoomContainer.nativeElement, 'click', (event) => this.toggleClick(event)));
                this.eventListeners.push(this.renderer.listen(this.zoomContainer.nativeElement, 'mouseleave', () => this.clickMouseLeave()));
                this.eventListeners.push(this.renderer.listen(this.zoomContainer.nativeElement, 'mousemove', (event) => this.clickMouseMove(event)));
                break;
            case 'hover-freeze':
                this.eventListeners.push(this.renderer.listen(this.zoomContainer.nativeElement, 'mouseenter', ($event) => this.hoverFreezeMouseEnter($event)));
                this.eventListeners.push(this.renderer.listen(this.zoomContainer.nativeElement, 'mouseleave', () => this.hoverFreezeMouseLeave()));
                this.eventListeners.push(this.renderer.listen(this.zoomContainer.nativeElement, 'mousemove', ($event) => this.hoverFreezeMouseMove($event)));
                this.eventListeners.push(this.renderer.listen(this.zoomContainer.nativeElement, 'click', ($event) => this.hoverFreezeClick($event)));
                break;
            default:
                break;
        }
        if (this.enableScrollZoom) {
            // Chrome: 'mousewheel', Firefox: 'DOMMouseScroll', IE: 'onmousewheel'
            this.eventListeners.push(this.renderer.listen(this.zoomContainer.nativeElement, 'mousewheel', (event) => this.onMouseWheel(event)));
            this.eventListeners.push(this.renderer.listen(this.zoomContainer.nativeElement, 'DOMMouseScroll', (event) => this.onMouseWheel(event)));
            this.eventListeners.push(this.renderer.listen(this.zoomContainer.nativeElement, 'onmousewheel', (event) => this.onMouseWheel(event)));
        }
    }
    checkImagesLoaded() {
        this.calculateRatioAndOffset();
        if (this.thumbImageLoaded && this.fullImageLoaded) {
            this.calculateImageAndLensPosition();
            this.isReady = true;
        }
    }
    /**
     * Zoom position setters
     */
    setZoomPosition(left, top) {
        this.latestMouseLeft = Number(left) || this.latestMouseLeft;
        this.latestMouseTop = Number(top) || this.latestMouseTop;
        const c = {
            x: this.latestMouseLeft,
            y: this.latestMouseTop
        };
        this.zoomPosition.emit(c);
    }
    /**
     * Mouse wheel event
     */
    onMouseWheel(event) {
        // Don't eat events if zooming isn't active
        if (!this.zoomingEnabled || this.zoomFrozen) {
            return;
        }
        event = window.event || event; // old IE
        const direction = Math.max(Math.min((event.wheelDelta || -event.detail), 1), -1);
        if (direction > 0) {
            // up
            this.setMagnification = Math.min(this.magnification + this.scrollStepSize, this.maxZoomRatio);
        }
        else {
            // down
            this.setMagnification = Math.max(this.magnification - this.scrollStepSize, this.minZoomRatio);
        }
        this.calculateRatio();
        this.calculateZoomPosition(event);
        this.cd.markForCheck();
        // Prevent scrolling on page.
        event.returnValue = false; // IE
        if (event.preventDefault) {
            event.preventDefault(); // Chrome & FF
        }
    }
    /**
     * Hover mode
     */
    hoverMouseEnter(event) {
        this.zoomOn(event);
    }
    hoverMouseLeave() {
        this.zoomOff();
    }
    hoverMouseMove(event) {
        this.calculateZoomPosition(event);
    }
    /**
     * Toggle mode
     */
    toggleClick(event) {
        if (this.zoomingEnabled) {
            this.zoomOff();
        }
        else {
            this.zoomOn(event);
        }
    }
    /**
     * Click mode
     */
    clickStarter(event) {
        if (this.zoomingEnabled === false) {
            this.zoomOn(event);
        }
    }
    clickMouseLeave() {
        this.zoomOff();
    }
    clickMouseMove(event) {
        if (this.zoomingEnabled) {
            this.calculateZoomPosition(event);
        }
    }
    /**
     * Hover freeze mode
     */
    hoverFreezeMouseEnter(event) {
        if (this.zoomingEnabled && !this.zoomFrozen) {
            this.zoomOn(event);
        }
    }
    hoverFreezeMouseLeave() {
        if (this.zoomingEnabled && !this.zoomFrozen) {
            this.zoomOff();
        }
    }
    hoverFreezeMouseMove(event) {
        if (this.zoomingEnabled && !this.zoomFrozen) {
            this.calculateZoomPosition(event);
        }
    }
    hoverFreezeClick(event) {
        if (this.zoomingEnabled && this.zoomFrozen) {
            this.zoomFrozen = false;
            this.zoomOff();
        }
        else if (this.zoomingEnabled) {
            this.zoomFrozen = true;
        }
        else {
            this.zoomOn(event);
        }
    }
    /**
     * Private helper methods
     */
    zoomOn(event) {
        if (this.isReady) {
            this.zoomingEnabled = true;
            this.calculateRatioAndOffset();
            if (this.enableOverlay) {
                this.displayLen = this.displayOverlay = 'block';
                this.overlayVisible = true;
                this.displayInPic = 'none';
            }
            else {
                this.displayLen = this.displayInPic = 'block';
            }
            this.calculateZoomPosition(event);
            this.cd.markForCheck();
        }
    }
    zoomOff() {
        this.zoomingEnabled = false;
        if (this.enableOverlay) {
            this.displayLen = this.displayOverlay = 'none';
            this.overlayVisible = false;
        }
        else {
            this.displayLen = this.displayInPic = 'none';
            this.overlayVisible = false;
        }
        this.cd.markForCheck();
    }
    calculateZoomPosition(event) {
        const newLeft = Math.max(Math.min(event.offsetX, this.thumbWidth), 0);
        const newTop = Math.max(Math.min(event.offsetY, this.thumbHeight), 0);
        this.setZoomPosition(newLeft, newTop);
        this.calculateImageAndLensPosition();
        this.cd.markForCheck();
    }
    calculateImageAndLensPosition() {
        let lensLeftMod = 0;
        let lensTopMod = 0;
        let overlayLeftMod = 0;
        let overlayTopMod = 0;
        if (this.enableOverlay) {
            this.overlayHeight = this.defaultLenHeight / this.thumbHeight * this.fullHeight;
            this.overlayWidth = this.defaultLenWidth / this.thumbWidth * this.fullWidth;
            this.overlayLeft = this.thumbWidth + this.zoomContainer.nativeElement.offsetLeft;
            this.overlayTop = this.zoomContainer.nativeElement.offsetTop;
            overlayLeftMod = this.latestMouseLeft - this.overlayWidth / 2;
            overlayTopMod = this.latestMouseTop - this.overlayHeight / 2;
            if (overlayLeftMod < 0)
                overlayLeftMod = 0;
            else if (overlayLeftMod > (this.thumbWidth - this.overlayWidth))
                overlayLeftMod = this.thumbWidth - this.overlayWidth;
            if (overlayTopMod < 0)
                overlayTopMod = 0;
            else if (overlayTopMod > (this.thumbHeight - this.overlayHeight))
                overlayTopMod = this.thumbHeight - this.overlayHeight;
        }
        if (this.enableLens) {
            this.lensLeft = this.latestMouseLeft - this.lensWidth / 2;
            this.lensTop = this.latestMouseTop - this.lensHeight / 2;
            if (this.lensLeft < 0)
                this.lensLeft = 0;
            else if (this.lensLeft > (this.thumbWidth - this.lensWidth))
                this.lensLeft = (this.thumbWidth - this.lensWidth);
            if (this.lensTop < 0)
                this.lensTop = 0;
            else if (this.lensTop > (this.thumbHeight - this.lensHeight))
                this.lensTop = (this.thumbHeight - this.lensHeight);
            lensLeftMod = this.lensLeft;
            lensTopMod = this.lensTop;
        }
        this.fullImageLeft = (this.latestMouseLeft * -this.xRatio) - ((this.enableOverlay) ? overlayLeftMod : lensLeftMod);
        this.fullImageTop = (this.latestMouseTop * -this.yRatio) - ((this.enableOverlay) ? overlayTopMod : lensTopMod);
    }
    calculateRatioAndOffset() {
        this.thumbWidth = this.imageThumbnail.nativeElement.naturalWidth;
        this.thumbHeight = this.imageThumbnail.nativeElement.naturalHeight;
        // If lens is disabled, set lens size to equal thumb size and position it on top of the thumb
        if (!this.enableLens) {
            this.lensWidth = this.thumbWidth;
            this.lensHeight = this.thumbHeight;
            this.lensLeft = 0;
            this.lensTop = 0;
        }
        // getBoundingClientRect() ? https://stackoverflow.com/a/44008873
        this.offsetTop = this.imageThumbnail.nativeElement.getBoundingClientRect().top;
        this.offsetLeft = this.imageThumbnail.nativeElement.getBoundingClientRect().left;
        if (this.fullImage === undefined) {
            this.fullImage = this.thumbImage;
        }
        if (this.fullImageLoaded) {
            this.fullWidth = this.fullSizeImage.nativeElement.naturalWidth;
            this.fullHeight = this.fullSizeImage.nativeElement.naturalHeight;
            this.baseRatio = Math.max((this.thumbWidth / this.fullWidth), (this.thumbHeight / this.fullHeight));
            // Don't allow zooming to smaller than thumbnail size
            this.minZoomRatio = Math.max(this.minZoomRatio || 0, this.baseRatio || 0);
            this.calculateRatio();
        }
    }
    calculateRatio() {
        this.magnifiedWidth = (this.fullWidth * this.magnification);
        this.magnifiedHeight = (this.fullHeight * this.magnification);
        if (this.enableOverlay) {
            this.lensWidth = this.defaultLenWidth / this.magnification;
            this.lensHeight = this.defaultLenHeight / this.magnification;
        }
        this.xRatio = (this.magnifiedWidth - this.thumbWidth) / this.thumbWidth;
        this.yRatio = (this.magnifiedHeight - this.thumbHeight) / this.thumbHeight;
    }
}
TDSZoomBoxComponent.validZoomModes = ['hover', 'toggle', 'click', 'hover-freeze'];
TDSZoomBoxComponent.ɵfac = function TDSZoomBoxComponent_Factory(t) { return new (t || TDSZoomBoxComponent)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
TDSZoomBoxComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSZoomBoxComponent, selectors: [["tds-zoombox"]], viewQuery: function TDSZoomBoxComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(_c0, 7);
            i0.ɵɵviewQuery(_c1, 7);
            i0.ɵɵviewQuery(_c2, 7);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.zoomContainer = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.imageThumbnail = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.fullSizeImage = _t.first);
        }
    }, inputs: { enableOverlay: "enableOverlay", setExtendX: ["extendX", "setExtendX"], setExtendY: ["extendY", "setExtendY"], setThumbImage: ["thumbImage", "setThumbImage"], setFullImage: ["fullImage", "setFullImage"], setZoomMode: ["zoomMode", "setZoomMode"], setMagnification: ["magnification", "setMagnification"], setMinZoomRatio: ["minZoomRatio", "setMinZoomRatio"], setMaxZoomRatio: ["maxZoomRatio", "setMaxZoomRatio"], setScrollStepSize: ["scrollStepSize", "setScrollStepSize"], setEnableLens: ["enableLens", "setEnableLens"], setLensWidth: ["lensWidth", "setLensWidth"], setLensHeight: ["lensHeight", "setLensHeight"], setCircularLens: ["circularLens", "setCircularLens"], setEnableScrollZoom: ["enableScrollZoom", "setEnableScrollZoom"], setPositon: ["postion", "setPositon"] }, outputs: { zoomScroll: "zoomScroll", zoomPosition: "zoomPosition" }, exportAs: ["TDSZoomBoxComponent"], decls: 9, vars: 29, consts: [[1, "relative", "m-auto", "w-full", "h-full", "overflow-hidden", "pointer-events-none"], ["zoomContainer", ""], ["cdkOverlayOrigin", "", 1, "pointer-events-auto", 3, "src", "load"], ["overlay", "cdkOverlayOrigin", "imageThumbnail", ""], [1, "absolute", "overflow-hidden", "pointer-events-none", 3, "ngClass"], [1, "absolute", "max-w-none", "max-h-none", "hidden", "pointer-events-none", 3, "src", "load"], ["fullSizeImage", ""], ["cdkConnectedOverlay", "", 3, "cdkConnectedOverlayOrigin", "cdkConnectedOverlayOpen", "cdkConnectedOverlayPositions"], [1, "relative", "overflow-hidden", "pointer-events-none", 3, "ngClass"], [1, "relative", "max-w-none", "max-h-none", "hidden", "pointer-events-none", 3, "src", "load"]], template: function TDSZoomBoxComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0, 1)(2, "img", 2, 3);
            i0.ɵɵlistener("load", function TDSZoomBoxComponent_Template_img_load_2_listener() { return ctx.onThumbImageLoaded(); });
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(5, "div", 4)(6, "img", 5, 6);
            i0.ɵɵlistener("load", function TDSZoomBoxComponent_Template_img_load_6_listener() { return ctx.onFullImageLoaded(); });
            i0.ɵɵelementEnd()()();
            i0.ɵɵtemplate(8, TDSZoomBoxComponent_ng_template_8_Template, 3, 25, "ng-template", 7);
        }
        if (rf & 2) {
            const _r1 = i0.ɵɵreference(3);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("src", ctx.thumbImage, i0.ɵɵsanitizeUrl);
            i0.ɵɵadvance(3);
            i0.ɵɵstyleProp("display", ctx.displayLen)("top", ctx.lensTop, "px")("left", ctx.lensLeft, "px")("width", ctx.lensWidth, "px")("height", ctx.lensHeight, "px");
            i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction2(26, _c4, ctx.enableLens, ctx.circularLens));
            i0.ɵɵadvance(1);
            i0.ɵɵstyleProp("display", ctx.displayInPic)("top", ctx.fullImageTop, "px")("left", ctx.fullImageLeft, "px")("width", ctx.magnifiedWidth, "px")("height", ctx.magnifiedHeight, "px");
            i0.ɵɵproperty("src", ctx.fullImage, i0.ɵɵsanitizeUrl);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("cdkConnectedOverlayOrigin", _r1)("cdkConnectedOverlayOpen", ctx.overlayVisible)("cdkConnectedOverlayPositions", ctx.position);
        }
    }, directives: [i1.CdkOverlayOrigin, i2.NgClass, i1.CdkConnectedOverlay], encapsulation: 2, changeDetection: 0 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSZoomBoxComponent, [{
            type: Component,
            args: [{
                    selector: 'tds-zoombox',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: `
  <div 
        #zoomContainer class="relative m-auto w-full h-full overflow-hidden pointer-events-none"
       >
  
    <img cdkOverlayOrigin #overlay="cdkOverlayOrigin" #imageThumbnail 
    class="pointer-events-auto" [src]="thumbImage" (load)="onThumbImageLoaded()"/>
    
    <div  class="absolute overflow-hidden pointer-events-none" 
    [ngClass]="{ 'border border-red-500 cursor-move ': this.enableLens,'rounded-full':this.circularLens}"
         [style.display]="this.displayLen"
         [style.top.px]="this.lensTop"
         [style.left.px]="this.lensLeft"
         [style.width.px]="this.lensWidth"
         [style.height.px]="this.lensHeight"
    >
    
      <img #fullSizeImage class="absolute max-w-none max-h-none hidden pointer-events-none" [src]="fullImage"
           (load)="onFullImageLoaded()"
           [style.display]="this.displayInPic"
           [style.top.px]="this.fullImageTop"
           [style.left.px]="this.fullImageLeft"
           [style.width.px]="this.magnifiedWidth"
           [style.height.px]="this.magnifiedHeight"
      />
  
    </div>
  </div>
  
  <ng-template  cdkConnectedOverlay 
  [cdkConnectedOverlayOrigin]="overlay"
  [cdkConnectedOverlayOpen]="overlayVisible"
  [cdkConnectedOverlayPositions]="position">
      <div class="relative overflow-hidden pointer-events-none"
       [ngClass]="{
      'border border-red-500 cursor-move': this.enableLens,
      'rounded-full':this.circularLens}"
          [style.display]="this.displayOverlay"
          [style.top.px]="this.extendY"
           [style.left.px]="this.extendX"
         [style.width.px]="this.overlayWidth"
         [style.height.px]="this.overlayHeight"
           
    >
    <img #fullSizeImage class=" relative max-w-none max-h-none hidden pointer-events-none" [src]="fullImage"
           (load)="onFullImageLoaded()"
           [style.display]="this.displayOverlay"
           [style.top.px]="this.fullImageTop"
           [style.left.px]="this.fullImageLeft"
           [style.width.px]="this.magnifiedWidth"
           [style.height.px]="this.magnifiedHeight"/>
    </div>
  
  </ng-template>
    `,
                    exportAs: 'TDSZoomBoxComponent'
                }]
        }], function () { return [{ type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }]; }, { zoomContainer: [{
                type: ViewChild,
                args: ['zoomContainer', { static: true }]
            }], imageThumbnail: [{
                type: ViewChild,
                args: ['imageThumbnail', { static: true }]
            }], fullSizeImage: [{
                type: ViewChild,
                args: ['fullSizeImage', { static: true }]
            }], zoomScroll: [{
                type: Output
            }], zoomPosition: [{
                type: Output
            }], enableOverlay: [{
                type: Input
            }], setExtendX: [{
                type: Input,
                args: ['extendX']
            }], setExtendY: [{
                type: Input,
                args: ['extendY']
            }], setThumbImage: [{
                type: Input,
                args: ['thumbImage']
            }], setFullImage: [{
                type: Input,
                args: ['fullImage']
            }], setZoomMode: [{
                type: Input,
                args: ['zoomMode']
            }], setMagnification: [{
                type: Input,
                args: ['magnification']
            }], setMinZoomRatio: [{
                type: Input,
                args: ['minZoomRatio']
            }], setMaxZoomRatio: [{
                type: Input,
                args: ['maxZoomRatio']
            }], setScrollStepSize: [{
                type: Input,
                args: ['scrollStepSize']
            }], setEnableLens: [{
                type: Input,
                args: ['enableLens']
            }], setLensWidth: [{
                type: Input,
                args: ['lensWidth']
            }], setLensHeight: [{
                type: Input,
                args: ['lensHeight']
            }], setCircularLens: [{
                type: Input,
                args: ['circularLens']
            }], setEnableScrollZoom: [{
                type: Input,
                args: ['enableScrollZoom']
            }], setPositon: [{
                type: Input,
                args: ['postion']
            }] });
})();

class TDSZoomBoxModule {
}
TDSZoomBoxModule.ɵfac = function TDSZoomBoxModule_Factory(t) { return new (t || TDSZoomBoxModule)(); };
TDSZoomBoxModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: TDSZoomBoxModule });
TDSZoomBoxModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [[
            CommonModule,
            BidiModule,
            OverlayModule
        ]] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSZoomBoxModule, [{
            type: NgModule,
            args: [{
                    declarations: [
                        TDSZoomBoxComponent
                    ],
                    imports: [
                        CommonModule,
                        BidiModule,
                        OverlayModule
                    ],
                    exports: [
                        TDSZoomBoxComponent
                    ]
                }]
        }], null, null);
})();
(function () {
    (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(TDSZoomBoxModule, { declarations: [TDSZoomBoxComponent], imports: [CommonModule,
            BidiModule,
            OverlayModule], exports: [TDSZoomBoxComponent] });
})();

/**
 * Generated bundle index. Do not edit.
 */

export { TDSZoomBoxComponent, TDSZoomBoxModule };
//# sourceMappingURL=tds-ui-zoom-box.mjs.map
