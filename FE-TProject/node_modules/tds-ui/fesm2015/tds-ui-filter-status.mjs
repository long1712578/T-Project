import { BidiModule } from '@angular/cdk/bidi';
import * as i2 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i0 from '@angular/core';
import { Directive, Injectable, TemplateRef, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Input, ContentChild, Self, EventEmitter, QueryList, forwardRef, Output, ContentChildren, NgModule } from '@angular/core';
import { TDSBadgeModule } from 'tds-ui/badges';
import { TDSOutletModule } from 'tds-ui/core/outlet';
import { ReplaySubject, Subject } from 'rxjs';
import { takeUntil, filter, startWith, delay } from 'rxjs/operators';
import * as i1 from '@angular/router';
import { NavigationEnd } from '@angular/router';
import { __decorate } from 'tslib';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { InputBoolean } from 'tds-ui/shared/utility';

class TDSFilterStatusTemplateDirective {
    constructor(template) {
        this.template = template;
    }
}
TDSFilterStatusTemplateDirective.ɵfac = function TDSFilterStatusTemplateDirective_Factory(t) { return new (t || TDSFilterStatusTemplateDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef)); };
TDSFilterStatusTemplateDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: TDSFilterStatusTemplateDirective, selectors: [["", "tds-filter-status-template", ""]] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSFilterStatusTemplateDirective, [{
            type: Directive,
            args: [{ selector: '[tds-filter-status-template]' }]
        }], function () { return [{ type: i0.TemplateRef }]; }, null);
})();

class TDSFilterStatusService {
    constructor() {
        this.selected$ = new ReplaySubject(1);
        this.touched$ = new Subject();
        this.disabled$ = new ReplaySubject(1);
    }
    touch() {
        this.touched$.next();
    }
    select(value) {
        this.selected$.next(value);
    }
    setDisabled(value) {
        this.disabled$.next(value);
    }
}
TDSFilterStatusService.ɵfac = function TDSFilterStatusService_Factory(t) { return new (t || TDSFilterStatusService)(); };
TDSFilterStatusService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: TDSFilterStatusService, factory: TDSFilterStatusService.ɵfac });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSFilterStatusService, [{
            type: Injectable
        }], null, null);
})();

function TDSFilterStatusItemComponent_ng_template_0_Template(rf, ctx) { }
const _c0$2 = function (a0, a1) { return { "text-white bg-primary-1": a0, "text-neutral-1-500  dark:text-d-neutral-1-500 bg-neutral-3-100 dark:bg-d-neutral-1-400  group-hover:text-white group-hover:bg-primary-1": a1 }; };
function TDSFilterStatusItemComponent_ng_template_1_div_3_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 5);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r9 = i0.ɵɵnextContext();
        const active_r3 = ctx_r9.active;
        const count_r5 = ctx_r9.count;
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction2(2, _c0$2, active_r3, !active_r3));
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", count_r5, " ");
    }
}
const _c1 = function (a0, a1) { return { "border-b-3 border-primary-1": a0, "hover:border-b-3 hover:border-primary-1 group": a1 }; };
const _c2 = function (a0, a1) { return { "text-neutral-1-900 dark:text-d-neutral-1-900": a0, "text-neutral-1-400 dark:text-d-neutral-1-400 group-hover:text-neutral-1-900 dark:group-hover:text-d-neutral-1-900": a1 }; };
function TDSFilterStatusItemComponent_ng_template_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 2)(1, "div", 3);
        i0.ɵɵtext(2);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, TDSFilterStatusItemComponent_ng_template_1_div_3_Template, 2, 5, "div", 4);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const active_r3 = ctx.active;
        const disabled_r4 = ctx.disabled;
        const count_r5 = ctx.count;
        const name_r6 = ctx.name;
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction2(4, _c1, active_r3, !disabled_r4));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction2(7, _c2, active_r3, !active_r3));
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(name_r6);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", count_r5);
    }
}
const _c3 = function (a0, a1, a2, a3, a4) { return { active: a0, disabled: a1, name: a2, count: a3, $implicit: a4 }; };
class TDSFilterStatusItemComponent {
    constructor(elementRef, cdr, tdsFilterStatusService) {
        this.elementRef = elementRef;
        this.cdr = cdr;
        this.tdsFilterStatusService = tdsFilterStatusService;
        this.active = false;
        this.disabled = false;
        this.value = null;
        this.count = null;
        this.name = null;
        this.destroy$ = new Subject();
    }
    ngOnInit() {
        if (this.tdsFilterStatusService) {
            this.tdsFilterStatusService.disabled$.pipe(takeUntil(this.destroy$)).subscribe(disabled => {
                this.disabled = disabled;
                this.cdr.markForCheck();
            });
            this.tdsFilterStatusService.selected$.pipe(takeUntil(this.destroy$)).subscribe(value => {
                this.active = this.value === value;
                this.cdr.markForCheck();
            });
        }
    }
    onHostClick(event) {
        /** prevent label click triggered twice. **/
        event.stopPropagation();
        event.preventDefault();
        if (!this.disabled && !this.active) {
            if (this.tdsFilterStatusService) {
                this.tdsFilterStatusService.select(this.value);
            }
        }
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    ngOnChanges(changes) {
        this.cdr.markForCheck();
    }
}
TDSFilterStatusItemComponent.ɵfac = function TDSFilterStatusItemComponent_Factory(t) { return new (t || TDSFilterStatusItemComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(TDSFilterStatusService, 8)); };
TDSFilterStatusItemComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSFilterStatusItemComponent, selectors: [["tds-filter-status-item"]], contentQueries: function TDSFilterStatusItemComponent_ContentQueries(rf, ctx, dirIndex) {
        if (rf & 1) {
            i0.ɵɵcontentQuery(dirIndex, TDSFilterStatusTemplateDirective, 5, TemplateRef);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.customTemplate = _t.first);
        }
    }, hostAttrs: [1, "inline-block"], hostVars: 4, hostBindings: function TDSFilterStatusItemComponent_HostBindings(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵlistener("click", function TDSFilterStatusItemComponent_click_HostBindingHandler($event) { return ctx.onHostClick($event); });
        }
        if (rf & 2) {
            i0.ɵɵclassProp("cursor-pointer", !ctx.disabled)("cursor-not-allowed", ctx.disabled);
        }
    }, inputs: { disabled: "disabled", value: "value", count: "count", name: "name" }, exportAs: ["tdsFilterTab"], features: [i0.ɵɵNgOnChangesFeature], decls: 3, vars: 8, consts: [[3, "ngTemplateOutlet", "ngTemplateOutletContext"], ["defaultTemplate", ""], [1, "p-4", "flex", "items-center", 3, "ngClass"], [1, "text-body-2", "mr-2", "font-semibold", 3, "ngClass"], ["class", "text-caption-2 font-semibold py-0.5 px-1.5 rounded-full flex", 3, "ngClass", 4, "ngIf"], [1, "text-caption-2", "font-semibold", "py-0.5", "px-1.5", "rounded-full", "flex", 3, "ngClass"]], template: function TDSFilterStatusItemComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵtemplate(0, TDSFilterStatusItemComponent_ng_template_0_Template, 0, 0, "ng-template", 0);
            i0.ɵɵtemplate(1, TDSFilterStatusItemComponent_ng_template_1_Template, 4, 10, "ng-template", null, 1, i0.ɵɵtemplateRefExtractor);
        }
        if (rf & 2) {
            const _r1 = i0.ɵɵreference(2);
            i0.ɵɵproperty("ngTemplateOutlet", ctx.customTemplate || _r1)("ngTemplateOutletContext", i0.ɵɵpureFunction5(2, _c3, ctx.active, ctx.disabled, ctx.name, ctx.count, ctx.value));
        }
    }, directives: [i2.NgTemplateOutlet, i2.NgClass, i2.NgIf], encapsulation: 2, changeDetection: 0 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSFilterStatusItemComponent, [{
            type: Component,
            args: [{ selector: 'tds-filter-status-item', exportAs: 'tdsFilterTab', preserveWhitespaces: false, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {
                        '(click)': 'onHostClick($event)',
                        '[class.cursor-pointer]': '!disabled',
                        '[class.cursor-not-allowed]': 'disabled',
                        'class': "inline-block"
                    }, template: "<!-- <ng-content></ng-content> -->\r\n<ng-template [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\r\n    [ngTemplateOutletContext]=\"{active:active, disabled:disabled, name:name, count:count, $implicit:value }\">\r\n</ng-template>\r\n<ng-template #defaultTemplate let-active='active' let-disabled=\"disabled\" let-count='count' let-name='name' let-value>\r\n    <div class=\"p-4 flex items-center \" [ngClass]=\"{'border-b-3 border-primary-1':active,'hover:border-b-3 hover:border-primary-1 group':!disabled}\">\r\n        <div class=\"text-body-2 mr-2 font-semibold\" [ngClass]=\"{'text-neutral-1-900 dark:text-d-neutral-1-900':active,'text-neutral-1-400 dark:text-d-neutral-1-400 group-hover:text-neutral-1-900 dark:group-hover:text-d-neutral-1-900':!active}\">{{name}}</div>\r\n        <div *ngIf=\"count\" class=\"text-caption-2 font-semibold py-0.5 px-1.5 rounded-full flex\" [ngClass]=\"{'text-white bg-primary-1':active,'text-neutral-1-500  dark:text-d-neutral-1-500 bg-neutral-3-100 dark:bg-d-neutral-1-400  group-hover:text-white group-hover:bg-primary-1':!active}\"> \r\n            {{count}}\r\n        </div>\r\n    </div>\r\n</ng-template>" }]
        }], function () {
        return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: TDSFilterStatusService, decorators: [{
                        type: Optional
                    }] }];
    }, { disabled: [{
                type: Input
            }], value: [{
                type: Input
            }], count: [{
                type: Input
            }], name: [{
                type: Input
            }], customTemplate: [{
                type: ContentChild,
                args: [TDSFilterStatusTemplateDirective, { read: TemplateRef }]
            }] });
})();

/**
 * This component is for catching `routerLink` directive.
 */
class TDSFilterStatusLinkDirective {
    constructor(elementRef, routerLink, routerLinkWithHref) {
        this.elementRef = elementRef;
        this.routerLink = routerLink;
        this.routerLinkWithHref = routerLinkWithHref;
    }
}
TDSFilterStatusLinkDirective.ɵfac = function TDSFilterStatusLinkDirective_Factory(t) { return new (t || TDSFilterStatusLinkDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.RouterLink, 10), i0.ɵɵdirectiveInject(i1.RouterLinkWithHref, 10)); };
TDSFilterStatusLinkDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: TDSFilterStatusLinkDirective, selectors: [["a", "tds-filter-status-router-link", ""]], exportAs: ["tdsFilterStatusRouterLink"] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSFilterStatusLinkDirective, [{
            type: Directive,
            args: [{
                    selector: 'a[tds-filter-status-router-link]',
                    exportAs: 'tdsFilterStatusRouterLink'
                }]
        }], function () {
        return [{ type: i0.ElementRef }, { type: i1.RouterLink, decorators: [{
                        type: Optional
                    }, {
                        type: Self
                    }] }, { type: i1.RouterLinkWithHref, decorators: [{
                        type: Optional
                    }, {
                        type: Self
                    }] }];
    }, null);
})();

const _c0$1 = ["*"];
class TDSFilterStatusLinkComponent {
    constructor(elementRef, cdr, tdsFilterStatusService) {
        this.elementRef = elementRef;
        this.cdr = cdr;
        this.tdsFilterStatusService = tdsFilterStatusService;
        this.active = false;
        this.disabled = false;
        this.value = null;
        this.count = null;
        this.name = null;
        this.destroy$ = new Subject();
    }
    ngOnInit() {
        if (this.tdsFilterStatusService) {
            this.tdsFilterStatusService.disabled$.pipe(takeUntil(this.destroy$)).subscribe(disabled => {
                this.disabled = disabled;
                this.cdr.markForCheck();
            });
            this.tdsFilterStatusService.selected$.pipe(takeUntil(this.destroy$)).subscribe(value => {
                this.active = this.value === value;
                this.cdr.markForCheck();
            });
        }
    }
    onHostClick(event) {
        /** prevent label click triggered twice. **/
        event.stopPropagation();
        event.preventDefault();
        if (!this.disabled && !this.active) {
            if (this.tdsFilterStatusService) {
                this.tdsFilterStatusService.select(this.value);
            }
        }
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    ngOnChanges(changes) {
        this.cdr.markForCheck();
    }
}
TDSFilterStatusLinkComponent.ɵfac = function TDSFilterStatusLinkComponent_Factory(t) { return new (t || TDSFilterStatusLinkComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(TDSFilterStatusService, 8)); };
TDSFilterStatusLinkComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSFilterStatusLinkComponent, selectors: [["tds-filter-status-link"]], contentQueries: function TDSFilterStatusLinkComponent_ContentQueries(rf, ctx, dirIndex) {
        if (rf & 1) {
            i0.ɵɵcontentQuery(dirIndex, TDSFilterStatusLinkDirective, 5);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.linkDirective = _t.first);
        }
    }, hostAttrs: [1, "inline-block"], hostVars: 4, hostBindings: function TDSFilterStatusLinkComponent_HostBindings(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵlistener("click", function TDSFilterStatusLinkComponent_click_HostBindingHandler($event) { return ctx.onHostClick($event); });
        }
        if (rf & 2) {
            i0.ɵɵclassProp("cursor-pointer", !ctx.disabled)("cursor-not-allowed", ctx.disabled);
        }
    }, inputs: { disabled: "disabled", value: "value", count: "count", name: "name" }, exportAs: ["tdsFilterLink"], features: [i0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0$1, decls: 1, vars: 0, template: function TDSFilterStatusLinkComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵprojectionDef();
            i0.ɵɵprojection(0);
        }
    }, encapsulation: 2, changeDetection: 0 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSFilterStatusLinkComponent, [{
            type: Component,
            args: [{ selector: 'tds-filter-status-link', exportAs: 'tdsFilterLink', preserveWhitespaces: false, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {
                        '(click)': 'onHostClick($event)',
                        '[class.cursor-pointer]': '!disabled',
                        '[class.cursor-not-allowed]': 'disabled',
                        'class': "inline-block"
                    }, template: "<ng-content></ng-content> " }]
        }], function () {
        return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: TDSFilterStatusService, decorators: [{
                        type: Optional
                    }] }];
    }, { disabled: [{
                type: Input
            }], value: [{
                type: Input
            }], count: [{
                type: Input
            }], name: [{
                type: Input
            }], linkDirective: [{
                type: ContentChild,
                args: [TDSFilterStatusLinkDirective, { static: false }]
            }] });
})();

const _c0 = ["*"];
class TDSFilterStatusComponent {
    constructor(cdr, tdsFilterStatusService, router) {
        this.cdr = cdr;
        this.tdsFilterStatusService = tdsFilterStatusService;
        this.router = router;
        this._value = null;
        this.disabled = false;
        this.linkRouter = false;
        this.linkExact = true;
        this.selectChangeEvent = new EventEmitter();
        this.links = new QueryList();
        this.destroy$ = new Subject();
        this.onChange = () => { };
        this.onTouched = () => { };
    }
    get value() {
        return this._value;
    }
    set value(v) {
        if (this._value !== v) {
            this._value = v;
        }
    }
    ngOnInit() {
        if (this.tdsFilterStatusService) {
            this.tdsFilterStatusService.selected$.pipe(takeUntil(this.destroy$)).subscribe(value => {
                if (this.value !== value) {
                    this.value = value;
                    this.selectChangeEvent.emit(this.value);
                    this.onChange(this.value);
                }
            });
        }
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    ngAfterContentInit() {
        Promise.resolve().then(() => {
            this.setUpRouter();
        });
    }
    ngOnChanges(changes) {
    }
    writeValue(value) {
        this.value = value;
        this.tdsFilterStatusService.select(value);
        this.cdr.markForCheck();
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    setSelectedIndex(value) {
        if (value != this.value)
            this.tdsFilterStatusService.select(value);
    }
    setUpRouter() {
        if (this.linkRouter) {
            if (!this.router) {
                throw new Error(`[TDS] you should import 'RouterModule' if you want to use 'linkRouter'!`);
            }
            this.router.events
                .pipe(takeUntil(this.destroy$), filter(e => e instanceof NavigationEnd), startWith(true), delay(0))
                .subscribe(() => {
                this.updateRouterActive();
                this.cdr.markForCheck();
            });
        }
    }
    updateRouterActive() {
        if (this.router.navigated) {
            const index = this.findShouldActiveTabIndex();
            if (index > -1) {
                const links = this.listLinkChild.toArray();
                this.setSelectedIndex(links[index].value);
            }
        }
    }
    findShouldActiveTabIndex() {
        const links = this.listLinkChild.toArray();
        const isActive = this.isLinkActive(this.router);
        return links.findIndex(link => {
            const c = link.linkDirective;
            return c ? isActive(c.routerLink) || isActive(c.routerLinkWithHref) : false;
        });
    }
    isLinkActive(router) {
        return (link) => (link ? router.isActive(link.urlTree ? link.urlTree : '', this.linkExact) : false);
    }
}
TDSFilterStatusComponent.ɵfac = function TDSFilterStatusComponent_Factory(t) { return new (t || TDSFilterStatusComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(TDSFilterStatusService, 8), i0.ɵɵdirectiveInject(i1.Router, 8)); };
TDSFilterStatusComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSFilterStatusComponent, selectors: [["tds-filter-status"]], contentQueries: function TDSFilterStatusComponent_ContentQueries(rf, ctx, dirIndex) {
        if (rf & 1) {
            i0.ɵɵcontentQuery(dirIndex, TDSFilterStatusItemComponent, 4);
            i0.ɵɵcontentQuery(dirIndex, TDSFilterStatusLinkComponent, 4);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.listChild = _t);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.listLinkChild = _t);
        }
    }, hostAttrs: [1, "inline-block"], inputs: { disabled: "disabled", linkRouter: "linkRouter", linkExact: "linkExact" }, outputs: { selectChangeEvent: "selectChange" }, exportAs: ["tdsFilterStatus"], features: [i0.ɵɵProvidersFeature([
            TDSFilterStatusService,
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => TDSFilterStatusComponent),
                multi: true
            }
        ]), i0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function TDSFilterStatusComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵprojectionDef();
            i0.ɵɵprojection(0);
        }
    }, encapsulation: 2, changeDetection: 0 });
__decorate([
    InputBoolean()
], TDSFilterStatusComponent.prototype, "disabled", void 0);
__decorate([
    InputBoolean()
], TDSFilterStatusComponent.prototype, "linkRouter", void 0);
__decorate([
    InputBoolean()
], TDSFilterStatusComponent.prototype, "linkExact", void 0);
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSFilterStatusComponent, [{
            type: Component,
            args: [{
                    selector: 'tds-filter-status',
                    exportAs: 'tdsFilterStatus',
                    preserveWhitespaces: false,
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: `
  <ng-content></ng-content>
  `,
                    host: {
                        class: 'inline-block',
                    },
                    providers: [
                        TDSFilterStatusService,
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => TDSFilterStatusComponent),
                            multi: true
                        }
                    ]
                }]
        }], function () {
        return [{ type: i0.ChangeDetectorRef }, { type: TDSFilterStatusService, decorators: [{
                        type: Optional
                    }] }, { type: i1.Router, decorators: [{
                        type: Optional
                    }] }];
    }, { disabled: [{
                type: Input
            }], linkRouter: [{
                type: Input
            }], linkExact: [{
                type: Input
            }], selectChangeEvent: [{
                type: Output,
                args: ['selectChange']
            }], listChild: [{
                type: ContentChildren,
                args: [TDSFilterStatusItemComponent]
            }], listLinkChild: [{
                type: ContentChildren,
                args: [TDSFilterStatusLinkComponent]
            }] });
})();

class TDSFilterStatusModule {
}
TDSFilterStatusModule.ɵfac = function TDSFilterStatusModule_Factory(t) { return new (t || TDSFilterStatusModule)(); };
TDSFilterStatusModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: TDSFilterStatusModule });
TDSFilterStatusModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [[BidiModule, CommonModule, TDSOutletModule, TDSBadgeModule]] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSFilterStatusModule, [{
            type: NgModule,
            args: [{
                    imports: [BidiModule, CommonModule, TDSOutletModule, TDSBadgeModule],
                    declarations: [
                        TDSFilterStatusComponent,
                        TDSFilterStatusItemComponent,
                        TDSFilterStatusTemplateDirective,
                        TDSFilterStatusLinkComponent,
                        TDSFilterStatusLinkDirective
                    ],
                    exports: [
                        TDSFilterStatusComponent,
                        TDSFilterStatusItemComponent,
                        TDSFilterStatusTemplateDirective,
                        TDSFilterStatusLinkComponent,
                        TDSFilterStatusLinkDirective
                    ],
                }]
        }], null, null);
})();
(function () {
    (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(TDSFilterStatusModule, { declarations: [TDSFilterStatusComponent,
            TDSFilterStatusItemComponent,
            TDSFilterStatusTemplateDirective,
            TDSFilterStatusLinkComponent,
            TDSFilterStatusLinkDirective], imports: [BidiModule, CommonModule, TDSOutletModule, TDSBadgeModule], exports: [TDSFilterStatusComponent,
            TDSFilterStatusItemComponent,
            TDSFilterStatusTemplateDirective,
            TDSFilterStatusLinkComponent,
            TDSFilterStatusLinkDirective] });
})();

/**
 * Generated bundle index. Do not edit.
 */

export { TDSFilterStatusComponent, TDSFilterStatusItemComponent, TDSFilterStatusLinkComponent, TDSFilterStatusLinkDirective, TDSFilterStatusModule, TDSFilterStatusService, TDSFilterStatusTemplateDirective };
//# sourceMappingURL=tds-ui-filter-status.mjs.map
