{"version":3,"file":"tds-ui-shared-common.mjs","sources":["../../../projects/tds-ui/shared/common/color.ts","../../../projects/tds-ui/shared/common/disabled.ts","../../../projects/tds-ui/shared/common/error-options.ts","../../../projects/tds-ui/shared/common/tabindex.ts","../../../projects/tds-ui/shared/common/common-module.ts","../../../projects/tds-ui/shared/common/error-state.ts","../../../projects/tds-ui/shared/common/tds-ui-shared-common.ts"],"sourcesContent":["import { Constructor } from './constructor';\r\nimport { ElementRef } from '@angular/core';\r\nimport { LooseAutocomplete } from 'tds-ui/shared/type-script';\r\n\r\nexport type TDSColor = 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'error' | 'black' | 'white' | 'red' | 'yellow' | 'green' | 'blue' | 'indigo' | 'purple' | 'pink' | 'amber' | 'sky' | 'lime' | 'teal' | 'orange' ;\r\n/** Possible color palette values. */\r\nexport type TDSThemePalette =  TDSColor | undefined;\r\nexport type TDSButtonColor = LooseAutocomplete<TDSColor | 'custom'>;\r\n/** @docs-private */\r\nexport interface CanColor {\r\n    /** Theme color palette for the component. */\r\n    color: TDSThemePalette;\r\n\r\n    /** Default color to fall back to if no value is set. */\r\n    defaultColor: TDSThemePalette | undefined;\r\n}\r\n\r\n/** @docs-private */\r\nexport type CanColorCtor = Constructor<CanColor>;\r\n\r\n/** @docs-private */\r\nexport interface HasElementRef {\r\n    _elementRef: ElementRef;\r\n}\r\n\r\n\r\n\r\n/** Mixin to augment a directive with a `color` property. */\r\nexport function mixinColor<T extends Constructor<HasElementRef>>(\r\n    base: T, defaultColor?: TDSThemePalette): CanColorCtor & T {\r\n    return class extends base {\r\n        defaultColor = defaultColor;\r\n        color: TDSThemePalette;\r\n        constructor(...args: any[]) {\r\n            super(...args);\r\n            this.color = defaultColor;\r\n        }\r\n\r\n    };\r\n}\r\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\r\nimport {Constructor} from './constructor';\r\n\r\n/** @docs-private */\r\nexport interface CanDisable {\r\n  /** Whether the component is disabled. */\r\n  disabled: boolean;\r\n}\r\n\r\n/** @docs-private */\r\nexport type CanDisableCtor = Constructor<CanDisable>;\r\n\r\n/** Mixin to augment a directive with a `disabled` property. */\r\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\r\n  return class extends base {\r\n    private _disabled: boolean = false;\r\n\r\n    get disabled() { return this._disabled; }\r\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\r\n\r\n    constructor(...args: any[]) { super(...args); }\r\n  };\r\n}","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Injectable} from '@angular/core';\r\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\r\n\r\n/** Error state matcher that matches when a control is invalid and dirty. */\r\n@Injectable()\r\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\r\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\r\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\r\n  }\r\n}\r\n\r\n/** Provider that defines how form controls behave with regards to displaying error messages. */\r\n@Injectable({providedIn: 'root'})\r\nexport class ErrorStateMatcher {\r\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\r\n    return !!(control && control.invalid && ((form && form.submitted)));\r\n  }\r\n}\r\nexport function  TDSIsErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\r\n  return !!(control && control.invalid && ((form && form.submitted)));\r\n}","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\r\nimport {Constructor, AbstractConstructor} from './constructor';\r\nimport {CanDisable} from './disabled';\r\n\r\n\r\n/** @docs-private */\r\nexport interface HasTabIndex {\r\n  /** Tabindex of the component. */\r\n  tabIndex: number;\r\n\r\n  /** Tabindex to which to fall back to if no value is set. */\r\n  defaultTabIndex: number;\r\n}\r\n\r\n/** @docs-private */\r\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\r\n\r\n/** Mixin to augment a directive with a `tabIndex` property. */\r\nexport function mixinTabIndex<T extends AbstractConstructor<CanDisable>>(\r\n  base: T, defaultTabIndex = 0): HasTabIndexCtor & T {\r\n  // Note: We cast `base` to `unknown` and then `Constructor`. It could be an abstract class,\r\n  // but given we `extend` it from another class, we can assume a constructor being accessible.\r\n  abstract class Mixin extends (base as unknown as Constructor<CanDisable>) {\r\n    private _tabIndex: number = defaultTabIndex;\r\n    defaultTabIndex = defaultTabIndex;\r\n\r\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\r\n    set tabIndex(value: number) {\r\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\r\n      this._tabIndex = value != null ? coerceNumberProperty(value) : this.defaultTabIndex;\r\n    }\r\n\r\n    constructor(...args: any[]) {\r\n      super(...args);\r\n    }\r\n  }\r\n\r\n  // Since we don't directly extend from `base` with it's original types, and we instruct\r\n  // TypeScript that `T` actually is instantiatable through `new`, the types don't overlap.\r\n  // This is a limitation in TS as abstract classes cannot be typed properly dynamically.\r\n  return Mixin as unknown as T & Constructor<HasTabIndex>;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {HighContrastModeDetector} from '@angular/cdk/a11y';\r\nimport {BidiModule} from '@angular/cdk/bidi';\r\nimport {Inject, InjectionToken, isDevMode, NgModule, Optional, Version} from '@angular/core';\r\nimport {VERSION as CDK_VERSION} from '@angular/cdk';\r\nimport {DOCUMENT} from '@angular/common';\r\n\r\n// Private version constant to circumvent test/build issues,\r\n// i.e. avoid core to depend on the @angular/material primary entry-point\r\n// Can be removed once the Material primary entry-point no longer\r\n// re-exports all secondary entry-points\r\nconst VERSION = new Version('0.0.0-PLACEHOLDER');\r\n\r\n/** @docs-private */\r\nexport function TDS_SANITY_CHECKS_FACTORY(): SanityChecks {\r\n  return true;\r\n}\r\n\r\n/** Injection token that configures whether the Material sanity checks are enabled. */\r\nexport const TDS_SANITY_CHECKS = new InjectionToken<SanityChecks>('tds-sanity-checks', {\r\n  providedIn: 'root',\r\n  factory: TDS_SANITY_CHECKS_FACTORY,\r\n});\r\n\r\n/**\r\n * Possible sanity checks that can be enabled. If set to\r\n * true/false, all checks will be enabled/disabled.\r\n */\r\nexport type SanityChecks = boolean | GranularSanityChecks;\r\n\r\n/** Object that can be used to configure the sanity checks granularly. */\r\nexport interface GranularSanityChecks {\r\n  doctype: boolean;\r\n  theme: boolean;\r\n  version: boolean;\r\n}\r\n\r\n/**\r\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\r\n * components. This includes Bidi, etc.\r\n *\r\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\r\n */\r\n@NgModule({\r\n  imports: [BidiModule],\r\n  exports: [BidiModule],\r\n})\r\nexport class TDSCommonModule {\r\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\r\n  private _hasDoneGlobalChecks = false;\r\n\r\n  /** Configured sanity checks. */\r\n  private _sanityChecks: SanityChecks;\r\n\r\n  /** Used to reference correct document/window */\r\n  protected _document: Document;\r\n\r\n  constructor(\r\n      highContrastModeDetector: HighContrastModeDetector,\r\n      @Optional() @Inject(TDS_SANITY_CHECKS) sanityChecks: any,\r\n      @Inject(DOCUMENT) document: any) {\r\n    this._document = document;\r\n\r\n    // While A11yModule also does this, we repeat it here to avoid importing A11yModule\r\n    // in TDSCommonModule.\r\n    highContrastModeDetector._applyBodyHighContrastModeCssClasses();\r\n\r\n    // Note that `_sanityChecks` is typed to `any`, because AoT\r\n    // throws an error if we use the `SanityChecks` type directly.\r\n    this._sanityChecks = sanityChecks;\r\n\r\n    if (!this._hasDoneGlobalChecks) {\r\n      this._checkDoctypeIsDefined();\r\n      this._checkThemeIsPresent();\r\n      this._checkCdkVersionMatch();\r\n      this._hasDoneGlobalChecks = true;\r\n    }\r\n  }\r\n\r\n  /** Use defaultView of injected document if available or fallback to global window reference */\r\n  private _getWindow(): Window | null {\r\n    const win = this._document.defaultView || window;\r\n    return typeof win === 'object' && win ? win : null;\r\n  }\r\n\r\n  /** Whether any sanity checks are enabled. */\r\n  private _checksAreEnabled(): boolean {\r\n    // TODO(crisbeto): we can't use `ngDevMode` here yet, because ViewEngine apps might not support\r\n    // it. Since these checks can have performance implications and they aren't tree shakeable\r\n    // in their current form, we can leave the `isDevMode` check in for now.\r\n    // tslint:disable-next-line:ban\r\n    return isDevMode() && !this._isTestEnv();\r\n  }\r\n\r\n  /** Whether the code is running in tests. */\r\n  private _isTestEnv() {\r\n    const window = this._getWindow() as any;\r\n    return window && (window.__karma__ || window.jasmine);\r\n  }\r\n\r\n  private _checkDoctypeIsDefined(): void {\r\n    const isEnabled = this._checksAreEnabled() &&\r\n      (this._sanityChecks === true || (this._sanityChecks as GranularSanityChecks).doctype);\r\n\r\n    if (isEnabled && !this._document.doctype) {\r\n      console.warn(\r\n        'Current document does not have a doctype. This may cause ' +\r\n        'some Angular Material components not to behave as expected.'\r\n      );\r\n    }\r\n  }\r\n\r\n  private _checkThemeIsPresent(): void {\r\n    // We need to assert that the `body` is defined, because these checks run very early\r\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\r\n    const isDisabled = !this._checksAreEnabled() ||\r\n      (this._sanityChecks === false || !(this._sanityChecks as GranularSanityChecks).theme);\r\n\r\n    if (isDisabled || !this._document.body || typeof getComputedStyle !== 'function') {\r\n      return;\r\n    }\r\n\r\n    const testElement = this._document.createElement('div');\r\n\r\n    testElement.classList.add('mat-theme-loaded-marker');\r\n    this._document.body.appendChild(testElement);\r\n\r\n    const computedStyle = getComputedStyle(testElement);\r\n\r\n    // In some situations the computed style of the test element can be null. For example in\r\n    // Firefox, the computed style is null if an application is running inside of a hidden iframe.\r\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\r\n    if (computedStyle && computedStyle.display !== 'none') {\r\n      console.warn(\r\n        'Could not find Angular Material core theme. Most Material ' +\r\n        'components may not work as expected. For more info refer ' +\r\n        'to the theming guide: https://material.angular.io/guide/theming'\r\n      );\r\n    }\r\n\r\n    this._document.body.removeChild(testElement);\r\n  }\r\n\r\n  /** Checks whether the material version matches the cdk version */\r\n  private _checkCdkVersionMatch(): void {\r\n    const isEnabled = this._checksAreEnabled() &&\r\n      (this._sanityChecks === true || (this._sanityChecks as GranularSanityChecks).version);\r\n\r\n    if (isEnabled && VERSION.full !== CDK_VERSION.full) {\r\n      console.warn(\r\n          'The Angular Material version (' + VERSION.full + ') does not match ' +\r\n          'the Angular CDK version (' + CDK_VERSION.full + ').\\n' +\r\n          'Please ensure the versions of these two packages exactly match.'\r\n      );\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\r\nimport {Subject} from 'rxjs';\r\nimport {Constructor} from './constructor';\r\nimport { ErrorStateMatcher } from './error-options';\r\n\r\n\r\n/** @docs-private */\r\nexport interface CanUpdateErrorState {\r\n  updateErrorState(): void;\r\n  readonly stateChanges: Subject<void>;\r\n  errorState: boolean;\r\n  errorStateMatcher: ErrorStateMatcher;\r\n}\r\n\r\n/** @docs-private */\r\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\r\n\r\n/** @docs-private */\r\nexport interface HasErrorState {\r\n  _parentFormGroup: FormGroupDirective;\r\n  _parentForm: NgForm;\r\n  _defaultErrorStateMatcher: ErrorStateMatcher;\r\n  ngControl: NgControl;\r\n}\r\n\r\n/**\r\n * Mixin to augment a directive with updateErrorState method.\r\n * For component with `errorState` and need to update `errorState`.\r\n */\r\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\r\n: CanUpdateErrorStateCtor & T {\r\n  return class extends base {\r\n    /** Whether the component is in an error state. */\r\n    errorState: boolean = false;\r\n\r\n    /**\r\n     * Stream that emits whenever the state of the input changes such that the wrapping\r\n     * `TDSFormField` needs to run change detection.\r\n     */\r\n    readonly stateChanges = new Subject<void>();\r\n\r\n    errorStateMatcher!: ErrorStateMatcher;\r\n\r\n    updateErrorState() {\r\n      const oldState = this.errorState;\r\n      const parent = this._parentFormGroup || this._parentForm;\r\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\r\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\r\n      const newState = matcher.isErrorState(control, parent);\r\n\r\n      if (newState !== oldState) {\r\n        this.errorState = newState;\r\n        this.stateChanges.next();\r\n      }\r\n    }\r\n\r\n    constructor(...args: any[]) {\r\n      super(...args);\r\n    }\r\n  };\r\n}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["CDK_VERSION"],"mappings":"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"}