{"version":3,"file":"tds-ui-core-option.mjs","sources":["../../../projects/tds-ui/core/option/option-parent.ts","../../../projects/tds-ui/core/option/optgroup.ts","../../../projects/tds-ui/core/option/optgroup.html","../../../projects/tds-ui/core/option/option.ts","../../../projects/tds-ui/core/option/option.html","../../../projects/tds-ui/core/option/option.module.ts","../../../projects/tds-ui/core/option/tds-ui-core-option.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {InjectionToken} from '@angular/core';\r\n\r\n/**\r\n * Describes a parent component that manages a list of options.\r\n * Contains properties that the options can inherit.\r\n * @docs-private\r\n */\r\nexport interface TDSOptionParentComponent {\r\n \r\n  multiple?: boolean;\r\n  inertGroups?: boolean;\r\n}\r\n\r\n/**\r\n * Injection token used to provide the parent component to options.\r\n */\r\nexport const TDS_OPTION_PARENT_COMPONENT =\r\n    new InjectionToken<TDSOptionParentComponent>('TDS_OPTION_PARENT_COMPONENT');\r\n\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {BooleanInput} from '@angular/cdk/coercion';\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  InjectionToken,\r\n  Input,\r\n  ViewEncapsulation,\r\n  Directive, Inject, Optional\r\n} from '@angular/core';\r\nimport { CanDisable, CanDisableCtor, mixinDisabled } from 'tds-ui/shared/common';\r\nimport {TDSOptionParentComponent, TDS_OPTION_PARENT_COMPONENT} from './option-parent';\r\n\r\n// Notes on the accessibility pattern used for `tds-optgroup`.\r\n// The option group has two different \"modes\": regular and inert. The regular mode uses the\r\n// recommended a11y pattern which has `role=\"group\"` on the group element with `aria-labelledby`\r\n// pointing to the label. This works for `tds-select`, but it seems to hit a bug for autocomplete\r\n// under VoiceOver where the group doesn't get read out at all. The bug appears to be that if\r\n// there's __any__ a11y-related attribute on the group (e.g. `role` or `aria-labelledby`),\r\n// VoiceOver on Safari won't read it out.\r\n// We've introduced the `inert` mode as a workaround. Under this mode, all a11y attributes are\r\n// removed from the group, and we get the screen reader to read out the group label by mirroring it\r\n// inside an invisible element in the option. This is sub-optimal, because the screen reader will\r\n// repeat the group label on each navigation, whereas the default pattern only reads the group when\r\n// the user enters a new group. The following alternate approaches were considered:\r\n// 1. Reading out the group label using the `LiveAnnouncer` solves the problem, but we can't control\r\n//    when the text will be read out so sometimes it comes in too late or never if the user\r\n//    navigates quickly.\r\n// 2. `<tds-option aria-describedby=\"groupLabel\"` - This works on Safari, but VoiceOver in Chrome\r\n//    won't read out the description at all.\r\n// 3. `<tds-option aria-labelledby=\"optionLabel groupLabel\"` - This works on Chrome, but Safari\r\n//     doesn't read out the text at all. Furthermore, on\r\n\r\n// Boilerplate for applying mixins to TDSOptgroup.\r\n/** @docs-private */\r\nclass TDSOptgroupBase { }\r\nconst _TDSOptgroupMixinBase: CanDisableCtor & typeof TDSOptgroupBase =\r\n    mixinDisabled(TDSOptgroupBase);\r\n\r\n// Counter for unique group ids.\r\nlet _uniqueOptgroupIdCounter = 0;\r\n\r\n@Directive()\r\nexport class _TDSOptgroupBase extends _TDSOptgroupMixinBase implements CanDisable {\r\n  \r\n  /** Label for the option group. */\r\n  @Input() label!: string;\r\n\r\n  /** Unique id for the underlying label. */\r\n  _labelId: string = `tds-optgroup-label-${_uniqueOptgroupIdCounter++}`;\r\n\r\n  /** Whether the group is in inert a11y mode. */\r\n  _inert: boolean;\r\n\r\n  constructor(@Inject(TDS_OPTION_PARENT_COMPONENT) @Optional() parent?: TDSOptionParentComponent) {\r\n    super();\r\n    this._inert = parent?.inertGroups ?? false;\r\n  }\r\n\r\n  static ngAcceptInputType_disabled: BooleanInput;\r\n}\r\n\r\n/**\r\n * Injection token that can be used to reference instances of `TDSOptgroup`. It serves as\r\n * alternative token to the actual `TDSOptgroup` class which could cause unnecessary\r\n * retention of the class and its component metadata.\r\n */\r\nexport const TDS_OPTGROUP = new InjectionToken<TDSOptgroup>('TDSOptgroup');\r\n\r\n/**\r\n * Component that is used to group instances of `tds-option`.\r\n */\r\n@Component({\r\n  selector: 'tds-optgroup',\r\n  exportAs: 'tdsOptgroup',\r\n  templateUrl: 'optgroup.html',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  inputs: ['disabled'],\r\n  // styleUrls: ['optgroup.css'],\r\n  host: {\r\n    'class': 'tds-optgroup',\r\n    '[attr.role]': '_inert ? null : \"group\"',\r\n    '[attr.aria-disabled]': '_inert ? null : disabled.toString()',\r\n    '[attr.aria-labelledby]': '_inert ? null : _labelId',\r\n    '[class.tds-optgroup-disabled]': 'disabled',\r\n  },\r\n  providers: [{provide: TDS_OPTGROUP, useExisting: TDSOptgroup}],\r\n})\r\nexport class TDSOptgroup extends _TDSOptgroupBase {\r\n}\r\n","<span class=\"tds-optgroup-label\" aria-hidden=\"true\" [id]=\"_labelId\">{{ label }} \r\n    <ng-content></ng-content>\r\n</span>\r\n<ng-content select=\"tds-option, ng-container\"></ng-content>\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { BooleanInput, coerceBooleanProperty } from '@angular/cdk/coercion';\r\nimport { ENTER, SPACE, hasModifierKey } from '@angular/cdk/keycodes';\r\nimport {\r\n  AfterViewChecked,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Inject,\r\n  Input,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  QueryList,\r\n  ViewEncapsulation,\r\n  Directive,\r\n} from '@angular/core';\r\nimport { FocusOptions, FocusableOption, FocusOrigin } from '@angular/cdk/a11y';\r\nimport { Subject } from 'rxjs';\r\nimport { TDSOptgroup, _TDSOptgroupBase, TDS_OPTGROUP } from './optgroup';\r\nimport { TDSOptionParentComponent, TDS_OPTION_PARENT_COMPONENT } from './option-parent';\r\n\r\n/**\r\n * Option IDs need to be unique across components, so this counter exists outside of\r\n * the component definition.\r\n */\r\nlet _uniqueIdCounter = 0;\r\n\r\n/** Event object emitted by TDSOption when selected or deselected. */\r\nexport class TDSOptionSelectionChange {\r\n  constructor(\r\n    /** Reference to the option that emitted the event. */\r\n    public source: _TDSOptionBase,\r\n    /** Whether the change in the option's value was a result of a user action. */\r\n    public isUserInput = false) { }\r\n}\r\n\r\n@Directive()\r\nexport class _TDSOptionBase implements FocusableOption, AfterViewChecked, OnDestroy {\r\n  private _selected = false;\r\n  private _active = false;\r\n  private _disabled = false;\r\n  private _hide = false;\r\n  private _mostRecentViewValue = '';\r\n\r\n  /** Whether the wrapping component is in multiple selection mode. */\r\n  get multiple() { return this._parent && this._parent.multiple; }\r\n\r\n  /** Whether or not the option is currently selected. */\r\n  get selected(): boolean { return this._selected; }\r\n\r\n  /** The form value of the option. */\r\n  @Input() value: any;\r\n\r\n  /** The unique ID of the option. */\r\n  @Input() id: string = `tds-option-${_uniqueIdCounter++}`;\r\n\r\n  /** Whether the option is disabled. */\r\n  @Input()\r\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\r\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\r\n\r\n\r\n  /** Whether the option is disabled. */\r\n  @Input() get hide() { return this._hide; }\r\n  set hide(value: any) { this._hide = coerceBooleanProperty(value); }\r\n\r\n  /** Event emitted when the option is selected or deselected. */\r\n  // tslint:disable-next-line:no-output-on-prefix\r\n  @Output() readonly onSelectionChange = new EventEmitter<TDSOptionSelectionChange>();\r\n\r\n  /** Emits when the state of the option changes and any parents have to be notified. */\r\n  readonly _stateChanges = new Subject<void>();\r\n\r\n  constructor(\r\n    private _element: ElementRef<HTMLElement>,\r\n    private _changeDetectorRef: ChangeDetectorRef,\r\n    private _parent: TDSOptionParentComponent,\r\n    readonly group: _TDSOptgroupBase) { }\r\n\r\n  /**\r\n   * Whether or not the option is currently active and ready to be selected.\r\n   * An active option displays styles as if it is focused, but the\r\n   * focus is actually retained somewhere else. This comes in handy\r\n   * for components like autocomplete where focus must remain on the input.\r\n   */\r\n  get active(): boolean {\r\n    return this._active;\r\n  }\r\n\r\n  /**\r\n   * The displayed value of the option. It is necessary to show the selected option in the\r\n   * select's trigger.\r\n   */\r\n  get viewValue(): string {\r\n    // TODO(kara): Add input property alternative for node envs.\r\n    return (this._getHostElement().textContent || '').trim();\r\n  }\r\n\r\n  /** Selects the option. */\r\n  select(): void {\r\n    if (!this._selected) {\r\n      this._selected = true;\r\n      this._changeDetectorRef.markForCheck();\r\n      this._emitSelectionChangeEvent();\r\n    }\r\n  }\r\n\r\n  /** Deselects the option. */\r\n  deselect(): void {\r\n    if (this._selected) {\r\n      this._selected = false;\r\n      this._changeDetectorRef.markForCheck();\r\n      this._emitSelectionChangeEvent();\r\n    }\r\n  }\r\n\r\n  /** Sets focus onto this option. */\r\n  focus(_origin?: FocusOrigin, options?: FocusOptions): void {\r\n    // Note that we aren't using `_origin`, but we need to keep it because some internal consumers\r\n    // use `TDSOption` in a `FocusKeyManager` and we need it to match `FocusableOption`.\r\n    const element = this._getHostElement();\r\n\r\n    if (typeof element.focus === 'function') {\r\n      element.focus(options);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This method sets display styles on the option to make it appear\r\n   * active. This is used by the ActiveDescendantKeyManager so key\r\n   * events will display the proper options as active on arrow key events.\r\n   */\r\n  setActiveStyles(): void {\r\n    if (!this._active) {\r\n      this._active = true;\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This method removes display styles on the option that made it appear\r\n   * active. This is used by the ActiveDescendantKeyManager so key\r\n   * events will display the proper options as active on arrow key events.\r\n   */\r\n  setInactiveStyles(): void {\r\n    if (this._active) {\r\n      this._active = false;\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\r\n\r\n  /** Gets the label to be used when determining whether the option should be focused. */\r\n  getLabel(): string {\r\n    return this.viewValue;\r\n  }\r\n\r\n  /** Ensures the option is selected when activated from the keyboard. */\r\n  _handleKeydown(event: KeyboardEvent): void {\r\n    if ((event.keyCode === ENTER || event.keyCode === SPACE) && !hasModifierKey(event)) {\r\n      this._selectViaInteraction();\r\n\r\n      // Prevent the page from scrolling down and form submits.\r\n      event.preventDefault();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * `Selects the option while indicating the selection came from the user. Used to\r\n   * determine if the select's view -> model callback should be invoked.`\r\n   */\r\n  _selectViaInteraction(): void {\r\n    if (!this.disabled) {\r\n      this._selected = this.multiple ? !this._selected : true;\r\n      this._changeDetectorRef.markForCheck();\r\n      this._emitSelectionChangeEvent(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the `aria-selected` value for the option. We explicitly omit the `aria-selected`\r\n   * attribute from single-selection, unselected options. Including the `aria-selected=\"false\"`\r\n   * attributes adds a significant amount of noise to screen-reader users without providing useful\r\n   * information.\r\n   */\r\n  _getAriaSelected(): boolean | null {\r\n    return this.selected || (this.multiple ? false : null);\r\n  }\r\n\r\n  /** Returns the correct tabindex for the option depending on disabled state. */\r\n  _getTabIndex(): string {\r\n    return this.disabled ? '-1' : '0';\r\n  }\r\n\r\n  /** Gets the host DOM element. */\r\n  _getHostElement(): HTMLElement {\r\n    return this._element.nativeElement;\r\n  }\r\n\r\n  ngAfterViewChecked() {\r\n    // Since parent components could be using the option's label to display the selected values\r\n    // (e.g. `tds-select`) and they don't have a way of knowing if the option's label has changed\r\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\r\n    // relatively cheap, however we still limit them only to selected options in order to avoid\r\n    // hitting the DOM too often.\r\n    if (this._selected) {\r\n      const viewValue = this.viewValue;\r\n\r\n      if (viewValue !== this._mostRecentViewValue) {\r\n        this._mostRecentViewValue = viewValue;\r\n        this._stateChanges.next();\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._stateChanges.complete();\r\n  }\r\n\r\n  /** Emits the selection change event. */\r\n  private _emitSelectionChangeEvent(isUserInput = false): void {\r\n    this.onSelectionChange.emit(new TDSOptionSelectionChange(this, isUserInput));\r\n  }\r\n\r\n  static ngAcceptInputType_disabled: BooleanInput;\r\n}\r\n\r\n/**\r\n * Single option inside of a `<tds-select>` element.\r\n */\r\n@Component({\r\n  selector: 'tds-option',\r\n  exportAs: 'tdsOption',  \r\n  host: {\r\n    'role': 'option',\r\n    '[attr.tabindex]': '_getTabIndex()',\r\n    '[class.tds-selected]': 'selected',\r\n    '[class.flex]': 'selected',\r\n    '[class.justify-between]': 'selected',\r\n    '[class.bg-neutral-3-50]': 'selected',\r\n    '[class.tds-option-multiple]': 'multiple',\r\n    '[class.tds-active]': 'active',\r\n    '[class.text-primary-1]': 'active',\r\n    '[id]': 'id',\r\n    '[attr.aria-selected]': '_getAriaSelected()',\r\n    '[attr.aria-disabled]': 'disabled.toString()',\r\n    '[class.tds-option-disabled]': 'disabled',\r\n    '(click)': '_selectViaInteraction()',\r\n    '(keydown)': '_handleKeydown($event)',\r\n    'class': 'tds-option  border-box max-w-full outline-none cursor-pointer relative text-left block py-1.5 px-3 text-caption-1 font-regular text-neutral-1-900 hover:bg-neutral-3-50 whitespace-nowrap overflow-hidden overflow-ellipsis',\r\n  },\r\n  // styleUrls: ['option.css'],\r\n  templateUrl: 'option.html',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class TDSOption extends _TDSOptionBase {\r\n  constructor(\r\n    element: ElementRef<HTMLElement>,\r\n    changeDetectorRef: ChangeDetectorRef,\r\n    @Optional() @Inject(TDS_OPTION_PARENT_COMPONENT) parent: TDSOptionParentComponent,\r\n    @Optional() @Inject(TDS_OPTGROUP) group: TDSOptgroup) {\r\n    super(element, changeDetectorRef, parent, group);\r\n  }\r\n}\r\n\r\n/**\r\n * Counts the amount of option group labels that precede the specified option.\r\n * @param optionIndex Index of the option at which to start counting.\r\n * @param options Flat list of all of the options.\r\n * @param optionGroups Flat list of all of the option groups.\r\n * @docs-private\r\n */\r\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<TDSOption>,\r\n  optionGroups: QueryList<TDSOptgroup>): number {\r\n\r\n  if (optionGroups.length) {\r\n    let optionsArray = options.toArray();\r\n    let groups = optionGroups.toArray();\r\n    let groupCounter = 0;\r\n\r\n    for (let i = 0; i < optionIndex + 1; i++) {\r\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\r\n        groupCounter++;\r\n      }\r\n    }\r\n\r\n    return groupCounter;\r\n  }\r\n\r\n  return 0;\r\n}\r\n\r\n/**\r\n * Determines the position to which to scroll a panel in order for an option to be into view.\r\n * @param optionOffset Offset of the option from the top of the panel.\r\n * @param optionHeight Height of the options.\r\n * @param currentScrollPosition Current scroll position of the panel.\r\n * @param panelHeight Height of the panel.\r\n * @docs-private\r\n */\r\nexport function _getOptionScrollPosition(optionOffset: number, optionHeight: number,\r\n  currentScrollPosition: number, panelHeight: number): number {\r\n  if (optionOffset < currentScrollPosition) {\r\n    return optionOffset;\r\n  }\r\n\r\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\r\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\r\n  }\r\n\r\n  return currentScrollPosition;\r\n}\r\n\r\n","<tds-pseudo-checkbox *ngIf=\"multiple\" class=\"tds-option-pseudo-checkbox\"\r\n    [state]=\"selected ? 'checked' : 'unchecked'\" [disabled]=\"disabled\"></tds-pseudo-checkbox>\r\n\r\n<span class=\"tds-option-text overflow-ellipsis\">\r\n    <ng-content></ng-content>\r\n</span>\r\n<!-- <span class=\"tdsi-success-fill text-primary-1\" *ngIf=\"selected\">\r\n</span> -->\r\n\r\n<!-- See a11y notes inside optgroup.ts for context behind this element. -->\r\n<span class=\"cdk-visually-hidden\" *ngIf=\"group && group._inert\">({{ group.label }})</span>\r\n\r\n\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {TDSOption} from './option';\r\nimport {TDSOptgroup} from './optgroup';\r\nimport { TDSPseudoCheckboxModule } from 'tds-ui/core/selection';\r\n\r\n\r\n@NgModule({\r\n  imports: [ CommonModule,  TDSPseudoCheckboxModule],\r\n  exports: [TDSOption, TDSOptgroup],\r\n  declarations: [TDSOption, TDSOptgroup]\r\n})\r\nexport class TDSOptionModule {}\r\n\r\n\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":";;;;;;;;;;;AAAA;;;;;;AAMG;AAeH;;AAEG;MACU,2BAA2B,GACpC,IAAI,cAAc,CAA2B,6BAA6B;;;;ACL9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA,MAAM,eAAe,CAAA;AAAI,CAAA;AACzB,MAAM,qBAAqB,GACvB,aAAa,CAAC,eAAe,CAAC,CAAC;AAEnC;AACA,IAAI,wBAAwB,GAAG,CAAC,CAAC;AAG3B,MAAO,gBAAiB,SAAQ,qBAAqB,CAAA;AAWzD,IAAA,WAAA,CAA6D,MAAiC,EAAA;;AAC5F,QAAA,KAAK,EAAE,CAAC;;AANV,QAAA,IAAA,CAAA,QAAQ,GAAW,sBAAsB,wBAAwB,EAAE,EAAE,CAAC;AAOpE,QAAA,IAAI,CAAC,MAAM,GAAG,CAAA,EAAA,GAAA,MAAM,KAAA,IAAA,IAAN,MAAM,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAN,MAAM,CAAE,WAAW,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,KAAK,CAAC;KAC5C;;AAdU,gBAAA,CAAA,IAAA,GAAA,SAAA,wBAAA,CAAA,CAAA,EAAA,EAAA,OAAA,KAAA,CAAA,IAAA,gBAAgB,uBAWP,2BAA2B,EAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA;mEAXpC,gBAAgB,EAAA,MAAA,EAAA,EAAA,KAAA,EAAA,OAAA,EAAA,EAAA,QAAA,EAAA,CAAA,EAAA,CAAA,0BAAA,CAAA,EAAA,CAAA,CAAA;;4EAAhB,gBAAgB,EAAA,CAAA;kBAD5B,SAAS;;;8BAYK,MAAM;+BAAC,2BAA2B,CAAA;;8BAAG,QAAQ;;SARjD,KAAK,EAAA,CAAA;sBAAb,KAAK;;;AAgBR;;;;AAIG;MACU,YAAY,GAAG,IAAI,cAAc,CAAc,aAAa,EAAE;AAE3E;;AAEG;AAkBG,MAAO,WAAY,SAAQ,gBAAgB,CAAA;;AAApC,WAAA,CAAA,IAAA,iBAAA,YAAA,EAAA,IAAA,wBAAA,CAAA,CAAA,OAAA,SAAA,mBAAA,CAAA,CAAA,IAAA,OAAA,CAAA,wBAAA,KAAA,wBAAA,GAAA,EAAA,CAAA,qBAAA,CAAA,WAAW,SAAX,WAAW,CAAA,CAAA,EAAA,CAAA,EAAA,EAAA,CAAA;8DAAX,WAAW,EAAA,SAAA,EAAA,CAAA,CAAA,cAAA,CAAA,CAAA,EAAA,SAAA,EAAA,CAAA,CAAA,EAAA,cAAA,CAAA,EAAA,QAAA,EAAA,CAAA,EAAA,YAAA,EAAA,SAAA,wBAAA,CAAA,EAAA,EAAA,GAAA,EAAA;QAAA,IAAA,EAAA,GAAA,CAAA,EAAA;;;;qGAFX,CAAC,EAAC,OAAO,EAAE,YAAY,EAAE,WAAW,EAAE,WAAW,EAAC,CAAC,CAAA,EAAA,EAAA,CAAA,0BAAA,CAAA,EAAA,kBAAA,EAAA,GAAA,EAAA,KAAA,EAAA,CAAA,EAAA,IAAA,EAAA,CAAA,EAAA,MAAA,EAAA,CAAA,CAAA,aAAA,EAAA,MAAA,EAAA,CAAA,EAAA,oBAAA,EAAA,CAAA,EAAA,IAAA,CAAA,CAAA,EAAA,QAAA,EAAA,SAAA,oBAAA,CAAA,EAAA,EAAA,GAAA,EAAA;QAAA,IAAA,EAAA,GAAA,CAAA,EAAA;;YC9FhE,EAAoE,CAAA,cAAA,CAAA,CAAA,EAAA,MAAA,EAAA,CAAA,CAAA,CAAA;AAAA,YAAA,EAChE,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA;AAAA,YAAA,EAAyB,CAAA,YAAA,CAAA,CAAA,CAAA,CAAA;YAC7B,EAAO,CAAA,YAAA,EAAA,CAAA;AACP,YAAA,EAA2D,CAAA,YAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA;;;YAHP,EAAe,CAAA,UAAA,CAAA,IAAA,EAAA,GAAA,CAAA,QAAA,CAAA,CAAA;AAAC,YAAA,EAChE,CAAA,SAAA,CAAA,CAAA,CAAA,CAAA;YADgE,EAChE,CAAA,kBAAA,CAAA,EAAA,EAAA,GAAA,CAAA,KAAA,EAAA,GAAA,CAAA,CAAA;;;;4ED+FS,WAAW,EAAA,CAAA;kBAjBvB,SAAS;AACE,YAAA,IAAA,EAAA,CAAA,EAAA,QAAA,EAAA,cAAc,EACd,QAAA,EAAA,aAAa,EAER,aAAA,EAAA,iBAAiB,CAAC,IAAI,EAAA,eAAA,EACpB,uBAAuB,CAAC,MAAM,EAAA,MAAA,EACvC,CAAC,UAAU,CAAC,EAEd,IAAA,EAAA;AACJ,wBAAA,OAAO,EAAE,cAAc;AACvB,wBAAA,aAAa,EAAE,yBAAyB;AACxC,wBAAA,sBAAsB,EAAE,qCAAqC;AAC7D,wBAAA,wBAAwB,EAAE,0BAA0B;AACpD,wBAAA,+BAA+B,EAAE,UAAU;AAC5C,qBAAA,EACU,SAAA,EAAA,CAAC,EAAC,OAAO,EAAE,YAAY,EAAE,WAAW,EAAa,WAAA,EAAC,CAAC,EAAA,QAAA,EAAA,yMAAA,EAAA,CAAA;;;;AE9FhE;;;;;;AAMG;;;QCNH,EAC6F,CAAA,SAAA,CAAA,CAAA,EAAA,qBAAA,EAAA,CAAA,CAAA,CAAA;;;;QAAzF,EAAA,CAAA,UAAA,CAAA,OAAA,EAAA,MAAA,CAAA,QAAA,GAAA,SAAA,GAAA,WAAA,CAA4C,CAAA,UAAA,EAAA,MAAA,CAAA,QAAA,CAAA,CAAA;;;;;QAShD,EAAgE,CAAA,cAAA,CAAA,CAAA,EAAA,MAAA,EAAA,CAAA,CAAA,CAAA;AAAA,QAAA,EAAmB,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA;QAAA,EAAO,CAAA,YAAA,EAAA,CAAA;;;;AAA1B,QAAA,EAAmB,CAAA,SAAA,CAAA,CAAA,CAAA,CAAA;AAAnB,QAAA,EAAmB,CAAA,kBAAA,CAAA,GAAA,EAAA,MAAA,CAAA,KAAA,CAAA,KAAA,EAAA,GAAA,CAAA,CAAA;;;;ADqBnF;;;AAGG;AACH,IAAI,gBAAgB,GAAG,CAAC,CAAC;AAEzB;MACa,wBAAwB,CAAA;AACnC,IAAA,WAAA;;IAES,MAAsB;;AAEtB,IAAA,WAAA,GAAc,KAAK,EAAA;AAFnB,QAAA,IAAM,CAAA,MAAA,GAAN,MAAM,CAAgB;AAEtB,QAAA,IAAW,CAAA,WAAA,GAAX,WAAW,CAAQ;KAAK;AAClC,CAAA;MAGY,cAAc,CAAA;AAoCzB,IAAA,WAAA,CACU,QAAiC,EACjC,kBAAqC,EACrC,OAAiC,EAChC,KAAuB,EAAA;AAHxB,QAAA,IAAQ,CAAA,QAAA,GAAR,QAAQ,CAAyB;AACjC,QAAA,IAAkB,CAAA,kBAAA,GAAlB,kBAAkB,CAAmB;AACrC,QAAA,IAAO,CAAA,OAAA,GAAP,OAAO,CAA0B;AAChC,QAAA,IAAK,CAAA,KAAA,GAAL,KAAK,CAAkB;AAvC1B,QAAA,IAAS,CAAA,SAAA,GAAG,KAAK,CAAC;AAClB,QAAA,IAAO,CAAA,OAAA,GAAG,KAAK,CAAC;AAChB,QAAA,IAAS,CAAA,SAAA,GAAG,KAAK,CAAC;AAClB,QAAA,IAAK,CAAA,KAAA,GAAG,KAAK,CAAC;AACd,QAAA,IAAoB,CAAA,oBAAA,GAAG,EAAE,CAAC;;AAYzB,QAAA,IAAA,CAAA,EAAE,GAAW,cAAc,gBAAgB,EAAE,EAAE,CAAC;;;AActC,QAAA,IAAA,CAAA,iBAAiB,GAAG,IAAI,YAAY,EAA4B,CAAC;;AAG3E,QAAA,IAAA,CAAA,aAAa,GAAG,IAAI,OAAO,EAAQ,CAAC;KAMN;;AAhCvC,IAAA,IAAI,QAAQ,GAAA,EAAK,OAAO,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;;IAGhE,IAAI,QAAQ,KAAc,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE;;IASlD,IACI,QAAQ,KAAK,OAAO,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,KAAK,IAAI,CAAC,SAAS,CAAC,EAAE;AAChF,IAAA,IAAI,QAAQ,CAAC,KAAU,EAAA,EAAI,IAAI,CAAC,SAAS,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC,EAAE;;IAI3E,IAAa,IAAI,KAAK,OAAO,IAAI,CAAC,KAAK,CAAC,EAAE;AAC1C,IAAA,IAAI,IAAI,CAAC,KAAU,EAAA,EAAI,IAAI,CAAC,KAAK,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC,EAAE;AAenE;;;;;AAKG;AACH,IAAA,IAAI,MAAM,GAAA;QACR,OAAO,IAAI,CAAC,OAAO,CAAC;KACrB;AAED;;;AAGG;AACH,IAAA,IAAI,SAAS,GAAA;;AAEX,QAAA,OAAO,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC,WAAW,IAAI,EAAE,EAAE,IAAI,EAAE,CAAC;KAC1D;;IAGD,MAAM,GAAA;AACJ,QAAA,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;AACnB,YAAA,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;AACtB,YAAA,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC;YACvC,IAAI,CAAC,yBAAyB,EAAE,CAAC;AAClC,SAAA;KACF;;IAGD,QAAQ,GAAA;QACN,IAAI,IAAI,CAAC,SAAS,EAAE;AAClB,YAAA,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;AACvB,YAAA,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC;YACvC,IAAI,CAAC,yBAAyB,EAAE,CAAC;AAClC,SAAA;KACF;;IAGD,KAAK,CAAC,OAAqB,EAAE,OAAsB,EAAA;;;AAGjD,QAAA,MAAM,OAAO,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;AAEvC,QAAA,IAAI,OAAO,OAAO,CAAC,KAAK,KAAK,UAAU,EAAE;AACvC,YAAA,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;AACxB,SAAA;KACF;AAED;;;;AAIG;IACH,eAAe,GAAA;AACb,QAAA,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;AACjB,YAAA,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;AACpB,YAAA,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC;AACxC,SAAA;KACF;AAED;;;;AAIG;IACH,iBAAiB,GAAA;QACf,IAAI,IAAI,CAAC,OAAO,EAAE;AAChB,YAAA,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;AACrB,YAAA,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC;AACxC,SAAA;KACF;;IAGD,QAAQ,GAAA;QACN,OAAO,IAAI,CAAC,SAAS,CAAC;KACvB;;AAGD,IAAA,cAAc,CAAC,KAAoB,EAAA;AACjC,QAAA,IAAI,CAAC,KAAK,CAAC,OAAO,KAAK,KAAK,IAAI,KAAK,CAAC,OAAO,KAAK,KAAK,KAAK,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE;YAClF,IAAI,CAAC,qBAAqB,EAAE,CAAC;;YAG7B,KAAK,CAAC,cAAc,EAAE,CAAC;AACxB,SAAA;KACF;AAED;;;AAGG;IACH,qBAAqB,GAAA;AACnB,QAAA,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;AAClB,YAAA,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,QAAQ,GAAG,CAAC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;AACxD,YAAA,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC;AACvC,YAAA,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,CAAC;AACtC,SAAA;KACF;AAED;;;;;AAKG;IACH,gBAAgB,GAAA;AACd,QAAA,OAAO,IAAI,CAAC,QAAQ,KAAK,IAAI,CAAC,QAAQ,GAAG,KAAK,GAAG,IAAI,CAAC,CAAC;KACxD;;IAGD,YAAY,GAAA;QACV,OAAO,IAAI,CAAC,QAAQ,GAAG,IAAI,GAAG,GAAG,CAAC;KACnC;;IAGD,eAAe,GAAA;AACb,QAAA,OAAO,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC;KACpC;IAED,kBAAkB,GAAA;;;;;;QAMhB,IAAI,IAAI,CAAC,SAAS,EAAE;AAClB,YAAA,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;AAEjC,YAAA,IAAI,SAAS,KAAK,IAAI,CAAC,oBAAoB,EAAE;AAC3C,gBAAA,IAAI,CAAC,oBAAoB,GAAG,SAAS,CAAC;AACtC,gBAAA,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC;AAC3B,aAAA;AACF,SAAA;KACF;IAED,WAAW,GAAA;AACT,QAAA,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC;KAC/B;;IAGO,yBAAyB,CAAC,WAAW,GAAG,KAAK,EAAA;AACnD,QAAA,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,wBAAwB,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC,CAAC;KAC9E;;;iEAxLU,cAAc,EAAA,MAAA,EAAA,EAAA,KAAA,EAAA,OAAA,EAAA,EAAA,EAAA,IAAA,EAAA,QAAA,EAAA,UAAA,EAAA,IAAA,EAAA,MAAA,EAAA,EAAA,OAAA,EAAA,EAAA,iBAAA,EAAA,mBAAA,EAAA,EAAA,CAAA,CAAA;;4EAAd,cAAc,EAAA,CAAA;kBAD1B,SAAS;kJAeC,KAAK,EAAA,CAAA;sBAAb,KAAK;gBAGG,EAAE,EAAA,CAAA;sBAAV,KAAK;gBAIF,QAAQ,EAAA,CAAA;sBADX,KAAK;gBAMO,IAAI,EAAA,CAAA;sBAAhB,KAAK;gBAKa,iBAAiB,EAAA,CAAA;sBAAnC,MAAM;;;AA8JT;;AAEG;AA2BG,MAAO,SAAU,SAAQ,cAAc,CAAA;AAC3C,IAAA,WAAA,CACE,OAAgC,EAChC,iBAAoC,EACa,MAAgC,EAC/C,KAAkB,EAAA;QACpD,KAAK,CAAC,OAAO,EAAE,iBAAiB,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;KAClD;;kEAPU,SAAS,EAAA,EAAA,CAAA,iBAAA,CAAA,EAAA,CAAA,UAAA,CAAA,EAAA,EAAA,CAAA,iBAAA,CAAA,EAAA,CAAA,iBAAA,CAAA,EAAA,EAAA,CAAA,iBAAA,CAIE,2BAA2B,EAAA,CAAA,CAAA,EAAA,EAAA,CAAA,iBAAA,CAC3B,YAAY,EAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA;4DALvB,SAAS,EAAA,SAAA,EAAA,CAAA,CAAA,YAAA,CAAA,CAAA,EAAA,SAAA,EAAA,CAAA,MAAA,EAAA,QAAA,EAAA,CAAA,EAAA,YAAA,EAAA,YAAA,EAAA,YAAA,EAAA,cAAA,EAAA,gBAAA,EAAA,UAAA,EAAA,WAAA,EAAA,OAAA,EAAA,QAAA,EAAA,MAAA,EAAA,gBAAA,EAAA,cAAA,EAAA,oBAAA,EAAA,uBAAA,EAAA,mBAAA,EAAA,iBAAA,EAAA,mBAAA,CAAA,EAAA,QAAA,EAAA,EAAA,EAAA,YAAA,EAAA,SAAA,sBAAA,CAAA,EAAA,EAAA,GAAA,EAAA;QAAA,IAAA,EAAA,GAAA,CAAA,EAAA;AAAT,YAAA,EAAA,CAAA,UAAA,CAAA,OAAA,EAAA,SAAA,kCAAA,GAAA,EAAA,OAAA,GAAA,CAAA,qBAAA,EAAuB,+EAAvB,GAAsB,CAAA,cAAA,CAAA,MAAA,CAAA,CAAA,EAAA,CAAA,CAAA;;;;;;;;;;ACzQnC,YAAA,EAC6F,CAAA,UAAA,CAAA,CAAA,EAAA,wCAAA,EAAA,CAAA,EAAA,CAAA,EAAA,qBAAA,EAAA,CAAA,CAAA,CAAA;YAE7F,EAAgD,CAAA,cAAA,CAAA,CAAA,EAAA,MAAA,EAAA,CAAA,CAAA,CAAA;AAC5C,YAAA,EAAyB,CAAA,YAAA,CAAA,CAAA,CAAA,CAAA;YAC7B,EAAO,CAAA,YAAA,EAAA,CAAA;AAKP,YAAA,EAA0F,CAAA,UAAA,CAAA,CAAA,EAAA,yBAAA,EAAA,CAAA,EAAA,CAAA,EAAA,MAAA,EAAA,CAAA,CAAA,CAAA;;;YAVpE,EAAc,CAAA,UAAA,CAAA,MAAA,EAAA,GAAA,CAAA,QAAA,CAAA,CAAA;AAUD,YAAA,EAA2B,CAAA,SAAA,CAAA,CAAA,CAAA,CAAA;AAA3B,YAAA,EAA2B,CAAA,UAAA,CAAA,MAAA,EAAA,GAAA,CAAA,KAAA,IAAA,GAAA,CAAA,KAAA,CAAA,MAAA,CAAA,CAAA;;;;4ED+PjD,SAAS,EAAA,CAAA;kBA1BrB,SAAS;+BACE,YAAY,EAAA,QAAA,EACZ,WAAW,EACf,IAAA,EAAA;AACJ,wBAAA,MAAM,EAAE,QAAQ;AAChB,wBAAA,iBAAiB,EAAE,gBAAgB;AACnC,wBAAA,sBAAsB,EAAE,UAAU;AAClC,wBAAA,cAAc,EAAE,UAAU;AAC1B,wBAAA,yBAAyB,EAAE,UAAU;AACrC,wBAAA,yBAAyB,EAAE,UAAU;AACrC,wBAAA,6BAA6B,EAAE,UAAU;AACzC,wBAAA,oBAAoB,EAAE,QAAQ;AAC9B,wBAAA,wBAAwB,EAAE,QAAQ;AAClC,wBAAA,MAAM,EAAE,IAAI;AACZ,wBAAA,sBAAsB,EAAE,oBAAoB;AAC5C,wBAAA,sBAAsB,EAAE,qBAAqB;AAC7C,wBAAA,6BAA6B,EAAE,UAAU;AACzC,wBAAA,SAAS,EAAE,yBAAyB;AACpC,wBAAA,WAAW,EAAE,wBAAwB;AACrC,wBAAA,OAAO,EAAE,6NAA6N;AACvO,qBAAA,EAAA,aAAA,EAGc,iBAAiB,CAAC,IAAI,EACpB,eAAA,EAAA,uBAAuB,CAAC,MAAM,EAAA,QAAA,EAAA,sjBAAA,EAAA,CAAA;;;8BAM5C,QAAQ;;8BAAI,MAAM;+BAAC,2BAA2B,CAAA;;8BAC9C,QAAQ;;8BAAI,MAAM;+BAAC,YAAY,CAAA;;;;AAKpC;;;;;;AAMG;SACa,6BAA6B,CAAC,WAAmB,EAAE,OAA6B,EAC9F,YAAoC,EAAA;IAEpC,IAAI,YAAY,CAAC,MAAM,EAAE;AACvB,QAAA,IAAI,YAAY,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC;AACrC,QAAA,IAAI,MAAM,GAAG,YAAY,CAAC,OAAO,EAAE,CAAC;QACpC,IAAI,YAAY,GAAG,CAAC,CAAC;AAErB,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;AACxC,YAAA,IAAI,YAAY,CAAC,CAAC,CAAC,CAAC,KAAK,IAAI,YAAY,CAAC,CAAC,CAAC,CAAC,KAAK,KAAK,MAAM,CAAC,YAAY,CAAC,EAAE;AAC3E,gBAAA,YAAY,EAAE,CAAC;AAChB,aAAA;AACF,SAAA;AAED,QAAA,OAAO,YAAY,CAAC;AACrB,KAAA;AAED,IAAA,OAAO,CAAC,CAAC;AACX,CAAC;AAED;;;;;;;AAOG;AACG,SAAU,wBAAwB,CAAC,YAAoB,EAAE,YAAoB,EACjF,qBAA6B,EAAE,WAAmB,EAAA;IAClD,IAAI,YAAY,GAAG,qBAAqB,EAAE;AACxC,QAAA,OAAO,YAAY,CAAC;AACrB,KAAA;AAED,IAAA,IAAI,YAAY,GAAG,YAAY,GAAG,qBAAqB,GAAG,WAAW,EAAE;AACrE,QAAA,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,YAAY,GAAG,WAAW,GAAG,YAAY,CAAC,CAAC;AAC/D,KAAA;AAED,IAAA,OAAO,qBAAqB,CAAC;AAC/B;;AEjUA;;;;;;AAMG;MAcU,eAAe,CAAA;;8EAAf,eAAe,GAAA,CAAA,EAAA,CAAA;iEAAf,eAAe,EAAA,CAAA,CAAA;qEAJjB,CAAE,YAAY,EAAG,uBAAuB,CAAC,CAAA,EAAA,CAAA,CAAA;;4EAIvC,eAAe,EAAA,CAAA;kBAL3B,QAAQ;AAAC,YAAA,IAAA,EAAA,CAAA;AACR,oBAAA,OAAO,EAAE,CAAE,YAAY,EAAG,uBAAuB,CAAC;AAClD,oBAAA,OAAO,EAAE,CAAC,SAAS,EAAE,WAAW,CAAC;AACjC,oBAAA,YAAY,EAAE,CAAC,SAAS,EAAE,WAAW,CAAC;iBACvC,CAAA;;;wFACY,eAAe,EAAA,EAAA,YAAA,EAAA,CAFX,SAAS,EAAE,WAAW,CAAA,EAAA,OAAA,EAAA,CAF1B,YAAY,EAAG,uBAAuB,CAAA,EAAA,OAAA,EAAA,CACvC,SAAS,EAAE,WAAW,CAAA,EAAA,CAAA,CAAA,EAAA,GAAA;;ACjBlC;;AAEG;;;;"}