import { CommonModule } from '@angular/common';
import * as i0 from '@angular/core';
import { Pipe, NgModule } from '@angular/core';
import { sum, isNumberFinite, toDecimal, isNil } from 'tds-ui/core/util';
import * as i1 from '@angular/platform-browser';

class TDSAggregatePipe {
    transform(value, method) {
        if (!Array.isArray(value)) {
            return value;
        }
        if (value.length === 0) {
            return undefined;
        }
        switch (method) {
            case 'sum':
                return sum(value);
            case 'avg':
                return sum(value) / value.length;
            case 'max':
                return Math.max(...value);
            case 'min':
                return Math.min(...value);
            default:
                throw Error(`Invalid Pipe Arguments: Aggregate pipe doesn't support this type`);
        }
    }
}
TDSAggregatePipe.ɵfac = function TDSAggregatePipe_Factory(t) { return new (t || TDSAggregatePipe)(); };
TDSAggregatePipe.ɵpipe = /*@__PURE__*/ i0.ɵɵdefinePipe({ name: "tdsAggregate", type: TDSAggregatePipe, pure: true });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSAggregatePipe, [{
            type: Pipe,
            args: [{
                    name: 'tdsAggregate'
                }]
        }], null, null);
})();

class TDSBytesPipe {
    transform(input, decimal = 0, from = 'B', to) {
        if (!(isNumberFinite(input) && isNumberFinite(decimal) && decimal % 1 === 0 && decimal >= 0)) {
            return input;
        }
        let bytes = input;
        let unit = from;
        while (unit !== 'B') {
            bytes *= 1024;
            unit = TDSBytesPipe.formats[unit].prev;
        }
        if (to) {
            const format = TDSBytesPipe.formats[to];
            const result = toDecimal(TDSBytesPipe.calculateResult(format, bytes), decimal);
            return TDSBytesPipe.formatResult(result, to);
        }
        for (const key in TDSBytesPipe.formats) {
            if (TDSBytesPipe.formats.hasOwnProperty(key)) {
                const format = TDSBytesPipe.formats[key];
                if (bytes < format.max) {
                    const result = toDecimal(TDSBytesPipe.calculateResult(format, bytes), decimal);
                    return TDSBytesPipe.formatResult(result, key);
                }
            }
        }
    }
    static formatResult(result, unit) {
        return `${result} ${unit}`;
    }
    static calculateResult(format, bytes) {
        const prev = format.prev ? TDSBytesPipe.formats[format.prev] : undefined;
        return prev ? bytes / prev.max : bytes;
    }
}
TDSBytesPipe.formats = {
    B: { max: 1024 },
    kB: { max: Math.pow(1024, 2), prev: 'B' },
    KB: { max: Math.pow(1024, 2), prev: 'B' },
    MB: { max: Math.pow(1024, 3), prev: 'kB' },
    GB: { max: Math.pow(1024, 4), prev: 'MB' },
    TB: { max: Number.MAX_SAFE_INTEGER, prev: 'GB' }
};
TDSBytesPipe.ɵfac = function TDSBytesPipe_Factory(t) { return new (t || TDSBytesPipe)(); };
TDSBytesPipe.ɵpipe = /*@__PURE__*/ i0.ɵɵdefinePipe({ name: "tdsBytes", type: TDSBytesPipe, pure: true });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSBytesPipe, [{
            type: Pipe,
            args: [{
                    name: 'tdsBytes'
                }]
        }], null, null);
})();

class TDSToCssUnitPipe {
    transform(value, defaultUnit = 'px') {
        const absoluteLengthUnit = ['cm', 'mm', 'Q', 'in', 'pc', 'pt', 'px'];
        const relativeLengthUnit = ['em', 'ex', 'ch', 'rem', '1h', 'vw', 'vh', 'vmin', 'vmax'];
        const percentagesUnit = ['%'];
        const listOfUnit = [...absoluteLengthUnit, ...relativeLengthUnit, ...percentagesUnit];
        let unit = 'px';
        if (listOfUnit.some(u => u === defaultUnit)) {
            unit = defaultUnit;
        }
        return typeof value === 'number' ? `${value}${unit}` : `${value}`;
    }
}
TDSToCssUnitPipe.ɵfac = function TDSToCssUnitPipe_Factory(t) { return new (t || TDSToCssUnitPipe)(); };
TDSToCssUnitPipe.ɵpipe = /*@__PURE__*/ i0.ɵɵdefinePipe({ name: "tdsToCssUnit", type: TDSToCssUnitPipe, pure: true });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSToCssUnitPipe, [{
            type: Pipe,
            args: [{
                    name: 'tdsToCssUnit'
                }]
        }], null, null);
})();

class TDSEllipsisPipe {
    transform(value, length, suffix = '') {
        if (typeof value !== 'string') {
            return value;
        }
        const len = typeof length === 'undefined' ? value.length : length;
        if (value.length <= len) {
            return value;
        }
        return value.substring(0, len) + suffix;
    }
}
TDSEllipsisPipe.ɵfac = function TDSEllipsisPipe_Factory(t) { return new (t || TDSEllipsisPipe)(); };
TDSEllipsisPipe.ɵpipe = /*@__PURE__*/ i0.ɵɵdefinePipe({ name: "tdsEllipsis", type: TDSEllipsisPipe, pure: true });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSEllipsisPipe, [{
            type: Pipe,
            args: [{
                    name: 'tdsEllipsis'
                }]
        }], null, null);
})();

class TDSSafeNullPipe {
    transform(value, replace = '') {
        if (isNil(value)) {
            return replace;
        }
        return value;
    }
}
TDSSafeNullPipe.ɵfac = function TDSSafeNullPipe_Factory(t) { return new (t || TDSSafeNullPipe)(); };
TDSSafeNullPipe.ɵpipe = /*@__PURE__*/ i0.ɵɵdefinePipe({ name: "tdsSafeNull", type: TDSSafeNullPipe, pure: true });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSSafeNullPipe, [{
            type: Pipe,
            args: [{
                    name: 'tdsSafeNull'
                }]
        }], null, null);
})();

class TDSSanitizerPipe {
    constructor(sanitizer) {
        this.sanitizer = sanitizer;
    }
    transform(value, type = 'html') {
        switch (type) {
            case 'html':
                return this.sanitizer.bypassSecurityTrustHtml(value);
            case 'style':
                return this.sanitizer.bypassSecurityTrustStyle(value);
            case 'url':
                return this.sanitizer.bypassSecurityTrustUrl(value);
            case 'resourceUrl':
                return this.sanitizer.bypassSecurityTrustResourceUrl(value);
            default:
                throw new Error(`Invalid safe type specified`);
        }
    }
}
TDSSanitizerPipe.ɵfac = function TDSSanitizerPipe_Factory(t) { return new (t || TDSSanitizerPipe)(i0.ɵɵdirectiveInject(i1.DomSanitizer, 16)); };
TDSSanitizerPipe.ɵpipe = /*@__PURE__*/ i0.ɵɵdefinePipe({ name: "tdsSanitizer", type: TDSSanitizerPipe, pure: true });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSSanitizerPipe, [{
            type: Pipe,
            args: [{
                    name: 'tdsSanitizer'
                }]
        }], function () { return [{ type: i1.DomSanitizer }]; }, null);
})();

class TDSTrimPipe {
    // TODO(chensimeng) trimEnd, trimStart
    transform(text) {
        return text.trim();
    }
}
TDSTrimPipe.ɵfac = function TDSTrimPipe_Factory(t) { return new (t || TDSTrimPipe)(); };
TDSTrimPipe.ɵpipe = /*@__PURE__*/ i0.ɵɵdefinePipe({ name: "tdsTrim", type: TDSTrimPipe, pure: true });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSTrimPipe, [{
            type: Pipe,
            args: [{
                    name: 'tdsTrim'
                }]
        }], null, null);
})();

const pipes = [TDSToCssUnitPipe,
    TDSSafeNullPipe,
    TDSSanitizerPipe,
    TDSTrimPipe,
    TDSBytesPipe,
    TDSAggregatePipe,
    TDSEllipsisPipe];
class TDSPipesModule {
}
TDSPipesModule.ɵfac = function TDSPipesModule_Factory(t) { return new (t || TDSPipesModule)(); };
TDSPipesModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: TDSPipesModule });
TDSPipesModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [[CommonModule]] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSPipesModule, [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    exports: [pipes],
                    declarations: [pipes]
                }]
        }], null, null);
})();
(function () {
    (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(TDSPipesModule, { declarations: [TDSToCssUnitPipe,
            TDSSafeNullPipe,
            TDSSanitizerPipe,
            TDSTrimPipe,
            TDSBytesPipe,
            TDSAggregatePipe,
            TDSEllipsisPipe], imports: [CommonModule], exports: [TDSToCssUnitPipe,
            TDSSafeNullPipe,
            TDSSanitizerPipe,
            TDSTrimPipe,
            TDSBytesPipe,
            TDSAggregatePipe,
            TDSEllipsisPipe] });
})();

/**
 * Generated bundle index. Do not edit.
 */

export { TDSAggregatePipe, TDSBytesPipe, TDSEllipsisPipe, TDSPipesModule, TDSSafeNullPipe, TDSSanitizerPipe, TDSToCssUnitPipe, TDSTrimPipe };
//# sourceMappingURL=tds-ui-core-pipes.mjs.map
