import * as i0 from '@angular/core';
import { EventEmitter, Component, ViewEncapsulation, Input, Output, ChangeDetectionStrategy, NgModule, Injectable } from '@angular/core';
import { notificationMotion } from 'tds-ui/core/animation';
import { TDSMNComponent, TDSMNContainerComponent, TDSMNService } from 'tds-ui/message';
import * as i1 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i2 from 'tds-ui/core/outlet';
import { TDSOutletModule } from 'tds-ui/core/outlet';
import * as i3 from 'tds-ui/button';
import { TDSButtonModule } from 'tds-ui/button';
import { BidiModule } from '@angular/cdk/bidi';
import * as i2$1 from '@angular/cdk/overlay';
import { OverlayModule } from '@angular/cdk/overlay';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { toCssPixel } from 'tds-ui/shared/utility';
import * as i1$1 from 'tds-ui/core/config';
import * as i1$2 from 'tds-ui/core/services';

function TDSNotificationComponent_div_1_i_4_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "i", 18);
    }
}
function TDSNotificationComponent_div_1_i_5_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "i", 19);
    }
}
function TDSNotificationComponent_div_1_i_6_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "i", 20);
    }
}
function TDSNotificationComponent_div_1_i_7_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "i", 21);
    }
}
const _c0 = function (a0) { return { "tds-notification-notice-with-icon": a0 }; };
const _c1 = function (a0, a1) { return { "tds-notification-notice-with-icon mr-4": a0, "hidden": a1 }; };
function TDSNotificationComponent_div_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 7)(1, "div", 8)(2, "div", 9);
        i0.ɵɵelementContainerStart(3, 10);
        i0.ɵɵtemplate(4, TDSNotificationComponent_div_1_i_4_Template, 1, 0, "i", 11);
        i0.ɵɵtemplate(5, TDSNotificationComponent_div_1_i_5_Template, 1, 0, "i", 12);
        i0.ɵɵtemplate(6, TDSNotificationComponent_div_1_i_6_Template, 1, 0, "i", 13);
        i0.ɵɵtemplate(7, TDSNotificationComponent_div_1_i_7_Template, 1, 0, "i", 14);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(8, "div", 15);
        i0.ɵɵelement(9, "div", 16)(10, "div", 17);
        i0.ɵɵelementEnd()()();
    }
    if (rf & 2) {
        const ctx_r0 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(9, _c0, ctx_r0.instance.type !== "blank"));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction2(11, _c1, ctx_r0.instance.type !== "blank", ctx_r0.instance.type == "blank"));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngSwitch", ctx_r0.instance.type);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngSwitchCase", "success");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngSwitchCase", "info");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngSwitchCase", "warning");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngSwitchCase", "error");
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("innerHTML", ctx_r0.instance.title, i0.ɵɵsanitizeHtml);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("innerHTML", ctx_r0.instance.content, i0.ɵɵsanitizeHtml);
    }
}
function TDSNotificationComponent_div_2_ng_template_1_Template(rf, ctx) { }
const _c2 = function (a0, a1) { return { $implicit: a0, data: a1 }; };
function TDSNotificationComponent_div_2_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 22);
        i0.ɵɵtemplate(1, TDSNotificationComponent_div_2_ng_template_1_Template, 0, 0, "ng-template", 23);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r1 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r1.instance.template)("ngTemplateOutlet", ctx_r1.instance.template)("ngTemplateOutletContext", i0.ɵɵpureFunction2(3, _c2, ctx_r1, ctx_r1.instance.options.data));
    }
}
function TDSNotificationComponent_ng_container_5_ng_container_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelement(1, "button", 25);
        i0.ɵɵelementContainerEnd();
    }
    if (rf & 2) {
        const ctx_r10 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngClass", ctx_r10.instance.options.closeIcon);
    }
}
function TDSNotificationComponent_ng_container_5_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵtemplate(1, TDSNotificationComponent_ng_container_5_ng_container_1_Template, 2, 1, "ng-container", 24);
        i0.ɵɵelementContainerEnd();
    }
    if (rf & 2) {
        const ctx_r2 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("tdsStringTemplateOutlet", ctx_r2.instance.options == null ? null : ctx_r2.instance.options.closeIcon);
    }
}
function TDSNotificationComponent_ng_template_6_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "button", 26);
    }
}
class TDSNotificationComponent extends TDSMNComponent {
    constructor(cdr) {
        super(cdr);
        this.destroyed = new EventEmitter();
    }
    ngOnDestroy() {
        super.ngOnDestroy();
        this.instance.onClick.complete();
    }
    onClick(event) {
        this.instance.onClick.next(event);
    }
    close() {
        this.destroy(true);
    }
    get state() {
        if (this.instance.state === 'enter') {
            if (this.placement === 'topLeft' || this.placement === 'bottomLeft') {
                return 'enterLeft';
            }
            else {
                return 'enterRight';
            }
        }
        else {
            return this.instance.state;
        }
    }
}
TDSNotificationComponent.ɵfac = function TDSNotificationComponent_Factory(t) { return new (t || TDSNotificationComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
TDSNotificationComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSNotificationComponent, selectors: [["tds-notification"]], hostAttrs: [1, "mb-2", "block"], inputs: { instance: "instance", placement: "placement", index: "index" }, outputs: { destroyed: "destroyed" }, exportAs: ["tdsNotification"], features: [i0.ɵɵInheritDefinitionFeature], decls: 8, vars: 7, consts: [[1, "tds-notification-notice", "tds-notification-notice-closable", "relative", "mr-4", 3, "ngStyle", "ngClass", "click", "mouseenter", "mouseleave"], ["class", "tds-notification-notice-content bg-white dark:bg-d-neutral-3-300 p-4 shadow-1-xl rounded-md flex flex-col w-96", 4, "ngIf"], ["class", "bg-white dark:bg-d-neutral-3-300 px-4 py-3 shadow-1-xl rounded-md flex flex-col w-96", 4, "ngIf"], ["tabindex", "0", 1, "tds-notification-notice-close", "absolute", "hover:bg-neutral-3-50", "dark:hover:bg-d-neutral-3-300", "rounded-md", "top-4", "right-4", "cursor-pointer", "p-1", "border", "border-transparent", 3, "click"], [1, "tds-notification-notice-close-x", "flex"], [4, "ngIf", "ngIfElse"], ["iconTpl", ""], [1, "tds-notification-notice-content", "bg-white", "dark:bg-d-neutral-3-300", "p-4", "shadow-1-xl", "rounded-md", "flex", "flex-col", "w-96"], [1, "tds-notification-notice-content", "flex", 3, "ngClass"], [3, "ngClass"], [3, "ngSwitch"], ["class", "text-2xl leading-6 text-success-400 tdsi-success-fill  tds-notification-notice-icon tds-notification-notice-icon-success", 4, "ngSwitchCase"], ["class", "text-2xl leading-6 text-info-400 tdsi-information-fill tds-notification-notice-icon tds-notification-notice-icon-info", 4, "ngSwitchCase"], ["class", "text-2xl leading-6 text-warning-400  tdsi-warning-fill tds-notification-notice-icon tds-notification-notice-icon-warning", 4, "ngSwitchCase"], ["class", "text-2xl leading-6 text-error-400  tdsi-error-fill tds-notification-notice-icon tds-notification-notice-icon-error", 4, "ngSwitchCase"], [1, "flex", "flex-col"], [1, "tds-notification-notice-message", "text-title-1", "text-neutral-1-900", "dark:text-d-neutral-1-900", "font-semibold", "break-all", "pr-8", 3, "innerHTML"], [1, "tds-notification-notice-description", "pt-2", "text-body-2", "font-regular", "text-neutral-1-900", "dark:text-d-neutral-1-900", "break-all", 3, "innerHTML"], [1, "text-2xl", "leading-6", "text-success-400", "tdsi-success-fill", "tds-notification-notice-icon", "tds-notification-notice-icon-success"], [1, "text-2xl", "leading-6", "text-info-400", "tdsi-information-fill", "tds-notification-notice-icon", "tds-notification-notice-icon-info"], [1, "text-2xl", "leading-6", "text-warning-400", "tdsi-warning-fill", "tds-notification-notice-icon", "tds-notification-notice-icon-warning"], [1, "text-2xl", "leading-6", "text-error-400", "tdsi-error-fill", "tds-notification-notice-icon", "tds-notification-notice-icon-error"], [1, "bg-white", "dark:bg-d-neutral-3-300", "px-4", "py-3", "shadow-1-xl", "rounded-md", "flex", "flex-col", "w-96"], [3, "ngIf", "ngTemplateOutlet", "ngTemplateOutletContext"], [4, "tdsStringTemplateOutlet"], ["tds-button-close", "", 1, "tds-notification-close-icon", 3, "ngClass"], ["tds-button-close", "", 1, "tds-notification-close-icon"]], template: function TDSNotificationComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵlistener("@notificationMotion.done", function TDSNotificationComponent_Template_div_animation_notificationMotion_done_0_listener($event) { return ctx.animationStateChanged.next($event); })("click", function TDSNotificationComponent_Template_div_click_0_listener($event) { return ctx.onClick($event); })("mouseenter", function TDSNotificationComponent_Template_div_mouseenter_0_listener() { return ctx.onEnter(); })("mouseleave", function TDSNotificationComponent_Template_div_mouseleave_0_listener() { return ctx.onLeave(); });
            i0.ɵɵtemplate(1, TDSNotificationComponent_div_1_Template, 11, 14, "div", 1);
            i0.ɵɵtemplate(2, TDSNotificationComponent_div_2_Template, 2, 6, "div", 2);
            i0.ɵɵelementStart(3, "a", 3);
            i0.ɵɵlistener("click", function TDSNotificationComponent_Template_a_click_3_listener() { return ctx.close(); });
            i0.ɵɵelementStart(4, "span", 4);
            i0.ɵɵtemplate(5, TDSNotificationComponent_ng_container_5_Template, 2, 1, "ng-container", 5);
            i0.ɵɵtemplate(6, TDSNotificationComponent_ng_template_6_Template, 1, 0, "ng-template", null, 6, i0.ɵɵtemplateRefExtractor);
            i0.ɵɵelementEnd()()();
        }
        if (rf & 2) {
            const _r3 = i0.ɵɵreference(7);
            i0.ɵɵproperty("ngStyle", ctx.instance.options.style)("ngClass", ctx.instance.options.clss || "")("@notificationMotion", ctx.state);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", !ctx.instance.template);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.instance.template);
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("ngIf", ctx.instance.options == null ? null : ctx.instance.options.closeIcon)("ngIfElse", _r3);
        }
    }, directives: [i1.NgStyle, i1.NgClass, i1.NgIf, i1.NgSwitch, i1.NgSwitchCase, i1.NgTemplateOutlet, i2.TDSStringTemplateOutletDirective, i3.TDSButtonCloseComponent], encapsulation: 2, data: { animation: [notificationMotion] } });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSNotificationComponent, [{
            type: Component,
            args: [{
                    encapsulation: ViewEncapsulation.None,
                    selector: 'tds-notification',
                    exportAs: 'tdsNotification',
                    preserveWhitespaces: false,
                    animations: [notificationMotion],
                    host: {
                        class: "mb-2 block"
                    },
                    template: `
  <div class="tds-notification-notice tds-notification-notice-closable relative mr-4"
  [ngStyle]="instance.options.style!" 
  [ngClass]="instance.options.clss || ''" 
  [@notificationMotion]="state"
  (@notificationMotion.done)="animationStateChanged.next($event)" 
  (click)="onClick($event)" 
  (mouseenter)="onEnter()"
  (mouseleave)="onLeave()">
  <div *ngIf="!instance.template"
      class="tds-notification-notice-content bg-white dark:bg-d-neutral-3-300 p-4 shadow-1-xl rounded-md flex flex-col w-96">
      <div class="tds-notification-notice-content flex  "
          [ngClass]="{ 'tds-notification-notice-with-icon': instance.type !== 'blank' }">
          <div
              [ngClass]="{'tds-notification-notice-with-icon mr-4':instance.type !== 'blank','hidden':instance.type == 'blank'}">
              <ng-container [ngSwitch]="instance.type">
                  <i *ngSwitchCase="'success'"
                      class="text-2xl leading-6 text-success-400 tdsi-success-fill  tds-notification-notice-icon tds-notification-notice-icon-success"></i>
                  <i *ngSwitchCase="'info'"
                      class="text-2xl leading-6 text-info-400 tdsi-information-fill tds-notification-notice-icon tds-notification-notice-icon-info"></i>
                  <i *ngSwitchCase="'warning'"
                      class="text-2xl leading-6 text-warning-400  tdsi-warning-fill tds-notification-notice-icon tds-notification-notice-icon-warning"></i>
                  <i *ngSwitchCase="'error'"
                      class="text-2xl leading-6 text-error-400  tdsi-error-fill tds-notification-notice-icon tds-notification-notice-icon-error"></i>
              </ng-container>
          </div>
          <div class="flex flex-col">
              <div class="tds-notification-notice-message text-title-1 text-neutral-1-900 dark:text-d-neutral-1-900 font-semibold break-all pr-8"
                  [innerHTML]="instance.title"></div>
              <div class="tds-notification-notice-description pt-2 text-body-2 font-regular text-neutral-1-900 dark:text-d-neutral-1-900 break-all"
                  [innerHTML]="instance.content"></div>
          </div>
      </div>
  </div>
  <div class="bg-white dark:bg-d-neutral-3-300 px-4 py-3 shadow-1-xl rounded-md flex flex-col w-96" *ngIf="instance.template">
  <ng-template [ngIf]="instance.template" [ngTemplateOutlet]="instance.template!"
  [ngTemplateOutletContext]="{ $implicit: this, data: instance.options.data! }"></ng-template>
  </div>
 
  <a tabindex="0" class="tds-notification-notice-close absolute hover:bg-neutral-3-50 dark:hover:bg-d-neutral-3-300  rounded-md top-4 right-4 cursor-pointer p-1 border border-transparent" (click)="close()">
      <span class="tds-notification-notice-close-x flex">
          <ng-container *ngIf="instance.options?.closeIcon; else iconTpl">
              <ng-container *tdsStringTemplateOutlet="instance.options?.closeIcon; let closeIcon">
                  <button [ngClass]="instance.options.closeIcon!" tds-button-close class="tds-notification-close-icon"></button>
              </ng-container>
          </ng-container>
          <ng-template #iconTpl>
            <button tds-button-close class="tds-notification-close-icon"></button>
          </ng-template>
      </span>
  </a>
</div>
  `
                }]
        }], function () { return [{ type: i0.ChangeDetectorRef }]; }, { instance: [{
                type: Input
            }], placement: [{
                type: Input
            }], index: [{
                type: Input
            }], destroyed: [{
                type: Output
            }] });
})();

function TDSNotificationContainerComponent_tds_notification_1_Template(rf, ctx) {
    if (rf & 1) {
        const _r6 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "tds-notification", 5);
        i0.ɵɵlistener("destroyed", function TDSNotificationContainerComponent_tds_notification_1_Template_tds_notification_destroyed_0_listener($event) { i0.ɵɵrestoreView(_r6); const ctx_r5 = i0.ɵɵnextContext(); return ctx_r5.remove($event.id, $event.userAction); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const instance_r4 = ctx.$implicit;
        const ctx_r0 = i0.ɵɵnextContext();
        i0.ɵɵproperty("instance", instance_r4)("placement", ctx_r0.config.placement);
    }
}
function TDSNotificationContainerComponent_tds_notification_3_Template(rf, ctx) {
    if (rf & 1) {
        const _r9 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "tds-notification", 5);
        i0.ɵɵlistener("destroyed", function TDSNotificationContainerComponent_tds_notification_3_Template_tds_notification_destroyed_0_listener($event) { i0.ɵɵrestoreView(_r9); const ctx_r8 = i0.ɵɵnextContext(); return ctx_r8.remove($event.id, $event.userAction); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const instance_r7 = ctx.$implicit;
        const ctx_r1 = i0.ɵɵnextContext();
        i0.ɵɵproperty("instance", instance_r7)("placement", ctx_r1.config.placement);
    }
}
function TDSNotificationContainerComponent_tds_notification_5_Template(rf, ctx) {
    if (rf & 1) {
        const _r12 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "tds-notification", 5);
        i0.ɵɵlistener("destroyed", function TDSNotificationContainerComponent_tds_notification_5_Template_tds_notification_destroyed_0_listener($event) { i0.ɵɵrestoreView(_r12); const ctx_r11 = i0.ɵɵnextContext(); return ctx_r11.remove($event.id, $event.userAction); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const instance_r10 = ctx.$implicit;
        const ctx_r2 = i0.ɵɵnextContext();
        i0.ɵɵproperty("instance", instance_r10)("placement", ctx_r2.config.placement);
    }
}
function TDSNotificationContainerComponent_tds_notification_7_Template(rf, ctx) {
    if (rf & 1) {
        const _r15 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "tds-notification", 5);
        i0.ɵɵlistener("destroyed", function TDSNotificationContainerComponent_tds_notification_7_Template_tds_notification_destroyed_0_listener($event) { i0.ɵɵrestoreView(_r15); const ctx_r14 = i0.ɵɵnextContext(); return ctx_r14.remove($event.id, $event.userAction); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const instance_r13 = ctx.$implicit;
        const ctx_r3 = i0.ɵɵnextContext();
        i0.ɵɵproperty("instance", instance_r13)("placement", ctx_r3.config.placement);
    }
}
const TDS_CONFIG_MODULE_NAME = 'notification';
const TDS_NOTIFICATION_DEFAULT_CONFIG = {
    top: '24px',
    bottom: '24px',
    placement: 'topRight',
    duration: 4500,
    maxStack: 7,
    pauseOnHover: true,
    animate: true,
    direction: 'ltr'
};
class TDSNotificationContainerComponent extends TDSMNContainerComponent {
    constructor(cdr, tdsConfigService) {
        super(cdr, tdsConfigService);
        this.dir = 'ltr';
        this.instances = [];
        this.topLeftInstances = [];
        this.topRightInstances = [];
        this.bottomLeftInstances = [];
        this.bottomRightInstances = [];
        const config = TDS_NOTIFICATION_DEFAULT_CONFIG;
        this.dir = (config === null || config === void 0 ? void 0 : config.direction) || 'ltr';
    }
    create(notification) {
        const noti = this.onCreate(notification);
        const key = noti.options.key;
        const notificationWithSameKey = this.instances.find(msg => msg.options.key === notification.options.key);
        if (key && notificationWithSameKey) {
            this.replaceNotification(notificationWithSameKey, noti);
        }
        else {
            if (this.instances.length >= this.config.maxStack) {
                this.instances = this.instances.slice(1);
            }
            this.instances = [...this.instances, noti];
        }
        this.readyInstances();
        return noti;
    }
    onCreate(instance) {
        instance.options = this.mergeOptions(instance.options);
        instance.onClose = new Subject();
        instance.onClick = new Subject();
        return instance;
    }
    subscribeConfigChange() {
        this.tdsConfigService
            .getConfigChangeEventForComponent(TDS_CONFIG_MODULE_NAME)
            .pipe(takeUntil(this.destroy$))
            .subscribe(() => {
            this.updateConfig();
            const config = this.tdsConfigService.getConfigForComponent(TDS_CONFIG_MODULE_NAME);
            if (config) {
                const { direction } = config;
                this.dir = direction || this.dir;
            }
        });
    }
    updateConfig() {
        this.config = Object.assign(Object.assign(Object.assign({}, TDS_NOTIFICATION_DEFAULT_CONFIG), this.config), this.tdsConfigService.getConfigForComponent(TDS_CONFIG_MODULE_NAME));
        this.top = toCssPixel(this.config.top);
        this.bottom = toCssPixel(this.config.bottom);
        this.cdr.markForCheck();
    }
    replaceNotification(old, _new) {
        old.title = _new.title;
        old.content = _new.content;
        old.template = _new.template;
        old.type = _new.type;
        old.options = _new.options;
    }
    readyInstances() {
        this.topLeftInstances = this.instances.filter(m => m.options.placement === 'topLeft');
        this.topRightInstances = this.instances.filter(m => m.options.placement === 'topRight' || !m.options.placement);
        this.bottomLeftInstances = this.instances.filter(m => m.options.placement === 'bottomLeft');
        this.bottomRightInstances = this.instances.filter(m => m.options.placement === 'bottomRight');
        this.cdr.detectChanges();
    }
    mergeOptions(options) {
        const { duration, animate, pauseOnHover, placement } = this.config;
        return Object.assign({ duration, animate, pauseOnHover, placement: placement }, options);
    }
}
TDSNotificationContainerComponent.ɵfac = function TDSNotificationContainerComponent_Factory(t) { return new (t || TDSNotificationContainerComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1$1.TDSConfigService)); };
TDSNotificationContainerComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSNotificationContainerComponent, selectors: [["tds-notification-container"]], exportAs: ["tdsNotificationContainer"], features: [i0.ɵɵInheritDefinitionFeature], decls: 8, vars: 28, consts: [[1, "tds-notification", "absolute", "tds-notification-topLeft"], [3, "instance", "placement", "destroyed", 4, "ngFor", "ngForOf"], [1, "tds-notification", "absolute", "tds-notification-topRight"], [1, "tds-notification", "absolute", "tds-notification-bottomLeft"], [1, "tds-notification", "absolute", "tds-notification-bottomRight"], [3, "instance", "placement", "destroyed"]], template: function TDSNotificationContainerComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵtemplate(1, TDSNotificationContainerComponent_tds_notification_1_Template, 1, 2, "tds-notification", 1);
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(2, "div", 2);
            i0.ɵɵtemplate(3, TDSNotificationContainerComponent_tds_notification_3_Template, 1, 2, "tds-notification", 1);
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(4, "div", 3);
            i0.ɵɵtemplate(5, TDSNotificationContainerComponent_tds_notification_5_Template, 1, 2, "tds-notification", 1);
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(6, "div", 4);
            i0.ɵɵtemplate(7, TDSNotificationContainerComponent_tds_notification_7_Template, 1, 2, "tds-notification", 1);
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵstyleProp("top", ctx.top)("left", "0px");
            i0.ɵɵclassProp("tds-notification-rtl", ctx.dir === "rtl");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngForOf", ctx.topLeftInstances);
            i0.ɵɵadvance(1);
            i0.ɵɵstyleProp("top", ctx.top)("right", "0px");
            i0.ɵɵclassProp("tds-notification-rtl", ctx.dir === "rtl");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngForOf", ctx.topRightInstances);
            i0.ɵɵadvance(1);
            i0.ɵɵstyleProp("bottom", ctx.bottom)("left", "0px");
            i0.ɵɵclassProp("tds-notification-rtl", ctx.dir === "rtl");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngForOf", ctx.bottomLeftInstances);
            i0.ɵɵadvance(1);
            i0.ɵɵstyleProp("bottom", ctx.bottom)("right", "0px");
            i0.ɵɵclassProp("tds-notification-rtl", ctx.dir === "rtl");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngForOf", ctx.bottomRightInstances);
        }
    }, directives: [i1.NgForOf, TDSNotificationComponent], encapsulation: 2, changeDetection: 0 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSNotificationContainerComponent, [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None,
                    selector: 'tds-notification-container',
                    exportAs: 'tdsNotificationContainer',
                    preserveWhitespaces: false,
                    template: `
    <div
      class="tds-notification absolute  tds-notification-topLeft"
      [class.tds-notification-rtl]="dir === 'rtl'"
      [style.top]="top"
      [style.left]="'0px'"
    >
      <tds-notification
        *ngFor="let instance of topLeftInstances"
        [instance]="instance"
        [placement]="config.placement"
        (destroyed)="remove($event.id, $event.userAction)"
      ></tds-notification>
    </div>
    <div
      class="tds-notification absolute  tds-notification-topRight"
      [class.tds-notification-rtl]="dir === 'rtl'"
      [style.top]="top"
      [style.right]="'0px'"
    >
      <tds-notification
        *ngFor="let instance of topRightInstances"
        [instance]="instance"
        [placement]="config.placement"
        (destroyed)="remove($event.id, $event.userAction)"
      ></tds-notification>
    </div>
    <div
      class="tds-notification absolute  tds-notification-bottomLeft"
      [class.tds-notification-rtl]="dir === 'rtl'"
      [style.bottom]="bottom"
      [style.left]="'0px'"
    >
      <tds-notification
        *ngFor="let instance of bottomLeftInstances"
        [instance]="instance"
        [placement]="config.placement"
        (destroyed)="remove($event.id, $event.userAction)"
      ></tds-notification>
    </div>
    <div
      class="tds-notification absolute  tds-notification-bottomRight"
      [class.tds-notification-rtl]="dir === 'rtl'"
      [style.bottom]="bottom"
      [style.right]="'0px'"
    >
      <tds-notification
        *ngFor="let instance of bottomRightInstances"
        [instance]="instance"
        [placement]="config.placement"
        (destroyed)="remove($event.id, $event.userAction)"
      ></tds-notification>
    </div>
  `
                }]
        }], function () { return [{ type: i0.ChangeDetectorRef }, { type: i1$1.TDSConfigService }]; }, null);
})();

class TDSNotificationServiceModule {
}
TDSNotificationServiceModule.ɵfac = function TDSNotificationServiceModule_Factory(t) { return new (t || TDSNotificationServiceModule)(); };
TDSNotificationServiceModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: TDSNotificationServiceModule });
TDSNotificationServiceModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({});
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSNotificationServiceModule, [{
            type: NgModule
        }], null, null);
})();

class TDSNotificationModule {
}
TDSNotificationModule.ɵfac = function TDSNotificationModule_Factory(t) { return new (t || TDSNotificationModule)(); };
TDSNotificationModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: TDSNotificationModule });
TDSNotificationModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [[BidiModule, CommonModule, OverlayModule, TDSOutletModule, TDSNotificationServiceModule, TDSButtonModule]] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSNotificationModule, [{
            type: NgModule,
            args: [{
                    imports: [BidiModule, CommonModule, OverlayModule, TDSOutletModule, TDSNotificationServiceModule, TDSButtonModule],
                    declarations: [TDSNotificationComponent, TDSNotificationContainerComponent]
                }]
        }], null, null);
})();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(TDSNotificationModule, { declarations: [TDSNotificationComponent, TDSNotificationContainerComponent], imports: [BidiModule, CommonModule, OverlayModule, TDSOutletModule, TDSNotificationServiceModule, TDSButtonModule] }); })();

let notificationId = 0;
class TDSNotificationService extends TDSMNService {
    constructor(tdsSingletonService, overlay, injector) {
        super(tdsSingletonService, overlay, injector);
        this.componentPrefix = 'notification-';
    }
    success(title, content, options) {
        return this.createInstance({ type: 'success', title, content }, options);
    }
    error(title, content, options) {
        return this.createInstance({ type: 'error', title, content }, options);
    }
    info(title, content, options) {
        return this.createInstance({ type: 'info', title, content }, options);
    }
    warning(title, content, options) {
        return this.createInstance({ type: 'warning', title, content }, options);
    }
    blank(title, content, options) {
        return this.createInstance({ type: 'blank', title, content }, options);
    }
    create(type, title, content, options) {
        return this.createInstance({ type, title, content }, options);
    }
    template(template, options) {
        return this.createInstance({ template }, options);
    }
    generateMessageId() {
        return `${this.componentPrefix}-${notificationId++}`;
    }
    createInstance(message, options) {
        this.container = this.withContainer(TDSNotificationContainerComponent);
        return this.container.create(Object.assign(Object.assign({}, message), {
            createdAt: new Date(),
            messageId: this.generateMessageId(),
            options
        }));
    }
}
TDSNotificationService.ɵfac = function TDSNotificationService_Factory(t) { return new (t || TDSNotificationService)(i0.ɵɵinject(i1$2.TDSSingletonService), i0.ɵɵinject(i2$1.Overlay), i0.ɵɵinject(i0.Injector)); };
TDSNotificationService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: TDSNotificationService, factory: TDSNotificationService.ɵfac, providedIn: TDSNotificationServiceModule });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSNotificationService, [{
            type: Injectable,
            args: [{
                    providedIn: TDSNotificationServiceModule
                }]
        }], function () { return [{ type: i1$2.TDSSingletonService }, { type: i2$1.Overlay }, { type: i0.Injector }]; }, null);
})();

/**
 * Generated bundle index. Do not edit.
 */

export { TDSNotificationComponent, TDSNotificationContainerComponent, TDSNotificationModule, TDSNotificationService, TDSNotificationServiceModule };
//# sourceMappingURL=tds-ui-notification.mjs.map
