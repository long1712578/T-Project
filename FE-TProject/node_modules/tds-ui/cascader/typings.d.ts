import { TDSSafeAny } from "tds-ui/shared/utility";
export declare type TDSCascaderExpandTrigger = 'click' | 'hover';
export declare type TDSCascaderTriggerType = 'click' | 'hover';
export declare type TDSCascaderSize = 'sm' | 'md' | 'lg' | 'xl';
export declare type TDSCascaderFilter = (searchValue: string, path: TDSCascaderOption[]) => boolean;
export declare type TDSCascaderSorter = (a: TDSCascaderOption[], b: TDSCascaderOption[], inputValue: string) => number;
export interface TDSCascaderOption {
    value?: TDSSafeAny;
    label?: string;
    title?: string;
    disabled?: boolean;
    loading?: boolean;
    isLeaf?: boolean;
    parent?: TDSCascaderOption;
    children?: TDSCascaderOption[];
    [key: string]: TDSSafeAny;
}
export interface TDSCascaderSearchOption extends TDSCascaderOption {
    path: TDSCascaderOption[];
}
export interface TDSShowSearchOptions {
    filter?: TDSCascaderFilter;
    sorter?: TDSCascaderSorter;
}
export declare function isShowSearchObject(options: TDSShowSearchOptions | boolean): options is TDSShowSearchOptions;
/**
 * To avoid circular dependency, provide an interface of `TDSCascaderComponent`
 * for `TDSCascaderService`.
 */
export interface TDSCascaderComponentAsSource {
    inputValue: string;
    tdsShowSearch: TDSShowSearchOptions | boolean;
    tdsLabelProperty: string;
    tdsValueProperty: string;
    tdsChangeOnSelect: boolean;
    tdsChangeOn?(option: TDSCascaderOption, level: number): boolean;
    tdsLoadData?(node: TDSCascaderOption, index: number): PromiseLike<TDSSafeAny>;
}
//# sourceMappingURL=typings.d.ts.map