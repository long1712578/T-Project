import { Portal } from '@angular/cdk/portal';
import { ChangeDetectorRef, Injector, OnChanges, OnDestroy, OnInit, SimpleChanges, ViewContainerRef } from '@angular/core';
import { TDSConfigService } from 'tds-ui/core/config';
import { TDSSafeAny } from 'tds-ui/shared/utility';
import { TDSEmptyCustomContent, TDSEmptySize } from './config';
import * as i0 from "@angular/core";
declare type TDSEmptyContentType = 'component' | 'template' | 'string';
export declare class TDSEmbedEmptyComponent implements OnChanges, OnInit, OnDestroy {
    private configService;
    private viewContainerRef;
    private cdr;
    private injector;
    componentName?: string;
    specificContent?: TDSEmptyCustomContent;
    content?: TDSEmptyCustomContent;
    contentType: TDSEmptyContentType;
    contentPortal?: Portal<TDSSafeAny>;
    size: TDSEmptySize;
    private destroy$;
    constructor(configService: TDSConfigService, viewContainerRef: ViewContainerRef, cdr: ChangeDetectorRef, injector: Injector);
    ngOnChanges(changes: SimpleChanges): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    private renderEmpty;
    private subscribeDefaultEmptyContentChange;
    private getUserDefaultEmptyContent;
    static ɵfac: i0.ɵɵFactoryDeclaration<TDSEmbedEmptyComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TDSEmbedEmptyComponent, "tds-embed-empty", ["tdsEmbedEmpty"], { "componentName": "componentName"; "specificContent": "specificContent"; }, {}, never, never>;
}
export {};
//# sourceMappingURL=embed-empty.component.d.ts.map