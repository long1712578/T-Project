import { ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, TemplateRef } from '@angular/core';
import { TDSSafeAny } from 'tds-ui/shared/utility';
import { TDSTabNavItemDirective } from './tab-nav-item.directive';
import * as i0 from "@angular/core";
export declare class TDSTabNavOperationComponent implements OnDestroy {
    cdr: ChangeDetectorRef;
    private elementRef;
    items: TDSTabNavItemDirective[];
    addable: boolean;
    addIcon: string | TemplateRef<TDSSafeAny>;
    hidenNextBtn: boolean;
    readonly nextClicked: EventEmitter<void>;
    readonly addClicked: EventEmitter<void>;
    readonly selected: EventEmitter<TDSTabNavItemDirective>;
    closeAnimationWaitTimeoutId: TDSSafeAny;
    menuOpened: boolean;
    private readonly element;
    constructor(cdr: ChangeDetectorRef, elementRef: ElementRef<HTMLElement>);
    onSelect(item: TDSTabNavItemDirective): void;
    onContextmenu(item: TDSTabNavItemDirective, e: MouseEvent): void;
    showItems(): void;
    menuVisChange(visible: boolean): void;
    getElementWidth(): number;
    getElementHeight(): number;
    ngOnDestroy(): void;
    onclickNext(e: MouseEvent): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<TDSTabNavOperationComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TDSTabNavOperationComponent, "tds-tab-nav-operation", ["tdsTabNavOperation"], { "items": "items"; "addable": "addable"; "addIcon": "addIcon"; "hidenNextBtn": "hidenNextBtn"; }, { "nextClicked": "nextClicked"; "addClicked": "addClicked"; "selected": "selected"; }, never, never>;
}
//# sourceMappingURL=tab-nav-operation.component.d.ts.map