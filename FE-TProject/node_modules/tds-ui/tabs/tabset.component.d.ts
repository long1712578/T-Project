import { BooleanInput, NumberInput } from '@angular/cdk/coercion';
/** get some code from https://github.com/angular/material2 */
import { Direction, Directionality } from '@angular/cdk/bidi';
import { AfterContentChecked, AfterContentInit, ChangeDetectorRef, EventEmitter, OnDestroy, OnInit, QueryList, TemplateRef } from '@angular/core';
import { Router } from '@angular/router';
import { Observable } from 'rxjs';
import { TDSAnimatedInterface, TDSTabChangeEvent, TDSTabPosition, TDSTabPositionMode, TDSTabsCanDeactivateFn, TDSTabScrollEvent, TDSTabType } from './interfaces';
import { TDSTabNavBarComponent } from './tab-nav-bar.component';
import { TDSTabComponent } from './tab.component';
import { TDSSafeAny } from 'tds-ui/shared/utility';
import { TDSConfigService } from 'tds-ui/core/config';
import * as i0 from "@angular/core";
export declare class TDSTabSetComponent implements OnInit, AfterContentChecked, OnDestroy, AfterContentInit {
    tdsConfigService: TDSConfigService;
    private cdr;
    private directionality;
    private router;
    static ngAcceptInputType_hideAdd: BooleanInput;
    static ngAcceptInputType_hideAll: BooleanInput;
    static ngAcceptInputType_centered: BooleanInput;
    static ngAcceptInputType_linkRouter: BooleanInput;
    static ngAcceptInputType_linkExact: BooleanInput;
    static ngAcceptInputType_selectedIndex: NumberInput;
    get selectedIndex(): number | null;
    set selectedIndex(value: null | number);
    tabPosition: TDSTabPosition;
    tabBarExtraContent?: TemplateRef<void>;
    onCanDeactivate: TDSTabsCanDeactivateFn | null;
    addIcon: string | TemplateRef<TDSSafeAny>;
    tabBarStyle: {
        [key: string]: string;
    } | null;
    type: TDSTabType;
    size: string;
    animated: TDSAnimatedInterface | boolean;
    tabBarGutter?: number;
    hideAdd: boolean;
    centered: boolean;
    hideAll: boolean;
    linkRouter: boolean;
    linkExact: boolean;
    hidenNextBtn: boolean;
    clsTab: string;
    readonly selectChange: EventEmitter<TDSTabChangeEvent>;
    readonly selectedIndexChange: EventEmitter<number>;
    readonly tabListScroll: EventEmitter<TDSTabScrollEvent>;
    readonly close: EventEmitter<{
        index: number;
    }>;
    readonly add: EventEmitter<void>;
    get position(): TDSTabPositionMode;
    get addable(): boolean;
    get closable(): boolean;
    get line(): boolean;
    get inkBarAnimated(): boolean;
    get tabPaneAnimated(): boolean;
    allTabs: QueryList<TDSTabComponent>;
    tabNavBarRef: TDSTabNavBarComponent;
    tabs: QueryList<TDSTabComponent>;
    dir: Direction;
    private readonly tabSetId;
    private destroy$;
    private indexToSelect;
    private _selectedIndex;
    private tabLabelSubscription;
    private tabsSubscription;
    private canDeactivateSubscription;
    constructor(tdsConfigService: TDSConfigService, cdr: ChangeDetectorRef, directionality: Directionality, router: Router);
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngAfterContentInit(): void;
    ngAfterContentChecked(): void;
    _onClose(index: number, e: MouseEvent): void;
    _onAdd(): void;
    private clampTabIndex;
    private createChangeEvent;
    private subscribeToTabLabels;
    private subscribeToAllTabChanges;
    canDeactivateFun(pre: number, next: number): Observable<boolean>;
    clickNavItem(tab: TDSTabComponent, index: number, e: MouseEvent): void;
    private isRouterLinkClickEvent;
    contextmenuNavItem(tab: TDSTabComponent, e: MouseEvent): void;
    setSelectedIndex(index: number): void;
    getTabIndex(tab: TDSTabComponent, index: number): number | null;
    getTabContentId(i: number): string;
    private setUpRouter;
    private updateRouterActive;
    private findShouldActiveTabIndex;
    private isLinkActive;
    private getTabContentMarginValue;
    getTabContentMarginLeft(): string;
    getTabContentMarginRight(): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<TDSTabSetComponent, [null, null, { optional: true; }, { optional: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TDSTabSetComponent, "tds-tabset", ["tdsTabset"], { "selectedIndex": "selectedIndex"; "tabPosition": "tabPosition"; "tabBarExtraContent": "tabBarExtraContent"; "onCanDeactivate": "onCanDeactivate"; "addIcon": "addIcon"; "tabBarStyle": "tabBarStyle"; "type": "type"; "size": "size"; "animated": "animated"; "tabBarGutter": "tabBarGutter"; "hideAdd": "hideAdd"; "centered": "centered"; "hideAll": "hideAll"; "linkRouter": "linkRouter"; "linkExact": "linkExact"; "hidenNextBtn": "hidenNextBtn"; "clsTab": "clsTab"; }, { "selectChange": "selectChange"; "selectedIndexChange": "selectedIndexChange"; "tabListScroll": "tabListScroll"; "close": "close"; "add": "add"; }, ["allTabs"], never>;
}
//# sourceMappingURL=tabset.component.d.ts.map