import { EventEmitter, InjectionToken, OnChanges, OnDestroy, SimpleChanges, TemplateRef } from '@angular/core';
import { TabTemplateContext } from './interfaces';
import { Subject } from 'rxjs';
import { TDSTabLinkDirective, TDSTabLinkTemplateDirective } from './tab-link.directive';
import { BooleanInput } from '@angular/cdk/coercion';
import { TDSSafeAny } from 'tds-ui/shared/utility';
import * as i0 from "@angular/core";
/**
 * Used to provide a tab set to a tab without causing a circular dependency.
 */
export declare const TDS_TAB_SET: InjectionToken<any>;
export declare class TDSTabComponent implements OnChanges, OnDestroy {
    closestTabSet: TDSSafeAny;
    static ngAcceptInputType_disabled: BooleanInput;
    static ngAcceptInputType_closable: BooleanInput;
    static ngAcceptInputType_forceRender: BooleanInput;
    title: string | TemplateRef<TabTemplateContext>;
    closable: boolean;
    closeIcon: string | TemplateRef<TDSSafeAny>;
    disabled: boolean;
    forceRender: boolean;
    clsContent: string;
    readonly tabSelect: EventEmitter<void>;
    readonly tabDeselect: EventEmitter<void>;
    readonly tabClick: EventEmitter<void>;
    readonly tabContextmenu: EventEmitter<MouseEvent>;
    tabLinkTemplateDirective: TDSTabLinkTemplateDirective;
    template: TemplateRef<void> | null;
    linkDirective: TDSTabLinkDirective;
    contentTemplate: TemplateRef<TDSSafeAny>;
    isActive: boolean;
    position: number | null;
    origin: number | null;
    readonly stateChanges: Subject<void>;
    get content(): TemplateRef<TDSSafeAny>;
    get label(): string | TemplateRef<TDSSafeAny>;
    constructor(closestTabSet: TDSSafeAny);
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<TDSTabComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TDSTabComponent, "tds-tab", ["tdsTab"], { "title": "title"; "closable": "closable"; "closeIcon": "closeIcon"; "disabled": "disabled"; "forceRender": "forceRender"; "clsContent": "clsContent"; }, { "tabSelect": "tabSelect"; "tabDeselect": "tabDeselect"; "tabClick": "tabClick"; "tabContextmenu": "tabContextmenu"; }, ["tabLinkTemplateDirective", "template", "linkDirective"], ["[tds-tab-link]", "*"]>;
}
//# sourceMappingURL=tab.component.d.ts.map