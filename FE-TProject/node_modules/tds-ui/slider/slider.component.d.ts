import { Direction, Directionality } from '@angular/cdk/bidi';
import { BooleanInput, NumberInput } from '@angular/cdk/coercion';
import { Platform } from '@angular/cdk/platform';
import { ChangeDetectorRef, ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, QueryList, SimpleChanges } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { TDSSliderHandleComponent } from './handle.component';
import { TDSSliderService } from './slider.service';
import { TDSExtendedMark, TDSMarks, TDSSliderHandler, TDSSliderShowTooltip, TDSSliderValue } from './typings';
import * as i0 from "@angular/core";
export declare class TDSSliderComponent implements ControlValueAccessor, OnInit, OnChanges, OnDestroy {
    private sliderService;
    private cdr;
    private platform;
    private directionality;
    static ngAcceptInputType_tdsDisabled: BooleanInput;
    static ngAcceptInputType_tdsDots: BooleanInput;
    static ngAcceptInputType_tdsIncluded: BooleanInput;
    static ngAcceptInputType_tdsRange: BooleanInput;
    static ngAcceptInputType_tdsVertical: BooleanInput;
    static ngAcceptInputType_tdsMax: NumberInput;
    static ngAcceptInputType_tdsMin: NumberInput;
    static ngAcceptInputType_tdsStep: NumberInput;
    static ngAcceptInputType_tdsReverse: BooleanInput;
    slider: ElementRef<HTMLDivElement>;
    handlerComponents: QueryList<TDSSliderHandleComponent>;
    tdsDisabled: boolean;
    tdsDots: boolean;
    tdsIncluded: boolean;
    tdsRange: boolean;
    tdsVertical: boolean;
    tdsReverse: boolean;
    tdsDefaultValue?: TDSSliderValue;
    tdsMarks: TDSMarks | null;
    tdsMax: number;
    tdsMin: number;
    tdsStep: number;
    tdsTooltipVisible: TDSSliderShowTooltip;
    tdsTooltipPlacement: string;
    tdsTipFormatter?: null | ((value: number) => string);
    readonly tdsOnAfterChange: EventEmitter<TDSSliderValue>;
    value: TDSSliderValue | null;
    cacheSliderStart: number | null;
    cacheSliderLength: number | null;
    activeValueIndex: number | undefined;
    track: {
        offset: null | number;
        length: null | number;
    };
    handles: TDSSliderHandler[];
    marksArray: TDSExtendedMark[] | null;
    bounds: {
        lower: TDSSliderValue | null;
        upper: TDSSliderValue | null;
    };
    dir: Direction;
    private dragStart$?;
    private dragMove$?;
    private dragEnd$?;
    private dragStart_?;
    private dragMove_?;
    private dragEnd_?;
    private destroy$;
    constructor(sliderService: TDSSliderService, cdr: ChangeDetectorRef, platform: Platform, directionality: Directionality);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    writeValue(val: TDSSliderValue | null): void;
    onValueChange(_value: TDSSliderValue): void;
    onTouched(): void;
    registerOnChange(fn: (value: TDSSliderValue) => void): void;
    registerOnTouched(fn: () => void): void;
    setDisabledState(isDisabled: boolean): void;
    /**
     * Event handler is only triggered when a slider handler is focused.
     */
    onKeyDown(e: KeyboardEvent): void;
    onHandleFocusIn(index: number): void;
    private setValue;
    private getValue;
    /**
     * Clone & sort current value and convert them to offsets, then return the new one.
     */
    private getValueToOffset;
    /**
     * Find the closest value to be activated.
     */
    private setActiveValueIndex;
    private setActiveValue;
    /**
     * Update track and handles' position and length.
     */
    private updateTrackAndHandles;
    private onDragStart;
    private onDragMove;
    private getLogicalValue;
    private onDragEnd;
    /**
     * Create user interactions handles.
     */
    private bindDraggingHandlers;
    private subscribeDrag;
    private unsubscribeDrag;
    private toggleDragMoving;
    private toggleDragDisabled;
    private findClosestValue;
    private valueToOffset;
    private getSliderStartPosition;
    private getSliderLength;
    /**
     * Cache DOM layout/reflow operations for performance (may not necessary?)
     */
    private cacheSliderProperty;
    private formatValue;
    /**
     * Show one handle's tooltip and hide others'.
     */
    private showHandleTooltip;
    private hideAllHandleTooltip;
    private generateMarkItems;
    static ɵfac: i0.ɵɵFactoryDeclaration<TDSSliderComponent, [null, null, null, { optional: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TDSSliderComponent, "tds-slider", ["tdsSlider"], { "tdsDisabled": "tdsDisabled"; "tdsDots": "tdsDots"; "tdsIncluded": "tdsIncluded"; "tdsRange": "tdsRange"; "tdsVertical": "tdsVertical"; "tdsReverse": "tdsReverse"; "tdsDefaultValue": "tdsDefaultValue"; "tdsMarks": "tdsMarks"; "tdsMax": "tdsMax"; "tdsMin": "tdsMin"; "tdsStep": "tdsStep"; "tdsTooltipVisible": "tdsTooltipVisible"; "tdsTooltipPlacement": "tdsTooltipPlacement"; "tdsTipFormatter": "tdsTipFormatter"; }, { "tdsOnAfterChange": "tdsOnAfterChange"; }, never, never>;
}
//# sourceMappingURL=slider.component.d.ts.map