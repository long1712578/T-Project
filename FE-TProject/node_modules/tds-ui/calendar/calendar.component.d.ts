import { Direction, Directionality } from '@angular/cdk/bidi';
import { BooleanInput } from '@angular/cdk/coercion';
import { ChangeDetectorRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges, TemplateRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { CandyDate } from 'tds-ui/core/time';
import { TDSCalendarMode } from 'tds-ui/date-picker';
import * as i0 from "@angular/core";
declare type TDSCalendarDateTemplate = TemplateRef<{
    $implicit: Date;
}>;
export declare class TDSCalendarComponent implements ControlValueAccessor, OnChanges, OnInit, OnDestroy {
    private cdr;
    private directionality;
    static ngAcceptInputType_tdsFullscreen: BooleanInput;
    activeDate: CandyDate;
    prefixCls: string;
    private destroy$;
    dir: Direction;
    private onChangeFn;
    private onTouchFn;
    tdsMode: TDSCalendarMode;
    tdsValue?: Date;
    tdsDisabledDate?: (date: Date) => boolean;
    readonly tdsModeChange: EventEmitter<TDSCalendarMode>;
    readonly tdsPanelChange: EventEmitter<{
        date: Date;
        mode: TDSCalendarMode;
    }>;
    readonly tdsSelectChange: EventEmitter<Date>;
    readonly tdsValueChange: EventEmitter<Date>;
    /**
     * Cannot use @Input and @ContentChild on one variable
     * because { static: false } will make @Input property get delayed
     **/
    tdsDateCell?: TDSCalendarDateTemplate;
    tdsDateCellChild?: TDSCalendarDateTemplate;
    get dateCell(): TDSCalendarDateTemplate;
    tdsDateFullCell?: TDSCalendarDateTemplate;
    tdsDateFullCellChild?: TDSCalendarDateTemplate;
    get dateFullCell(): TDSCalendarDateTemplate;
    tdsMonthCell?: TDSCalendarDateTemplate;
    tdsMonthCellChild?: TDSCalendarDateTemplate;
    get monthCell(): TDSCalendarDateTemplate;
    tdsMonthFullCell?: TDSCalendarDateTemplate;
    tdsMonthFullCellChild?: TDSCalendarDateTemplate;
    get monthFullCell(): TDSCalendarDateTemplate;
    tdsFullscreen: boolean;
    constructor(cdr: ChangeDetectorRef, directionality: Directionality);
    ngOnInit(): void;
    onModeChange(mode: TDSCalendarMode): void;
    onYearSelect(year: number): void;
    onMonthSelect(month: number): void;
    onDateSelect(date: CandyDate): void;
    writeValue(value: Date | null): void;
    registerOnChange(fn: (date: Date) => void): void;
    registerOnTouched(fn: () => void): void;
    private updateDate;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<TDSCalendarComponent, [null, { optional: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TDSCalendarComponent, "tds-calendar", ["tdsCalendar"], { "tdsMode": "tdsMode"; "tdsValue": "tdsValue"; "tdsDisabledDate": "tdsDisabledDate"; "tdsDateCell": "tdsDateCell"; "tdsDateFullCell": "tdsDateFullCell"; "tdsMonthCell": "tdsMonthCell"; "tdsMonthFullCell": "tdsMonthFullCell"; "tdsFullscreen": "tdsFullscreen"; }, { "tdsModeChange": "tdsModeChange"; "tdsPanelChange": "tdsPanelChange"; "tdsSelectChange": "tdsSelectChange"; "tdsValueChange": "tdsValueChange"; }, ["tdsDateCellChild", "tdsDateFullCellChild", "tdsMonthCellChild", "tdsMonthFullCellChild"], ["*"]>;
}
export {};
//# sourceMappingURL=calendar.component.d.ts.map