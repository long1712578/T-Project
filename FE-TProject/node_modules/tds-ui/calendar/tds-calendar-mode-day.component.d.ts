import { AfterContentInit, ChangeDetectorRef, ElementRef, EventEmitter, OnChanges, OnInit, QueryList, SimpleChanges, TemplateRef } from '@angular/core';
import { CandyDate } from 'tds-ui/core/time';
import { TDSCalendarI18nInterface } from 'tds-ui/i18n';
import { WeekViewHour, TDSCanlendarEventInterface, DayView, WeekViewHourSegment } from './calendar.utils';
import { TDSCalendarEventComponent } from './tds-calendar-event.component';
import { TDSDestroyService } from 'tds-ui/core/services';
import * as i0 from "@angular/core";
export declare class TDSCalendarModeDayComponent implements OnInit, OnChanges, AfterContentInit {
    private destroy$;
    private cdr;
    private elementRef;
    viewDate: Date;
    locale: TDSCalendarI18nInterface;
    start: CandyDate;
    /**
     * Giờ kết thúc ngày trong thời gian 24 giờ. Phải là 0-23
     */
    dayEndHour: number;
    /**
    * Phút cuối ngày. Phải là 0-59
    */
    dayEndMinute: number;
    /**
    * Giờ bắt đầu ngày trong thời gian 24 giờ. Phải là 0-23
    */
    dayStartHour: number;
    /**
    * Phút bắt đầu ngày. Phải là 0-59
    */
    dayStartMinute: number;
    /**
     * The number of segments in an hour. Must divide equally into 60.
     */
    hourSegments: number;
    /**
     * The height in pixels of each hour segment
     */
    hourSegmentHeight: number;
    /**
     * The minimum height in pixels of each event
     */
    minimumEventHeight: number;
    /**
    * The width in pixels of each hour segment
    */
    hourSegmentWidth: number;
    /**
     * The duration of each segment group in minutes
     */
    hourDuration: number;
    widthColTime: number;
    /**
   * A custom template to use for the current time marker
   */
    currentTimeMarkerTemplate: TemplateRef<any>;
    /**
     * @hidden
     */
    trackByHourSegment: (index: number, segment: WeekViewHourSegment) => string;
    weekViewHour: WeekViewHour[];
    activeDate: CandyDate;
    maxWidth: number;
    widthTable: number | null;
    private listOfTemplateEventItem$;
    listEventComp: QueryList<TDSCalendarEventComponent>;
    tdsClickSegment: EventEmitter<WeekViewHourSegment>;
    listOfEvent: TDSCanlendarEventInterface[];
    dayView: DayView;
    paddingLeftContent: number;
    constructor(destroy$: TDSDestroyService, cdr: ChangeDetectorRef, elementRef: ElementRef);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterContentInit(): void;
    onClickSegment(e: MouseEvent, date: WeekViewHourSegment): void;
    private buildTime;
    static ɵfac: i0.ɵɵFactoryDeclaration<TDSCalendarModeDayComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TDSCalendarModeDayComponent, "tds-calendar-mode-day", never, { "viewDate": "viewDate"; "locale": "locale"; "start": "start"; "dayEndHour": "dayEndHour"; "dayEndMinute": "dayEndMinute"; "dayStartHour": "dayStartHour"; "dayStartMinute": "dayStartMinute"; "hourSegments": "hourSegments"; "hourSegmentHeight": "hourSegmentHeight"; "minimumEventHeight": "minimumEventHeight"; "hourSegmentWidth": "hourSegmentWidth"; "hourDuration": "hourDuration"; "widthColTime": "widthColTime"; "currentTimeMarkerTemplate": "currentTimeMarkerTemplate"; }, { "tdsClickSegment": "tdsClickSegment"; }, ["listEventComp"], ["*"]>;
}
//# sourceMappingURL=tds-calendar-mode-day.component.d.ts.map