import { TemplateRef } from "@angular/core";
import { TDSSafeAny } from "tds-ui/shared/utility";
export declare enum DAYS_OF_WEEK {
    SUNDAY = 0,
    MONDAY = 1,
    TUESDAY = 2,
    WEDNESDAY = 3,
    THURSDAY = 4,
    FRIDAY = 5,
    SATURDAY = 6
}
export declare const SECONDS_IN_DAY: number;
export interface WeekViewHourSegment {
    isStart: boolean;
    date: Date;
    displayDate: Date;
    cssClass?: string;
}
export interface WeekViewHour {
    segments: WeekViewHourSegment[];
}
export interface TDSCanlendarEventInterface {
    start: Date;
    end: Date;
    data: TDSSafeAny;
    template: string | TemplateRef<void>;
    allDay?: boolean;
}
export interface TDSWeekViewTimeEvent {
    event: TDSCanlendarEventInterface;
    height: number;
    width: number;
    top: number;
    left: number;
    startsBeforeDay: boolean;
    endsAfterDay: boolean;
}
export interface ViewPeriod {
    start: Date;
    end: Date;
    events: TDSCanlendarEventInterface[];
}
export interface GetDayViewArgs {
    events?: TDSCanlendarEventInterface[];
    viewDate: Date;
    hourSegments: number;
    dayStart: {
        hour: number;
        minute: number;
    };
    dayEnd: {
        hour: number;
        minute: number;
    };
    eventWidth: number;
    segmentHeight: number;
    hourDuration: number;
    minimumEventHeight: number;
}
interface Time {
    hour: number;
    minute: number;
}
interface GetDayViewHourGridArgs {
    viewDate: Date;
    hourSegments: number;
    hourDuration: number;
    dayStart: Time;
    dayEnd: Time;
}
export interface DayView {
    events: TDSWeekViewTimeEvent[];
    width: number;
    allDayEvents: TDSCanlendarEventInterface[];
    period: ViewPeriod;
}
export declare function getDayViewHourGrid({ viewDate, hourSegments, hourDuration, dayStart, dayEnd }: GetDayViewHourGridArgs): WeekViewHour[];
export declare const trackByHourSegment: (index: number, segment: WeekViewHourSegment) => string;
export interface GetEventsInPeriodArgs {
    events: TDSCanlendarEventInterface[];
    periodStart: Date;
    periodEnd: Date;
}
export declare function getEventsInPeriod({ events, periodStart, periodEnd }: GetEventsInPeriodArgs): TDSCanlendarEventInterface[];
export declare function getDayView({ events, viewDate, hourSegments, dayStart, dayEnd, eventWidth, segmentHeight, hourDuration, minimumEventHeight }: GetDayViewArgs): DayView;
export {};
//# sourceMappingURL=calendar.utils.d.ts.map