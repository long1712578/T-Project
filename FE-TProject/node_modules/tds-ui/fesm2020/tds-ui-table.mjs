import * as i5$3 from '@angular/cdk/bidi';
import { BidiModule } from '@angular/cdk/bidi';
import * as i1$3 from '@angular/cdk/platform';
import { PlatformModule } from '@angular/cdk/platform';
import * as i5$2 from '@angular/cdk/scrolling';
import { CdkVirtualScrollViewport, ScrollingModule } from '@angular/cdk/scrolling';
import * as i1$1 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i0 from '@angular/core';
import { EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, Input, Output, Directive, Injectable, Optional, ViewChild, ViewChildren, ElementRef, ContentChild, ContentChildren, NgModule } from '@angular/core';
import * as i6 from '@angular/forms';
import { FormsModule } from '@angular/forms';
import * as i8 from 'tds-ui/button';
import { TDSButtonModule } from 'tds-ui/button';
import * as i1$4 from 'tds-ui/core/outlet';
import { TDSOutletModule } from 'tds-ui/core/outlet';
import * as i1$2 from 'tds-ui/core/resize-observers';
import { TDSResizeObserverModule } from 'tds-ui/core/resize-observers';
import * as i4 from 'tds-ui/dropdown';
import { TDSDropDownModule } from 'tds-ui/dropdown';
import * as i5$1 from 'tds-ui/empty';
import { TDSEmptyModule } from 'tds-ui/empty';
import * as i1 from 'tds-ui/i18n';
import { TDSI18nModule } from 'tds-ui/i18n';
import * as i11 from 'tds-ui/pagination';
import { TDSPaginationModule } from 'tds-ui/pagination';
import * as i6$1 from 'tds-ui/progress-spinner';
import { TDSSpinnerModule } from 'tds-ui/progress-spinner';
import * as i5 from 'tds-ui/radio';
import { TDSRadioModule } from 'tds-ui/radio';
import * as i7 from 'tds-ui/tds-checkbox';
import { TDSCheckBoxModule } from 'tds-ui/tds-checkbox';
import { __decorate } from 'tslib';
import { InputBoolean } from 'tds-ui/shared/utility';
import { Subject, ReplaySubject, BehaviorSubject, combineLatest, merge, fromEvent, of, EMPTY } from 'rxjs';
import { takeUntil, map, startWith, switchMap, debounceTime, delay, filter, distinctUntilChanged, skip, mergeMap } from 'rxjs/operators';
import { arraysEqual, isNil, measureScrollbar } from 'tds-ui/core/util';
import * as i2 from 'tds-ui/core/services';
import * as i2$1 from 'tds-ui/core/config';
import { WithConfig } from 'tds-ui/core/config';

const _c0$b = ["*"];
class TDSFilterTriggerComponent {
    constructor(cdr) {
        this.cdr = cdr;
        this.active = false;
        this.visible = false;
        /**
         * @deprecated Not supported, use `backdrop` instead.
         * @breaking-change 13.0.0
         */
        this.hasBackdrop = false;
        this.backdrop = false;
        this.visibleChange = new EventEmitter();
    }
    onVisibleChange(visible) {
        this.visible = visible;
        this.visibleChange.next(visible);
    }
    onFilterClick($event) {
        $event.stopPropagation();
    }
    hide() {
        this.visible = false;
        this.cdr.markForCheck();
    }
    show() {
        this.visible = true;
        this.cdr.markForCheck();
    }
    ngOnChanges(changes) {
        const { hasBackdrop } = changes;
        // if (hasBackdrop) {
        //   console.warn(
        //     '`hasBackdrop` in tds-filter-trigger component will be removed in 13.0.0, please use `backdrop` instead.'
        //   );
        // }
    }
}
TDSFilterTriggerComponent.ɵfac = function TDSFilterTriggerComponent_Factory(t) { return new (t || TDSFilterTriggerComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
TDSFilterTriggerComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSFilterTriggerComponent, selectors: [["tds-filter-trigger"]], inputs: { active: "active", dropdownMenu: "dropdownMenu", visible: "visible", hasBackdrop: "hasBackdrop", backdrop: "backdrop" }, outputs: { visibleChange: "visibleChange" }, exportAs: ["tdsFilterTrigger"], features: [i0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0$b, decls: 2, vars: 8, consts: [["tds-dropdown", "", "trigger", "click", "placement", "bottomRight", 1, "tds-table-filter-trigger", 3, "backdrop", "clickHide", "tdsDropdownMenu", "visible", "visibleChange", "click"]], template: function TDSFilterTriggerComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵelementStart(0, "span", 0);
        i0.ɵɵlistener("visibleChange", function TDSFilterTriggerComponent_Template_span_visibleChange_0_listener($event) { return ctx.onVisibleChange($event); })("click", function TDSFilterTriggerComponent_Template_span_click_0_listener($event) { return ctx.onFilterClick($event); });
        i0.ɵɵprojection(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵclassProp("active", ctx.active)("tds-table-filter-open", ctx.visible);
        i0.ɵɵproperty("backdrop", ctx.backdrop || ctx.hasBackdrop)("clickHide", false)("tdsDropdownMenu", ctx.dropdownMenu)("visible", ctx.visible);
    } }, directives: [i4.TDSDropDownDirective], encapsulation: 2, changeDetection: 0 });
__decorate([
    InputBoolean()
], TDSFilterTriggerComponent.prototype, "hasBackdrop", void 0);
__decorate([
    InputBoolean()
], TDSFilterTriggerComponent.prototype, "backdrop", void 0);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSFilterTriggerComponent, [{
        type: Component,
        args: [{
                selector: 'tds-filter-trigger',
                exportAs: `tdsFilterTrigger`,
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                encapsulation: ViewEncapsulation.None,
                template: `
    <span
      tds-dropdown
      class="tds-table-filter-trigger"
      trigger="click"
      placement="bottomRight"
      [backdrop]="backdrop || hasBackdrop"
      [clickHide]="false"
      [tdsDropdownMenu]="dropdownMenu"
      [class.active]="active"
      [class.tds-table-filter-open]="visible"
      [visible]="visible"
      (visibleChange)="onVisibleChange($event)"
      (click)="onFilterClick($event)"
    >
      <ng-content></ng-content>
    </span>
  `
            }]
    }], function () { return [{ type: i0.ChangeDetectorRef }]; }, { active: [{
            type: Input
        }], dropdownMenu: [{
            type: Input
        }], visible: [{
            type: Input
        }], hasBackdrop: [{
            type: Input
        }], backdrop: [{
            type: Input
        }], visibleChange: [{
            type: Output
        }] }); })();

function TDSTableFilterComponent_ng_template_1_Template(rf, ctx) { }
function TDSTableFilterComponent_ng_container_2_div_7_label_1_Template(rf, ctx) { if (rf & 1) {
    const _r9 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "label", 15);
    i0.ɵɵlistener("ngModelChange", function TDSTableFilterComponent_ng_container_2_div_7_label_1_Template_label_ngModelChange_0_listener() { i0.ɵɵrestoreView(_r9); const f_r4 = i0.ɵɵnextContext().$implicit; const ctx_r7 = i0.ɵɵnextContext(2); return ctx_r7.check(f_r4); });
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const f_r4 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵproperty("ngModel", f_r4.checked);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" ", f_r4.text, " ");
} }
function TDSTableFilterComponent_ng_container_2_div_7_tds_checkbox_2_Template(rf, ctx) { if (rf & 1) {
    const _r13 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "tds-checkbox", 16);
    i0.ɵɵlistener("change", function TDSTableFilterComponent_ng_container_2_div_7_tds_checkbox_2_Template_tds_checkbox_change_0_listener() { i0.ɵɵrestoreView(_r13); const f_r4 = i0.ɵɵnextContext().$implicit; const ctx_r11 = i0.ɵɵnextContext(2); return ctx_r11.check(f_r4); });
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const f_r4 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵproperty("checked", f_r4.checked);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("", f_r4.text, " ");
} }
function TDSTableFilterComponent_ng_container_2_div_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 12);
    i0.ɵɵtemplate(1, TDSTableFilterComponent_ng_container_2_div_7_label_1_Template, 2, 2, "label", 13);
    i0.ɵɵtemplate(2, TDSTableFilterComponent_ng_container_2_div_7_tds_checkbox_2_Template, 2, 2, "tds-checkbox", 14);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", !ctx_r3.filterMultiple);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r3.filterMultiple);
} }
const _c0$a = function (a0, a1) { return { "text-white bg-primary-1 ": a0, "text-neutral-1-200 group-hover:bg-neutral-3-50": a1 }; };
function TDSTableFilterComponent_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    const _r16 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "tds-filter-trigger", 3);
    i0.ɵɵlistener("visibleChange", function TDSTableFilterComponent_ng_container_2_Template_tds_filter_trigger_visibleChange_1_listener($event) { i0.ɵɵrestoreView(_r16); const ctx_r15 = i0.ɵɵnextContext(); return ctx_r15.onVisibleChange($event); });
    i0.ɵɵelementStart(2, "span", 4);
    i0.ɵɵelement(3, "span", 5);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(4, "tds-dropdown-menu", null, 6)(6, "div", 7);
    i0.ɵɵtemplate(7, TDSTableFilterComponent_ng_container_2_div_7_Template, 3, 2, "div", 8);
    i0.ɵɵelementStart(8, "div", 9)(9, "button", 10);
    i0.ɵɵlistener("click", function TDSTableFilterComponent_ng_container_2_Template_button_click_9_listener() { i0.ɵɵrestoreView(_r16); const ctx_r17 = i0.ɵɵnextContext(); return ctx_r17.reset(); });
    i0.ɵɵtext(10);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(11, "button", 11);
    i0.ɵɵlistener("click", function TDSTableFilterComponent_ng_container_2_Template_button_click_11_listener() { i0.ɵɵrestoreView(_r16); const ctx_r18 = i0.ɵɵnextContext(); return ctx_r18.confirm(); });
    i0.ɵɵtext(12);
    i0.ɵɵelementEnd()()()();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const _r2 = i0.ɵɵreference(5);
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("visible", ctx_r1.isVisible)("active", ctx_r1.isChecked)("dropdownMenu", _r2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction2(9, _c0$a, ctx_r1.isChecked, !ctx_r1.isChecked));
    i0.ɵɵadvance(5);
    i0.ɵɵproperty("ngForOf", ctx_r1.listOfParsedFilter)("ngForTrackBy", ctx_r1.trackByValue);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("disabled", !ctx_r1.isChecked);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" ", ctx_r1.locale.filterReset, " ");
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(ctx_r1.locale.filterConfirm);
} }
class TDSTableFilterComponent {
    constructor(cdr, i18n, elementRef) {
        this.cdr = cdr;
        this.i18n = i18n;
        this.elementRef = elementRef;
        this.contentTemplate = null;
        this.customFilter = false;
        this.extraTemplate = null;
        this.filterMultiple = true;
        this.listOfFilter = [];
        this.filterChange = new EventEmitter();
        this.destroy$ = new Subject();
        this.isChecked = false;
        this.isVisible = false;
        this.listOfParsedFilter = [];
        this.listOfChecked = [];
        // TODO: move to host after View Engine deprecation
        this.elementRef.nativeElement.classList.add('tds-table-filter-column');
    }
    trackByValue(_, item) {
        return item.value;
    }
    check(filter) {
        if (this.filterMultiple) {
            this.listOfParsedFilter = this.listOfParsedFilter.map(item => {
                if (item === filter) {
                    return { ...item, checked: !filter.checked };
                }
                else {
                    return item;
                }
            });
            filter.checked = !filter.checked;
        }
        else {
            this.listOfParsedFilter = this.listOfParsedFilter.map(item => ({ ...item, checked: item === filter }));
        }
        this.isChecked = this.getCheckedStatus(this.listOfParsedFilter);
    }
    confirm() {
        this.isVisible = false;
        this.emitFilterData();
    }
    reset() {
        this.isVisible = false;
        this.listOfParsedFilter = this.parseListOfFilter(this.listOfFilter, true);
        this.isChecked = this.getCheckedStatus(this.listOfParsedFilter);
        this.emitFilterData();
    }
    onVisibleChange(value) {
        this.isVisible = value;
        if (!value) {
            this.emitFilterData();
        }
        else {
            this.listOfChecked = this.listOfParsedFilter.filter(item => item.checked).map(item => item.value);
        }
    }
    emitFilterData() {
        const listOfChecked = this.listOfParsedFilter.filter(item => item.checked).map(item => item.value);
        if (!arraysEqual(this.listOfChecked, listOfChecked)) {
            if (this.filterMultiple) {
                this.filterChange.emit(listOfChecked);
            }
            else {
                this.filterChange.emit(listOfChecked.length > 0 ? listOfChecked[0] : null);
            }
        }
    }
    parseListOfFilter(listOfFilter, reset) {
        return listOfFilter.map(item => {
            const checked = reset ? false : !!item.byDefault;
            return { text: item.text, value: item.value, checked };
        });
    }
    getCheckedStatus(listOfParsedFilter) {
        return listOfParsedFilter.some(item => item.checked);
    }
    ngOnInit() {
        this.i18n.localeChange.pipe(takeUntil(this.destroy$)).subscribe(() => {
            this.locale = this.i18n.getLocaleData('Table');
            this.cdr.markForCheck();
        });
    }
    ngOnChanges(changes) {
        const { listOfFilter } = changes;
        if (listOfFilter && this.listOfFilter && this.listOfFilter.length) {
            this.listOfParsedFilter = this.parseListOfFilter(this.listOfFilter);
            this.isChecked = this.getCheckedStatus(this.listOfParsedFilter);
        }
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
}
TDSTableFilterComponent.ɵfac = function TDSTableFilterComponent_Factory(t) { return new (t || TDSTableFilterComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.TDSI18nService), i0.ɵɵdirectiveInject(i0.ElementRef)); };
TDSTableFilterComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSTableFilterComponent, selectors: [["tds-table-filter"]], hostAttrs: [1, "flex", "justify-between", "cursor-pointer", "items-center"], inputs: { contentTemplate: "contentTemplate", customFilter: "customFilter", extraTemplate: "extraTemplate", filterMultiple: "filterMultiple", listOfFilter: "listOfFilter" }, outputs: { filterChange: "filterChange" }, features: [i0.ɵɵNgOnChangesFeature], decls: 3, vars: 3, consts: [[1, "tds-table-column-title", "flex-auto", "flex", "justify-between", "pr-1"], [3, "ngTemplateOutlet"], [4, "ngIf", "ngIfElse"], [3, "visible", "active", "dropdownMenu", "visibleChange"], [1, "p-0.5", "rounded-md", "flex", "items-center", 3, "ngClass"], [1, "tdsi-filter-2-fill", "text-base", "leading-4"], ["filterMenu", "tdsDropdownMenu"], [1, "w-full", "py-2"], ["tds-dropdown-item", "", 4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "tds-table-filter-dropdown-btns", "px-2"], ["tds-flat-button", "", "color", "primary", "size", "sm", 1, "mr-2", 3, "disabled", "click"], ["tds-button", "", "color", "primary", "size", "sm", 1, "max-w-max", 2, "min-width", "50px", 3, "click"], ["tds-dropdown-item", ""], ["tds-radio", "", 3, "ngModel", "ngModelChange", 4, "ngIf"], [3, "checked", "change", 4, "ngIf"], ["tds-radio", "", 3, "ngModel", "ngModelChange"], [3, "checked", "change"]], template: function TDSTableFilterComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 0);
        i0.ɵɵtemplate(1, TDSTableFilterComponent_ng_template_1_Template, 0, 0, "ng-template", 1);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(2, TDSTableFilterComponent_ng_container_2_Template, 13, 12, "ng-container", 2);
    } if (rf & 2) {
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngTemplateOutlet", ctx.contentTemplate);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx.customFilter)("ngIfElse", ctx.extraTemplate);
    } }, directives: [i1$1.NgTemplateOutlet, i1$1.NgIf, TDSFilterTriggerComponent, i1$1.NgClass, i4.TDSDropdownMenuComponent, i1$1.NgForOf, i4.TDSDropDownItemDirective, i5.TDSRadioComponent, i6.NgControlStatus, i6.NgModel, i7.TDSCheckbox, i8.TDSButtonComponent], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSTableFilterComponent, [{
        type: Component,
        args: [{ selector: 'tds-table-filter', preserveWhitespaces: false, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, host: {
                    class: "flex justify-between cursor-pointer items-center"
                }, template: "<span class=\"tds-table-column-title flex-auto flex justify-between pr-1 \">\r\n    <ng-template [ngTemplateOutlet]=\"contentTemplate\"></ng-template>\r\n</span>\r\n<ng-container *ngIf=\"!customFilter; else extraTemplate\">\r\n    <tds-filter-trigger [visible]=\"isVisible\" [active]=\"isChecked\" [dropdownMenu]=\"filterMenu\"\r\n        (visibleChange)=\"onVisibleChange($event)\">\r\n        <span class=\"p-0.5 rounded-md flex items-center\" [ngClass]=\"{'text-white bg-primary-1 ':isChecked,'text-neutral-1-200 group-hover:bg-neutral-3-50':!isChecked}\">\r\n            <span class=\"tdsi-filter-2-fill text-base leading-4\" ></span>\r\n        </span>\r\n        \r\n    </tds-filter-trigger>\r\n\r\n    <tds-dropdown-menu #filterMenu=\"tdsDropdownMenu\">\r\n        <div class=\"w-full py-2\">\r\n            <div tds-dropdown-item *ngFor=\"let f of listOfParsedFilter; trackBy: trackByValue\" >\r\n                <label tds-radio *ngIf=\"!filterMultiple\" [ngModel]=\"f.checked\" (ngModelChange)=\"check(f)\">\r\n                    {{ f.text}}\r\n                </label>\r\n                <tds-checkbox *ngIf=\"filterMultiple\" [checked]=\"f.checked\" (change)=\"check(f)\">{{ f.text }}\r\n                </tds-checkbox>\r\n            </div>\r\n            <div class=\"tds-table-filter-dropdown-btns px-2\">\r\n                <button class=\"mr-2\" tds-flat-button color=\"primary\" size=\"sm\" (click)=\"reset()\" [disabled]=\"!isChecked\">\r\n                  {{ locale.filterReset }}\r\n                </button>\r\n                <button tds-button color=\"primary\" size=\"sm\" (click)=\"confirm()\" class=\"max-w-max\" style=\"min-width: 50px;\">{{ locale.filterConfirm }}</button>\r\n              </div>\r\n        </div>\r\n    </tds-dropdown-menu>\r\n  </ng-container>" }]
    }], function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.TDSI18nService }, { type: i0.ElementRef }]; }, { contentTemplate: [{
            type: Input
        }], customFilter: [{
            type: Input
        }], extraTemplate: [{
            type: Input
        }], filterMultiple: [{
            type: Input
        }], listOfFilter: [{
            type: Input
        }], filterChange: [{
            type: Output
        }] }); })();

class TDSRowExpandButtonDirective {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.expand = false;
        this.spaceMode = false;
        this.expandChange = new EventEmitter();
        // TODO: move to host after View Engine deprecation
        this.elementRef.nativeElement.classList.add('tds-table-row-expand-icon');
    }
    onHostClick() {
        if (!this.spaceMode) {
            this.expand = !this.expand;
            this.expandChange.next(this.expand);
        }
    }
}
TDSRowExpandButtonDirective.ɵfac = function TDSRowExpandButtonDirective_Factory(t) { return new (t || TDSRowExpandButtonDirective)(i0.ɵɵdirectiveInject(i0.ElementRef)); };
TDSRowExpandButtonDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: TDSRowExpandButtonDirective, selectors: [["button", "tds-row-expand-button", ""]], hostVars: 11, hostBindings: function TDSRowExpandButtonDirective_HostBindings(rf, ctx) { if (rf & 1) {
        i0.ɵɵlistener("click", function TDSRowExpandButtonDirective_click_HostBindingHandler() { return ctx.onHostClick(); });
    } if (rf & 2) {
        i0.ɵɵhostProperty("type", "button");
        i0.ɵɵclassProp("tds-table-row-expand-icon-expanded", !ctx.spaceMode && ctx.expand === true)("tds-table-row-expand-icon-collapsed", !ctx.spaceMode && ctx.expand === false)("bg-transparent", ctx.spaceMode)("border-0", ctx.spaceMode)("invisible", ctx.spaceMode);
    } }, inputs: { expand: "expand", spaceMode: "spaceMode" }, outputs: { expandChange: "expandChange" } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSRowExpandButtonDirective, [{
        type: Directive,
        args: [{
                selector: 'button[tds-row-expand-button]',
                host: {
                    '[type]': `'button'`,
                    '[class.tds-table-row-expand-icon-expanded]': `!spaceMode && expand === true`,
                    '[class.tds-table-row-expand-icon-collapsed]': `!spaceMode && expand === false`,
                    '[class.bg-transparent]': 'spaceMode',
                    '[class.border-0]': 'spaceMode',
                    '[class.invisible]': 'spaceMode',
                    '(click)': 'onHostClick()',
                }
            }]
    }], function () { return [{ type: i0.ElementRef }]; }, { expand: [{
            type: Input
        }], spaceMode: [{
            type: Input
        }], expandChange: [{
            type: Output
        }] }); })();

class TDSRowIndentDirective {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.indentSize = 0;
        // TODO: move to host after View Engine deprecation
        this.elementRef.nativeElement.classList.add('tds-table-row-indent');
    }
}
TDSRowIndentDirective.ɵfac = function TDSRowIndentDirective_Factory(t) { return new (t || TDSRowIndentDirective)(i0.ɵɵdirectiveInject(i0.ElementRef)); };
TDSRowIndentDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: TDSRowIndentDirective, selectors: [["tds-row-indent"]], hostVars: 2, hostBindings: function TDSRowIndentDirective_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵstyleProp("padding-left", ctx.indentSize, "px");
    } }, inputs: { indentSize: "indentSize" } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSRowIndentDirective, [{
        type: Directive,
        args: [{
                selector: 'tds-row-indent',
                host: {
                    '[style.padding-left.px]': 'indentSize'
                }
            }]
    }], function () { return [{ type: i0.ElementRef }]; }, { indentSize: [{
            type: Input
        }] }); })();

function TDSTableSelectionComponent_tds_checkbox_0_Template(rf, ctx) { if (rf & 1) {
    const _r3 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "tds-checkbox", 2);
    i0.ɵɵlistener("ngModelChange", function TDSTableSelectionComponent_tds_checkbox_0_Template_tds_checkbox_ngModelChange_0_listener($event) { i0.ɵɵrestoreView(_r3); const ctx_r2 = i0.ɵɵnextContext(); return ctx_r2.onCheckedChange($event); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵclassProp("tds-table-selection-select-all-custom", ctx_r0.showRowSelection);
    i0.ɵɵproperty("ngModel", ctx_r0.checked)("disabled", ctx_r0.disabled)("indeterminate", ctx_r0.indeterminate);
} }
function TDSTableSelectionComponent_div_1_div_6_Template(rf, ctx) { if (rf & 1) {
    const _r8 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 9);
    i0.ɵɵlistener("click", function TDSTableSelectionComponent_div_1_div_6_Template_div_click_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r8); const selection_r6 = restoredCtx.$implicit; return selection_r6.onSelect(); });
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const selection_r6 = ctx.$implicit;
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" ", selection_r6.text, " ");
} }
function TDSTableSelectionComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 3)(1, "span", 4);
    i0.ɵɵelement(2, "i", 5);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(3, "tds-dropdown-menu", null, 6)(5, "div", 7);
    i0.ɵɵtemplate(6, TDSTableSelectionComponent_div_1_div_6_Template, 2, 1, "div", 8);
    i0.ɵɵelementEnd()()();
} if (rf & 2) {
    const _r4 = i0.ɵɵreference(4);
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("tdsDropdownMenu", _r4);
    i0.ɵɵadvance(5);
    i0.ɵɵproperty("ngForOf", ctx_r1.listOfSelections);
} }
class TDSTableSelectionComponent {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.listOfSelections = [];
        this.checked = false;
        this.disabled = false;
        this.indeterminate = false;
        this.showCheckbox = false;
        this.showRowSelection = false;
        this.checkedChange = new EventEmitter();
        // TODO: move to host after View Engine deprecation
        this.elementRef.nativeElement.classList.add('tds-table-selection');
    }
    onCheckedChange(checked) {
        this.checked = checked;
        this.checkedChange.emit(checked);
    }
}
TDSTableSelectionComponent.ɵfac = function TDSTableSelectionComponent_Factory(t) { return new (t || TDSTableSelectionComponent)(i0.ɵɵdirectiveInject(i0.ElementRef)); };
TDSTableSelectionComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSTableSelectionComponent, selectors: [["tds-table-selection"]], inputs: { listOfSelections: "listOfSelections", checked: "checked", disabled: "disabled", indeterminate: "indeterminate", showCheckbox: "showCheckbox", showRowSelection: "showRowSelection" }, outputs: { checkedChange: "checkedChange" }, decls: 2, vars: 2, consts: [[3, "tds-table-selection-select-all-custom", "ngModel", "disabled", "indeterminate", "ngModelChange", 4, "ngIf"], ["class", "tds-table-selection-extra inline", 4, "ngIf"], [3, "ngModel", "disabled", "indeterminate", "ngModelChange"], [1, "tds-table-selection-extra", "inline"], ["tds-dropdown", "", "placement", "bottomLeft", 1, "tds-table-selection-down", 3, "tdsDropdownMenu"], [1, "tdsi-arrow-down-fill"], ["selectionMenu", "tdsDropdownMenu"], [1, "w-full"], ["tds-dropdown-item", "", 3, "click", 4, "ngFor", "ngForOf"], ["tds-dropdown-item", "", 3, "click"]], template: function TDSTableSelectionComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtemplate(0, TDSTableSelectionComponent_tds_checkbox_0_Template, 1, 5, "tds-checkbox", 0);
        i0.ɵɵtemplate(1, TDSTableSelectionComponent_div_1_Template, 7, 2, "div", 1);
    } if (rf & 2) {
        i0.ɵɵproperty("ngIf", ctx.showCheckbox);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx.showRowSelection);
    } }, directives: [i1$1.NgIf, i7.TDSCheckbox, i6.NgControlStatus, i6.NgModel, i4.TDSDropDownDirective, i4.TDSDropdownMenuComponent, i1$1.NgForOf, i4.TDSDropDownItemDirective], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSTableSelectionComponent, [{
        type: Component,
        args: [{
                selector: 'tds-table-selection',
                preserveWhitespaces: false,
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                template: `
  <tds-checkbox 
  *ngIf="showCheckbox"
  [class.tds-table-selection-select-all-custom]="showRowSelection"
  [ngModel]="checked"
  [disabled]="disabled"
  [indeterminate]="indeterminate"
  (ngModelChange)="onCheckedChange($event)"
  >
  </tds-checkbox>
   
    <div class="tds-table-selection-extra inline" *ngIf="showRowSelection">
      <span tds-dropdown class="tds-table-selection-down" placement="bottomLeft" [tdsDropdownMenu]="selectionMenu">
          <i class="tdsi-arrow-down-fill"></i>
      </span>
      <tds-dropdown-menu #selectionMenu="tdsDropdownMenu">
        <div class="w-full" >
            <div  tds-dropdown-item *ngFor="let selection of listOfSelections" (click)="selection.onSelect()">
            {{ selection.text }}
            </div>            
        </div>
      </tds-dropdown-menu>    
    </div>
  `
            }]
    }], function () { return [{ type: i0.ElementRef }]; }, { listOfSelections: [{
            type: Input
        }], checked: [{
            type: Input
        }], disabled: [{
            type: Input
        }], indeterminate: [{
            type: Input
        }], showCheckbox: [{
            type: Input
        }], showRowSelection: [{
            type: Input
        }], checkedChange: [{
            type: Output
        }] }); })();

function TDSTableSortersComponent_ng_template_1_Template(rf, ctx) { }
function TDSTableSortersComponent_span_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 5);
    i0.ɵɵelement(1, "i", 6);
    i0.ɵɵelementEnd();
} }
function TDSTableSortersComponent_span_4_i_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "i", 9);
} }
function TDSTableSortersComponent_span_4_i_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "i", 10);
} }
function TDSTableSortersComponent_span_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 5);
    i0.ɵɵtemplate(1, TDSTableSortersComponent_span_4_i_1_Template, 1, 0, "i", 7);
    i0.ɵɵtemplate(2, TDSTableSortersComponent_span_4_i_2_Template, 1, 0, "i", 8);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r2.sortOrder === "ascend");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r2.sortOrder === "descend");
} }
class TDSTableSortersComponent {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this._sortDirections = ['ascend', 'descend', null];
        this.sortOrder = null;
        this.contentTemplate = null;
        this.isUp = false;
        this.isDown = false;
        // TODO: move to host after View Engine deprecation
        this.elementRef.nativeElement.classList.add('tds-table-column-sorters');
    }
    ngOnChanges(changes) {
        const { _sortDirections } = changes;
        if (_sortDirections) {
            this.isUp = this._sortDirections.indexOf('ascend') !== -1;
            this.isDown = this._sortDirections.indexOf('descend') !== -1;
        }
    }
}
TDSTableSortersComponent.ɵfac = function TDSTableSortersComponent_Factory(t) { return new (t || TDSTableSortersComponent)(i0.ɵɵdirectiveInject(i0.ElementRef)); };
TDSTableSortersComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSTableSortersComponent, selectors: [["tds-table-sorters"]], hostAttrs: [1, "w-full", "flex", "items-center"], inputs: { _sortDirections: "_sortDirections", sortOrder: "sortOrder", contentTemplate: "contentTemplate" }, features: [i0.ɵɵNgOnChangesFeature], decls: 5, vars: 3, consts: [[1, "tds-table-column-title"], [3, "ngTemplateOutlet"], [1, "tds-table-column-sorter", "text-base", "ml-2"], ["class", "tds-table-column-sorter-inner flex flex-col p-0.5", 4, "ngIf"], ["class", "tds-table-column-sorter-inner flex flex-col  p-0.5", 4, "ngIf"], [1, "tds-table-column-sorter-inner", "flex", "flex-col", "p-0.5"], [1, "tds-table-column-sorter", "tdsi-sort-up-down-fill", "text-neutral-1-500", "active", "text-base", "leading-4", "hidden", "group-hover:inline-block"], ["class", "tds-table-column-sorter-up tdsi-sort-arrow-up-fill text-primary-1 active text-base leading-4", 4, "ngIf"], ["class", "tds-table-column-sorter-down tdsi-sort-arrow-down-fill text-primary-1 active text-base leading-4", 4, "ngIf"], [1, "tds-table-column-sorter-up", "tdsi-sort-arrow-up-fill", "text-primary-1", "active", "text-base", "leading-4"], [1, "tds-table-column-sorter-down", "tdsi-sort-arrow-down-fill", "text-primary-1", "active", "text-base", "leading-4"]], template: function TDSTableSortersComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 0);
        i0.ɵɵtemplate(1, TDSTableSortersComponent_ng_template_1_Template, 0, 0, "ng-template", 1);
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(2, "span", 2);
        i0.ɵɵtemplate(3, TDSTableSortersComponent_span_3_Template, 2, 0, "span", 3);
        i0.ɵɵtemplate(4, TDSTableSortersComponent_span_4_Template, 3, 2, "span", 4);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngTemplateOutlet", ctx.contentTemplate);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.sortOrder !== "ascend" && ctx.sortOrder !== "descend");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx.sortOrder === "ascend" || ctx.sortOrder === "descend");
    } }, directives: [i1$1.NgTemplateOutlet, i1$1.NgIf], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSTableSortersComponent, [{
        type: Component,
        args: [{
                selector: 'tds-table-sorters',
                preserveWhitespaces: false,
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                template: `
    <span class="tds-table-column-title">   
      <ng-template [ngTemplateOutlet]="contentTemplate"></ng-template>
    </span>
    <span class="tds-table-column-sorter  text-base ml-2">
      <span class="tds-table-column-sorter-inner flex flex-col p-0.5" *ngIf="sortOrder !== 'ascend' && sortOrder !== 'descend'">    
        <i  class="tds-table-column-sorter  tdsi-sort-up-down-fill text-neutral-1-500 active text-base leading-4 hidden group-hover:inline-block"
        ></i>
      </span>
      <span class="tds-table-column-sorter-inner flex flex-col  p-0.5" *ngIf="sortOrder === 'ascend' || sortOrder === 'descend'">
        <i         
          *ngIf="sortOrder === 'ascend'"
          class="tds-table-column-sorter-up tdsi-sort-arrow-up-fill text-primary-1 active text-base leading-4"
        ></i>
        <i         
          *ngIf="sortOrder === 'descend'"
          class="tds-table-column-sorter-down tdsi-sort-arrow-down-fill text-primary-1 active text-base leading-4"></i>
      </span>
    </span>
  `,
                host: {
                    class: "w-full flex  items-center "
                }
            }]
    }], function () { return [{ type: i0.ElementRef }]; }, { _sortDirections: [{
            type: Input
        }], sortOrder: [{
            type: Input
        }], contentTemplate: [{
            type: Input
        }] }); })();

class TDSCellFixedDirective {
    constructor(renderer, elementRef) {
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.tdsRight = false;
        this.tdsLeft = false;
        this.colspan = null;
        this.colSpan = null;
        this.changes$ = new Subject();
        this.isAutoLeft = false;
        this.isAutoRight = false;
        this.isFixedLeft = false;
        this.isFixedRight = false;
        this.isFixed = false;
    }
    setAutoLeftWidth(autoLeft) {
        this.renderer.setStyle(this.elementRef.nativeElement, 'left', autoLeft);
    }
    setAutoRightWidth(autoRight) {
        this.renderer.setStyle(this.elementRef.nativeElement, 'right', autoRight);
    }
    setIsFirstRight(isFirstRight) {
        this.setFixClass(isFirstRight, 'tds-table-cell-fix-right-first');
    }
    setIsLastLeft(isLastLeft) {
        this.setFixClass(isLastLeft, 'tds-table-cell-fix-left-last');
    }
    setFixClass(flag, className) {
        // the setFixClass function may call many times, so remove it first.
        this.renderer.removeClass(this.elementRef.nativeElement, className);
        if (flag) {
            this.renderer.addClass(this.elementRef.nativeElement, className);
        }
    }
    ngOnChanges(changes) {
        const { colspan, colSpan, } = changes;
        this.setIsFirstRight(false);
        this.setIsLastLeft(false);
        this.isAutoLeft = this.tdsLeft === '' || this.tdsLeft === true;
        this.isAutoRight = this.tdsRight === '' || this.tdsRight === true;
        this.isFixedLeft = this.tdsLeft !== false;
        this.isFixedRight = this.tdsRight !== false;
        this.isFixed = this.isFixedLeft || this.isFixedRight;
        const validatePx = (value) => {
            if (typeof value === 'string' && value !== '') {
                return value;
            }
            else {
                return null;
            }
        };
        this.setAutoLeftWidth(validatePx(this.tdsLeft));
        this.setAutoRightWidth(validatePx(this.tdsRight));
        if (colspan || colSpan) {
            const col = this.colspan || this.colSpan;
            if (!isNil(col)) {
                this.renderer.setAttribute(this.elementRef.nativeElement, 'colspan', `${col}`);
            }
            else {
                this.renderer.removeAttribute(this.elementRef.nativeElement, 'colspan');
            }
        }
        this.changes$.next();
    }
}
TDSCellFixedDirective.ɵfac = function TDSCellFixedDirective_Factory(t) { return new (t || TDSCellFixedDirective)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef)); };
TDSCellFixedDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: TDSCellFixedDirective, selectors: [["td", "tdsRight", ""], ["th", "tdsRight", ""], ["td", "tdsLeft", ""], ["th", "tdsLeft", ""]], hostVars: 8, hostBindings: function TDSCellFixedDirective_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵstyleProp("position", ctx.isFixed ? "sticky" : null);
        i0.ɵɵclassProp("tds-table-cell-fix-right", ctx.isFixedRight)("tds-table-cell-fix-left", ctx.isFixedLeft)("z-10", ctx.isFixedLeft || ctx.isFixedRight);
    } }, inputs: { tdsRight: "tdsRight", tdsLeft: "tdsLeft", colspan: "colspan", colSpan: "colSpan" }, features: [i0.ɵɵNgOnChangesFeature] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSCellFixedDirective, [{
        type: Directive,
        args: [{
                selector: 'td[tdsRight],th[tdsRight],td[tdsLeft],th[tdsLeft]',
                host: {
                    '[class.tds-table-cell-fix-right]': `isFixedRight`,
                    '[class.tds-table-cell-fix-left]': `isFixedLeft`,
                    '[class.z-10]': `isFixedLeft || isFixedRight `,
                    // '[class.bg-white]': `isFixedLeft || isFixedRight `,    
                    '[style.position]': `isFixed? 'sticky' : null`
                }
            }]
    }], function () { return [{ type: i0.Renderer2 }, { type: i0.ElementRef }]; }, { tdsRight: [{
            type: Input
        }], tdsLeft: [{
            type: Input
        }], colspan: [{
            type: Input
        }], colSpan: [{
            type: Input
        }] }); })();

class TDSTableStyleService {
    constructor() {
        this.theadTemplate$ = new ReplaySubject(1);
        this.hasFixLeft$ = new ReplaySubject(1);
        this.hasFixRight$ = new ReplaySubject(1);
        this.hostWidth$ = new ReplaySubject(1);
        this.columnCount$ = new ReplaySubject(1);
        this.showEmpty$ = new ReplaySubject(1);
        this.noResult$ = new ReplaySubject(1);
        this.listOfThWidthConfigPx$ = new BehaviorSubject([]);
        this.tableWidthConfigPx$ = new BehaviorSubject([]);
        this.manualWidthConfigPx$ = combineLatest([this.tableWidthConfigPx$, this.listOfThWidthConfigPx$]).pipe(map(([widthConfig, listOfWidth]) => (widthConfig.length ? widthConfig : listOfWidth)));
        this.listOfAutoWidthPx$ = new ReplaySubject(1);
        this.listOfListOfThWidthPx$ = merge(
        /** init with manual width **/
        this.manualWidthConfigPx$, combineLatest([this.listOfAutoWidthPx$, this.manualWidthConfigPx$]).pipe(map(([autoWidth, manualWidth]) => {
            /** use autoWidth until column length match **/
            if (autoWidth.length === manualWidth.length) {
                return autoWidth.map((width, index) => {
                    if (width === '0px') {
                        return manualWidth[index] || null;
                    }
                    else {
                        return manualWidth[index] || width;
                    }
                });
            }
            else {
                return manualWidth;
            }
        })));
        this.listOfMeasureColumn$ = new ReplaySubject(1);
        this.listOfListOfThWidth$ = this.listOfAutoWidthPx$.pipe(map(list => list.map(width => parseInt(width, 10))));
        this.enableAutoMeasure$ = new ReplaySubject(1);
    }
    setTheadTemplate(template) {
        this.theadTemplate$.next(template);
    }
    setHasFixLeft(hasFixLeft) {
        this.hasFixLeft$.next(hasFixLeft);
    }
    setHasFixRight(hasFixRight) {
        this.hasFixRight$.next(hasFixRight);
    }
    setTableWidthConfig(widthConfig) {
        this.tableWidthConfigPx$.next(widthConfig);
    }
    setListOfTh(listOfTh) {
        let columnCount = 0;
        listOfTh.forEach(th => {
            columnCount += (th.colspan && +th.colspan) || (th.colSpan && +th.colSpan) || 1;
        });
        const listOfThPx = listOfTh.map(item => item.width);
        this.columnCount$.next(columnCount);
        this.listOfThWidthConfigPx$.next(listOfThPx);
    }
    setListOfMeasureColumn(listOfTh) {
        const listOfKeys = [];
        listOfTh.forEach(th => {
            const length = (th.colspan && +th.colspan) || (th.colSpan && +th.colSpan) || 1;
            for (let i = 0; i < length; i++) {
                listOfKeys.push(`measure_key_${i}`);
            }
        });
        this.listOfMeasureColumn$.next(listOfKeys);
    }
    setListOfAutoWidth(listOfAutoWidth) {
        this.listOfAutoWidthPx$.next(listOfAutoWidth.map(width => `${width}px`));
    }
    setShowEmpty(showEmpty) {
        this.showEmpty$.next(showEmpty);
    }
    setNoResult(noResult) {
        this.noResult$.next(noResult);
    }
    setScroll(scrollX, scrollY) {
        const enableAutoMeasure = !!(scrollX || scrollY);
        if (!enableAutoMeasure) {
            this.setListOfAutoWidth([]);
        }
        this.enableAutoMeasure$.next(enableAutoMeasure);
    }
}
TDSTableStyleService.ɵfac = function TDSTableStyleService_Factory(t) { return new (t || TDSTableStyleService)(); };
TDSTableStyleService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: TDSTableStyleService, factory: TDSTableStyleService.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSTableStyleService, [{
        type: Injectable
    }], function () { return []; }, null); })();

class TDSTableCellDirective {
    constructor(tdsTableStyleService) {
        this.isInsideTable = false;
        this.isInsideTable = !!tdsTableStyleService;
    }
}
TDSTableCellDirective.ɵfac = function TDSTableCellDirective_Factory(t) { return new (t || TDSTableCellDirective)(i0.ɵɵdirectiveInject(TDSTableStyleService, 8)); };
TDSTableCellDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: TDSTableCellDirective, selectors: [["th", 9, "tds-disable-th", 3, "mat-cell", ""], ["td", 9, "tds-disable-td", 3, "mat-cell", ""]], hostVars: 2, hostBindings: function TDSTableCellDirective_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵclassProp("tds-table-cell", ctx.isInsideTable);
    } } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSTableCellDirective, [{
        type: Directive,
        args: [{
                selector: 'th:not(.tds-disable-th):not([mat-cell]), td:not(.tds-disable-td):not([mat-cell])',
                host: {
                    '[class.tds-table-cell]': 'isInsideTable',
                }
            }]
    }], function () { return [{ type: TDSTableStyleService, decorators: [{
                type: Optional
            }] }]; }, null); })();

const _c0$9 = ["checked", ""];
const _c1$8 = function (a0, a1) { return { "tdsi-arrow-right-line": a0, "tdsi-arrow-down-line": a1 }; };
function TDSTdAddOnComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    const _r3 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelement(1, "tds-row-indent", 2);
    i0.ɵɵelementStart(2, "button", 3);
    i0.ɵɵlistener("expandChange", function TDSTdAddOnComponent_ng_container_0_Template_button_expandChange_2_listener($event) { i0.ɵɵrestoreView(_r3); const ctx_r2 = i0.ɵɵnextContext(); return ctx_r2.onExpandChange($event); });
    i0.ɵɵelementStart(3, "span", 4);
    i0.ɵɵelement(4, "i", 5);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("indentSize", ctx_r0.indentSize);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("expand", ctx_r0.expand)("spaceMode", !ctx_r0.showExpand);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction2(4, _c1$8, !ctx_r0.expand, ctx_r0.expand));
} }
function TDSTdAddOnComponent_tds_checkbox_1_Template(rf, ctx) { if (rf & 1) {
    const _r5 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "tds-checkbox", 6);
    i0.ɵɵlistener("ngModelChange", function TDSTdAddOnComponent_tds_checkbox_1_Template_tds_checkbox_ngModelChange_0_listener($event) { i0.ɵɵrestoreView(_r5); const ctx_r4 = i0.ɵɵnextContext(); return ctx_r4.onCheckedChange($event); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵproperty("disabled", ctx_r1.disabled)("ngModel", ctx_r1.checked)("indeterminate", ctx_r1.indeterminate);
} }
const _c2$3 = ["*"];
class TDSTdAddOnComponent {
    constructor() {
        this.checked = false;
        this.disabled = false;
        this.indeterminate = false;
        this.indentSize = 0;
        this.showExpand = false;
        this.showCheckbox = false;
        this.expand = false;
        this.checkedChange = new EventEmitter();
        this.expandChange = new EventEmitter();
        this.isNzShowExpandChanged = false;
        this.isNzShowCheckboxChanged = false;
    }
    onCheckedChange(checked) {
        this.checked = checked;
        this.checkedChange.emit(checked);
    }
    onExpandChange(expand) {
        this.expand = expand;
        this.expandChange.emit(expand);
    }
    ngOnChanges(changes) {
        const isFirstChange = (value) => value && value.firstChange && value.currentValue !== undefined;
        const { expand, checked, showExpand, showCheckbox } = changes;
        if (showExpand) {
            this.isNzShowExpandChanged = true;
        }
        if (showCheckbox) {
            this.isNzShowCheckboxChanged = true;
        }
        if (isFirstChange(expand) && !this.isNzShowExpandChanged) {
            this.showExpand = true;
        }
        if (isFirstChange(checked) && !this.isNzShowCheckboxChanged) {
            this.showCheckbox = true;
        }
    }
}
TDSTdAddOnComponent.ɵfac = function TDSTdAddOnComponent_Factory(t) { return new (t || TDSTdAddOnComponent)(); };
TDSTdAddOnComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSTdAddOnComponent, selectors: [["td", "checked", ""], ["td", "disabled", ""], ["td", "indeterminate", ""], ["td", "indentSize", ""], ["td", "expand", ""], ["td", "showExpand", ""], ["td", "showCheckbox", ""]], hostVars: 4, hostBindings: function TDSTdAddOnComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵclassProp("tds-table-cell-with-append", ctx.showExpand || ctx.indentSize > 0)("tds-table-selection-column", ctx.showCheckbox);
    } }, inputs: { checked: "checked", disabled: "disabled", indeterminate: "indeterminate", indentSize: "indentSize", showExpand: "showExpand", showCheckbox: "showCheckbox", expand: "expand" }, outputs: { checkedChange: "checkedChange", expandChange: "expandChange" }, features: [i0.ɵɵNgOnChangesFeature], attrs: _c0$9, ngContentSelectors: _c2$3, decls: 3, vars: 2, consts: [[4, "ngIf"], [3, "disabled", "ngModel", "indeterminate", "ngModelChange", 4, "ngIf"], [3, "indentSize"], ["tds-row-expand-button", "", 1, "p-2", "text-neutral-1-500", "hover:text-primary-1", 3, "expand", "spaceMode", "expandChange"], [1, "flex", "items-center"], [1, "text-base", "leading-4", 3, "ngClass"], [3, "disabled", "ngModel", "indeterminate", "ngModelChange"]], template: function TDSTdAddOnComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵtemplate(0, TDSTdAddOnComponent_ng_container_0_Template, 5, 7, "ng-container", 0);
        i0.ɵɵtemplate(1, TDSTdAddOnComponent_tds_checkbox_1_Template, 1, 3, "tds-checkbox", 1);
        i0.ɵɵprojection(2);
    } if (rf & 2) {
        i0.ɵɵproperty("ngIf", ctx.showExpand || ctx.indentSize > 0);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx.showCheckbox);
    } }, directives: [i1$1.NgIf, TDSRowIndentDirective, TDSRowExpandButtonDirective, i1$1.NgClass, i7.TDSCheckbox, i6.NgControlStatus, i6.NgModel], encapsulation: 2, changeDetection: 0 });
__decorate([
    InputBoolean()
], TDSTdAddOnComponent.prototype, "showExpand", void 0);
__decorate([
    InputBoolean()
], TDSTdAddOnComponent.prototype, "showCheckbox", void 0);
__decorate([
    InputBoolean()
], TDSTdAddOnComponent.prototype, "expand", void 0);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSTdAddOnComponent, [{
        type: Component,
        args: [{
                selector: 'td[checked], td[disabled], td[indeterminate], td[indentSize], td[expand], td[showExpand], td[showCheckbox]',
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                encapsulation: ViewEncapsulation.None,
                template: `
    <ng-container *ngIf="showExpand || indentSize > 0">
      <tds-row-indent [indentSize]="indentSize"></tds-row-indent>
      <button
        tds-row-expand-button      
        [expand]="expand"
        (expandChange)="onExpandChange($event)"
        [spaceMode]="!showExpand"
        class="p-2 text-neutral-1-500 hover:text-primary-1"
      >
        <span class="flex items-center">
         <i [ngClass]="{'tdsi-arrow-right-line':!expand,'tdsi-arrow-down-line':expand}" class="text-base leading-4"></i>
        </span>
      </button>
    </ng-container>
    <tds-checkbox     
      *ngIf="showCheckbox"
      [disabled]="disabled"
      [ngModel]="checked"
      [indeterminate]="indeterminate"
      (ngModelChange)="onCheckedChange($event)"
    ></tds-checkbox>
    <ng-content></ng-content>
  `,
                host: {
                    '[class.tds-table-cell-with-append]': `showExpand || indentSize > 0`,
                    '[class.tds-table-selection-column]': `showCheckbox`
                }
            }]
    }], null, { checked: [{
            type: Input
        }], disabled: [{
            type: Input
        }], indeterminate: [{
            type: Input
        }], indentSize: [{
            type: Input
        }], showExpand: [{
            type: Input
        }], showCheckbox: [{
            type: Input
        }], expand: [{
            type: Input
        }], checkedChange: [{
            type: Output
        }], expandChange: [{
            type: Output
        }] }); })();

const _c0$8 = ["columnKey", ""];
function TDSThAddOnComponent_tds_table_filter_0_Template(rf, ctx) { if (rf & 1) {
    const _r10 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "tds-table-filter", 5);
    i0.ɵɵlistener("filterChange", function TDSThAddOnComponent_tds_table_filter_0_Template_tds_table_filter_filterChange_0_listener($event) { i0.ɵɵrestoreView(_r10); const ctx_r9 = i0.ɵɵnextContext(); return ctx_r9.onFilterValueChange($event); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    const _r1 = i0.ɵɵreference(2);
    const _r3 = i0.ɵɵreference(4);
    i0.ɵɵproperty("contentTemplate", _r1)("extraTemplate", _r3)("customFilter", ctx_r0.customFilter)("filterMultiple", ctx_r0.filterMultiple)("listOfFilter", ctx_r0.filters);
} }
function TDSThAddOnComponent_ng_template_1_ng_template_0_Template(rf, ctx) { }
function TDSThAddOnComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, TDSThAddOnComponent_ng_template_1_ng_template_0_Template, 0, 0, "ng-template", 6);
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    const _r5 = i0.ɵɵreference(6);
    const _r7 = i0.ɵɵreference(8);
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r2.showSort ? _r5 : _r7);
} }
function TDSThAddOnComponent_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵprojection(0);
    i0.ɵɵprojection(1, 1);
} }
function TDSThAddOnComponent_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "tds-table-sorters", 7);
} if (rf & 2) {
    const ctx_r6 = i0.ɵɵnextContext();
    const _r7 = i0.ɵɵreference(8);
    i0.ɵɵproperty("sortOrder", ctx_r6._sortOrder)("_sortDirections", ctx_r6._sortDirections)("contentTemplate", _r7);
} }
function TDSThAddOnComponent_ng_template_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵprojection(0, 2);
} }
const _c1$7 = [[["", "tds-th-extra", ""]], [["tds-filter-trigger"]], "*"];
const _c2$2 = ["[tds-th-extra]", "tds-filter-trigger", "*"];
class TDSThAddOnComponent {
    constructor(cdr) {
        this.cdr = cdr;
        this.manualClickOrder$ = new Subject();
        this.calcOperatorChange$ = new Subject();
        this.filterValue = null;
        this._sortOrder = null;
        this._sortDirections = ['ascend', 'descend', null];
        this.sortOrderChange$ = new Subject();
        this.destroy$ = new Subject();
        this.isNzShowSortChanged = false;
        this.isNzShowFilterChanged = false;
        this.filterMultiple = true;
        this.sortOrder = null;
        this.sortPriority = false;
        this.sortDirections = ['ascend', 'descend', null];
        this.filters = [];
        this.sortFn = null;
        this.filterFn = null;
        this.showSort = false;
        this.showFilter = false;
        this.customFilter = false;
        this.checkedChange = new EventEmitter();
        this.sortOrderChange = new EventEmitter();
        this.filterChange = new EventEmitter();
    }
    getNextSortDirection(_sortDirections, current) {
        const index = _sortDirections.indexOf(current);
        if (index === _sortDirections.length - 1) {
            return _sortDirections[0];
        }
        else {
            return _sortDirections[index + 1];
        }
    }
    emitNextSortValue() {
        if (this.showSort) {
            const nextOrder = this.getNextSortDirection(this._sortDirections, this._sortOrder);
            this.setSortOrder(nextOrder);
            this.manualClickOrder$.next(this);
        }
    }
    setSortOrder(order) {
        this.sortOrderChange$.next(order);
    }
    clearSortOrder() {
        if (this._sortOrder !== null) {
            this.setSortOrder(null);
        }
    }
    onFilterValueChange(value) {
        this.filterChange.emit(value);
        this.filterValue = value;
        this.updateCalcOperator();
    }
    updateCalcOperator() {
        this.calcOperatorChange$.next();
    }
    ngOnInit() {
        this.sortOrderChange$.pipe(takeUntil(this.destroy$)).subscribe(order => {
            if (this._sortOrder !== order) {
                this._sortOrder = order;
                this.sortOrderChange.emit(order);
            }
            this.updateCalcOperator();
            this.cdr.markForCheck();
        });
    }
    ngOnChanges(changes) {
        const { sortDirections, filters, sortOrder, sortFn, filterFn, sortPriority, filterMultiple, showSort, showFilter } = changes;
        if (sortDirections) {
            if (this.sortDirections && this.sortDirections.length) {
                this._sortDirections = this.sortDirections;
            }
        }
        if (sortOrder) {
            this._sortOrder = this.sortOrder;
            this.setSortOrder(this.sortOrder);
        }
        if (showSort) {
            this.isNzShowSortChanged = true;
        }
        if (showFilter) {
            this.isNzShowFilterChanged = true;
        }
        const isFirstChange = (value) => value && value.firstChange && value.currentValue !== undefined;
        if ((isFirstChange(sortOrder) || isFirstChange(sortFn)) && !this.isNzShowSortChanged) {
            this.showSort = true;
        }
        if (isFirstChange(filters) && !this.isNzShowFilterChanged) {
            this.showFilter = true;
        }
        if ((filters || filterMultiple) && this.showFilter) {
            const listOfValue = this.filters.filter(item => item.byDefault).map(item => item.value);
            this.filterValue = this.filterMultiple ? listOfValue : listOfValue[0] || null;
        }
        if (sortFn || filterFn || sortPriority || filters) {
            this.updateCalcOperator();
        }
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
}
TDSThAddOnComponent.ɵfac = function TDSThAddOnComponent_Factory(t) { return new (t || TDSThAddOnComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
TDSThAddOnComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSThAddOnComponent, selectors: [["th", "columnKey", ""], ["th", "sortFn", ""], ["th", "sortOrder", ""], ["th", "filters", ""], ["th", "showSort", ""], ["th", "showFilter", ""], ["th", "customFilter", ""]], hostAttrs: [1, "cursor-pointer", "hover:bg-neutral-3-100"], hostVars: 4, hostBindings: function TDSThAddOnComponent_HostBindings(rf, ctx) { if (rf & 1) {
        i0.ɵɵlistener("click", function TDSThAddOnComponent_click_HostBindingHandler() { return ctx.emitNextSortValue(); });
    } if (rf & 2) {
        i0.ɵɵclassProp("tds-table-column-has-sorters", ctx.showSort)("tds-table-column-sort", ctx._sortOrder === "descend" || ctx._sortOrder === "ascend");
    } }, inputs: { columnKey: "columnKey", filterMultiple: "filterMultiple", sortOrder: "sortOrder", sortPriority: "sortPriority", sortDirections: "sortDirections", filters: "filters", sortFn: "sortFn", filterFn: "filterFn", showSort: "showSort", showFilter: "showFilter", customFilter: "customFilter" }, outputs: { checkedChange: "checkedChange", sortOrderChange: "sortOrderChange", filterChange: "filterChange" }, features: [i0.ɵɵNgOnChangesFeature], attrs: _c0$8, ngContentSelectors: _c2$2, decls: 9, vars: 2, consts: [[3, "contentTemplate", "extraTemplate", "customFilter", "filterMultiple", "listOfFilter", "filterChange", 4, "ngIf", "ngIfElse"], ["notFilterTemplate", ""], ["extraTemplate", ""], ["sortTemplate", ""], ["contentTemplate", ""], [3, "contentTemplate", "extraTemplate", "customFilter", "filterMultiple", "listOfFilter", "filterChange"], [3, "ngTemplateOutlet"], [3, "sortOrder", "_sortDirections", "contentTemplate"]], template: function TDSThAddOnComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef(_c1$7);
        i0.ɵɵtemplate(0, TDSThAddOnComponent_tds_table_filter_0_Template, 1, 5, "tds-table-filter", 0);
        i0.ɵɵtemplate(1, TDSThAddOnComponent_ng_template_1_Template, 1, 1, "ng-template", null, 1, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtemplate(3, TDSThAddOnComponent_ng_template_3_Template, 2, 0, "ng-template", null, 2, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtemplate(5, TDSThAddOnComponent_ng_template_5_Template, 1, 3, "ng-template", null, 3, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtemplate(7, TDSThAddOnComponent_ng_template_7_Template, 1, 0, "ng-template", null, 4, i0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r1 = i0.ɵɵreference(2);
        i0.ɵɵproperty("ngIf", ctx.showFilter || ctx.customFilter)("ngIfElse", _r1);
    } }, directives: [i1$1.NgIf, TDSTableFilterComponent, i1$1.NgTemplateOutlet, TDSTableSortersComponent], encapsulation: 2, changeDetection: 0 });
__decorate([
    InputBoolean()
], TDSThAddOnComponent.prototype, "showSort", void 0);
__decorate([
    InputBoolean()
], TDSThAddOnComponent.prototype, "showFilter", void 0);
__decorate([
    InputBoolean()
], TDSThAddOnComponent.prototype, "customFilter", void 0);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSThAddOnComponent, [{
        type: Component,
        args: [{
                selector: 'th[columnKey], th[sortFn], th[sortOrder], th[filters], th[showSort], th[showFilter], th[customFilter]',
                preserveWhitespaces: false,
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: `
    <tds-table-filter
      *ngIf="showFilter || customFilter; else notFilterTemplate"
      [contentTemplate]="notFilterTemplate"
      [extraTemplate]="extraTemplate"
      [customFilter]="customFilter"
      [filterMultiple]="filterMultiple"
      [listOfFilter]="filters"
      (filterChange)="onFilterValueChange($event)"
    ></tds-table-filter>
    <ng-template #notFilterTemplate>
      <ng-template [ngTemplateOutlet]="showSort ? sortTemplate : contentTemplate"></ng-template>
    </ng-template>
    <ng-template #extraTemplate>
      <ng-content select="[tds-th-extra]"></ng-content>
      <ng-content select="tds-filter-trigger"></ng-content>
    </ng-template>
    <ng-template #sortTemplate>
      <tds-table-sorters
        [sortOrder]="_sortOrder"
        [_sortDirections]="_sortDirections"
        [contentTemplate]="contentTemplate"
      ></tds-table-sorters>
    </ng-template>
    <ng-template #contentTemplate>
      <ng-content></ng-content>
    </ng-template>
  `,
                host: {
                    '[class.tds-table-column-has-sorters]': 'showSort',
                    '[class.tds-table-column-sort]': `_sortOrder === 'descend' || _sortOrder === 'ascend'`,
                    '(click)': 'emitNextSortValue()',
                    'class': "cursor-pointer hover:bg-neutral-3-100"
                }
            }]
    }], function () { return [{ type: i0.ChangeDetectorRef }]; }, { columnKey: [{
            type: Input
        }], filterMultiple: [{
            type: Input
        }], sortOrder: [{
            type: Input
        }], sortPriority: [{
            type: Input
        }], sortDirections: [{
            type: Input
        }], filters: [{
            type: Input
        }], sortFn: [{
            type: Input
        }], filterFn: [{
            type: Input
        }], showSort: [{
            type: Input
        }], showFilter: [{
            type: Input
        }], customFilter: [{
            type: Input
        }], checkedChange: [{
            type: Output
        }], sortOrderChange: [{
            type: Output
        }], filterChange: [{
            type: Output
        }] }); })();

class TDSThMeasureDirective {
    constructor(renderer, elementRef) {
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.changes$ = new Subject();
        this.width = null;
        this.colspan = null;
        this.colSpan = null;
        this.rowspan = null;
        this.rowSpan = null;
    }
    ngOnChanges(changes) {
        const { width, colspan, rowspan, colSpan, rowSpan } = changes;
        if (colspan || colSpan) {
            const col = this.colspan || this.colSpan;
            if (!isNil(col)) {
                this.renderer.setAttribute(this.elementRef.nativeElement, 'colspan', `${col}`);
            }
            else {
                this.renderer.removeAttribute(this.elementRef.nativeElement, 'colspan');
            }
        }
        if (rowspan || rowSpan) {
            const row = this.rowspan || this.rowSpan;
            if (!isNil(row)) {
                this.renderer.setAttribute(this.elementRef.nativeElement, 'rowspan', `${row}`);
            }
            else {
                this.renderer.removeAttribute(this.elementRef.nativeElement, 'rowspan');
            }
        }
        if (width || colspan) {
            this.changes$.next();
        }
    }
}
TDSThMeasureDirective.ɵfac = function TDSThMeasureDirective_Factory(t) { return new (t || TDSThMeasureDirective)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef)); };
TDSThMeasureDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: TDSThMeasureDirective, selectors: [["th"]], hostAttrs: [1, "text-body-2", "font-semibold", "group"], inputs: { width: "width", colspan: "colspan", colSpan: "colSpan", rowspan: "rowspan", rowSpan: "rowSpan" }, features: [i0.ɵɵNgOnChangesFeature] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSThMeasureDirective, [{
        type: Directive,
        args: [{
                selector: 'th',
                host: {
                    class: "text-body-2 font-semibold group",
                }
            }]
    }], function () { return [{ type: i0.Renderer2 }, { type: i0.ElementRef }]; }, { width: [{
            type: Input
        }], colspan: [{
            type: Input
        }], colSpan: [{
            type: Input
        }], rowspan: [{
            type: Input
        }], rowSpan: [{
            type: Input
        }] }); })();

const _c0$7 = ["selections", ""];
const _c1$6 = ["*"];
class TDSThSelectionComponent {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.selections = [];
        this.checked = false;
        this.disabled = false;
        this.indeterminate = false;
        this.showCheckbox = false;
        this.showRowSelection = false;
        this.checkedChange = new EventEmitter();
        this.isNzShowExpandChanged = false;
        this.isNzShowCheckboxChanged = false;
        // TODO: move to host after View Engine deprecation
        this.elementRef.nativeElement.classList.add('tds-table-selection-column');
    }
    onCheckedChange(checked) {
        this.checked = checked;
        this.checkedChange.emit(checked);
    }
    ngOnChanges(changes) {
        const isFirstChange = (value) => value && value.firstChange && value.currentValue !== undefined;
        const { checked, selections, showExpand, showCheckbox } = changes;
        if (showExpand) {
            this.isNzShowExpandChanged = true;
        }
        if (showCheckbox) {
            this.isNzShowCheckboxChanged = true;
        }
        if (isFirstChange(selections) && !this.isNzShowExpandChanged) {
            this.showRowSelection = true;
        }
        if (isFirstChange(checked) && !this.isNzShowCheckboxChanged) {
            this.showCheckbox = true;
        }
    }
}
TDSThSelectionComponent.ɵfac = function TDSThSelectionComponent_Factory(t) { return new (t || TDSThSelectionComponent)(i0.ɵɵdirectiveInject(i0.ElementRef)); };
TDSThSelectionComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSThSelectionComponent, selectors: [["th", "selections", ""], ["th", "checked", ""], ["th", "showCheckbox", ""], ["th", "showRowSelection", ""]], inputs: { selections: "selections", checked: "checked", disabled: "disabled", indeterminate: "indeterminate", showCheckbox: "showCheckbox", showRowSelection: "showRowSelection" }, outputs: { checkedChange: "checkedChange" }, features: [i0.ɵɵNgOnChangesFeature], attrs: _c0$7, ngContentSelectors: _c1$6, decls: 2, vars: 6, consts: [[3, "checked", "disabled", "indeterminate", "listOfSelections", "showCheckbox", "showRowSelection", "checkedChange"]], template: function TDSThSelectionComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵelementStart(0, "tds-table-selection", 0);
        i0.ɵɵlistener("checkedChange", function TDSThSelectionComponent_Template_tds_table_selection_checkedChange_0_listener($event) { return ctx.onCheckedChange($event); });
        i0.ɵɵelementEnd();
        i0.ɵɵprojection(1);
    } if (rf & 2) {
        i0.ɵɵproperty("checked", ctx.checked)("disabled", ctx.disabled)("indeterminate", ctx.indeterminate)("listOfSelections", ctx.selections)("showCheckbox", ctx.showCheckbox)("showRowSelection", ctx.showRowSelection);
    } }, directives: [TDSTableSelectionComponent], encapsulation: 2, changeDetection: 0 });
__decorate([
    InputBoolean()
], TDSThSelectionComponent.prototype, "showCheckbox", void 0);
__decorate([
    InputBoolean()
], TDSThSelectionComponent.prototype, "showRowSelection", void 0);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSThSelectionComponent, [{
        type: Component,
        args: [{
                selector: 'th[selections],th[checked],th[showCheckbox],th[showRowSelection]',
                preserveWhitespaces: false,
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: `
    <tds-table-selection
      [checked]="checked"
      [disabled]="disabled"
      [indeterminate]="indeterminate"
      [listOfSelections]="selections"
      [showCheckbox]="showCheckbox"
      [showRowSelection]="showRowSelection"
      (checkedChange)="onCheckedChange($event)"
    ></tds-table-selection>
    <ng-content></ng-content>
  `,
            }]
    }], function () { return [{ type: i0.ElementRef }]; }, { selections: [{
            type: Input
        }], checked: [{
            type: Input
        }], disabled: [{
            type: Input
        }], indeterminate: [{
            type: Input
        }], showCheckbox: [{
            type: Input
        }], showRowSelection: [{
            type: Input
        }], checkedChange: [{
            type: Output
        }] }); })();

class TDSCellAlignDirective {
    constructor() {
        this.align = null;
    }
}
TDSCellAlignDirective.ɵfac = function TDSCellAlignDirective_Factory(t) { return new (t || TDSCellAlignDirective)(); };
TDSCellAlignDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: TDSCellAlignDirective, selectors: [["th", "align", ""], ["td", "align", ""]], hostVars: 2, hostBindings: function TDSCellAlignDirective_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵstyleProp("text-align", ctx.align);
    } }, inputs: { align: "align" } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSCellAlignDirective, [{
        type: Directive,
        args: [{
                selector: 'th[align],td[align]',
                host: {
                    '[style.text-align]': 'align'
                }
            }]
    }], null, { align: [{
            type: Input
        }] }); })();

class TDSCellEllipsisDirective {
    constructor() {
        this.ellipsis = true;
    }
}
TDSCellEllipsisDirective.ɵfac = function TDSCellEllipsisDirective_Factory(t) { return new (t || TDSCellEllipsisDirective)(); };
TDSCellEllipsisDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: TDSCellEllipsisDirective, selectors: [["th", "ellipsis", ""], ["td", "ellipsis", ""]], hostVars: 2, hostBindings: function TDSCellEllipsisDirective_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵclassProp("tds-table-cell-ellipsis", ctx.ellipsis);
    } }, inputs: { ellipsis: "ellipsis" } });
__decorate([
    InputBoolean()
], TDSCellEllipsisDirective.prototype, "ellipsis", void 0);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSCellEllipsisDirective, [{
        type: Directive,
        args: [{
                selector: 'th[ellipsis],td[ellipsis]',
                host: {
                    '[class.tds-table-cell-ellipsis]': 'ellipsis'
                }
            }]
    }], null, { ellipsis: [{
            type: Input
        }] }); })();

class TDSCellBreakWordDirective {
    constructor() {
        this.breakWord = true;
    }
}
TDSCellBreakWordDirective.ɵfac = function TDSCellBreakWordDirective_Factory(t) { return new (t || TDSCellBreakWordDirective)(); };
TDSCellBreakWordDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: TDSCellBreakWordDirective, selectors: [["th", "breakWord", ""], ["td", "breakWord", ""]], hostVars: 2, hostBindings: function TDSCellBreakWordDirective_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵstyleProp("word-break", ctx.breakWord ? "break-all" : "");
    } }, inputs: { breakWord: "breakWord" } });
__decorate([
    InputBoolean()
], TDSCellBreakWordDirective.prototype, "breakWord", void 0);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSCellBreakWordDirective, [{
        type: Directive,
        args: [{
                selector: 'th[breakWord],td[breakWord]',
                host: {
                    '[style.word-break]': `breakWord ? 'break-all' : ''`
                }
            }]
    }], null, { breakWord: [{
            type: Input
        }] }); })();

const _c0$6 = ["tds-table-content", ""];
function TDSTableContentComponent_col_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "col");
} if (rf & 2) {
    const width_r3 = ctx.$implicit;
    i0.ɵɵstyleProp("width", width_r3)("min-width", width_r3);
} }
function TDSTableContentComponent_thead_1_ng_template_1_Template(rf, ctx) { }
function TDSTableContentComponent_thead_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "thead", 3);
    i0.ɵɵtemplate(1, TDSTableContentComponent_thead_1_ng_template_1_Template, 0, 0, "ng-template", 2);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r1.theadTemplate);
} }
function TDSTableContentComponent_ng_template_2_Template(rf, ctx) { }
const _c1$5 = ["*"];
class TDSTableContentComponent {
    constructor() {
        this.tableLayout = 'auto';
        this.theadTemplate = null;
        this.contentTemplate = null;
        this.listOfColWidth = [];
        this.scrollX = null;
    }
}
TDSTableContentComponent.ɵfac = function TDSTableContentComponent_Factory(t) { return new (t || TDSTableContentComponent)(); };
TDSTableContentComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSTableContentComponent, selectors: [["table", "tds-table-content", ""]], hostAttrs: [1, "w-full"], hostVars: 8, hostBindings: function TDSTableContentComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵstyleProp("table-layout", ctx.tableLayout)("width", ctx.scrollX)("min-width", ctx.scrollX ? "100%" : null);
        i0.ɵɵclassProp("tds-table-fixed", ctx.scrollX);
    } }, inputs: { tableLayout: "tableLayout", theadTemplate: "theadTemplate", contentTemplate: "contentTemplate", listOfColWidth: "listOfColWidth", scrollX: "scrollX" }, attrs: _c0$6, ngContentSelectors: _c1$5, decls: 4, vars: 3, consts: [[3, "width", "minWidth", 4, "ngFor", "ngForOf"], ["class", "tds-table-thead text-neutral-1-900 text-body-2 font-semibold", 4, "ngIf"], [3, "ngTemplateOutlet"], [1, "tds-table-thead", "text-neutral-1-900", "text-body-2", "font-semibold"]], template: function TDSTableContentComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵtemplate(0, TDSTableContentComponent_col_0_Template, 1, 4, "col", 0);
        i0.ɵɵtemplate(1, TDSTableContentComponent_thead_1_Template, 2, 1, "thead", 1);
        i0.ɵɵtemplate(2, TDSTableContentComponent_ng_template_2_Template, 0, 0, "ng-template", 2);
        i0.ɵɵprojection(3);
    } if (rf & 2) {
        i0.ɵɵproperty("ngForOf", ctx.listOfColWidth);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx.theadTemplate);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngTemplateOutlet", ctx.contentTemplate);
    } }, directives: [i1$1.NgForOf, i1$1.NgIf, i1$1.NgTemplateOutlet], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSTableContentComponent, [{
        type: Component,
        args: [{
                selector: 'table[tds-table-content]',
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                template: `
    <col  [style.width]="width" [style.minWidth]="width" *ngFor="let width of listOfColWidth" />
    <thead class="tds-table-thead text-neutral-1-900 text-body-2 font-semibold" *ngIf="theadTemplate">
      <ng-template [ngTemplateOutlet]="theadTemplate"></ng-template>
    </thead>
    <ng-template [ngTemplateOutlet]="contentTemplate"></ng-template>
    <ng-content></ng-content>
  `,
                host: {
                    '[style.table-layout]': 'tableLayout',
                    '[class.tds-table-fixed]': 'scrollX',
                    '[style.width]': 'scrollX',
                    '[style.min-width]': `scrollX ? '100%': null`,
                    'class': "w-full"
                }
            }]
    }], null, { tableLayout: [{
            type: Input
        }], theadTemplate: [{
            type: Input
        }], contentTemplate: [{
            type: Input
        }], listOfColWidth: [{
            type: Input
        }], scrollX: [{
            type: Input
        }] }); })();

const _c0$5 = ["tdElement"];
const _c1$4 = ["tds-table-fixed-row", ""];
function TDSTableFixedRowComponent_div_2_ng_template_2_Template(rf, ctx) { }
function TDSTableFixedRowComponent_div_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 4);
    i0.ɵɵpipe(1, "async");
    i0.ɵɵtemplate(2, TDSTableFixedRowComponent_div_2_ng_template_2_Template, 0, 0, "ng-template", 5);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    const _r2 = i0.ɵɵreference(5);
    i0.ɵɵstyleProp("width", i0.ɵɵpipeBind1(1, 3, ctx_r1.hostWidth$), "px");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngTemplateOutlet", _r2);
} }
function TDSTableFixedRowComponent_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵprojection(0);
} }
const _c2$1 = ["*"];
class TDSTableFixedRowComponent {
    constructor(tdsTableStyleService, renderer, cdr) {
        this.tdsTableStyleService = tdsTableStyleService;
        this.renderer = renderer;
        this.cdr = cdr;
        this.hostWidth$ = new BehaviorSubject(null);
        this.enableAutoMeasure$ = new BehaviorSubject(false);
        this.destroy$ = new Subject();
    }
    ngOnInit() {
        if (this.tdsTableStyleService) {
            const { enableAutoMeasure$, hostWidth$ } = this.tdsTableStyleService;
            enableAutoMeasure$.pipe(takeUntil(this.destroy$)).subscribe(this.enableAutoMeasure$);
            hostWidth$.subscribe({
                next: (res) => {
                    this.hostWidth$.next(res);
                    this.cdr.markForCheck();
                }
            });
        }
    }
    ngAfterViewInit() {
        this.tdsTableStyleService.columnCount$.pipe(takeUntil(this.destroy$)).subscribe(count => {
            this.renderer.setAttribute(this.tdElement.nativeElement, 'colspan', `${count}`);
        });
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
}
TDSTableFixedRowComponent.ɵfac = function TDSTableFixedRowComponent_Factory(t) { return new (t || TDSTableFixedRowComponent)(i0.ɵɵdirectiveInject(TDSTableStyleService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
TDSTableFixedRowComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSTableFixedRowComponent, selectors: [["tr", "tds-table-fixed-row", ""], ["tr", "expand", ""]], viewQuery: function TDSTableFixedRowComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0$5, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tdElement = _t.first);
    } }, attrs: _c1$4, ngContentSelectors: _c2$1, decls: 6, vars: 4, consts: [[1, "tds-disable-td", "tds-table-cell", "border-b-0"], ["tdElement", ""], ["class", "tds-table-expanded-row-fixed p-0", "style", "position: sticky; left: 0px; overflow: hidden;", 3, "width", 4, "ngIf", "ngIfElse"], ["contentTemplate", ""], [1, "tds-table-expanded-row-fixed", "p-0", 2, "position", "sticky", "left", "0px", "overflow", "hidden"], [3, "ngTemplateOutlet"]], template: function TDSTableFixedRowComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵelementStart(0, "td", 0, 1);
        i0.ɵɵtemplate(2, TDSTableFixedRowComponent_div_2_Template, 3, 5, "div", 2);
        i0.ɵɵpipe(3, "async");
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(4, TDSTableFixedRowComponent_ng_template_4_Template, 1, 0, "ng-template", null, 3, i0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r2 = i0.ɵɵreference(5);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", i0.ɵɵpipeBind1(3, 2, ctx.enableAutoMeasure$))("ngIfElse", _r2);
    } }, directives: [i1$1.NgIf, i1$1.NgTemplateOutlet], pipes: [i1$1.AsyncPipe], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSTableFixedRowComponent, [{
        type: Component,
        args: [{
                selector: 'tr[tds-table-fixed-row], tr[expand]',
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                template: `
    <td class="tds-disable-td tds-table-cell border-b-0" #tdElement>
      <div
        class="tds-table-expanded-row-fixed p-0"
        *ngIf="enableAutoMeasure$ | async; else contentTemplate"
        style="position: sticky; left: 0px; overflow: hidden;"
        [style.width.px]="hostWidth$ | async"
      >
        <ng-template [ngTemplateOutlet]="contentTemplate"></ng-template>
      </div>
    </td>
    <ng-template #contentTemplate><ng-content></ng-content></ng-template>
  `
            }]
    }], function () { return [{ type: TDSTableStyleService }, { type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }]; }, { tdElement: [{
            type: ViewChild,
            args: ['tdElement']
        }] }); })();

class TDSTableInnerDefaultComponent {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.tableLayout = 'auto';
        this.listOfColWidth = [];
        this.theadTemplate = null;
        this.contentTemplate = null;
        // TODO: move to host after View Engine deprecation
        this.elementRef.nativeElement.classList.add('tds-table-container');
    }
}
TDSTableInnerDefaultComponent.ɵfac = function TDSTableInnerDefaultComponent_Factory(t) { return new (t || TDSTableInnerDefaultComponent)(i0.ɵɵdirectiveInject(i0.ElementRef)); };
TDSTableInnerDefaultComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSTableInnerDefaultComponent, selectors: [["tds-table-inner-default"]], inputs: { tableLayout: "tableLayout", listOfColWidth: "listOfColWidth", theadTemplate: "theadTemplate", contentTemplate: "contentTemplate" }, decls: 2, vars: 4, consts: [[1, "tds-table-content"], ["tds-table-content", "", 3, "contentTemplate", "tableLayout", "listOfColWidth", "theadTemplate"]], template: function TDSTableInnerDefaultComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 0);
        i0.ɵɵelement(1, "table", 1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("contentTemplate", ctx.contentTemplate)("tableLayout", ctx.tableLayout)("listOfColWidth", ctx.listOfColWidth)("theadTemplate", ctx.theadTemplate);
    } }, directives: [TDSTableContentComponent], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSTableInnerDefaultComponent, [{
        type: Component,
        args: [{
                selector: 'tds-table-inner-default',
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                template: `
    <div class="tds-table-content">
      <table
        tds-table-content
        [contentTemplate]="contentTemplate"
        [tableLayout]="tableLayout"
        [listOfColWidth]="listOfColWidth"
        [theadTemplate]="theadTemplate"
      ></table>
    </div>
  `
            }]
    }], function () { return [{ type: i0.ElementRef }]; }, { tableLayout: [{
            type: Input
        }], listOfColWidth: [{
            type: Input
        }], theadTemplate: [{
            type: Input
        }], contentTemplate: [{
            type: Input
        }] }); })();

/* eslint-disable @angular-eslint/component-selector */
const _c0$4 = ["tdElement"];
const _c1$3 = ["tds-table-measure-row", ""];
function TDSTrMeasureComponent_td_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "td", 1, 2);
} }
class TDSTrMeasureComponent {
    constructor(tdsResizeObserver, ngZone, elementRef) {
        this.tdsResizeObserver = tdsResizeObserver;
        this.ngZone = ngZone;
        this.elementRef = elementRef;
        this.listOfMeasureColumn = [];
        this.listOfAutoWidth = new EventEmitter();
        this.destroy$ = new Subject();
        // TODO: move to host after View Engine deprecation
        this.elementRef.nativeElement.classList.add('tds-table-measure-now');
    }
    trackByFunc(_, key) {
        return key;
    }
    ngAfterViewInit() {
        this.listOfTdElement.changes
            .pipe(startWith(this.listOfTdElement))
            .pipe(switchMap(list => combineLatest(list.toArray().map((item) => this.tdsResizeObserver.observe(item).pipe(map(([entry]) => {
            const { width } = entry.target.getBoundingClientRect();
            return Math.floor(width);
        }))))), debounceTime(16), takeUntil(this.destroy$))
            .subscribe(data => {
            this.ngZone.run(() => {
                this.listOfAutoWidth.next(data);
            });
        });
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
}
TDSTrMeasureComponent.ɵfac = function TDSTrMeasureComponent_Factory(t) { return new (t || TDSTrMeasureComponent)(i0.ɵɵdirectiveInject(i1$2.TDSResizeObserver), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ElementRef)); };
TDSTrMeasureComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSTrMeasureComponent, selectors: [["tr", "tds-table-measure-row", ""]], viewQuery: function TDSTrMeasureComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0$4, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.listOfTdElement = _t);
    } }, inputs: { listOfMeasureColumn: "listOfMeasureColumn" }, outputs: { listOfAutoWidth: "listOfAutoWidth" }, attrs: _c1$3, decls: 1, vars: 2, consts: [["class", "tds-disable-td", "style", "padding: 0px; border: 0px; height: 0px;", 4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "tds-disable-td", 2, "padding", "0px", "border", "0px", "height", "0px"], ["tdElement", ""]], template: function TDSTrMeasureComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtemplate(0, TDSTrMeasureComponent_td_0_Template, 2, 0, "td", 0);
    } if (rf & 2) {
        i0.ɵɵproperty("ngForOf", ctx.listOfMeasureColumn)("ngForTrackBy", ctx.trackByFunc);
    } }, directives: [i1$1.NgForOf], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSTrMeasureComponent, [{
        type: Component,
        args: [{
                selector: 'tr[tds-table-measure-row]',
                preserveWhitespaces: false,
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                template: `
    <td
      #tdElement
      class="tds-disable-td"
      style="padding: 0px; border: 0px; height: 0px;"
      *ngFor="let th of listOfMeasureColumn; trackBy: trackByFunc"
    ></td>
  `
            }]
    }], function () { return [{ type: i1$2.TDSResizeObserver }, { type: i0.NgZone }, { type: i0.ElementRef }]; }, { listOfMeasureColumn: [{
            type: Input
        }], listOfAutoWidth: [{
            type: Output
        }], listOfTdElement: [{
            type: ViewChildren,
            args: ['tdElement']
        }] }); })();

/* eslint-disable @angular-eslint/component-selector */
function TDSTbodyComponent_ng_container_0_tr_1_Template(rf, ctx) { if (rf & 1) {
    const _r5 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "tr", 3);
    i0.ɵɵlistener("listOfAutoWidth", function TDSTbodyComponent_ng_container_0_tr_1_Template_tr_listOfAutoWidth_0_listener($event) { i0.ɵɵrestoreView(_r5); const ctx_r4 = i0.ɵɵnextContext(2); return ctx_r4.onListOfAutoWidthChange($event); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const listOfMeasureColumn_r2 = i0.ɵɵnextContext().ngIf;
    i0.ɵɵproperty("listOfMeasureColumn", listOfMeasureColumn_r2);
} }
function TDSTbodyComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtemplate(1, TDSTbodyComponent_ng_container_0_tr_1_Template, 1, 1, "tr", 2);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const listOfMeasureColumn_r2 = ctx.ngIf;
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r0.isInsideTable && listOfMeasureColumn_r2.length);
} }
function TDSTbodyComponent_tr_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tr", 4);
    i0.ɵɵelement(1, "tds-embed-empty", 5);
    i0.ɵɵpipe(2, "async");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("specificContent", i0.ɵɵpipeBind1(2, 1, ctx_r1.noResult$));
} }
const _c0$3 = ["*"];
class TDSTbodyComponent {
    constructor(tdsTableStyleService) {
        this.tdsTableStyleService = tdsTableStyleService;
        this.isInsideTable = false;
        this.showEmpty$ = new BehaviorSubject(false);
        this.noResult$ = new BehaviorSubject(undefined);
        this.listOfMeasureColumn$ = new BehaviorSubject([]);
        this.destroy$ = new Subject();
        this.isInsideTable = !!this.tdsTableStyleService;
        if (this.tdsTableStyleService) {
            const { showEmpty$, noResult$, listOfMeasureColumn$ } = this.tdsTableStyleService;
            noResult$.pipe(takeUntil(this.destroy$)).subscribe(this.noResult$);
            listOfMeasureColumn$.pipe(takeUntil(this.destroy$)).subscribe(this.listOfMeasureColumn$);
            showEmpty$.pipe(takeUntil(this.destroy$)).subscribe(this.showEmpty$);
        }
    }
    onListOfAutoWidthChange(listOfAutoWidth) {
        this.tdsTableStyleService.setListOfAutoWidth(listOfAutoWidth);
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
}
TDSTbodyComponent.ɵfac = function TDSTbodyComponent_Factory(t) { return new (t || TDSTbodyComponent)(i0.ɵɵdirectiveInject(TDSTableStyleService, 8)); };
TDSTbodyComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSTbodyComponent, selectors: [["tbody"]], hostVars: 2, hostBindings: function TDSTbodyComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵclassProp("tds-table-tbody", ctx.isInsideTable);
    } }, ngContentSelectors: _c0$3, decls: 5, vars: 6, consts: [[4, "ngIf"], ["class", "tds-table-placeholder", "tds-table-fixed-row", "", 4, "ngIf"], ["tds-table-measure-row", "", 3, "listOfMeasureColumn", "listOfAutoWidth", 4, "ngIf"], ["tds-table-measure-row", "", 3, "listOfMeasureColumn", "listOfAutoWidth"], ["tds-table-fixed-row", "", 1, "tds-table-placeholder"], ["componentName", "table", 3, "specificContent"]], template: function TDSTbodyComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵtemplate(0, TDSTbodyComponent_ng_container_0_Template, 2, 1, "ng-container", 0);
        i0.ɵɵpipe(1, "async");
        i0.ɵɵprojection(2);
        i0.ɵɵtemplate(3, TDSTbodyComponent_tr_3_Template, 3, 3, "tr", 1);
        i0.ɵɵpipe(4, "async");
    } if (rf & 2) {
        i0.ɵɵproperty("ngIf", i0.ɵɵpipeBind1(1, 2, ctx.listOfMeasureColumn$));
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", i0.ɵɵpipeBind1(4, 4, ctx.showEmpty$));
    } }, directives: [i1$1.NgIf, TDSTrMeasureComponent, TDSTableFixedRowComponent, i5$1.TDSEmbedEmptyComponent], pipes: [i1$1.AsyncPipe], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSTbodyComponent, [{
        type: Component,
        args: [{
                selector: 'tbody',
                preserveWhitespaces: false,
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                template: `
    <ng-container *ngIf="listOfMeasureColumn$ | async as listOfMeasureColumn">
      <tr
        tds-table-measure-row
        *ngIf="isInsideTable && listOfMeasureColumn.length"
        [listOfMeasureColumn]="listOfMeasureColumn"
        (listOfAutoWidth)="onListOfAutoWidthChange($event)"
      ></tr>
    </ng-container>
    <ng-content></ng-content>   
    <tr class="tds-table-placeholder" tds-table-fixed-row *ngIf="showEmpty$ | async">
     <tds-embed-empty componentName="table" [specificContent]="(noResult$ | async)!"></tds-embed-empty>
    </tr>
  `,
                host: {
                    '[class.tds-table-tbody]': 'isInsideTable'
                }
            }]
    }], function () { return [{ type: TDSTableStyleService, decorators: [{
                type: Optional
            }] }]; }, null); })();

const _c0$2 = ["tableHeaderElement"];
const _c1$2 = ["tableBodyElement"];
function TDSTableInnerScrollComponent_ng_container_0_div_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 7, 8)(2, "div", 9);
    i0.ɵɵelement(3, "table", 10);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("ngStyle", ctx_r3.bodyStyleMap);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("scrollX", ctx_r3.scrollX)("listOfColWidth", ctx_r3.listOfColWidth)("contentTemplate", ctx_r3.contentTemplate);
} }
function TDSTableInnerScrollComponent_ng_container_0_cdk_virtual_scroll_viewport_5_ng_container_4_ng_template_1_Template(rf, ctx) { }
const _c2 = function (a0, a1) { return { $implicit: a0, index: a1 }; };
function TDSTableInnerScrollComponent_ng_container_0_cdk_virtual_scroll_viewport_5_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtemplate(1, TDSTableInnerScrollComponent_ng_container_0_cdk_virtual_scroll_viewport_5_ng_container_4_ng_template_1_Template, 0, 0, "ng-template", 14);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const item_r8 = ctx.$implicit;
    const i_r9 = ctx.index;
    const ctx_r7 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r7.virtualTemplate)("ngTemplateOutletContext", i0.ɵɵpureFunction2(2, _c2, item_r8, i_r9));
} }
function TDSTableInnerScrollComponent_ng_container_0_cdk_virtual_scroll_viewport_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "cdk-virtual-scroll-viewport", 11, 8)(2, "table", 12)(3, "tbody");
    i0.ɵɵtemplate(4, TDSTableInnerScrollComponent_ng_container_0_cdk_virtual_scroll_viewport_5_ng_container_4_Template, 2, 5, "ng-container", 13);
    i0.ɵɵelementEnd()()();
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext(2);
    i0.ɵɵstyleProp("height", ctx_r4.data.length ? ctx_r4.scrollY : ctx_r4.noDateVirtualHeight);
    i0.ɵɵproperty("itemSize", ctx_r4.virtualItemSize)("maxBufferPx", ctx_r4.virtualMaxBufferPx)("minBufferPx", ctx_r4.virtualMinBufferPx);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("scrollX", ctx_r4.scrollX)("listOfColWidth", ctx_r4.listOfColWidth);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("cdkVirtualForOf", ctx_r4.data)("cdkVirtualForTrackBy", ctx_r4.virtualForTrackBy);
} }
function TDSTableInnerScrollComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "div", 2, 3);
    i0.ɵɵelement(3, "table", 4);
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(4, TDSTableInnerScrollComponent_ng_container_0_div_4_Template, 4, 4, "div", 5);
    i0.ɵɵtemplate(5, TDSTableInnerScrollComponent_ng_container_0_cdk_virtual_scroll_viewport_5_Template, 5, 9, "cdk-virtual-scroll-viewport", 6);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngStyle", ctx_r0.headerStyleMap);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("scrollX", ctx_r0.scrollX)("listOfColWidth", ctx_r0.listOfColWidth)("theadTemplate", ctx_r0.theadTemplate);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", !ctx_r0.virtualTemplate);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r0.virtualTemplate);
} }
function TDSTableInnerScrollComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 15, 8);
    i0.ɵɵelement(2, "table", 16);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵproperty("ngStyle", ctx_r1.bodyStyleMap);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("scrollX", ctx_r1.scrollX)("listOfColWidth", ctx_r1.listOfColWidth)("theadTemplate", ctx_r1.theadTemplate)("contentTemplate", ctx_r1.contentTemplate);
} }
class TDSTableInnerScrollComponent {
    constructor(renderer, ngZone, platform, resizeService, elementRef) {
        this.renderer = renderer;
        this.ngZone = ngZone;
        this.platform = platform;
        this.resizeService = resizeService;
        this.elementRef = elementRef;
        this.data = [];
        this.scrollX = null;
        this.scrollY = null;
        this.contentTemplate = null;
        this.widthConfig = [];
        this.listOfColWidth = [];
        this.theadTemplate = null;
        this.virtualTemplate = null;
        this.virtualItemSize = 0;
        this.virtualMaxBufferPx = 200;
        this.virtualMinBufferPx = 100;
        this.virtualForTrackBy = index => index;
        this.headerStyleMap = {};
        this.bodyStyleMap = {};
        this.verticalScrollBarWidth = 0;
        this.noDateVirtualHeight = '182px';
        this.data$ = new Subject();
        this.scroll$ = new Subject();
        this.destroy$ = new Subject();
        // TODO: move to host after View Engine deprecation
        this.elementRef.nativeElement.classList.add('tds-table-container');
    }
    setScrollPositionClassName(clear = false) {
        const { scrollWidth, scrollLeft, clientWidth } = this.tableBodyElement.nativeElement;
        const leftClassName = 'tds-table-ping-left';
        const rightClassName = 'tds-table-ping-right';
        if ((scrollWidth === clientWidth && scrollWidth !== 0) || clear) {
            this.renderer.removeClass(this.tableMainElement, leftClassName);
            this.renderer.removeClass(this.tableMainElement, rightClassName);
        }
        else if (scrollLeft === 0) {
            this.renderer.removeClass(this.tableMainElement, leftClassName);
            this.renderer.addClass(this.tableMainElement, rightClassName);
        }
        else if (scrollWidth === scrollLeft + clientWidth) {
            this.renderer.removeClass(this.tableMainElement, rightClassName);
            this.renderer.addClass(this.tableMainElement, leftClassName);
        }
        else {
            this.renderer.addClass(this.tableMainElement, leftClassName);
            this.renderer.addClass(this.tableMainElement, rightClassName);
        }
    }
    ngOnChanges(changes) {
        const { scrollX, scrollY, data } = changes;
        if (scrollX || scrollY) {
            const hasVerticalScrollBar = this.verticalScrollBarWidth !== 0;
            this.headerStyleMap = {
                overflowX: 'hidden',
                overflowY: this.scrollY && hasVerticalScrollBar ? 'scroll' : 'hidden'
            };
            this.bodyStyleMap = {
                overflowY: this.scrollY ? 'scroll' : 'hidden',
                overflowX: this.scrollX ? 'auto' : null,
                // overflow: 'auto',
                height: this.scrollY == 'auto' ? '' : this.scrollY,
                maxHeight: this.scrollY == 'auto' ? '' : this.scrollY
            };
            this.scroll$.next();
        }
        if (data) {
            this.data$.next();
        }
    }
    ngAfterViewInit() {
        if (this.platform.isBrowser) {
            this.ngZone.runOutsideAngular(() => {
                const scrollEvent$ = this.scroll$.pipe(startWith(null), delay(0), switchMap(() => fromEvent(this.tableBodyElement.nativeElement, 'scroll').pipe(startWith(true))), takeUntil(this.destroy$));
                const resize$ = this.resizeService.subscribe().pipe(takeUntil(this.destroy$));
                const data$ = this.data$.pipe(takeUntil(this.destroy$));
                const setClassName$ = merge(scrollEvent$, resize$, data$, this.scroll$).pipe(startWith(true), delay(0), takeUntil(this.destroy$));
                setClassName$.subscribe(() => this.setScrollPositionClassName());
                scrollEvent$
                    .pipe(filter(() => !!this.scrollY))
                    .subscribe(() => (this.tableHeaderElement.nativeElement.scrollLeft = this.tableBodyElement.nativeElement.scrollLeft));
            });
        }
    }
    ngOnDestroy() {
        this.setScrollPositionClassName(true);
        this.destroy$.next();
        this.destroy$.complete();
    }
}
TDSTableInnerScrollComponent.ɵfac = function TDSTableInnerScrollComponent_Factory(t) { return new (t || TDSTableInnerScrollComponent)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1$3.Platform), i0.ɵɵdirectiveInject(i2.TDSResizeService), i0.ɵɵdirectiveInject(i0.ElementRef)); };
TDSTableInnerScrollComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSTableInnerScrollComponent, selectors: [["tds-table-inner-scroll"]], viewQuery: function TDSTableInnerScrollComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0$2, 5, ElementRef);
        i0.ɵɵviewQuery(_c1$2, 5, ElementRef);
        i0.ɵɵviewQuery(CdkVirtualScrollViewport, 5, CdkVirtualScrollViewport);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tableHeaderElement = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tableBodyElement = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.cdkVirtualScrollViewport = _t.first);
    } }, inputs: { data: "data", scrollX: "scrollX", scrollY: "scrollY", contentTemplate: "contentTemplate", widthConfig: "widthConfig", listOfColWidth: "listOfColWidth", theadTemplate: "theadTemplate", virtualTemplate: "virtualTemplate", virtualItemSize: "virtualItemSize", virtualMaxBufferPx: "virtualMaxBufferPx", virtualMinBufferPx: "virtualMinBufferPx", tableMainElement: "tableMainElement", virtualForTrackBy: "virtualForTrackBy", verticalScrollBarWidth: "verticalScrollBarWidth" }, features: [i0.ɵɵNgOnChangesFeature], decls: 2, vars: 2, consts: [[4, "ngIf"], ["class", "tds-table-content tds-custom-scroll", 3, "ngStyle", 4, "ngIf"], [1, "tds-table-header", "tds-table-hide-scrollbar", "tds-custom-scroll", 3, "ngStyle"], ["tableHeaderElement", ""], ["tds-table-content", "", "tableLayout", "fixed", 3, "scrollX", "listOfColWidth", "theadTemplate"], ["class", "tds-table-body tds-custom-scroll relative  flex-auto", "cdkScrollable", "", 3, "ngStyle", 4, "ngIf"], ["class", "tds-custom-scroll", 3, "itemSize", "maxBufferPx", "minBufferPx", "height", 4, "ngIf"], ["cdkScrollable", "", 1, "tds-table-body", "tds-custom-scroll", "relative", "flex-auto", 3, "ngStyle"], ["tableBodyElement", ""], [1, "absolute", "inset-0"], ["tds-table-content", "", "tableLayout", "fixed", 3, "scrollX", "listOfColWidth", "contentTemplate"], [1, "tds-custom-scroll", 3, "itemSize", "maxBufferPx", "minBufferPx"], ["tds-table-content", "", "tableLayout", "fixed", 3, "scrollX", "listOfColWidth"], [4, "cdkVirtualFor", "cdkVirtualForOf", "cdkVirtualForTrackBy"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "tds-table-content", "tds-custom-scroll", 3, "ngStyle"], ["tds-table-content", "", "tableLayout", "fixed", 3, "scrollX", "listOfColWidth", "theadTemplate", "contentTemplate"]], template: function TDSTableInnerScrollComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtemplate(0, TDSTableInnerScrollComponent_ng_container_0_Template, 6, 6, "ng-container", 0);
        i0.ɵɵtemplate(1, TDSTableInnerScrollComponent_div_1_Template, 3, 5, "div", 1);
    } if (rf & 2) {
        i0.ɵɵproperty("ngIf", ctx.scrollY);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx.scrollY);
    } }, directives: [i1$1.NgIf, i1$1.NgStyle, TDSTableContentComponent, i5$2.CdkScrollable, i5$2.CdkVirtualScrollViewport, i5$2.CdkFixedSizeVirtualScroll, TDSTbodyComponent, i5$2.CdkVirtualForOf, i1$1.NgTemplateOutlet], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSTableInnerScrollComponent, [{
        type: Component,
        args: [{
                selector: 'tds-table-inner-scroll',
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                template: `
    <ng-container *ngIf="scrollY">
      <div #tableHeaderElement [ngStyle]="headerStyleMap" class="tds-table-header tds-table-hide-scrollbar tds-custom-scroll">
        <table
          tds-table-content
          tableLayout="fixed"
          [scrollX]="scrollX"
          [listOfColWidth]="listOfColWidth"
          [theadTemplate]="theadTemplate"
        ></table>
      </div>
      <div #tableBodyElement *ngIf="!virtualTemplate" class="tds-table-body tds-custom-scroll relative  flex-auto" [ngStyle]="bodyStyleMap" cdkScrollable >
      <div class="absolute inset-0">
      <table
          tds-table-content
          tableLayout="fixed"
          [scrollX]="scrollX"
          [listOfColWidth]="listOfColWidth"
          [contentTemplate]="contentTemplate"
        ></table>
      </div>
        
      </div>
      <cdk-virtual-scroll-viewport
        #tableBodyElement
        *ngIf="virtualTemplate"
        [itemSize]="virtualItemSize"
        [maxBufferPx]="virtualMaxBufferPx"
        [minBufferPx]="virtualMinBufferPx"
        [style.height]="data.length ? scrollY : noDateVirtualHeight"
        class='tds-custom-scroll'
      >
        <table tds-table-content tableLayout="fixed" [scrollX]="scrollX" [listOfColWidth]="listOfColWidth">
          <tbody>
            <ng-container *cdkVirtualFor="let item of data; let i = index; trackBy: virtualForTrackBy">
              <ng-template
                [ngTemplateOutlet]="virtualTemplate"
                [ngTemplateOutletContext]="{ $implicit: item, index: i }"
              ></ng-template>
            </ng-container>
          </tbody>
        </table>
      </cdk-virtual-scroll-viewport>
    </ng-container>
    <div class="tds-table-content tds-custom-scroll" #tableBodyElement *ngIf="!scrollY" [ngStyle]="bodyStyleMap">
      <table
        tds-table-content
        tableLayout="fixed"
        [scrollX]="scrollX"
        [listOfColWidth]="listOfColWidth"
        [theadTemplate]="theadTemplate"
        [contentTemplate]="contentTemplate"
      ></table>
    </div>
  `
            }]
    }], function () { return [{ type: i0.Renderer2 }, { type: i0.NgZone }, { type: i1$3.Platform }, { type: i2.TDSResizeService }, { type: i0.ElementRef }]; }, { data: [{
            type: Input
        }], scrollX: [{
            type: Input
        }], scrollY: [{
            type: Input
        }], contentTemplate: [{
            type: Input
        }], widthConfig: [{
            type: Input
        }], listOfColWidth: [{
            type: Input
        }], theadTemplate: [{
            type: Input
        }], virtualTemplate: [{
            type: Input
        }], virtualItemSize: [{
            type: Input
        }], virtualMaxBufferPx: [{
            type: Input
        }], virtualMinBufferPx: [{
            type: Input
        }], tableMainElement: [{
            type: Input
        }], virtualForTrackBy: [{
            type: Input
        }], tableHeaderElement: [{
            type: ViewChild,
            args: ['tableHeaderElement', { read: ElementRef }]
        }], tableBodyElement: [{
            type: ViewChild,
            args: ['tableBodyElement', { read: ElementRef }]
        }], cdkVirtualScrollViewport: [{
            type: ViewChild,
            args: [CdkVirtualScrollViewport, { read: CdkVirtualScrollViewport }]
        }], verticalScrollBarWidth: [{
            type: Input
        }] }); })();

class TDSTableVirtualScrollDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
    static ngTemplateContextGuard(_dir, _ctx) {
        return true;
    }
}
TDSTableVirtualScrollDirective.ɵfac = function TDSTableVirtualScrollDirective_Factory(t) { return new (t || TDSTableVirtualScrollDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef)); };
TDSTableVirtualScrollDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: TDSTableVirtualScrollDirective, selectors: [["", "tds-virtual-scroll", ""]], exportAs: ["tdsVirtualScroll"] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSTableVirtualScrollDirective, [{
        type: Directive,
        args: [{
                selector: '[tds-virtual-scroll]',
                exportAs: 'tdsVirtualScroll'
            }]
    }], function () { return [{ type: i0.TemplateRef }]; }, null); })();

class TDSTableDataService {
    constructor() {
        this.destroy$ = new Subject();
        this.pageIndex$ = new BehaviorSubject(1);
        this.frontPagination$ = new BehaviorSubject(true);
        this.pageSize$ = new BehaviorSubject(10);
        this.listOfData$ = new BehaviorSubject([]);
        this.pageIndexDistinct$ = this.pageIndex$.pipe(distinctUntilChanged());
        this.pageSizeDistinct$ = this.pageSize$.pipe(distinctUntilChanged());
        this.listOfCalcOperator$ = new BehaviorSubject([]);
        this.queryParams$ = combineLatest([
            this.pageIndexDistinct$,
            this.pageSizeDistinct$,
            this.listOfCalcOperator$
        ]).pipe(debounceTime(0), skip(1), map(([pageIndex, pageSize, listOfCalc]) => ({
            pageIndex,
            pageSize,
            sort: listOfCalc
                .filter(item => item.sortFn)
                .map(item => ({
                key: item.key,
                value: item.sortOrder
            })),
            filter: listOfCalc
                .filter(item => item.filterFn)
                .map(item => ({
                key: item.key,
                value: item.filterValue
            }))
        })));
        this.listOfDataAfterCalc$ = combineLatest([this.listOfData$, this.listOfCalcOperator$]).pipe(map(([listOfData, listOfCalcOperator]) => {
            let listOfDataAfterCalc = [...listOfData];
            const listOfFilterOperator = listOfCalcOperator.filter(item => {
                const { filterValue, filterFn } = item;
                const isReset = filterValue === null ||
                    filterValue === undefined ||
                    (Array.isArray(filterValue) && filterValue.length === 0);
                return !isReset && typeof filterFn === 'function';
            });
            for (const item of listOfFilterOperator) {
                const { filterFn, filterValue } = item;
                listOfDataAfterCalc = listOfDataAfterCalc.filter(data => filterFn(filterValue, data));
            }
            const listOfSortOperator = listOfCalcOperator
                .filter(item => item.sortOrder !== null && typeof item.sortFn === 'function')
                .sort((a, b) => +b.sortPriority - +a.sortPriority);
            if (listOfCalcOperator.length) {
                listOfDataAfterCalc.sort((record1, record2) => {
                    for (const item of listOfSortOperator) {
                        const { sortFn, sortOrder } = item;
                        if (sortFn && sortOrder) {
                            const compareResult = sortFn(record1, record2, sortOrder);
                            if (compareResult !== 0) {
                                return sortOrder === 'ascend' ? compareResult : -compareResult;
                            }
                        }
                    }
                    return 0;
                });
            }
            return listOfDataAfterCalc;
        }));
        this.listOfFrontEndCurrentPageData$ = combineLatest([
            this.pageIndexDistinct$,
            this.pageSizeDistinct$,
            this.listOfDataAfterCalc$
        ]).pipe(takeUntil(this.destroy$), filter(value => {
            const [pageIndex, pageSize, listOfData] = value;
            const maxPageIndex = Math.ceil(listOfData.length / pageSize) || 1;
            return pageIndex <= maxPageIndex;
        }), map(([pageIndex, pageSize, listOfData]) => listOfData.slice((pageIndex - 1) * pageSize, pageIndex * pageSize)));
        this.listOfCurrentPageData$ = this.frontPagination$.pipe(switchMap(pagination => (pagination ? this.listOfFrontEndCurrentPageData$ : this.listOfDataAfterCalc$)));
        this.total$ = this.frontPagination$.pipe(switchMap(pagination => (pagination ? this.listOfDataAfterCalc$ : this.listOfData$)), map(list => list.length), distinctUntilChanged());
    }
    updatePageSize(size) {
        this.pageSize$.next(size);
    }
    updateFrontPagination(pagination) {
        this.frontPagination$.next(pagination);
    }
    updatePageIndex(index) {
        this.pageIndex$.next(index);
    }
    updateListOfData(list) {
        this.listOfData$.next(list);
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
}
TDSTableDataService.ɵfac = function TDSTableDataService_Factory(t) { return new (t || TDSTableDataService)(); };
TDSTableDataService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: TDSTableDataService, factory: TDSTableDataService.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSTableDataService, [{
        type: Injectable
    }], function () { return []; }, null); })();

function TDSTableTitleFooterComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r0.title);
} }
function TDSTableTitleFooterComponent_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r1.footer);
} }
class TDSTableTitleFooterComponent {
    constructor() {
        this.title = null;
        this.footer = null;
    }
}
TDSTableTitleFooterComponent.ɵfac = function TDSTableTitleFooterComponent_Factory(t) { return new (t || TDSTableTitleFooterComponent)(); };
TDSTableTitleFooterComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSTableTitleFooterComponent, selectors: [["tds-table-title-footer"]], hostAttrs: [1, "block", "w-full", "p-3"], hostVars: 4, hostBindings: function TDSTableTitleFooterComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵclassProp("tds-table-title", ctx.title !== null)("tds-table-footer", ctx.footer !== null);
    } }, inputs: { title: "title", footer: "footer" }, decls: 2, vars: 2, consts: [[4, "tdsStringTemplateOutlet"]], template: function TDSTableTitleFooterComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtemplate(0, TDSTableTitleFooterComponent_ng_container_0_Template, 2, 1, "ng-container", 0);
        i0.ɵɵtemplate(1, TDSTableTitleFooterComponent_ng_container_1_Template, 2, 1, "ng-container", 0);
    } if (rf & 2) {
        i0.ɵɵproperty("tdsStringTemplateOutlet", ctx.title);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("tdsStringTemplateOutlet", ctx.footer);
    } }, directives: [i1$4.TDSStringTemplateOutletDirective], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSTableTitleFooterComponent, [{
        type: Component,
        args: [{
                selector: 'tds-table-title-footer',
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                template: `
    <ng-container *tdsStringTemplateOutlet="title">{{ title }}</ng-container>
    <ng-container *tdsStringTemplateOutlet="footer">{{ footer }}</ng-container>
  `,
                host: {
                    '[class.tds-table-title]': `title !== null`,
                    '[class.tds-table-footer]': `footer !== null`,
                    class: "block w-full p-3 "
                }
            }]
    }], null, { title: [{
            type: Input
        }], footer: [{
            type: Input
        }] }); })();

function TDSTableComponent_ng_container_1_ng_template_1_Template(rf, ctx) { }
function TDSTableComponent_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtemplate(1, TDSTableComponent_ng_container_1_ng_template_1_Template, 0, 0, "ng-template", 11);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    i0.ɵɵnextContext();
    const _r8 = i0.ɵɵreference(11);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngTemplateOutlet", _r8);
} }
const _c0$1 = function (a0) { return { "border-b border-neutral-2-200": a0 }; };
function TDSTableComponent_tds_table_title_footer_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "tds-table-title-footer", 12);
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(2, _c0$1, ctx_r2.bordered || ctx_r2.outerBordered))("title", ctx_r2.title);
} }
function TDSTableComponent_tds_table_inner_scroll_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "tds-table-inner-scroll", 13);
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    const _r10 = i0.ɵɵreference(13);
    const _r1 = i0.ɵɵreference(3);
    i0.ɵɵproperty("data", ctx_r3.data)("scrollX", ctx_r3.scrollX)("scrollY", ctx_r3.scrollY)("contentTemplate", _r10)("listOfColWidth", ctx_r3.listOfAutoColWidth)("theadTemplate", ctx_r3.theadTemplate)("verticalScrollBarWidth", ctx_r3.verticalScrollBarWidth)("virtualTemplate", ctx_r3.virtualScrollDirective ? ctx_r3.virtualScrollDirective.templateRef : null)("virtualItemSize", ctx_r3.virtualItemSize)("virtualMaxBufferPx", ctx_r3.virtualMaxBufferPx)("virtualMinBufferPx", ctx_r3.virtualMinBufferPx)("tableMainElement", _r1)("virtualForTrackBy", ctx_r3.virtualForTrackBy);
} }
function TDSTableComponent_ng_template_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "tds-table-inner-default", 14);
} if (rf & 2) {
    const ctx_r5 = i0.ɵɵnextContext();
    const _r10 = i0.ɵɵreference(13);
    i0.ɵɵproperty("tableLayout", ctx_r5.tableLayout)("listOfColWidth", ctx_r5.listOfManualColWidth)("theadTemplate", ctx_r5.theadTemplate)("contentTemplate", _r10);
} }
function TDSTableComponent_tds_table_title_footer_8_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "tds-table-title-footer", 15);
} if (rf & 2) {
    const ctx_r6 = i0.ɵɵnextContext();
    i0.ɵɵproperty("footer", ctx_r6.footer);
} }
function TDSTableComponent_ng_container_9_ng_template_1_Template(rf, ctx) { }
function TDSTableComponent_ng_container_9_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtemplate(1, TDSTableComponent_ng_container_9_ng_template_1_Template, 0, 0, "ng-template", 11);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    i0.ɵɵnextContext();
    const _r8 = i0.ɵɵreference(11);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngTemplateOutlet", _r8);
} }
function TDSTableComponent_ng_template_10_div_0_Template(rf, ctx) { if (rf & 1) {
    const _r18 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 17)(1, "tds-pagination", 18);
    i0.ɵɵlistener("pageSizeChange", function TDSTableComponent_ng_template_10_div_0_Template_tds_pagination_pageSizeChange_1_listener($event) { i0.ɵɵrestoreView(_r18); const ctx_r17 = i0.ɵɵnextContext(2); return ctx_r17.onPageSizeChange($event); })("pageIndexChange", function TDSTableComponent_ng_template_10_div_0_Template_tds_pagination_pageIndexChange_1_listener($event) { i0.ɵɵrestoreView(_r18); const ctx_r19 = i0.ɵɵnextContext(2); return ctx_r19.onPageIndexChange($event); })("clickRefresh", function TDSTableComponent_ng_template_10_div_0_Template_tds_pagination_clickRefresh_1_listener($event) { i0.ɵɵrestoreView(_r18); const ctx_r20 = i0.ɵɵnextContext(2); return ctx_r20.onClickRefresh($event); });
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r16 = i0.ɵɵnextContext(2);
    const _r12 = i0.ɵɵreference(15);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("hidden", !ctx_r16.isShowPagination)("showSizeChanger", ctx_r16.showSizeChanger)("pageSizeOptions", ctx_r16.pageSizeOptions)("itemRender", ctx_r16.itemRender)("showQuickJumper", ctx_r16.showQuickJumper)("hideOnSinglePage", ctx_r16.hideOnSinglePage)("showTotal", ctx_r16.showTotal || _r12)("showRefresh", ctx_r16.showRefresh)("size", ctx_r16.paginationType)("pageSize", ctx_r16.pageSize)("total", ctx_r16.total)("simple", ctx_r16.simple)("pageIndex", ctx_r16.pageIndex);
} }
function TDSTableComponent_ng_template_10_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, TDSTableComponent_ng_template_10_div_0_Template, 2, 13, "div", 16);
} if (rf & 2) {
    const ctx_r9 = i0.ɵɵnextContext();
    i0.ɵɵproperty("ngIf", ctx_r9.isShowPagination);
} }
function TDSTableComponent_ng_template_12_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵprojection(0);
} }
function TDSTableComponent_ng_template_14_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0);
} if (rf & 2) {
    const range_r21 = ctx.range;
    const total_r22 = ctx.$implicit;
    i0.ɵɵtextInterpolate3(" ", range_r21[0], "-", range_r21[1], " of ", total_r22, " ");
} }
const _c1$1 = ["*"];
const TDS_CONFIG_MODULE_NAME = 'table';
class TDSTableComponent {
    constructor(elementRef, tdsResizeObserver, tdsConfigService, cdr, tdsTableStyleService, tdsTableDataService, directionality) {
        this.elementRef = elementRef;
        this.tdsResizeObserver = tdsResizeObserver;
        this.tdsConfigService = tdsConfigService;
        this.cdr = cdr;
        this.tdsTableStyleService = tdsTableStyleService;
        this.tdsTableDataService = tdsTableDataService;
        this.directionality = directionality;
        this._tdsModuleName = TDS_CONFIG_MODULE_NAME;
        this.tableLayout = 'auto';
        this.showTotal = null;
        this.showRefresh = true;
        this.itemRender = null;
        this.title = null;
        this.footer = null;
        this.noResult = undefined;
        this.pageSizeOptions = [10, 20, 30, 40, 50];
        this.virtualItemSize = 0;
        this.virtualMaxBufferPx = 200;
        this.virtualMinBufferPx = 100;
        this.virtualForTrackBy = index => index;
        this.loadingDelay = 0;
        this.pageIndex = 1;
        this.pageSize = 10;
        this.total = 0;
        this.widthConfig = [];
        this.listData = [];
        this.paginationPosition = 'bottom';
        this.scroll = { x: null, y: 'auto' };
        this.paginationType = 'sm';
        this.frontPagination = true;
        this.templateMode = false;
        this.showPagination = true;
        this.loading = false;
        this.outerBordered = false;
        this.loadingIndicator = null;
        this.bordered = false;
        this.size = 'default';
        this.showSizeChanger = false;
        this.hideOnSinglePage = false;
        this.showQuickJumper = false;
        this.simple = false;
        this.pageSizeChange = new EventEmitter();
        this.pageIndexChange = new EventEmitter();
        this.queryParams = new EventEmitter();
        this.currentPageDataChange = new EventEmitter();
        this.clickRefresh = new EventEmitter();
        /** public data for ngFor tr */
        this.data = [];
        this.scrollX = null;
        this.scrollY = null;
        this.theadTemplate = null;
        this.listOfAutoColWidth = [];
        this.listOfManualColWidth = [];
        this.hasFixLeft = false;
        this.hasFixRight = false;
        this.isShowPagination = true;
        this.destroy$ = new Subject();
        this.loading$ = new BehaviorSubject(false);
        this.templateMode$ = new BehaviorSubject(false);
        this.dir = 'ltr';
        this.verticalScrollBarWidth = 0;
        // TODO: move to host after View Engine deprecation
        this.elementRef.nativeElement.classList.add('tds-table-wrapper');
        this.tdsConfigService
            .getConfigChangeEventForComponent(TDS_CONFIG_MODULE_NAME)
            .pipe(takeUntil(this.destroy$))
            .subscribe(() => {
            this.cdr.markForCheck();
        });
    }
    onPageSizeChange(size) {
        this.tdsTableDataService.updatePageSize(size);
    }
    onPageIndexChange(index) {
        this.tdsTableDataService.updatePageIndex(index);
    }
    ngOnInit() {
        const { pageIndexDistinct$, pageSizeDistinct$, listOfCurrentPageData$, total$, queryParams$ } = this.tdsTableDataService;
        const { theadTemplate$, hasFixLeft$, hasFixRight$ } = this.tdsTableStyleService;
        this.dir = this.directionality.value;
        this.directionality.change?.pipe(takeUntil(this.destroy$)).subscribe((direction) => {
            this.dir = direction;
            this.cdr.detectChanges();
        });
        queryParams$.pipe(takeUntil(this.destroy$)).subscribe(this.queryParams);
        pageIndexDistinct$.pipe(takeUntil(this.destroy$)).subscribe(pageIndex => {
            if (pageIndex !== this.pageIndex) {
                this.pageIndex = pageIndex;
                this.pageIndexChange.next(pageIndex);
            }
        });
        pageSizeDistinct$.pipe(takeUntil(this.destroy$)).subscribe(pageSize => {
            if (pageSize !== this.pageSize) {
                this.pageSize = pageSize;
                this.pageSizeChange.next(pageSize);
            }
        });
        total$
            .pipe(takeUntil(this.destroy$), filter(() => this.frontPagination))
            .subscribe(total => {
            if (total !== this.total) {
                this.total = total;
                this.cdr.markForCheck();
            }
        });
        listOfCurrentPageData$.pipe(takeUntil(this.destroy$)).subscribe(data => {
            this.data = data;
            this.currentPageDataChange.next(data);
            this.cdr.markForCheck();
        });
        theadTemplate$.pipe(takeUntil(this.destroy$)).subscribe(theadTemplate => {
            this.theadTemplate = theadTemplate;
            this.cdr.markForCheck();
        });
        hasFixLeft$.pipe(takeUntil(this.destroy$)).subscribe(hasFixLeft => {
            this.hasFixLeft = hasFixLeft;
            this.cdr.markForCheck();
        });
        hasFixRight$.pipe(takeUntil(this.destroy$)).subscribe(hasFixRight => {
            this.hasFixRight = hasFixRight;
            this.cdr.markForCheck();
        });
        combineLatest([total$, this.loading$, this.templateMode$])
            .pipe(map(([total, loading, templateMode]) => total === 0 && !loading && !templateMode), takeUntil(this.destroy$))
            .subscribe(empty => {
            this.tdsTableStyleService.setShowEmpty(empty);
        });
        this.verticalScrollBarWidth = measureScrollbar('vertical');
        this.tdsTableStyleService.listOfListOfThWidthPx$.pipe(takeUntil(this.destroy$)).subscribe(listOfWidth => {
            this.listOfAutoColWidth = listOfWidth;
            this.cdr.markForCheck();
        });
        this.tdsTableStyleService.manualWidthConfigPx$.pipe(takeUntil(this.destroy$)).subscribe(listOfWidth => {
            this.listOfManualColWidth = listOfWidth;
            this.cdr.markForCheck();
        });
    }
    ngOnChanges(changes) {
        const { scroll, pageIndex, pageSize, frontPagination, listData, widthConfig, noResult, loading, templateMode } = changes;
        if (pageIndex) {
            this.tdsTableDataService.updatePageIndex(this.pageIndex);
        }
        if (pageSize) {
            this.tdsTableDataService.updatePageSize(this.pageSize);
        }
        if (listData) {
            this.listData = this.listData || [];
            this.tdsTableDataService.updateListOfData(this.listData);
        }
        if (frontPagination) {
            this.tdsTableDataService.updateFrontPagination(this.frontPagination);
        }
        if (scroll) {
            this.setScrollOnChanges();
        }
        if (widthConfig) {
            this.tdsTableStyleService.setTableWidthConfig(this.widthConfig);
        }
        if (loading) {
            this.loading$.next(this.loading);
        }
        if (templateMode) {
            this.templateMode$.next(this.templateMode);
        }
        if (noResult) {
            this.tdsTableStyleService.setNoResult(this.noResult);
        }
        this.updateShowPagination();
    }
    ngAfterViewInit() {
        //fix lỗi expand ko lấy dc host width
        of(this.getWidthHost()).pipe(delay(10), takeUntil(this.destroy$)).subscribe(this.tdsTableStyleService.hostWidth$);
        this.tdsResizeObserver
            .observe(this.elementRef)
            .pipe(map(([entry]) => {
            const { width } = entry.target.getBoundingClientRect();
            const scrollBarWidth = this.scrollY ? this.verticalScrollBarWidth : 0;
            return Math.floor(width - scrollBarWidth);
        }), takeUntil(this.destroy$))
            .subscribe(this.tdsTableStyleService.hostWidth$);
        if (this.tdsTableInnerScrollComponent && this.tdsTableInnerScrollComponent.cdkVirtualScrollViewport) {
            this.cdkVirtualScrollViewport = this.tdsTableInnerScrollComponent.cdkVirtualScrollViewport;
        }
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    onClickRefresh(e) {
        this.clickRefresh.emit(e);
    }
    setScrollOnChanges() {
        this.scrollX = (this.scroll && this.scroll.x) || null;
        this.scrollY = (this.scroll && this.scroll.y) || null;
        this.tdsTableStyleService.setScroll(this.scrollX, this.scrollY);
    }
    updateShowPagination() {
        this.isShowPagination =
            this.showPagination && ((this.hideOnSinglePage && this.listData.length > this.pageSize) ||
                (this.listData.length > 0 && !this.hideOnSinglePage) ||
                (!this.frontPagination && this.total > this.pageSize));
    }
    getWidthHost() {
        const { width } = this.elementRef.nativeElement.getBoundingClientRect();
        const scrollBarWidth = this.scrollY ? this.verticalScrollBarWidth : 0;
        return Math.floor(width - scrollBarWidth);
    }
}
TDSTableComponent.ɵfac = function TDSTableComponent_Factory(t) { return new (t || TDSTableComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1$2.TDSResizeObserver), i0.ɵɵdirectiveInject(i2$1.TDSConfigService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(TDSTableStyleService), i0.ɵɵdirectiveInject(TDSTableDataService), i0.ɵɵdirectiveInject(i5$3.Directionality, 8)); };
TDSTableComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSTableComponent, selectors: [["tds-table"]], contentQueries: function TDSTableComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        i0.ɵɵcontentQuery(dirIndex, TDSTableVirtualScrollDirective, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.virtualScrollDirective = _t.first);
    } }, viewQuery: function TDSTableComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(TDSTableInnerScrollComponent, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tdsTableInnerScrollComponent = _t.first);
    } }, hostAttrs: [1, "w-full", "h-full"], hostVars: 2, hostBindings: function TDSTableComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵclassProp("tds-table-wrapper-rtl", ctx.dir === "rtl");
    } }, inputs: { tableLayout: "tableLayout", showTotal: "showTotal", showRefresh: "showRefresh", itemRender: "itemRender", title: "title", footer: "footer", noResult: "noResult", pageSizeOptions: "pageSizeOptions", virtualItemSize: "virtualItemSize", virtualMaxBufferPx: "virtualMaxBufferPx", virtualMinBufferPx: "virtualMinBufferPx", virtualForTrackBy: "virtualForTrackBy", loadingDelay: "loadingDelay", pageIndex: "pageIndex", pageSize: "pageSize", total: "total", widthConfig: "widthConfig", listData: "listData", paginationPosition: "paginationPosition", scroll: "scroll", paginationType: "paginationType", frontPagination: "frontPagination", templateMode: "templateMode", showPagination: "showPagination", loading: "loading", outerBordered: "outerBordered", loadingIndicator: "loadingIndicator", bordered: "bordered", size: "size", showSizeChanger: "showSizeChanger", hideOnSinglePage: "hideOnSinglePage", showQuickJumper: "showQuickJumper", simple: "simple" }, outputs: { pageSizeChange: "pageSizeChange", pageIndexChange: "pageIndexChange", queryParams: "queryParams", currentPageDataChange: "currentPageDataChange", clickRefresh: "clickRefresh" }, exportAs: ["tdsTable"], features: [i0.ɵɵProvidersFeature([TDSTableStyleService, TDSTableDataService]), i0.ɵɵNgOnChangesFeature], ngContentSelectors: _c1$1, decls: 16, vars: 31, consts: [[1, "h-full", "relative", "w-full", 3, "delay", "spinning", "indicator"], [4, "ngIf"], [1, "tds-table", "flex", "flex-col", "flex-auto", "w-full"], ["tableMainElement", ""], ["class", "text-neutral-1-900 text-header-1 font-semibold", 3, "ngClass", "title", 4, "ngIf"], ["class", "flex flex-col h-full w-full", 3, "data", "scrollX", "scrollY", "contentTemplate", "listOfColWidth", "theadTemplate", "verticalScrollBarWidth", "virtualTemplate", "virtualItemSize", "virtualMaxBufferPx", "virtualMinBufferPx", "tableMainElement", "virtualForTrackBy", 4, "ngIf", "ngIfElse"], ["defaultTemplate", ""], [3, "footer", 4, "ngIf"], ["paginationTemplate", ""], ["contentTemplate", ""], ["rangeTemplate", ""], [3, "ngTemplateOutlet"], [1, "text-neutral-1-900", "text-header-1", "font-semibold", 3, "ngClass", "title"], [1, "flex", "flex-col", "h-full", "w-full", 3, "data", "scrollX", "scrollY", "contentTemplate", "listOfColWidth", "theadTemplate", "verticalScrollBarWidth", "virtualTemplate", "virtualItemSize", "virtualMaxBufferPx", "virtualMinBufferPx", "tableMainElement", "virtualForTrackBy"], [1, "w-full", 3, "tableLayout", "listOfColWidth", "theadTemplate", "contentTemplate"], [3, "footer"], ["class", "w-full pt-2.5", 4, "ngIf"], [1, "w-full", "pt-2.5"], [1, "tds-table-pagination", "tds-table-pagination-right", 3, "hidden", "showSizeChanger", "pageSizeOptions", "itemRender", "showQuickJumper", "hideOnSinglePage", "showTotal", "showRefresh", "size", "pageSize", "total", "simple", "pageIndex", "pageSizeChange", "pageIndexChange", "clickRefresh"]], template: function TDSTableComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵelementStart(0, "tds-spin", 0);
        i0.ɵɵtemplate(1, TDSTableComponent_ng_container_1_Template, 2, 1, "ng-container", 1);
        i0.ɵɵelementStart(2, "div", 2, 3);
        i0.ɵɵtemplate(4, TDSTableComponent_tds_table_title_footer_4_Template, 1, 4, "tds-table-title-footer", 4);
        i0.ɵɵtemplate(5, TDSTableComponent_tds_table_inner_scroll_5_Template, 1, 13, "tds-table-inner-scroll", 5);
        i0.ɵɵtemplate(6, TDSTableComponent_ng_template_6_Template, 1, 4, "ng-template", null, 6, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtemplate(8, TDSTableComponent_tds_table_title_footer_8_Template, 1, 1, "tds-table-title-footer", 7);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(9, TDSTableComponent_ng_container_9_Template, 2, 1, "ng-container", 1);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(10, TDSTableComponent_ng_template_10_Template, 1, 1, "ng-template", null, 8, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtemplate(12, TDSTableComponent_ng_template_12_Template, 1, 0, "ng-template", null, 9, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtemplate(14, TDSTableComponent_ng_template_14_Template, 1, 3, "ng-template", null, 10, i0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r4 = i0.ɵɵreference(7);
        i0.ɵɵproperty("delay", ctx.loadingDelay)("spinning", ctx.loading)("indicator", ctx.loadingIndicator);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx.paginationPosition === "both" || ctx.paginationPosition === "top");
        i0.ɵɵadvance(1);
        i0.ɵɵclassProp("tds-table-rtl", ctx.dir === "rtl")("tds-table-fixed-header", ctx.data.length && ctx.scrollY)("tds-table-fixed-column", ctx.scrollX)("tds-table-has-fix-left", ctx.hasFixLeft)("tds-table-has-fix-right", ctx.hasFixRight)("tds-table-bordered", ctx.bordered)("border-neutral-2-200", ctx.bordered || ctx.outerBordered)("border", ctx.bordered || ctx.outerBordered)("tds-table-out-bordered", ctx.outerBordered && !ctx.bordered)("tds-table-middle", ctx.size === "middle")("tds-table-small", ctx.size === "small");
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.title);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx.scrollY || ctx.scrollX)("ngIfElse", _r4);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx.footer);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx.paginationPosition === "both" || ctx.paginationPosition === "bottom");
    } }, directives: [i6$1.TDSSpinComponent, i1$1.NgIf, i1$1.NgTemplateOutlet, TDSTableTitleFooterComponent, i1$1.NgClass, TDSTableInnerScrollComponent, TDSTableInnerDefaultComponent, i11.TDSPaginationComponent], encapsulation: 2, changeDetection: 0 });
__decorate([
    InputBoolean()
], TDSTableComponent.prototype, "frontPagination", void 0);
__decorate([
    InputBoolean()
], TDSTableComponent.prototype, "templateMode", void 0);
__decorate([
    InputBoolean()
], TDSTableComponent.prototype, "showPagination", void 0);
__decorate([
    InputBoolean()
], TDSTableComponent.prototype, "loading", void 0);
__decorate([
    InputBoolean()
], TDSTableComponent.prototype, "outerBordered", void 0);
__decorate([
    WithConfig()
], TDSTableComponent.prototype, "loadingIndicator", void 0);
__decorate([
    WithConfig(),
    InputBoolean()
], TDSTableComponent.prototype, "bordered", void 0);
__decorate([
    WithConfig()
], TDSTableComponent.prototype, "size", void 0);
__decorate([
    WithConfig(),
    InputBoolean()
], TDSTableComponent.prototype, "showSizeChanger", void 0);
__decorate([
    WithConfig(),
    InputBoolean()
], TDSTableComponent.prototype, "hideOnSinglePage", void 0);
__decorate([
    WithConfig(),
    InputBoolean()
], TDSTableComponent.prototype, "showQuickJumper", void 0);
__decorate([
    WithConfig(),
    InputBoolean()
], TDSTableComponent.prototype, "simple", void 0);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSTableComponent, [{
        type: Component,
        args: [{
                selector: 'tds-table',
                exportAs: 'tdsTable',
                providers: [TDSTableStyleService, TDSTableDataService],
                preserveWhitespaces: false,
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                template: `
    <tds-spin [delay]="loadingDelay" [spinning]="loading" [indicator]="loadingIndicator" class="h-full relative w-full">
      <ng-container *ngIf="paginationPosition === 'both' || paginationPosition === 'top'">
        <ng-template [ngTemplateOutlet]="paginationTemplate"></ng-template>
      </ng-container>
      <div
        #tableMainElement
        class="tds-table flex flex-col flex-auto w-full"
        [class.tds-table-rtl]="dir === 'rtl'"
        [class.tds-table-fixed-header]="data.length && scrollY"
        [class.tds-table-fixed-column]="scrollX"
        [class.tds-table-has-fix-left]="hasFixLeft"
        [class.tds-table-has-fix-right]="hasFixRight"
        [class.tds-table-bordered]="bordered"
        [class.border-neutral-2-200]="bordered || outerBordered"
        [class.border]="bordered || outerBordered"
        [class.tds-table-out-bordered]="outerBordered && !bordered"
        [class.tds-table-middle]="size === 'middle'"
        [class.tds-table-small]="size === 'small'"
      >
        <tds-table-title-footer 
        class="text-neutral-1-900 text-header-1 font-semibold"
        [ngClass]="{'border-b border-neutral-2-200':bordered || outerBordered}"              
        [title]="title" 
        *ngIf="title">        
        </tds-table-title-footer>
        <tds-table-inner-scroll
         class="flex flex-col h-full w-full"
          *ngIf="scrollY || scrollX; else defaultTemplate"
          [data]="data"
          [scrollX]="scrollX"
          [scrollY]="scrollY"
          [contentTemplate]="contentTemplate"
          [listOfColWidth]="listOfAutoColWidth"
          [theadTemplate]="theadTemplate"
          [verticalScrollBarWidth]="verticalScrollBarWidth"
          [virtualTemplate]="virtualScrollDirective ? virtualScrollDirective.templateRef : null"
          [virtualItemSize]="virtualItemSize"
          [virtualMaxBufferPx]="virtualMaxBufferPx"
          [virtualMinBufferPx]="virtualMinBufferPx"
          [tableMainElement]="tableMainElement"
          [virtualForTrackBy]="virtualForTrackBy"
        ></tds-table-inner-scroll>
        <ng-template #defaultTemplate>
          <tds-table-inner-default
            class="w-full"
            [tableLayout]="tableLayout"
            [listOfColWidth]="listOfManualColWidth"
            [theadTemplate]="theadTemplate"
            [contentTemplate]="contentTemplate"
          ></tds-table-inner-default>
        </ng-template>
        <tds-table-title-footer [footer]="footer" *ngIf="footer"></tds-table-title-footer>
      </div>
      <ng-container *ngIf="paginationPosition === 'both' || paginationPosition === 'bottom'">
        <ng-template [ngTemplateOutlet]="paginationTemplate"></ng-template>
      </ng-container>
    </tds-spin>
    <ng-template #paginationTemplate>
    <div class="w-full pt-2.5" *ngIf="isShowPagination">
    <tds-pagination
    [hidden]="!isShowPagination"
    class="tds-table-pagination tds-table-pagination-right "
    [showSizeChanger]="showSizeChanger"
    [pageSizeOptions]="pageSizeOptions"
    [itemRender]="itemRender!"
    [showQuickJumper]="showQuickJumper"
    [hideOnSinglePage]="hideOnSinglePage"
    [showTotal]="showTotal || rangeTemplate"
    [showRefresh]="showRefresh"
    [size]="paginationType"
    [pageSize]="pageSize"
    [total]="total"
    [simple]="simple"
    [pageIndex]="pageIndex"
    (pageSizeChange)="onPageSizeChange($event)"
    (pageIndexChange)="onPageIndexChange($event)"
    (clickRefresh)="onClickRefresh($event)"
  ></tds-pagination>
    </div>
      
    </ng-template>
    <ng-template #contentTemplate>
      <ng-content></ng-content>
    </ng-template>
    <ng-template #rangeTemplate let-range="range" let-total>
      {{ range[0] }}-{{ range[1] }} of {{ total }}
    </ng-template>
  `,
                host: {
                    '[class.tds-table-wrapper-rtl]': 'dir === "rtl"',
                    class: "w-full h-full "
                }
            }]
    }], function () { return [{ type: i0.ElementRef }, { type: i1$2.TDSResizeObserver }, { type: i2$1.TDSConfigService }, { type: i0.ChangeDetectorRef }, { type: TDSTableStyleService }, { type: TDSTableDataService }, { type: i5$3.Directionality, decorators: [{
                type: Optional
            }] }]; }, { tableLayout: [{
            type: Input
        }], showTotal: [{
            type: Input
        }], showRefresh: [{
            type: Input
        }], itemRender: [{
            type: Input
        }], title: [{
            type: Input
        }], footer: [{
            type: Input
        }], noResult: [{
            type: Input
        }], pageSizeOptions: [{
            type: Input
        }], virtualItemSize: [{
            type: Input
        }], virtualMaxBufferPx: [{
            type: Input
        }], virtualMinBufferPx: [{
            type: Input
        }], virtualForTrackBy: [{
            type: Input
        }], loadingDelay: [{
            type: Input
        }], pageIndex: [{
            type: Input
        }], pageSize: [{
            type: Input
        }], total: [{
            type: Input
        }], widthConfig: [{
            type: Input
        }], listData: [{
            type: Input
        }], paginationPosition: [{
            type: Input
        }], scroll: [{
            type: Input
        }], paginationType: [{
            type: Input
        }], frontPagination: [{
            type: Input
        }], templateMode: [{
            type: Input
        }], showPagination: [{
            type: Input
        }], loading: [{
            type: Input
        }], outerBordered: [{
            type: Input
        }], loadingIndicator: [{
            type: Input
        }], bordered: [{
            type: Input
        }], size: [{
            type: Input
        }], showSizeChanger: [{
            type: Input
        }], hideOnSinglePage: [{
            type: Input
        }], showQuickJumper: [{
            type: Input
        }], simple: [{
            type: Input
        }], pageSizeChange: [{
            type: Output
        }], pageIndexChange: [{
            type: Output
        }], queryParams: [{
            type: Output
        }], currentPageDataChange: [{
            type: Output
        }], clickRefresh: [{
            type: Output
        }], virtualScrollDirective: [{
            type: ContentChild,
            args: [TDSTableVirtualScrollDirective, { static: false }]
        }], tdsTableInnerScrollComponent: [{
            type: ViewChild,
            args: [TDSTableInnerScrollComponent]
        }] }); })();

class TDSTrDirective {
    constructor(tdsTableStyleService) {
        this.tdsTableStyleService = tdsTableStyleService;
        this.isTrHeader = false;
        this.destroy$ = new Subject();
        this.listOfFixedColumns$ = new ReplaySubject(1);
        this.listOfColumns$ = new ReplaySubject(1);
        this.listOfFixedColumnsChanges$ = this.listOfFixedColumns$.pipe(switchMap(list => merge(...[this.listOfFixedColumns$, ...list.map((c) => c.changes$)]).pipe(mergeMap(() => this.listOfFixedColumns$))), takeUntil(this.destroy$));
        this.listOfFixedLeftColumnChanges$ = this.listOfFixedColumnsChanges$.pipe(map(list => list.filter(item => item.tdsLeft !== false)));
        this.listOfFixedRightColumnChanges$ = this.listOfFixedColumnsChanges$.pipe(map(list => list.filter(item => item.tdsRight !== false)));
        this.listOfColumnsChanges$ = this.listOfColumns$.pipe(switchMap(list => merge(...[this.listOfColumns$, ...list.map((c) => c.changes$)]).pipe(mergeMap(() => this.listOfColumns$))), takeUntil(this.destroy$));
        this.isInsideTable = false;
        this.isInsideTable = !!tdsTableStyleService;
    }
    ngAfterContentInit() {
        if (this.tdsTableStyleService) {
            this.listOfCellFixedDirective.changes
                .pipe(startWith(this.listOfCellFixedDirective), takeUntil(this.destroy$))
                .subscribe(this.listOfFixedColumns$);
            this.listOfNzThDirective.changes
                .pipe(startWith(this.listOfNzThDirective), takeUntil(this.destroy$))
                .subscribe(this.listOfColumns$);
            /** set last left and first right **/
            this.listOfFixedLeftColumnChanges$.subscribe(listOfFixedLeft => {
                listOfFixedLeft.forEach(cell => cell.setIsLastLeft(cell === listOfFixedLeft[listOfFixedLeft.length - 1]));
            });
            this.listOfFixedRightColumnChanges$.subscribe(listOfFixedRight => {
                listOfFixedRight.forEach(cell => cell.setIsFirstRight(cell === listOfFixedRight[0]));
            });
            /** calculate fixed tdsLeft and tdsRight **/
            combineLatest([this.tdsTableStyleService.listOfListOfThWidth$, this.listOfFixedLeftColumnChanges$])
                .pipe(takeUntil(this.destroy$))
                .subscribe(([listOfAutoWidth, listOfLeftCell]) => {
                listOfLeftCell.forEach((cell, index) => {
                    if (cell.isAutoLeft) {
                        const currentArray = listOfLeftCell.slice(0, index);
                        const count = currentArray.reduce((pre, cur) => pre + (cur.colspan || cur.colSpan || 1), 0);
                        const width = listOfAutoWidth.slice(0, count).reduce((pre, cur) => pre + cur, 0);
                        cell.setAutoLeftWidth(`${width}px`);
                    }
                });
            });
            combineLatest([this.tdsTableStyleService.listOfListOfThWidth$, this.listOfFixedRightColumnChanges$])
                .pipe(takeUntil(this.destroy$))
                .subscribe(([listOfAutoWidth, listOfRightCell]) => {
                listOfRightCell.forEach((_, index) => {
                    const cell = listOfRightCell[listOfRightCell.length - index - 1];
                    if (cell.isAutoRight) {
                        const currentArray = listOfRightCell.slice(listOfRightCell.length - index, listOfRightCell.length);
                        const count = currentArray.reduce((pre, cur) => pre + (cur.colspan || cur.colSpan || 1), 0);
                        const width = listOfAutoWidth
                            .slice(listOfAutoWidth.length - count, listOfAutoWidth.length)
                            .reduce((pre, cur) => pre + cur, 0);
                        cell.setAutoRightWidth(`${width}px`);
                    }
                });
            });
        }
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
}
TDSTrDirective.ɵfac = function TDSTrDirective_Factory(t) { return new (t || TDSTrDirective)(i0.ɵɵdirectiveInject(TDSTableStyleService, 8)); };
TDSTrDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: TDSTrDirective, selectors: [["tr", 3, "mat-row", "", 3, "mat-header-row", "", 3, "tds-table-measure-row", "", 3, "expand", "", 3, "tds-table-fixed-row", "", 3, "tds-table-thead", ""]], contentQueries: function TDSTrDirective_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        i0.ɵɵcontentQuery(dirIndex, TDSThMeasureDirective, 4);
        i0.ɵɵcontentQuery(dirIndex, TDSCellFixedDirective, 4);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.listOfNzThDirective = _t);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.listOfCellFixedDirective = _t);
    } }, hostVars: 4, hostBindings: function TDSTrDirective_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵclassProp("tds-table-row", ctx.isInsideTable)("text-left", ctx.isInsideTable);
    } }, inputs: { isTrHeader: "isTrHeader" } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSTrDirective, [{
        type: Directive,
        args: [{
                selector: 'tr:not([mat-row]):not([mat-header-row]):not([tds-table-measure-row]):not([expand]):not([tds-table-fixed-row]):not([tds-table-thead])',
                host: {
                    '[class.tds-table-row]': 'isInsideTable',
                    // '[class.border-b]': 'isInsideTable && !isTrHeader',
                    // '[class.border-neutral-2-100]': 'isInsideTable',
                    '[class.text-left]': 'isInsideTable',
                }
            }]
    }], function () { return [{ type: TDSTableStyleService, decorators: [{
                type: Optional
            }] }]; }, { isTrHeader: [{
            type: Input
        }], listOfNzThDirective: [{
            type: ContentChildren,
            args: [TDSThMeasureDirective]
        }], listOfCellFixedDirective: [{
            type: ContentChildren,
            args: [TDSCellFixedDirective]
        }] }); })();

/* eslint-disable @angular-eslint/component-selector */
const _c0 = ["contentTemplate"];
function TDSTheadComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵprojection(0);
} }
function TDSTheadComponent_ng_container_2_ng_template_1_Template(rf, ctx) { }
function TDSTheadComponent_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtemplate(1, TDSTheadComponent_ng_container_2_ng_template_1_Template, 0, 0, "ng-template", 2);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    i0.ɵɵnextContext();
    const _r0 = i0.ɵɵreference(1);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngTemplateOutlet", _r0);
} }
const _c1 = ["*"];
class TDSTheadComponent {
    constructor(elementRef, renderer, tdsTableStyleService, tdsTableDataService) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.tdsTableStyleService = tdsTableStyleService;
        this.tdsTableDataService = tdsTableDataService;
        this.destroy$ = new Subject();
        this.isInsideTable = false;
        this.sortOrderChange = new EventEmitter();
        this.isInsideTable = !!this.tdsTableStyleService;
    }
    ngOnInit() {
        if (this.tdsTableStyleService) {
            this.tdsTableStyleService.setTheadTemplate(this.templateRef);
        }
    }
    ngAfterContentInit() {
        if (this.tdsTableStyleService) {
            const firstTableRow$ = this.listOfNzTrDirective.changes.pipe(startWith(this.listOfNzTrDirective), map(item => item && item.first));
            const listOfColumnsChanges$ = firstTableRow$.pipe(switchMap(firstTableRow => (firstTableRow ? firstTableRow.listOfColumnsChanges$ : EMPTY)), takeUntil(this.destroy$));
            listOfColumnsChanges$.subscribe(data => this.tdsTableStyleService.setListOfTh(data));
            /** TODO: need reset the measure row when scrollX change **/
            this.tdsTableStyleService.enableAutoMeasure$
                .pipe(switchMap(enable => (enable ? listOfColumnsChanges$ : of([]))))
                .pipe(takeUntil(this.destroy$))
                .subscribe(data => this.tdsTableStyleService.setListOfMeasureColumn(data));
            const listOfFixedLeftColumnChanges$ = firstTableRow$.pipe(switchMap(firstTr => (firstTr ? firstTr.listOfFixedLeftColumnChanges$ : EMPTY)), takeUntil(this.destroy$));
            const listOfFixedRightColumnChanges$ = firstTableRow$.pipe(switchMap(firstTr => (firstTr ? firstTr.listOfFixedRightColumnChanges$ : EMPTY)), takeUntil(this.destroy$));
            listOfFixedLeftColumnChanges$.subscribe(listOfFixedLeftColumn => {
                this.tdsTableStyleService.setHasFixLeft(listOfFixedLeftColumn.length !== 0);
            });
            listOfFixedRightColumnChanges$.subscribe(listOfFixedRightColumn => {
                this.tdsTableStyleService.setHasFixRight(listOfFixedRightColumn.length !== 0);
            });
        }
        if (this.tdsTableDataService) {
            const listOfColumn$ = this.listOfNzThAddOnComponent.changes.pipe(startWith(this.listOfNzThAddOnComponent));
            const manualSort$ = listOfColumn$.pipe(switchMap(() => merge(...this.listOfNzThAddOnComponent.map(th => th.manualClickOrder$))), takeUntil(this.destroy$));
            manualSort$.subscribe((data) => {
                const emitValue = { key: data.columnKey, value: data._sortOrder };
                this.sortOrderChange.emit(emitValue);
                if (data.sortFn && data.sortPriority === false) {
                    this.listOfNzThAddOnComponent.filter(th => th !== data).forEach(th => th.clearSortOrder());
                }
            });
            const listOfCalcOperator$ = listOfColumn$.pipe(switchMap(list => merge(...[listOfColumn$, ...list.map((c) => c.calcOperatorChange$)]).pipe(mergeMap(() => listOfColumn$))), map(list => list
                .filter(item => !!item.sortFn || !!item.filterFn)
                .map(item => {
                const { sortFn, _sortOrder, filterFn, filterValue, sortPriority, columnKey } = item;
                return {
                    key: columnKey,
                    sortFn: sortFn,
                    sortPriority: sortPriority,
                    sortOrder: _sortOrder,
                    filterFn: filterFn,
                    filterValue: filterValue
                };
            })), 
            // TODO: after checked error here
            delay(0), takeUntil(this.destroy$));
            listOfCalcOperator$.subscribe(list => {
                this.tdsTableDataService.listOfCalcOperator$.next(list);
            });
        }
    }
    ngAfterViewInit() {
        if (this.tdsTableStyleService) {
            this.renderer.removeChild(this.renderer.parentNode(this.elementRef.nativeElement), this.elementRef.nativeElement);
        }
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
}
TDSTheadComponent.ɵfac = function TDSTheadComponent_Factory(t) { return new (t || TDSTheadComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(TDSTableStyleService, 8), i0.ɵɵdirectiveInject(TDSTableDataService, 8)); };
TDSTheadComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSTheadComponent, selectors: [["thead", 9, "tds-table-thead"]], contentQueries: function TDSTheadComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        i0.ɵɵcontentQuery(dirIndex, TDSTrDirective, 5);
        i0.ɵɵcontentQuery(dirIndex, TDSThAddOnComponent, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.listOfNzTrDirective = _t);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.listOfNzThAddOnComponent = _t);
    } }, viewQuery: function TDSTheadComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 7);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.templateRef = _t.first);
    } }, outputs: { sortOrderChange: "sortOrderChange" }, ngContentSelectors: _c1, decls: 3, vars: 1, consts: [["contentTemplate", ""], [4, "ngIf"], [3, "ngTemplateOutlet"]], template: function TDSTheadComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵtemplate(0, TDSTheadComponent_ng_template_0_Template, 1, 0, "ng-template", null, 0, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtemplate(2, TDSTheadComponent_ng_container_2_Template, 2, 1, "ng-container", 1);
    } if (rf & 2) {
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx.isInsideTable);
    } }, directives: [i1$1.NgIf, i1$1.NgTemplateOutlet], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSTheadComponent, [{
        type: Component,
        args: [{
                selector: 'thead:not(.tds-table-thead)',
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                template: `
    <ng-template #contentTemplate>
      <ng-content></ng-content>
    </ng-template>
    <ng-container *ngIf="!isInsideTable">
      <ng-template [ngTemplateOutlet]="contentTemplate"></ng-template>
    </ng-container>
  `
            }]
    }], function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: TDSTableStyleService, decorators: [{
                type: Optional
            }] }, { type: TDSTableDataService, decorators: [{
                type: Optional
            }] }]; }, { templateRef: [{
            type: ViewChild,
            args: ['contentTemplate', { static: true }]
        }], listOfNzTrDirective: [{
            type: ContentChildren,
            args: [TDSTrDirective, { descendants: true }]
        }], listOfNzThAddOnComponent: [{
            type: ContentChildren,
            args: [TDSThAddOnComponent, { descendants: true }]
        }], sortOrderChange: [{
            type: Output
        }] }); })();

class TDSTrExpandDirective {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.expand = true;
        // TODO: move to host after View Engine deprecation
        this.elementRef.nativeElement.classList.add('tds-table-expanded-row');
    }
}
TDSTrExpandDirective.ɵfac = function TDSTrExpandDirective_Factory(t) { return new (t || TDSTrExpandDirective)(i0.ɵɵdirectiveInject(i0.ElementRef)); };
TDSTrExpandDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: TDSTrExpandDirective, selectors: [["tr", "expand", ""]], hostVars: 1, hostBindings: function TDSTrExpandDirective_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵhostProperty("hidden", !ctx.expand);
    } }, inputs: { expand: "expand" } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSTrExpandDirective, [{
        type: Directive,
        args: [{
                selector: 'tr[expand]',
                host: {
                    '[hidden]': `!expand`
                }
            }]
    }], function () { return [{ type: i0.ElementRef }]; }, { expand: [{
            type: Input
        }] }); })();

class TDSTableModule {
}
TDSTableModule.ɵfac = function TDSTableModule_Factory(t) { return new (t || TDSTableModule)(); };
TDSTableModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: TDSTableModule });
TDSTableModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [[
            BidiModule,
            FormsModule,
            TDSOutletModule,
            TDSRadioModule,
            TDSCheckBoxModule,
            TDSDropDownModule,
            TDSButtonModule,
            CommonModule,
            PlatformModule,
            TDSPaginationModule,
            TDSResizeObserverModule,
            TDSSpinnerModule,
            TDSI18nModule,
            TDSEmptyModule,
            ScrollingModule,
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSTableModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    TDSTableComponent,
                    TDSThAddOnComponent,
                    TDSTableCellDirective,
                    TDSThMeasureDirective,
                    TDSTdAddOnComponent,
                    TDSTheadComponent,
                    TDSTbodyComponent,
                    TDSTrDirective,
                    TDSTrExpandDirective,
                    TDSTableVirtualScrollDirective,
                    TDSCellFixedDirective,
                    TDSTableContentComponent,
                    TDSTableTitleFooterComponent,
                    TDSTableInnerDefaultComponent,
                    TDSTableInnerScrollComponent,
                    TDSTrMeasureComponent,
                    TDSRowIndentDirective,
                    TDSRowExpandButtonDirective,
                    TDSCellBreakWordDirective,
                    TDSCellAlignDirective,
                    TDSTableSortersComponent,
                    TDSTableFilterComponent,
                    TDSTableSelectionComponent,
                    TDSCellEllipsisDirective,
                    TDSFilterTriggerComponent,
                    TDSTableFixedRowComponent,
                    TDSThSelectionComponent
                ],
                exports: [
                    TDSTableComponent,
                    TDSThAddOnComponent,
                    TDSTableCellDirective,
                    TDSThMeasureDirective,
                    TDSTdAddOnComponent,
                    TDSTheadComponent,
                    TDSTbodyComponent,
                    TDSTrDirective,
                    TDSTableVirtualScrollDirective,
                    TDSCellFixedDirective,
                    TDSFilterTriggerComponent,
                    TDSTrExpandDirective,
                    TDSCellBreakWordDirective,
                    TDSCellAlignDirective,
                    TDSCellEllipsisDirective,
                    TDSTableFixedRowComponent,
                    TDSThSelectionComponent
                ],
                imports: [
                    BidiModule,
                    FormsModule,
                    TDSOutletModule,
                    TDSRadioModule,
                    TDSCheckBoxModule,
                    TDSDropDownModule,
                    TDSButtonModule,
                    CommonModule,
                    PlatformModule,
                    TDSPaginationModule,
                    TDSResizeObserverModule,
                    TDSSpinnerModule,
                    TDSI18nModule,
                    TDSEmptyModule,
                    ScrollingModule,
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(TDSTableModule, { declarations: [TDSTableComponent,
        TDSThAddOnComponent,
        TDSTableCellDirective,
        TDSThMeasureDirective,
        TDSTdAddOnComponent,
        TDSTheadComponent,
        TDSTbodyComponent,
        TDSTrDirective,
        TDSTrExpandDirective,
        TDSTableVirtualScrollDirective,
        TDSCellFixedDirective,
        TDSTableContentComponent,
        TDSTableTitleFooterComponent,
        TDSTableInnerDefaultComponent,
        TDSTableInnerScrollComponent,
        TDSTrMeasureComponent,
        TDSRowIndentDirective,
        TDSRowExpandButtonDirective,
        TDSCellBreakWordDirective,
        TDSCellAlignDirective,
        TDSTableSortersComponent,
        TDSTableFilterComponent,
        TDSTableSelectionComponent,
        TDSCellEllipsisDirective,
        TDSFilterTriggerComponent,
        TDSTableFixedRowComponent,
        TDSThSelectionComponent], imports: [BidiModule,
        FormsModule,
        TDSOutletModule,
        TDSRadioModule,
        TDSCheckBoxModule,
        TDSDropDownModule,
        TDSButtonModule,
        CommonModule,
        PlatformModule,
        TDSPaginationModule,
        TDSResizeObserverModule,
        TDSSpinnerModule,
        TDSI18nModule,
        TDSEmptyModule,
        ScrollingModule], exports: [TDSTableComponent,
        TDSThAddOnComponent,
        TDSTableCellDirective,
        TDSThMeasureDirective,
        TDSTdAddOnComponent,
        TDSTheadComponent,
        TDSTbodyComponent,
        TDSTrDirective,
        TDSTableVirtualScrollDirective,
        TDSCellFixedDirective,
        TDSFilterTriggerComponent,
        TDSTrExpandDirective,
        TDSCellBreakWordDirective,
        TDSCellAlignDirective,
        TDSCellEllipsisDirective,
        TDSTableFixedRowComponent,
        TDSThSelectionComponent] }); })();

/**
 * Generated bundle index. Do not edit.
 */

export { TDSCellAlignDirective, TDSCellBreakWordDirective, TDSCellEllipsisDirective, TDSCellFixedDirective, TDSFilterTriggerComponent, TDSRowExpandButtonDirective, TDSRowIndentDirective, TDSTableCellDirective, TDSTableComponent, TDSTableContentComponent, TDSTableDataService, TDSTableFilterComponent, TDSTableFixedRowComponent, TDSTableInnerDefaultComponent, TDSTableInnerScrollComponent, TDSTableModule, TDSTableSelectionComponent, TDSTableSortersComponent, TDSTableStyleService, TDSTableTitleFooterComponent, TDSTableVirtualScrollDirective, TDSTbodyComponent, TDSTdAddOnComponent, TDSThAddOnComponent, TDSThMeasureDirective, TDSThSelectionComponent, TDSTheadComponent, TDSTrDirective, TDSTrExpandDirective, TDSTrMeasureComponent };
//# sourceMappingURL=tds-ui-table.mjs.map
