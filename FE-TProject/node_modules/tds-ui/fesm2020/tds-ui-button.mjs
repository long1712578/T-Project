import * as i0 from '@angular/core';
import { Component, ChangeDetectionStrategy, ViewEncapsulation, Directive, Optional, Input, NgModule } from '@angular/core';
import * as i2 from '@angular/common';
import { CommonModule } from '@angular/common';
import { OverlayModule } from '@angular/cdk/overlay';
import { PortalModule } from '@angular/cdk/portal';
import * as i3 from 'tds-ui/progress-spinner';
import { TDSSpinnerModule } from 'tds-ui/progress-spinner';
import { __decorate } from 'tslib';
import { Subject, fromEvent } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { InputBoolean } from 'tds-ui/shared/utility';
import * as i4 from 'tds-ui/core/outlet';
import { TDSOutletModule } from 'tds-ui/core/outlet';

const _c0$7 = ["*"];
class TDSButtonGroupComponent {
    constructor() {
    }
    ngOnInit() {
    }
}
TDSButtonGroupComponent.ɵfac = function TDSButtonGroupComponent_Factory(t) { return new (t || TDSButtonGroupComponent)(); };
TDSButtonGroupComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSButtonGroupComponent, selectors: [["tds-button-group"]], hostAttrs: [1, "inline-flex"], ngContentSelectors: _c0$7, decls: 1, vars: 0, template: function TDSButtonGroupComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSButtonGroupComponent, [{
        type: Component,
        args: [{
                selector: 'tds-button-group',
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                host: {
                    class: "inline-flex"
                },
                preserveWhitespaces: false,
                template: `
    <ng-content></ng-content>
  `
            }]
    }], function () { return []; }, null); })();

class TDSButtonBase {
    constructor(ngZone, elementRef, cdr, _buttonGroup) {
        this.ngZone = ngZone;
        this.elementRef = elementRef;
        this.cdr = cdr;
        this._buttonGroup = _buttonGroup;
        this.loading = false;
        this.color = 'primary';
        this.size = 'md';
        this.disabled = false;
        this.rounded = 'rounded-md';
        this.cssClass = '';
        this.spinerColor = 'white';
        this.loadingCss = '';
        this.destroy$ = new Subject();
    }
    ngOnInit() {
        this.buildCss();
        this.ngZone.runOutsideAngular(() => {
            // Caretaker note: this event listener could've been added through `host.click` or `HostListener`.
            // The compiler generates the `ɵɵlistener` instruction which wraps the actual listener internally into the
            // function, which runs `markDirty()` before running the actual listener (the decorated class method).
            // Since we're preventing the default behavior and stopping event propagation this doesn't require Angular to run the change detection.
            fromEvent(this.elementRef.nativeElement, 'click', { capture: true })
                .pipe(takeUntil(this.destroy$))
                .subscribe(event => {
                if ((this.disabled && event.target?.tagName === 'A') || this.loading) {
                    event.preventDefault();
                    event.stopImmediatePropagation();
                }
            });
        });
    }
    ngOnChanges(changes) {
        const { size, loading, color, loadingTemplate, disabled } = changes;
        if ((size && !size.firstChange) || (loading && !loading.firstChange) || (color && !color.firstChange) || (disabled && !disabled.firstChange)) {
            this.buildCss();
            this.cdr.markForCheck();
        }
        if (loadingTemplate && !loadingTemplate.firstChange) {
            this.cdr.markForCheck();
        }
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    getClassCssLoading() {
        return `absolute -inset-px opacity-[.35] bg-white cursor-progress dark:bg-d-neutral-3-50 ${this.getClassCssButtonGroup()}`;
    }
    getClassCssDisabled() {
        return 'cursor-not-allowed border text-neutral-1-300 border-neutral-2-200 bg-neutral-3-50 dark:text-d-neutral-1-300 dark:border-d-neutral-2-200 dark:bg-d-neutral-3-200 ';
    }
    getClassCssActive() {
        let result = 'focus:ring focus:outline-none cursor-pointer';
        switch (this.color) {
            case "primary":
                result += ` text-white ring-primary-1 border-primary-1 bg-primary-1 hover:bg-primary-2 focus:bg-primary-1 hover:border-primary-2 focus:border-primary-1 dark:ring-d-primary-1 dark:border-d-primary-1 dark:bg-d-primary-1 dark:hover:bg-d-primary-2 dark:focus:bg-d-primary-1 dark:hover:border-d-primary-2 dark:focus:border-d-primary-1 `;
                break;
            case "secondary":
                result += ` text-neutral-1-900 dark:text-d-neutral-1-900  ring-primary-1 dark:ring-d-primary-1 border-neutral-2-200 dark:border-d-neutral-2-200 bg-white hover:bg-neutral-3-50 focus:bg-white dark:focus:bg-d-neutral-3-300 focus:border-primary-1 dark:focus:border-d-primary-1 dark:bg-d-neutral-3-300 dark:hover:bg-d-neutral-3-400 `;
                break;
            case 'info':
                result += ` text-white ring-info-400 border-info-400 bg-info-400 hover:bg-info-500 focus:bg-info-400 hover:border-info-500 focus:border-info-400  dark:ring-d-info-400 dark:border-d-info-400 dark:bg-d-info-400 dark:hover:bg-d-info-500 dark:focus:bg-d-info-400 dark:hover:border-d-info-500 dark:focus:border-d-info-400`;
                break;
            case 'success':
                result += ` text-white ring-success-400 border-success-400 bg-success-400 hover:bg-success-500 focus:bg-success-400 hover:border-success-500 focus:border-success-400  dark:ring-d-success-400 dark:border-d-success-400 dark:bg-d-success-400 dark:hover:bg-d-success-500 dark:focus:bg-d-success-400 dark:hover:border-d-success-500 dark:focus:border-d-success-400 `;
                break;
            case 'warning':
                result += ` text-white ring-warning-400 border-warning-400 bg-warning-400 hover:bg-warning-500 focus:bg-warning-400 hover:border-warning-500 focus:border-warning-400 dark:ring-d-warning-400 dark:border-d-warning-400 dark:bg-d-warning-400 dark:hover:bg-d-warning-500 dark:focus:bg-d-warning-400 dark:hover:border-d-warning-500 dark:focus:border-d-warning-400 `;
                break;
            case 'error':
                result += ` text-white ring-error-400 border-error-400 bg-error-400 hover:bg-error-500 focus:bg-error-400 hover:border-error-500 focus:border-error-400 dark:ring-d-error-400 dark:border-d-error-400 dark:bg-d-error-400 dark:hover:bg-d-error-500 dark:focus:bg-d-error-400 dark:hover:border-d-error-500 dark:focus:border-d-error-400 `;
                break;
            case 'red':
                result += ' text-white ring-base-red-500 border-base-red-500 bg-base-red-500 hover:bg-base-red-600 focus:bg-base-red-500 hover:border-base-red-600 focus:border-base-red-500 dark:ring-d-base-red-500 dark:border-d-base-red-500 dark:bg-d-base-red-500 dark:hover:bg-d-base-red-600 dark:focus:bg-d-base-red-500 dark:hover:border-d-base-red-600 dark:focus:border-d-base-red-500 ';
                break;
            case 'yellow':
                result += ' text-white ring-base-yellow-500 border-base-yellow-500 bg-base-yellow-500 hover:bg-base-yellow-600 focus:bg-base-yellow-500 hover:border-base-yellow-600 focus:border-base-yellow-500 dark:ring-d-base-yellow-500 dark:border-d-base-yellow-500 dark:bg-d-base-yellow-500 dark:hover:bg-d-base-yellow-600 dark:focus:bg-d-base-yellow-500 dark:hover:border-d-base-yellow-600 dark:focus:border-d-base-yellow-500 ';
                break;
            case 'green':
                result += ' text-white ring-base-green-500 border-base-green-500 bg-base-green-500 hover:bg-base-green-600 focus:bg-base-green-500 hover:border-base-green-600 focus:border-base-green-500 dark:ring-d-base-green-500 dark:border-d-base-green-500 dark:bg-d-base-green-500 dark:hover:bg-d-base-green-600 dark:focus:bg-d-base-green-500 dark:hover:border-d-base-green-600 dark:focus:border-d-base-green-500 ';
                break;
            case 'blue':
                result += ' text-white ring-base-blue-500 border-base-blue-500 bg-base-blue-500 hover:bg-base-blue-600 focus:bg-base-blue-500 hover:border-base-blue-600 focus:border-base-blue-500 dark:ring-d-base-blue-500 dark:border-d-base-blue-500 dark:bg-d-base-blue-500 dark:hover:bg-d-base-blue-600 dark:focus:bg-d-base-blue-500 dark:hover:border-d-base-blue-600 dark:focus:border-d-base-blue-500 ';
                break;
            case 'indigo':
                result += ' text-white ring-base-indigo-500 border-base-indigo-500 bg-base-indigo-500 hover:bg-base-indigo-600 focus:bg-base-indigo-500 hover:border-base-indigo-600 focus:border-base-indigo-500 dark:ring-d-base-indigo-500 dark:border-d-base-indigo-500 dark:bg-d-base-indigo-500 dark:hover:bg-d-base-indigo-600 dark:focus:bg-d-base-indigo-500 dark:hover:border-d-base-indigo-600 dark:focus:border-d-base-indigo-500 ';
                break;
            case 'purple':
                result += ' text-white ring-base-purple-500 border-base-purple-500 bg-base-purple-500 hover:bg-base-purple-600 focus:bg-base-purple-500 hover:border-base-purple-600 focus:border-base-purple-500 dark:ring-d-base-purple-500 dark:border-d-base-purple-500 dark:bg-d-base-purple-500 dark:hover:bg-d-base-purple-600 dark:focus:bg-d-base-purple-500 dark:hover:border-d-base-purple-600 dark:focus:border-d-base-purple-500 ';
                break;
            case 'pink':
                result += ' text-white ring-base-pink-500 border-base-pink-500 bg-base-pink-500 hover:bg-base-pink-600 focus:bg-base-pink-500 hover:border-base-pink-600 focus:border-base-pink-500 dark:ring-d-base-pink-500 dark:border-d-base-pink-500 dark:bg-d-base-pink-500 dark:hover:bg-d-base-pink-600 dark:focus:bg-d-base-pink-500 dark:hover:border-d-base-pink-600 dark:focus:border-d-base-pink-500 ';
                break;
            case 'amber':
                result += ' text-white ring-base-amber-500 border-base-amber-500 bg-base-amber-500 hover:bg-base-amber-600 focus:bg-base-amber-500 hover:border-base-amber-600 focus:border-base-amber-500 dark:ring-d-base-amber-500 dark:border-d-base-amber-500 dark:bg-d-base-amber-500 dark:hover:bg-d-base-amber-600 dark:focus:bg-d-base-amber-500 dark:hover:border-d-base-amber-600 dark:focus:border-d-base-amber-500 ';
                break;
            case 'sky':
                result += ' text-white ring-base-sky-500 border-base-sky-500 bg-base-sky-500 hover:bg-base-sky-600 focus:bg-base-sky-500 hover:border-base-sky-600 focus:border-base-sky-500 dark:ring-d-base-sky-500 dark:border-d-base-sky-500 dark:bg-d-base-sky-500 dark:hover:bg-d-base-sky-600 dark:focus:bg-d-base-sky-500 dark:hover:border-d-base-sky-600 dark:focus:border-d-base-sky-500 ';
                break;
            case 'lime':
                result += ' text-white ring-base-lime-500 border-base-lime-500 bg-base-lime-500 hover:bg-base-lime-600 focus:bg-base-lime-500 hover:border-base-lime-600 focus:border-base-lime-500 dark:ring-d-base-lime-500 dark:border-d-base-lime-500 dark:bg-d-base-lime-500 dark:hover:bg-d-base-lime-600 dark:focus:bg-d-base-lime-500 dark:hover:border-d-base-lime-600 dark:focus:border-d-base-lime-500 ';
                break;
            case 'teal':
                result += ' text-white ring-base-teal-500 border-base-teal-500 bg-base-teal-500 hover:bg-base-teal-600 focus:bg-base-teal-500 hover:border-base-teal-600 focus:border-base-teal-500 dark:ring-d-base-teal-500 dark:border-d-base-teal-500 dark:bg-d-base-teal-500 dark:hover:bg-d-base-teal-600 dark:focus:bg-d-base-teal-500 dark:hover:border-d-base-teal-600 dark:focus:border-d-base-teal-500 ';
                break;
            case 'orange':
                result += ' text-white ring-base-orange-500 border-base-orange-500 bg-base-orange-500 hover:bg-base-orange-600 focus:bg-base-orange-500 hover:border-base-orange-600 focus:border-base-orange-500 dark:ring-d-base-orange-500 dark:border-d-base-orange-500 dark:bg-d-base-orange-500 dark:hover:bg-d-base-orange-600 dark:focus:bg-d-base-orange-500 dark:hover:border-d-base-orange-600 dark:focus:border-d-base-orange-500 ';
                break;
            // custom : dev tự style theo thiết kế
            case 'custom':
                result += '';
                break;
        }
        return result;
    }
    defaultClassCss() {
        let result = 'font-semibold box-border whitespace-nowrap border ring-opacity-20 dark:ring-opacity-20 relative text-body-2';
        return result;
    }
    getClassCssBySize(size) {
        let result = '';
        switch (size) {
            case "sm":
                result = 'py-1 px-2.5  h-sm';
                break;
            case "md":
                result = 'py-1.5 px-3  h-md';
                break;
            case "lg":
                result = 'py-2 px-4 h-lg';
                break;
            case "xl":
                result = 'py-2.5 px-4.5 h-xl';
                break;
        }
        return result;
    }
    getClassCssButtonGroup() {
        let result = '';
        if (this._buttonGroup) {
            result = 'first:rounded-l-md last:rounded-r-md first:border-l last:border-r';
        }
        else {
            result = this.rounded;
        }
        return result;
    }
    buildCss() {
        this.cssClass = this.builClassCssButton();
        this.spinerColor = this.buildSpinerColor();
        this.loadingCss = this.getClassCssLoading();
    }
    builClassCssButton() {
        let result = '';
        if (this.elementRef.nativeElement.tagName === 'A') {
            result = 'inline-block ';
        }
        result += this.defaultClassCss();
        result += ` ${this.getClassCssBySize(this.size)}`;
        result += ` ${this.getClassCssButtonGroup()}`;
        if (this.disabled) {
            result += ` ${this.getClassCssDisabled()}`;
        }
        else {
            // custom : dev tự style theo thiết kế
            if (this.color != 'custom')
                result += ` ${this.getClassCssActive()}`;
        }
        return result;
    }
    buildSpinerColor() {
        let result = 'white';
        if (this.color == 'secondary') {
            result = 'primary';
        }
        return result;
    }
}
TDSButtonBase.ɵfac = function TDSButtonBase_Factory(t) { return new (t || TDSButtonBase)(i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(TDSButtonGroupComponent, 8)); };
TDSButtonBase.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: TDSButtonBase, inputs: { loading: "loading", color: "color", size: "size", loadingTemplate: "loadingTemplate", disabled: "disabled", rounded: "rounded" }, features: [i0.ɵɵNgOnChangesFeature] });
__decorate([
    InputBoolean()
], TDSButtonBase.prototype, "loading", void 0);
__decorate([
    InputBoolean()
], TDSButtonBase.prototype, "disabled", void 0);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSButtonBase, [{
        type: Directive
    }], function () { return [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: TDSButtonGroupComponent, decorators: [{
                type: Optional
            }] }]; }, { loading: [{
            type: Input
        }], color: [{
            type: Input
        }], size: [{
            type: Input
        }], loadingTemplate: [{
            type: Input
        }], disabled: [{
            type: Input
        }], rounded: [{
            type: Input
        }] }); })();

const _c0$6 = ["tds-button", ""];
function TDSButtonComponent_div_0_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function TDSButtonComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 5);
    i0.ɵɵtemplate(1, TDSButtonComponent_div_0_ng_container_1_Template, 1, 0, "ng-container", 6);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    i0.ɵɵnextContext();
    const _r4 = i0.ɵɵreference(5);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngTemplateOutlet", _r4);
} }
function TDSButtonComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "div");
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵclassMap(ctx_r1.loadingCss);
} }
function TDSButtonComponent_ng_template_2_div_0_tds_spinner_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "tds-spinner", 11);
} if (rf & 2) {
    const ctx_r10 = i0.ɵɵnextContext(3);
    i0.ɵɵproperty("color", ctx_r10.spinerColor);
} }
function TDSButtonComponent_ng_template_2_div_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 8);
    i0.ɵɵtemplate(1, TDSButtonComponent_ng_template_2_div_0_tds_spinner_1_Template, 1, 1, "tds-spinner", 9);
    i0.ɵɵelementStart(2, "div", 10);
    i0.ɵɵtext(3, " Loading... ");
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r9 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r9.loading);
} }
function TDSButtonComponent_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, TDSButtonComponent_ng_template_2_div_0_Template, 4, 1, "div", 7);
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    const _r6 = i0.ɵɵreference(7);
    i0.ɵɵproperty("ngIf", !ctx_r3.loadingTemplate)("ngIfElse", _r6);
} }
function TDSButtonComponent_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵprojection(0);
} }
function TDSButtonComponent_ng_template_6_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r11 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" ", ctx_r11.loadingTemplate, " ");
} }
function TDSButtonComponent_ng_template_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, TDSButtonComponent_ng_template_6_ng_container_0_Template, 2, 1, "ng-container", 12);
} if (rf & 2) {
    const ctx_r7 = i0.ɵɵnextContext();
    i0.ɵɵproperty("tdsStringTemplateOutlet", ctx_r7.loadingTemplate);
} }
const _c1$5 = ["*"];
class TDSButtonComponent extends TDSButtonBase {
    constructor(ngZone, elementRef, cdr, _buttonGroup) {
        super(ngZone, elementRef, cdr, _buttonGroup);
        this.ngZone = ngZone;
        this.elementRef = elementRef;
        this.cdr = cdr;
        this._buttonGroup = _buttonGroup;
    }
}
TDSButtonComponent.ɵfac = function TDSButtonComponent_Factory(t) { return new (t || TDSButtonComponent)(i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(TDSButtonGroupComponent, 8)); };
TDSButtonComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSButtonComponent, selectors: [["button", "tds-button", ""], ["a", "tds-button", ""]], hostVars: 4, hostBindings: function TDSButtonComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵattribute("tabindex", ctx.disabled ? -1 : ctx.tabIndex === null ? null : ctx.tabIndex)("disabled", ctx.disabled || null);
        i0.ɵɵclassMap(ctx.cssClass);
    } }, exportAs: ["tdsButton"], features: [i0.ɵɵInheritDefinitionFeature], attrs: _c0$6, ngContentSelectors: _c1$5, decls: 8, vars: 3, consts: [["class", "flex w-full items-center justify-center", 4, "ngIf", "ngIfElse"], [3, "class", 4, "ngIf"], ["loadingtmpl", ""], ["content", ""], ["CustomLoadingtmpl", ""], [1, "flex", "w-full", "items-center", "justify-center"], [4, "ngTemplateOutlet"], ["class", "flex w-full items-center", 4, "ngIf", "ngIfElse"], [1, "flex", "w-full", "items-center"], ["class", "w-4 h-4 mr-2", 3, "color", 4, "ngIf"], [1, "flex-auto"], [1, "w-4", "h-4", "mr-2", 3, "color"], [4, "tdsStringTemplateOutlet"]], template: function TDSButtonComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵtemplate(0, TDSButtonComponent_div_0_Template, 2, 1, "div", 0);
        i0.ɵɵtemplate(1, TDSButtonComponent_div_1_Template, 1, 2, "div", 1);
        i0.ɵɵtemplate(2, TDSButtonComponent_ng_template_2_Template, 1, 2, "ng-template", null, 2, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtemplate(4, TDSButtonComponent_ng_template_4_Template, 1, 0, "ng-template", null, 3, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtemplate(6, TDSButtonComponent_ng_template_6_Template, 1, 1, "ng-template", null, 4, i0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r2 = i0.ɵɵreference(3);
        i0.ɵɵproperty("ngIf", !ctx.loading || ctx.disabled)("ngIfElse", _r2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx.loading && !ctx.disabled);
    } }, directives: [i2.NgIf, i2.NgTemplateOutlet, i3.TDSProgressSpinnerComponent, i4.TDSStringTemplateOutletDirective], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSButtonComponent, [{
        type: Component,
        args: [{ selector: 'button[tds-button], a[tds-button]', exportAs: 'tdsButton', preserveWhitespaces: false, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, host: {
                    '[class]': 'cssClass',
                    '[attr.tabindex]': 'disabled ? -1 : (tabIndex === null ? null : tabIndex)',
                    '[attr.disabled]': 'disabled || null',
                }, template: "<div class='flex w-full items-center justify-center' *ngIf=\"!loading || disabled; else loadingtmpl\">\r\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n</div>\r\n<div [class]=\"loadingCss\" *ngIf=\"loading && !disabled\">\r\n</div>\r\n<ng-template #loadingtmpl>    \r\n    <div class='flex w-full items-center' *ngIf=\"!loadingTemplate; else CustomLoadingtmpl\">    \r\n        <tds-spinner *ngIf=\"loading\" [color]=\"spinerColor\" class=\"w-4 h-4 mr-2\"></tds-spinner>\r\n        <div class='flex-auto'>\r\n            Loading...\r\n        </div>\r\n    </div>\r\n</ng-template>\r\n<ng-template #content>\r\n    <ng-content></ng-content>\r\n</ng-template>\r\n<ng-template #CustomLoadingtmpl>\r\n    <ng-container *tdsStringTemplateOutlet=\"loadingTemplate\">\r\n        {{loadingTemplate}}\r\n    </ng-container>\r\n</ng-template>\r\n" }]
    }], function () { return [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: TDSButtonGroupComponent, decorators: [{
                type: Optional
            }] }]; }, null); })();

const _c0$5 = ["tds-button-icon", ""];
function TDSButtonIconComponent_div_0_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function TDSButtonIconComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 5);
    i0.ɵɵtemplate(1, TDSButtonIconComponent_div_0_ng_container_1_Template, 1, 0, "ng-container", 6);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    i0.ɵɵnextContext();
    const _r4 = i0.ɵɵreference(5);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngTemplateOutlet", _r4);
} }
function TDSButtonIconComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "div");
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵclassMap(ctx_r1.loadingCss);
} }
function TDSButtonIconComponent_ng_template_2_div_0_tds_spinner_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "tds-spinner", 9);
} if (rf & 2) {
    const ctx_r10 = i0.ɵɵnextContext(3);
    i0.ɵɵproperty("color", ctx_r10.spinerColor);
} }
function TDSButtonIconComponent_ng_template_2_div_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 5)(1, "div", 7);
    i0.ɵɵtemplate(2, TDSButtonIconComponent_ng_template_2_div_0_tds_spinner_2_Template, 1, 1, "tds-spinner", 8);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r9 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r9.loading);
} }
function TDSButtonIconComponent_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, TDSButtonIconComponent_ng_template_2_div_0_Template, 3, 1, "div", 0);
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    const _r6 = i0.ɵɵreference(7);
    i0.ɵɵproperty("ngIf", !ctx_r3.loadingTemplate)("ngIfElse", _r6);
} }
function TDSButtonIconComponent_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵprojection(0);
} }
function TDSButtonIconComponent_ng_template_6_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r11 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" ", ctx_r11.loadingTemplate, " ");
} }
function TDSButtonIconComponent_ng_template_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, TDSButtonIconComponent_ng_template_6_ng_container_0_Template, 2, 1, "ng-container", 10);
} if (rf & 2) {
    const ctx_r7 = i0.ɵɵnextContext();
    i0.ɵɵproperty("tdsStringTemplateOutlet", ctx_r7.loadingTemplate);
} }
const _c1$4 = ["*"];
class TDSButtonIconComponent extends TDSButtonComponent {
    constructor(ngZone, elementRef, cdr, _buttonGroup) {
        super(ngZone, elementRef, cdr, _buttonGroup);
        this.ngZone = ngZone;
        this.elementRef = elementRef;
        this.cdr = cdr;
        this._buttonGroup = _buttonGroup;
    }
    // getClassCssActive(): string {
    //     let result = '';
    //     switch (this.color) {
    //         case "primary":
    //             result += ` text-white ring-primary-1 border-primary-1 bg-primary-1 hover:bg-primary-2 focus:bg-primary-1 hover:border-primary-2 focus:border-primary-1 dark:ring-d-primary-1 dark:border-d-primary-1 dark:bg-d-primary-1 dark:hover:bg-d-primary-2 dark:focus:bg-d-primary-1 dark:hover:border-d-primary-2 dark:focus:border-d-primary-1 `;
    //             break;
    //         case "secondary":
    //             result += ` text-neutral-1-500 dark:text-d-neutral-1-500  ring-primary-1 dark:ring-d-primary-1 border-neutral-2-200 dark:border-d-neutral-2-200 bg-white hover:bg-neutral-3-50 focus:bg-white dark:focus:bg-d-neutral-3-300 focus:border-primary-1 dark:focus:border-d-primary-1 dark:bg-d-neutral-3-300 dark:hover:bg-d-neutral-3-400 `;
    //             break;
    //         case 'info':
    //             result += ` text-white ring-info-400 border-info-400 bg-info-400 hover:bg-info-500 focus:bg-info-400 hover:border-info-500 focus:border-info-400  dark:ring-d-info-400 dark:border-d-info-400 dark:bg-d-info-400 dark:hover:bg-d-info-500 dark:focus:bg-d-info-400 dark:hover:border-d-info-500 dark:focus:border-d-info-400 `;
    //             break;
    //         case 'success':
    //             result += ` text-white ring-success-400 border-success-400 bg-success-400 hover:bg-success-500 focus:bg-success-400 hover:border-success-500 focus:border-success-400 dark:ring-d-success-400 dark:border-d-success-400 dark:bg-d-success-400 dark:hover:bg-d-success-500 dark:focus:bg-d-success-400 dark:hover:border-d-success-500 dark:focus:border-d-success-400 `;
    //             break;
    //         case 'warning':
    //             result += ` text-white ring-warning-400 border-warning-400 bg-warning-400 hover:bg-warning-500 focus:bg-warning-400 hover:border-warning-500 focus:border-warning-400 dark:ring-d-warning-400 dark:border-d-warning-400 dark:bg-d-warning-400 dark:hover:bg-d-warning-500 dark:focus:bg-d-warning-400 dark:hover:border-d-warning-500 dark:focus:border-d-warning-400 `;
    //             break;
    //         case 'error':
    //             result += ` text-white ring-error-400 border-error-400 bg-error-400 hover:bg-error-500 focus:bg-error-400 hover:border-error-500 focus:border-error-400 dark:ring-d-error-400 dark:border-d-error-400 dark:bg-d-error-400 dark:hover:bg-d-error-500 dark:focus:bg-d-error-400 dark:hover:border-d-error-500 dark:focus:border-d-error-400 `;
    //             break;
    //     }
    //     return result;
    // }
    defaultClassCss() {
        let result = 'focus:outline-none box-border ring-opacity-20 dark:ring-opacity-20 focus:ring whitespace-nowrap border text-xl leading-5 relative';
        return result;
    }
    getClassCssBySize(size) {
        let result = '';
        switch (size) {
            case "sm":
                result = 'p-1 h-sm';
                break;
            case "md":
                result = 'p-1.5 h-md';
                break;
            case "lg":
                result = 'p-2 h-lg';
                break;
            case "xl":
                result = 'p-2.5  h-xl';
                break;
        }
        return result;
    }
}
TDSButtonIconComponent.ɵfac = function TDSButtonIconComponent_Factory(t) { return new (t || TDSButtonIconComponent)(i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(TDSButtonGroupComponent, 8)); };
TDSButtonIconComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSButtonIconComponent, selectors: [["button", "tds-button-icon", ""], ["a", "tds-button-icon", ""]], hostVars: 4, hostBindings: function TDSButtonIconComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵattribute("tabindex", ctx.disabled ? -1 : ctx.tabIndex === null ? null : ctx.tabIndex)("disabled", ctx.disabled || ctx.loading || null);
        i0.ɵɵclassMap(ctx.cssClass);
    } }, exportAs: ["tdsButtonIcon"], features: [i0.ɵɵInheritDefinitionFeature], attrs: _c0$5, ngContentSelectors: _c1$4, decls: 8, vars: 3, consts: [["class", "flex w-full items-center justify-center", 4, "ngIf", "ngIfElse"], [3, "class", 4, "ngIf"], ["loadingtmpl", ""], ["content", ""], ["CustomLoadingtmpl", ""], [1, "flex", "w-full", "items-center", "justify-center"], [4, "ngTemplateOutlet"], [1, "flex", "items-center", "justify-center", "w-5", "h-5"], ["class", "w-4 h-4", 3, "color", 4, "ngIf"], [1, "w-4", "h-4", 3, "color"], [4, "tdsStringTemplateOutlet"]], template: function TDSButtonIconComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵtemplate(0, TDSButtonIconComponent_div_0_Template, 2, 1, "div", 0);
        i0.ɵɵtemplate(1, TDSButtonIconComponent_div_1_Template, 1, 2, "div", 1);
        i0.ɵɵtemplate(2, TDSButtonIconComponent_ng_template_2_Template, 1, 2, "ng-template", null, 2, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtemplate(4, TDSButtonIconComponent_ng_template_4_Template, 1, 0, "ng-template", null, 3, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtemplate(6, TDSButtonIconComponent_ng_template_6_Template, 1, 1, "ng-template", null, 4, i0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r2 = i0.ɵɵreference(3);
        i0.ɵɵproperty("ngIf", !ctx.loading || ctx.disabled)("ngIfElse", _r2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx.loading && !ctx.disabled);
    } }, directives: [i2.NgIf, i2.NgTemplateOutlet, i3.TDSProgressSpinnerComponent, i4.TDSStringTemplateOutletDirective], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSButtonIconComponent, [{
        type: Component,
        args: [{ selector: 'button[tds-button-icon], a[tds-button-icon]', exportAs: 'tdsButtonIcon', preserveWhitespaces: false, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, host: {
                    '[class]': 'cssClass',
                    '[attr.tabindex]': 'disabled ? -1 : (tabIndex === null ? null : tabIndex)',
                    '[attr.disabled]': 'disabled || loading || null',
                }, template: "<div class='flex w-full items-center justify-center' *ngIf=\"!loading || disabled; else loadingtmpl\">\r\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n</div>\r\n<div [class]=\"loadingCss\" *ngIf=\"loading && !disabled\">\r\n</div>\r\n<ng-template #loadingtmpl>\r\n    <div class='flex w-full items-center justify-center' *ngIf=\"!loadingTemplate; else CustomLoadingtmpl\">\r\n        <div class=\"flex items-center justify-center w-5 h-5\">\r\n            <tds-spinner *ngIf=\"loading\" [color]=\"spinerColor\" class=\"w-4 h-4\"></tds-spinner>\r\n        </div>\r\n    </div>\r\n</ng-template>\r\n<ng-template #content>\r\n    <ng-content></ng-content>\r\n</ng-template>\r\n<ng-template #CustomLoadingtmpl>\r\n    <ng-container *tdsStringTemplateOutlet=\"loadingTemplate\">\r\n        {{loadingTemplate}}\r\n    </ng-container>\r\n</ng-template>" }]
    }], function () { return [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: TDSButtonGroupComponent, decorators: [{
                type: Optional
            }] }]; }, null); })();

const _c0$4 = ["tds-button-flat", ""];
function TDSButtonFlatComponent_div_0_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function TDSButtonFlatComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 5);
    i0.ɵɵtemplate(1, TDSButtonFlatComponent_div_0_ng_container_1_Template, 1, 0, "ng-container", 6);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    i0.ɵɵnextContext();
    const _r4 = i0.ɵɵreference(5);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngTemplateOutlet", _r4);
} }
function TDSButtonFlatComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "div");
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵclassMap(ctx_r1.loadingCss);
} }
function TDSButtonFlatComponent_ng_template_2_div_0_tds_spinner_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "tds-spinner", 11);
} if (rf & 2) {
    const ctx_r10 = i0.ɵɵnextContext(3);
    i0.ɵɵproperty("color", ctx_r10.spinerColor);
} }
function TDSButtonFlatComponent_ng_template_2_div_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 8);
    i0.ɵɵtemplate(1, TDSButtonFlatComponent_ng_template_2_div_0_tds_spinner_1_Template, 1, 1, "tds-spinner", 9);
    i0.ɵɵelementStart(2, "div", 10);
    i0.ɵɵtext(3, " Loading... ");
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r9 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r9.loading);
} }
function TDSButtonFlatComponent_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, TDSButtonFlatComponent_ng_template_2_div_0_Template, 4, 1, "div", 7);
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    const _r6 = i0.ɵɵreference(7);
    i0.ɵɵproperty("ngIf", !ctx_r3.loadingTemplate)("ngIfElse", _r6);
} }
function TDSButtonFlatComponent_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵprojection(0);
} }
function TDSButtonFlatComponent_ng_template_6_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r11 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" ", ctx_r11.loadingTemplate, " ");
} }
function TDSButtonFlatComponent_ng_template_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, TDSButtonFlatComponent_ng_template_6_ng_container_0_Template, 2, 1, "ng-container", 12);
} if (rf & 2) {
    const ctx_r7 = i0.ɵɵnextContext();
    i0.ɵɵproperty("tdsStringTemplateOutlet", ctx_r7.loadingTemplate);
} }
const _c1$3 = ["*"];
class TDSButtonFlatComponent extends TDSButtonBase {
    constructor(ngZone, elementRef, cdr, _buttonGroup) {
        super(ngZone, elementRef, cdr, _buttonGroup);
        this.ngZone = ngZone;
        this.elementRef = elementRef;
        this.cdr = cdr;
        this._buttonGroup = _buttonGroup;
    }
    getClassCssActive() {
        let result = 'dark:hover:bg-d-neutral-3-300 hover:bg-neutral-3-300 dark:focus:bg-d-neutral-3-300 focus:bg-neutral-3-300';
        switch (this.color) {
            case "primary":
                result += ` text-primary-1 dark:text-d-primary-1  ring-primary-1 dark:ring-d-primary-1 `;
                break;
            case "secondary":
                result += ` text-neutral-1-500 dark:text-d-neutral-1-500  ring-primary-1 dark:ring-d-primary-1  `;
                break;
            case 'info':
                result += ` text-info-400 dark:text-d-info-400 ring-info-400 dark:ring-d-info-400 `;
                break;
            case 'success':
                result += ` text-success-400 dark:text-d-success-400 ring-success-400 dark:ring-d-success-400 `;
                break;
            case 'warning':
                result += ` text-warning-400 dark:text-d-warning-400 ring-warning-400 dark:ring-d-warning-400 `;
                break;
            case 'error':
                result += ` text-error-400 dark:text-d-error-400 ring-error-400 dark:ring-d-error-400 `;
                break;
            case 'red':
                result += ' text-base-red-500 dark:text-d-base-red-500 ring-base-red-500 dark:ring-d-base-red-500 ';
                break;
            case 'yellow':
                result += ' text-base-yellow-500 dark:text-d-base-yellow-500 ring-base-yellow-500 dark:ring-d-base-yellow-500 ';
                break;
            case 'green':
                result += ' text-base-green-500 dark:text-d-base-green-500 ring-base-green-500 dark:ring-d-base-green-500 ';
                break;
            case 'blue':
                result += ' text-base-blue-500 dark:text-d-base-blue-500 ring-base-blue-500 dark:ring-d-base-blue-500 ';
                break;
            case 'indigo':
                result += ' text-base-indigo-500 dark:text-d-base-indigo-500 ring-base-indigo-500 dark:ring-d-base-indigo-500 ';
                break;
            case 'purple':
                result += ' text-base-purple-500 dark:text-d-base-purple-500 ring-base-purple-500 dark:ring-d-base-purple-500 ';
                break;
            case 'pink':
                result += ' text-base-pink-500 dark:text-d-base-pink-500 ring-base-pink-500 dark:ring-d-base-pink-500 ';
                break;
            case 'amber':
                result += ' text-base-amber-500 dark:text-d-base-amber-500 ring-base-amber-500 dark:ring-d-base-amber-500 ';
                break;
            case 'sky':
                result += ' text-base-sky-500 dark:text-d-base-sky-500 ring-base-sky-500 dark:ring-d-base-sky-500 ';
                break;
            case 'lime':
                result += ' text-base-lime-500 dark:text-d-base-lime-500 ring-base-lime-500 dark:ring-d-base-lime-500 ';
                break;
            case 'teal':
                result += ' text-base-teal-500 dark:text-d-base-teal-500 ring-base-teal-500 dark:ring-d-base-teal-500 ';
                break;
            case 'orange':
                result += ' text-base-orange-500 dark:text-d-base-orange-500 ring-base-orange-500 dark:ring-d-base-orange-500 ';
                break;
        }
        return result;
    }
    defaultClassCss() {
        let result = `focus:outline-none font-semibold box-border ring-opacity-20 dark:ring-opacity-20 focus:ring whitespace-nowrap  text-body-2 border-transparent relative`;
        return result;
    }
    getClassCssDisabled() {
        return 'cursor-not-allowed  text-neutral-1-300 dark:text-d-neutral-1-300 font-semibold';
    }
    buildSpinerColor() {
        // let result = 'white'
        if (this.color == 'secondary') {
            return 'primary';
        }
        else {
            return this.color;
        }
        // return result;
    }
}
TDSButtonFlatComponent.ɵfac = function TDSButtonFlatComponent_Factory(t) { return new (t || TDSButtonFlatComponent)(i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(TDSButtonGroupComponent, 8)); };
TDSButtonFlatComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSButtonFlatComponent, selectors: [["button", "tds-button-flat", ""], ["a", "tds-button-flat", ""]], hostVars: 4, hostBindings: function TDSButtonFlatComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵattribute("tabindex", ctx.disabled ? -1 : ctx.tabIndex === null ? null : ctx.tabIndex)("disabled", ctx.disabled || ctx.loading || null);
        i0.ɵɵclassMap(ctx.cssClass);
    } }, exportAs: ["tdsButtonFlat"], features: [i0.ɵɵInheritDefinitionFeature], attrs: _c0$4, ngContentSelectors: _c1$3, decls: 8, vars: 3, consts: [["class", "flex w-full items-center justify-center", 4, "ngIf", "ngIfElse"], [3, "class", 4, "ngIf"], ["loadingtmpl", ""], ["content", ""], ["CustomLoadingtmpl", ""], [1, "flex", "w-full", "items-center", "justify-center"], [4, "ngTemplateOutlet"], ["class", "flex w-full items-center", 4, "ngIf", "ngIfElse"], [1, "flex", "w-full", "items-center"], ["class", "w-4 h-4 mr-2", 3, "color", 4, "ngIf"], [1, "flex-auto"], [1, "w-4", "h-4", "mr-2", 3, "color"], [4, "tdsStringTemplateOutlet"]], template: function TDSButtonFlatComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵtemplate(0, TDSButtonFlatComponent_div_0_Template, 2, 1, "div", 0);
        i0.ɵɵtemplate(1, TDSButtonFlatComponent_div_1_Template, 1, 2, "div", 1);
        i0.ɵɵtemplate(2, TDSButtonFlatComponent_ng_template_2_Template, 1, 2, "ng-template", null, 2, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtemplate(4, TDSButtonFlatComponent_ng_template_4_Template, 1, 0, "ng-template", null, 3, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtemplate(6, TDSButtonFlatComponent_ng_template_6_Template, 1, 1, "ng-template", null, 4, i0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r2 = i0.ɵɵreference(3);
        i0.ɵɵproperty("ngIf", !ctx.loading || ctx.disabled)("ngIfElse", _r2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx.loading && !ctx.disabled);
    } }, directives: [i2.NgIf, i2.NgTemplateOutlet, i3.TDSProgressSpinnerComponent, i4.TDSStringTemplateOutletDirective], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSButtonFlatComponent, [{
        type: Component,
        args: [{ selector: 'button[tds-button-flat], a[tds-button-flat]', exportAs: 'tdsButtonFlat', preserveWhitespaces: false, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, host: {
                    '[class]': 'cssClass',
                    '[attr.tabindex]': 'disabled ? -1 : (tabIndex === null ? null : tabIndex)',
                    '[attr.disabled]': 'disabled || loading || null',
                }, template: "<div class='flex w-full items-center justify-center' *ngIf=\"!loading || disabled; else loadingtmpl\">\r\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n</div>\r\n<div [class]=\"loadingCss\" *ngIf=\"loading && !disabled\">\r\n</div>\r\n<ng-template #loadingtmpl>    \r\n    <div class='flex w-full items-center' *ngIf=\"!loadingTemplate; else CustomLoadingtmpl\">    \r\n        <tds-spinner *ngIf=\"loading\" [color]=\"spinerColor\" class=\"w-4 h-4 mr-2\"></tds-spinner>\r\n        <div class='flex-auto'>\r\n            Loading...\r\n        </div>\r\n    </div>\r\n</ng-template>\r\n<ng-template #content>\r\n    <ng-content></ng-content>\r\n</ng-template>\r\n<ng-template #CustomLoadingtmpl>\r\n    <ng-container *tdsStringTemplateOutlet=\"loadingTemplate\">\r\n        {{loadingTemplate}}\r\n    </ng-container>\r\n</ng-template>\r\n" }]
    }], function () { return [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: TDSButtonGroupComponent, decorators: [{
                type: Optional
            }] }]; }, null); })();

const _c0$3 = ["tds-button-flat-icon", ""];
function TDSButtonFlatIconComponent_div_0_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function TDSButtonFlatIconComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 5);
    i0.ɵɵtemplate(1, TDSButtonFlatIconComponent_div_0_ng_container_1_Template, 1, 0, "ng-container", 6);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    i0.ɵɵnextContext();
    const _r4 = i0.ɵɵreference(5);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngTemplateOutlet", _r4);
} }
function TDSButtonFlatIconComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "div");
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵclassMap(ctx_r1.loadingCss);
} }
function TDSButtonFlatIconComponent_ng_template_2_div_0_tds_spinner_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "tds-spinner", 9);
} if (rf & 2) {
    const ctx_r10 = i0.ɵɵnextContext(3);
    i0.ɵɵproperty("color", ctx_r10.spinerColor);
} }
function TDSButtonFlatIconComponent_ng_template_2_div_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 5)(1, "div", 7);
    i0.ɵɵtemplate(2, TDSButtonFlatIconComponent_ng_template_2_div_0_tds_spinner_2_Template, 1, 1, "tds-spinner", 8);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r9 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r9.loading);
} }
function TDSButtonFlatIconComponent_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, TDSButtonFlatIconComponent_ng_template_2_div_0_Template, 3, 1, "div", 0);
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    const _r6 = i0.ɵɵreference(7);
    i0.ɵɵproperty("ngIf", !ctx_r3.loadingTemplate)("ngIfElse", _r6);
} }
function TDSButtonFlatIconComponent_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵprojection(0);
} }
function TDSButtonFlatIconComponent_ng_template_6_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r11 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" ", ctx_r11.loadingTemplate, " ");
} }
function TDSButtonFlatIconComponent_ng_template_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, TDSButtonFlatIconComponent_ng_template_6_ng_container_0_Template, 2, 1, "ng-container", 10);
} if (rf & 2) {
    const ctx_r7 = i0.ɵɵnextContext();
    i0.ɵɵproperty("tdsStringTemplateOutlet", ctx_r7.loadingTemplate);
} }
const _c1$2 = ["*"];
class TDSButtonFlatIconComponent extends TDSButtonFlatComponent {
    constructor(ngZone, elementRef, cdr, _buttonGroup) {
        super(ngZone, elementRef, cdr, _buttonGroup);
        this.ngZone = ngZone;
        this.elementRef = elementRef;
        this.cdr = cdr;
        this._buttonGroup = _buttonGroup;
    }
    // getClassCssActive(): string {
    //     let result = 'dark:hover:bg-d-neutral-3-300 hover:bg-neutral-3-300 dark:focus:bg-d-neutral-3-300 focus:bg-neutral-3-300';
    //     switch (this.color) {
    //         case "primary":
    //             result += ` text-primary-1 dark:text-d-primary-1  ring-primary-1 dark:ring-d-primary-1 `;
    //             break;
    //         case "secondary":
    //             result += ` text-neutral-1-500 dark:text-d-neutral-1-500  ring-primary-1 dark:ring-d-primary-1 `;
    //             break;
    //         case 'info':
    //             result += ` text-info-400 dark:text-d-info-400 ring-info-400 dark:ring-d-info-400 `;
    //             break;
    //         case 'success':
    //             result += ` text-success-400 dark:text-d-success-400 ring-success-400 dark:ring-d-success-400 `;
    //             break;
    //         case 'warning':
    //             result += ` text-warning-400 dark:text-d-warning-400 ring-warning-400 dark:ring-d-warning-400 `;
    //             break;
    //         case 'error':
    //             result += ` text-error-400 dark:text-d-error-400 ring-error-400 dark:ring-d-error-400 `;
    //             break;
    //     }
    //     return result;
    // }
    defaultClassCss() {
        let result = `focus:outline-none box-border ring-opacity-20 dark:ring-opacity-20 focus:ring whitespace-nowrap border text-xl leading-5  border-transparent relative`;
        return result;
    }
    getClassCssDisabled() {
        return 'cursor-not-allowed  text-neutral-1-300 dark:text-d-neutral-1-300 font-semibold';
    }
    getClassCssBySize(size) {
        let result = '';
        switch (size) {
            case "sm":
                result = 'p-1 h-sm';
                break;
            case "md":
                result = 'p-1.5 h-md';
                break;
            case "lg":
                result = 'p-2 h-lg';
                break;
            case "xl":
                result = 'p-2.5  h-xl';
                break;
        }
        return result;
    }
}
TDSButtonFlatIconComponent.ɵfac = function TDSButtonFlatIconComponent_Factory(t) { return new (t || TDSButtonFlatIconComponent)(i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(TDSButtonGroupComponent, 8)); };
TDSButtonFlatIconComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSButtonFlatIconComponent, selectors: [["button", "tds-button-flat-icon", ""], ["a", "tds-button-flat-icon", ""]], hostVars: 4, hostBindings: function TDSButtonFlatIconComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵattribute("tabindex", ctx.disabled ? -1 : ctx.tabIndex === null ? null : ctx.tabIndex)("disabled", ctx.disabled || ctx.loading || null);
        i0.ɵɵclassMap(ctx.cssClass);
    } }, exportAs: ["tdsButtonFlatIcon"], features: [i0.ɵɵInheritDefinitionFeature], attrs: _c0$3, ngContentSelectors: _c1$2, decls: 8, vars: 3, consts: [["class", "flex w-full items-center justify-center", 4, "ngIf", "ngIfElse"], [3, "class", 4, "ngIf"], ["loadingtmpl", ""], ["content", ""], ["CustomLoadingtmpl", ""], [1, "flex", "w-full", "items-center", "justify-center"], [4, "ngTemplateOutlet"], [1, "flex", "items-center", "justify-center", "w-5", "h-5"], ["class", "w-4 h-4", 3, "color", 4, "ngIf"], [1, "w-4", "h-4", 3, "color"], [4, "tdsStringTemplateOutlet"]], template: function TDSButtonFlatIconComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵtemplate(0, TDSButtonFlatIconComponent_div_0_Template, 2, 1, "div", 0);
        i0.ɵɵtemplate(1, TDSButtonFlatIconComponent_div_1_Template, 1, 2, "div", 1);
        i0.ɵɵtemplate(2, TDSButtonFlatIconComponent_ng_template_2_Template, 1, 2, "ng-template", null, 2, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtemplate(4, TDSButtonFlatIconComponent_ng_template_4_Template, 1, 0, "ng-template", null, 3, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtemplate(6, TDSButtonFlatIconComponent_ng_template_6_Template, 1, 1, "ng-template", null, 4, i0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r2 = i0.ɵɵreference(3);
        i0.ɵɵproperty("ngIf", !ctx.loading || ctx.disabled)("ngIfElse", _r2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx.loading && !ctx.disabled);
    } }, directives: [i2.NgIf, i2.NgTemplateOutlet, i3.TDSProgressSpinnerComponent, i4.TDSStringTemplateOutletDirective], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSButtonFlatIconComponent, [{
        type: Component,
        args: [{ selector: 'button[tds-button-flat-icon], a[tds-button-flat-icon]', exportAs: 'tdsButtonFlatIcon', preserveWhitespaces: false, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, host: {
                    '[class]': 'cssClass',
                    '[attr.tabindex]': 'disabled ? -1 : (tabIndex === null ? null : tabIndex)',
                    '[attr.disabled]': 'disabled || loading || null',
                }, template: "<div class='flex w-full items-center justify-center' *ngIf=\"!loading || disabled; else loadingtmpl\">\r\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n</div>\r\n<div [class]=\"loadingCss\" *ngIf=\"loading && !disabled\">\r\n</div>\r\n<ng-template #loadingtmpl>\r\n    <div class='flex w-full items-center justify-center' *ngIf=\"!loadingTemplate; else CustomLoadingtmpl\">\r\n        <div class=\"flex items-center justify-center w-5 h-5\">\r\n            <tds-spinner *ngIf=\"loading\" [color]=\"spinerColor\" class=\"w-4 h-4\"></tds-spinner>\r\n        </div>\r\n    </div>\r\n</ng-template>\r\n<ng-template #content>\r\n    <ng-content></ng-content>\r\n</ng-template>\r\n<ng-template #CustomLoadingtmpl>\r\n    <ng-container *tdsStringTemplateOutlet=\"loadingTemplate\">\r\n        {{loadingTemplate}}\r\n    </ng-container>\r\n</ng-template>" }]
    }], function () { return [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: TDSButtonGroupComponent, decorators: [{
                type: Optional
            }] }]; }, null); })();

const _c0$2 = ["tds-button-outline", ""];
function TDSButtonOutlineComponent_div_0_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function TDSButtonOutlineComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 5);
    i0.ɵɵtemplate(1, TDSButtonOutlineComponent_div_0_ng_container_1_Template, 1, 0, "ng-container", 6);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    i0.ɵɵnextContext();
    const _r4 = i0.ɵɵreference(5);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngTemplateOutlet", _r4);
} }
function TDSButtonOutlineComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "div");
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵclassMap(ctx_r1.loadingCss);
} }
function TDSButtonOutlineComponent_ng_template_2_div_0_tds_spinner_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "tds-spinner", 11);
} if (rf & 2) {
    const ctx_r10 = i0.ɵɵnextContext(3);
    i0.ɵɵproperty("color", ctx_r10.spinerColor);
} }
function TDSButtonOutlineComponent_ng_template_2_div_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 8);
    i0.ɵɵtemplate(1, TDSButtonOutlineComponent_ng_template_2_div_0_tds_spinner_1_Template, 1, 1, "tds-spinner", 9);
    i0.ɵɵelementStart(2, "div", 10);
    i0.ɵɵtext(3, " Loading... ");
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r9 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r9.loading);
} }
function TDSButtonOutlineComponent_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, TDSButtonOutlineComponent_ng_template_2_div_0_Template, 4, 1, "div", 7);
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    const _r6 = i0.ɵɵreference(7);
    i0.ɵɵproperty("ngIf", !ctx_r3.loadingTemplate)("ngIfElse", _r6);
} }
function TDSButtonOutlineComponent_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵprojection(0);
} }
function TDSButtonOutlineComponent_ng_template_6_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r11 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" ", ctx_r11.loadingTemplate, " ");
} }
function TDSButtonOutlineComponent_ng_template_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, TDSButtonOutlineComponent_ng_template_6_ng_container_0_Template, 2, 1, "ng-container", 12);
} if (rf & 2) {
    const ctx_r7 = i0.ɵɵnextContext();
    i0.ɵɵproperty("tdsStringTemplateOutlet", ctx_r7.loadingTemplate);
} }
const _c1$1 = ["*"];
class TDSButtonOutlineComponent extends TDSButtonBase {
    constructor(ngZone, elementRef, cdr, _buttonGroup) {
        super(ngZone, elementRef, cdr, _buttonGroup);
        this.ngZone = ngZone;
        this.elementRef = elementRef;
        this.cdr = cdr;
        this._buttonGroup = _buttonGroup;
    }
    getClassCssActive() {
        let result = '';
        switch (this.color) {
            case "primary":
                result += ` text-primary-1 dark:text-d-primary-1  ring-primary-1 dark:ring-d-primary-1 border-primary-1 dark:border-d-primary-1 `;
                break;
            case "secondary":
                result += ` text-neutral-1-500 dark:text-d-neutral-1-500  ring-primary-1 dark:ring-d-primary-1  border-neutral-2-200 dark:border-d-neutral-2-200 focus:border-primary-1 dark:focus:border-d-primary-1 `;
                break;
            case 'info':
                result += ` text-info-400 dark:text-d-info-400 ring-info-400 dark:ring-d-info-400 border-info-400 dark:border-d-info-400 `;
                break;
            case 'success':
                result += ` text-success-400 dark:text-d-success-400 ring-success-400 dark:ring-d-success-400 border-success-400 dark:border-d-success-400 `;
                break;
            case 'warning':
                result += ` text-warning-400 dark:text-d-warning-400 ring-warning-400 dark:ring-d-warning-400 border-warning-400 dark:border-d-warning-400 `;
                break;
            case 'error':
                result += ` text-error-400 dark:text-d-error-400 ring-error-400 dark:ring-d-error-400 border-error-400 dark:border-d-error-400 `;
                break;
            case 'red':
                result += ' text-base-red-500 dark:text-d-base-red-500 ring-base-red-500 dark:ring-d-base-red-500 border-base-red-500 dark:border-d-base-red-500';
                break;
            case 'yellow':
                result += ' text-base-yellow-500 dark:text-d-base-yellow-500 ring-base-yellow-500 dark:ring-d-base-yellow-500 border-base-yellow-500 dark:border-d-base-yellow-500';
                break;
            case 'green':
                result += ' text-base-green-500 dark:text-d-base-green-500 ring-base-green-500 dark:ring-d-base-green-500 border-base-green-500 dark:border-d-base-green-500';
                break;
            case 'blue':
                result += ' text-base-blue-500 dark:text-d-base-blue-500 ring-base-blue-500 dark:ring-d-base-blue-500 border-base-blue-500 dark:border-d-base-blue-500';
                break;
            case 'indigo':
                result += ' text-base-indigo-500 dark:text-d-base-indigo-500 ring-base-indigo-500 dark:ring-d-base-indigo-500 border-base-indigo-500 dark:border-d-base-indigo-500';
                break;
            case 'purple':
                result += ' text-base-purple-500 dark:text-d-base-purple-500 ring-base-purple-500 dark:ring-d-base-purple-500 border-base-purple-500 dark:border-d-base-purple-500';
                break;
            case 'pink':
                result += ' text-base-pink-500 dark:text-d-base-pink-500 ring-base-pink-500 dark:ring-d-base-pink-500 border-base-pink-500 dark:border-d-base-pink-500';
                break;
            case 'amber':
                result += ' text-base-amber-500 dark:text-d-base-amber-500 ring-base-amber-500 dark:ring-d-base-amber-500 border-base-amber-500 dark:border-d-base-amber-500';
                break;
            case 'sky':
                result += ' text-base-sky-500 dark:text-d-base-sky-500 ring-base-sky-500 dark:ring-d-base-sky-500 border-base-sky-500 dark:border-d-base-sky-500';
                break;
            case 'lime':
                result += ' text-base-lime-500 dark:text-d-base-lime-500 ring-base-lime-500 dark:ring-d-base-lime-500 border-base-lime-500 dark:border-d-base-lime-500';
                break;
            case 'teal':
                result += ' text-base-teal-500 dark:text-d-base-teal-500 ring-base-teal-500 dark:ring-d-base-teal-500 border-base-teal-500 dark:border-d-base-teal-500';
                break;
            case 'orange':
                result += ' text-base-orange-500 dark:text-d-base-orange-500 ring-base-orange-500 dark:ring-d-base-orange-500 border-base-orange-500 dark:border-d-base-orange-500';
                break;
        }
        return result;
    }
    defaultClassCss() {
        let result = 'focus:outline-none font-semibold  box-border ring-opacity-20 dark:ring-opacity-20 focus:ring whitespace-nowrap border  relative text-body-2';
        return result;
    }
    // getClassCssBySize(size: ButtonSize): string {   
    //     let result: string = '';
    //     switch (size) {
    //         case "sm":
    //             result = 'p-1 h-sm';
    //             break;
    //         case "md":
    //             result = 'p-1.5 h-md';
    //             break;
    //         case "lg":
    //             result = 'p-2 h-lg';
    //             break;
    //         case "xl":
    //             result = 'p-2.5  h-xl';
    //             break;
    //     }
    //     return result;
    // }
    buildSpinerColor() {
        // let result = 'white'
        if (this.color == 'secondary') {
            return 'primary';
        }
        else {
            return this.color;
        }
        // return result;
    }
}
TDSButtonOutlineComponent.ɵfac = function TDSButtonOutlineComponent_Factory(t) { return new (t || TDSButtonOutlineComponent)(i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(TDSButtonGroupComponent, 8)); };
TDSButtonOutlineComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSButtonOutlineComponent, selectors: [["button", "tds-button-outline", ""], ["a", "tds-button-outline", ""]], hostVars: 4, hostBindings: function TDSButtonOutlineComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵattribute("tabindex", ctx.disabled ? -1 : ctx.tabIndex === null ? null : ctx.tabIndex)("disabled", ctx.disabled || ctx.loading || null);
        i0.ɵɵclassMap(ctx.cssClass);
    } }, exportAs: ["tdsButtonOutline"], features: [i0.ɵɵInheritDefinitionFeature], attrs: _c0$2, ngContentSelectors: _c1$1, decls: 8, vars: 3, consts: [["class", "flex w-full items-center justify-center", 4, "ngIf", "ngIfElse"], [3, "class", 4, "ngIf"], ["loadingtmpl", ""], ["content", ""], ["CustomLoadingtmpl", ""], [1, "flex", "w-full", "items-center", "justify-center"], [4, "ngTemplateOutlet"], ["class", "flex w-full items-center", 4, "ngIf", "ngIfElse"], [1, "flex", "w-full", "items-center"], ["class", "w-4 h-4 mr-2", 3, "color", 4, "ngIf"], [1, "flex-auto"], [1, "w-4", "h-4", "mr-2", 3, "color"], [4, "tdsStringTemplateOutlet"]], template: function TDSButtonOutlineComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵtemplate(0, TDSButtonOutlineComponent_div_0_Template, 2, 1, "div", 0);
        i0.ɵɵtemplate(1, TDSButtonOutlineComponent_div_1_Template, 1, 2, "div", 1);
        i0.ɵɵtemplate(2, TDSButtonOutlineComponent_ng_template_2_Template, 1, 2, "ng-template", null, 2, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtemplate(4, TDSButtonOutlineComponent_ng_template_4_Template, 1, 0, "ng-template", null, 3, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtemplate(6, TDSButtonOutlineComponent_ng_template_6_Template, 1, 1, "ng-template", null, 4, i0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r2 = i0.ɵɵreference(3);
        i0.ɵɵproperty("ngIf", !ctx.loading || ctx.disabled)("ngIfElse", _r2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx.loading && !ctx.disabled);
    } }, directives: [i2.NgIf, i2.NgTemplateOutlet, i3.TDSProgressSpinnerComponent, i4.TDSStringTemplateOutletDirective], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSButtonOutlineComponent, [{
        type: Component,
        args: [{ selector: 'button[tds-button-outline], a[tds-button-outline]', exportAs: 'tdsButtonOutline', preserveWhitespaces: false, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, host: {
                    '[class]': 'cssClass',
                    '[attr.tabindex]': 'disabled ? -1 : (tabIndex === null ? null : tabIndex)',
                    '[attr.disabled]': 'disabled || loading || null',
                }, template: "<div class='flex w-full items-center justify-center' *ngIf=\"!loading || disabled; else loadingtmpl\">\r\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n</div>\r\n<div [class]=\"loadingCss\" *ngIf=\"loading && !disabled\">\r\n</div>\r\n<ng-template #loadingtmpl>    \r\n    <div class='flex w-full items-center' *ngIf=\"!loadingTemplate; else CustomLoadingtmpl\">    \r\n        <tds-spinner *ngIf=\"loading\" [color]=\"spinerColor\" class=\"w-4 h-4 mr-2\"></tds-spinner>\r\n        <div class='flex-auto'>\r\n            Loading...\r\n        </div>\r\n    </div>\r\n</ng-template>\r\n<ng-template #content>\r\n    <ng-content></ng-content>\r\n</ng-template>\r\n<ng-template #CustomLoadingtmpl>\r\n    <ng-container *tdsStringTemplateOutlet=\"loadingTemplate\">\r\n        {{loadingTemplate}}\r\n    </ng-container>\r\n</ng-template>\r\n" }]
    }], function () { return [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: TDSButtonGroupComponent, decorators: [{
                type: Optional
            }] }]; }, null); })();

const _c0$1 = ["tds-button-outline-icon", ""];
function TDSButtonOutlineIconComponent_div_0_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function TDSButtonOutlineIconComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 5);
    i0.ɵɵtemplate(1, TDSButtonOutlineIconComponent_div_0_ng_container_1_Template, 1, 0, "ng-container", 6);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    i0.ɵɵnextContext();
    const _r4 = i0.ɵɵreference(5);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngTemplateOutlet", _r4);
} }
function TDSButtonOutlineIconComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "div");
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵclassMap(ctx_r1.loadingCss);
} }
function TDSButtonOutlineIconComponent_ng_template_2_div_0_tds_spinner_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "tds-spinner", 9);
} if (rf & 2) {
    const ctx_r10 = i0.ɵɵnextContext(3);
    i0.ɵɵproperty("color", ctx_r10.spinerColor);
} }
function TDSButtonOutlineIconComponent_ng_template_2_div_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 5)(1, "div", 7);
    i0.ɵɵtemplate(2, TDSButtonOutlineIconComponent_ng_template_2_div_0_tds_spinner_2_Template, 1, 1, "tds-spinner", 8);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r9 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r9.loading);
} }
function TDSButtonOutlineIconComponent_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, TDSButtonOutlineIconComponent_ng_template_2_div_0_Template, 3, 1, "div", 0);
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    const _r6 = i0.ɵɵreference(7);
    i0.ɵɵproperty("ngIf", !ctx_r3.loadingTemplate)("ngIfElse", _r6);
} }
function TDSButtonOutlineIconComponent_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵprojection(0);
} }
function TDSButtonOutlineIconComponent_ng_template_6_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r11 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" ", ctx_r11.loadingTemplate, " ");
} }
function TDSButtonOutlineIconComponent_ng_template_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, TDSButtonOutlineIconComponent_ng_template_6_ng_container_0_Template, 2, 1, "ng-container", 10);
} if (rf & 2) {
    const ctx_r7 = i0.ɵɵnextContext();
    i0.ɵɵproperty("tdsStringTemplateOutlet", ctx_r7.loadingTemplate);
} }
const _c1 = ["*"];
class TDSButtonOutlineIconComponent extends TDSButtonOutlineComponent {
    constructor(ngZone, elementRef, cdr, _buttonGroup) {
        super(ngZone, elementRef, cdr, _buttonGroup);
        this.ngZone = ngZone;
        this.elementRef = elementRef;
        this.cdr = cdr;
        this._buttonGroup = _buttonGroup;
    }
    // getClassCssActive(): string {
    //     let result = '';
    //     switch (this.color) {
    //         case "primary":
    //             result += ` text-primary-1 dark:text-d-primary-1  ring-primary-1 dark:ring-d-primary-1 border-primary-1 dark:border-d-primary-1 `;
    //             break;
    //         case "secondary":
    //             result += ` text-neutral-1-500 dark:text-d-neutral-1-500  ring-primary-1 dark:ring-d-primary-1  border-neutral-2-200 dark:border-d-neutral-2-200 focus:border-primary-1 dark:focus:border-d-primary-1 `;
    //             break;
    //         case 'info':
    //             result += ` text-info-400 dark:text-d-info-400 ring-info-400 dark:ring-d-info-400 border-info-400 dark:border-d-info-400 `;
    //             break;
    //         case 'success':
    //             result += ` text-success-400 dark:text-d-success-400 ring-success-400 dark:ring-d-success-400 border-success-400 dark:border-d-success-400 `;
    //             break;
    //         case 'warning':
    //             result += ` text-warning-400 dark:text-d-warning-400 ring-warning-400 dark:ring-d-warning-400 border-warning-400 dark:border-d-warning-400 `;
    //             break;
    //         case 'error':
    //             result += ` text-error-400 dark:text-d-error-400 ring-error-400 dark:ring-d-error-400 border-error-400 dark:border-d-error-400 `;
    //             break;
    //         case 'amber':
    //             result += ` text-amber-500 dark:text-d-amber-500 ring-amber-500 dark:ring-d-amber-500 border-amber-500 dark:border-d-amber-500 `;
    //             break;
    //         case 'sky':
    //             result += ` text-sky-500 dark:text-d-sky-500 ring-sky-500 dark:ring-d-sky-500 border-sky-500 dark:border-d-sky-500 `;
    //             break;
    //         case 'lime':
    //             result += ` text-lime-500 dark:text-d-lime-500 ring-lime-500 dark:ring-d-lime-500 border-lime-500 dark:border-d-lime-500 `;
    //             break;
    //         case 'teal':
    //             result += ` text-teal-500 dark:text-d-teal-500 ring-teal-500 dark:ring-d-teal-500 border-teal-500 dark:border-d-teal-500 `;
    //             break;
    //         case 'orange':
    //             result += ` text-orange-500 dark:text-d-orange-500 ring-orange-500 dark:ring-d-orange-500 border-orange-500 dark:border-d-orange-500 `;
    //             break;
    //         case 'red':
    //             result += ` text-red-500 dark:text-d-red-500 ring-red-500 dark:ring-d-red-500 border-red-500 dark:border-d-red-500 `;
    //             break;
    //         case 'yellow':
    //             result += ` text-yellow-500 dark:text-d-yellow-500 ring-yellow-500 dark:ring-d-yellow-500 border-yellow-500 dark:border-d-yellow-500 `;
    //             break;
    //         case 'green':
    //             result += ` text-green-500 dark:text-d-green-500 ring-green-500 dark:ring-d-green-500 border-green-500 dark:border-d-green-500 `;
    //             break;
    //         case 'blue':
    //             result += ` text-blue-500 dark:text-d-blue-500 ring-blue-500 dark:ring-d-blue-500 border-blue-500 dark:border-d-blue-500 `;
    //             break;
    //         case 'indigo':
    //             result += ` text-indigo-500 dark:text-d-indigo-500 ring-indigo-500 dark:ring-d-indigo-500 border-indigo-500 dark:border-d-indigo-500 `;
    //             break;
    //         case 'purple':
    //             result += ` text-purple-500 dark:text-d-purple-500 ring-purple-500 dark:ring-d-purple-500 border-purple-500 dark:border-d-purple-500 `;
    //             break;
    //         case 'pink':
    //             result += ` text-pink-500 dark:text-d-pink-500 ring-pink-500 dark:ring-d-pink-500 border-pink-500 dark:border-d-pink-500 `;
    //             break;
    //     }
    //     return result;
    // }
    defaultClassCss() {
        let result = 'focus:outline-none box-border ring-opacity-20 dark:ring-opacity-20 focus:ring whitespace-nowrap border text-xl leading-5 border relative';
        return result;
    }
    getClassCssBySize(size) {
        let result = '';
        switch (size) {
            case "sm":
                result = 'p-1 h-sm';
                break;
            case "md":
                result = 'p-1.5 h-md';
                break;
            case "lg":
                result = 'p-2 h-lg';
                break;
            case "xl":
                result = 'p-2.5  h-xl';
                break;
        }
        return result;
    }
}
TDSButtonOutlineIconComponent.ɵfac = function TDSButtonOutlineIconComponent_Factory(t) { return new (t || TDSButtonOutlineIconComponent)(i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(TDSButtonGroupComponent, 8)); };
TDSButtonOutlineIconComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSButtonOutlineIconComponent, selectors: [["button", "tds-button-outline-icon", ""], ["a", "tds-button-outline-icon", ""]], hostVars: 4, hostBindings: function TDSButtonOutlineIconComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵattribute("tabindex", ctx.disabled ? -1 : ctx.tabIndex === null ? null : ctx.tabIndex)("disabled", ctx.disabled || ctx.loading || null);
        i0.ɵɵclassMap(ctx.cssClass);
    } }, exportAs: ["tdsButtonOutlineIcon"], features: [i0.ɵɵInheritDefinitionFeature], attrs: _c0$1, ngContentSelectors: _c1, decls: 8, vars: 3, consts: [["class", "flex w-full items-center justify-center", 4, "ngIf", "ngIfElse"], [3, "class", 4, "ngIf"], ["loadingtmpl", ""], ["content", ""], ["CustomLoadingtmpl", ""], [1, "flex", "w-full", "items-center", "justify-center"], [4, "ngTemplateOutlet"], [1, "flex", "items-center", "justify-center", "w-5", "h-5"], ["class", "w-4 h-4", 3, "color", 4, "ngIf"], [1, "w-4", "h-4", 3, "color"], [4, "tdsStringTemplateOutlet"]], template: function TDSButtonOutlineIconComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵtemplate(0, TDSButtonOutlineIconComponent_div_0_Template, 2, 1, "div", 0);
        i0.ɵɵtemplate(1, TDSButtonOutlineIconComponent_div_1_Template, 1, 2, "div", 1);
        i0.ɵɵtemplate(2, TDSButtonOutlineIconComponent_ng_template_2_Template, 1, 2, "ng-template", null, 2, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtemplate(4, TDSButtonOutlineIconComponent_ng_template_4_Template, 1, 0, "ng-template", null, 3, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtemplate(6, TDSButtonOutlineIconComponent_ng_template_6_Template, 1, 1, "ng-template", null, 4, i0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r2 = i0.ɵɵreference(3);
        i0.ɵɵproperty("ngIf", !ctx.loading || ctx.disabled)("ngIfElse", _r2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx.loading && !ctx.disabled);
    } }, directives: [i2.NgIf, i2.NgTemplateOutlet, i3.TDSProgressSpinnerComponent, i4.TDSStringTemplateOutletDirective], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSButtonOutlineIconComponent, [{
        type: Component,
        args: [{ selector: 'button[tds-button-outline-icon], a[tds-button-outline-icon]', exportAs: 'tdsButtonOutlineIcon', preserveWhitespaces: false, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, host: {
                    '[class]': 'cssClass',
                    '[attr.tabindex]': 'disabled ? -1 : (tabIndex === null ? null : tabIndex)',
                    '[attr.disabled]': 'disabled || loading || null',
                }, template: "<div class='flex w-full items-center justify-center' *ngIf=\"!loading || disabled; else loadingtmpl\">\r\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n</div>\r\n<div [class]=\"loadingCss\" *ngIf=\"loading && !disabled\">\r\n</div>\r\n<ng-template #loadingtmpl>\r\n    <div class='flex w-full items-center justify-center' *ngIf=\"!loadingTemplate; else CustomLoadingtmpl\">\r\n        <div class=\"flex items-center justify-center w-5 h-5\">\r\n            <tds-spinner *ngIf=\"loading\" [color]=\"spinerColor\" class=\"w-4 h-4\"></tds-spinner>\r\n        </div>\r\n    </div>\r\n</ng-template>\r\n<ng-template #content>\r\n    <ng-content></ng-content>\r\n</ng-template>\r\n<ng-template #CustomLoadingtmpl>\r\n    <ng-container *tdsStringTemplateOutlet=\"loadingTemplate\">\r\n        {{loadingTemplate}}\r\n    </ng-container>\r\n</ng-template>" }]
    }], function () { return [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: TDSButtonGroupComponent, decorators: [{
                type: Optional
            }] }]; }, null); })();

const _c0 = ["tds-button-close", ""];
function TDSButtonCloseComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelement(1, "i");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵclassMap(ctx_r0.iconTemplate);
} }
class TDSButtonCloseComponent {
    constructor(cdr) {
        this.cdr = cdr;
        this.size = 'xl';
        this.iconTemplate = 'tdsi-close-fill';
        this.cssClass = '';
    }
    ngOnChanges(changes) {
        this.buildCss();
        this.cdr.markForCheck();
    }
    ngOnInit() {
        this.buildCss();
    }
    buildCss() {
        this.cssClass = `${this.getClassCssBySize(this.size)} ${this.defaultClassCss()} `;
    }
    getClassCssBySize(size) {
        let result = '';
        switch (size) {
            case "sm":
                result = 'p-0 h-4';
                break;
            case "md":
                result = 'p-0.5 h-5';
                break;
            case "lg":
                result = 'p-1 h-6';
                break;
            case "xl":
                result = 'p-1.5 h-7';
                break;
        }
        return result;
    }
    defaultClassCss() {
        let result = 'focus:outline-none box-border  whitespace-nowrap  border-0 text-base leading-4 relative text-neutral-1-500 dark:text-d-neutral-1-500 hover:bg-neutral-3-50 dark:hover:bg-d-neutral-3-300 hover:rounded-md inline-flex items-center justify-center';
        return result;
    }
}
TDSButtonCloseComponent.ɵfac = function TDSButtonCloseComponent_Factory(t) { return new (t || TDSButtonCloseComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
TDSButtonCloseComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSButtonCloseComponent, selectors: [["button", "tds-button-close", ""], ["a", "tds-button-close", ""]], hostVars: 4, hostBindings: function TDSButtonCloseComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵattribute("tabindex", ctx.disabled ? -1 : ctx.tabIndex === null ? null : ctx.tabIndex)("disabled", ctx.disabled || ctx.loading || null);
        i0.ɵɵclassMap(ctx.cssClass);
    } }, inputs: { size: "size", iconTemplate: "iconTemplate" }, exportAs: ["tdsButtonClose"], features: [i0.ɵɵNgOnChangesFeature], attrs: _c0, decls: 1, vars: 1, consts: [[4, "tdsStringTemplateOutlet"]], template: function TDSButtonCloseComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtemplate(0, TDSButtonCloseComponent_ng_container_0_Template, 2, 2, "ng-container", 0);
    } if (rf & 2) {
        i0.ɵɵproperty("tdsStringTemplateOutlet", ctx.iconTemplate);
    } }, directives: [i4.TDSStringTemplateOutletDirective], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSButtonCloseComponent, [{
        type: Component,
        args: [{
                selector: 'button[tds-button-close], a[tds-button-close]',
                exportAs: 'tdsButtonClose',
                preserveWhitespaces: false,
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                template: `
   <ng-container *tdsStringTemplateOutlet="iconTemplate"><i [class]="iconTemplate"></i></ng-container>  
    `,
                host: {
                    '[class]': 'cssClass',
                    '[attr.tabindex]': 'disabled ? -1 : (tabIndex === null ? null : tabIndex)',
                    '[attr.disabled]': 'disabled || loading || null',
                }
            }]
    }], function () { return [{ type: i0.ChangeDetectorRef }]; }, { size: [{
            type: Input
        }], iconTemplate: [{
            type: Input
        }] }); })();

class TDSLinkDirective {
    constructor() {
        this.disabled = false;
        this.danger = false;
    }
    _haltDisabledEvents(event) {
        // A disabled button shouldn't apply any actions
        if (this.disabled) {
            event.preventDefault();
            event.stopImmediatePropagation();
        }
    }
}
TDSLinkDirective.ɵfac = function TDSLinkDirective_Factory(t) { return new (t || TDSLinkDirective)(); };
TDSLinkDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: TDSLinkDirective, selectors: [["a", "tds-link", ""]], hostAttrs: [1, "text-body-2", "font-semibold"], hostVars: 28, hostBindings: function TDSLinkDirective_HostBindings(rf, ctx) { if (rf & 1) {
        i0.ɵɵlistener("click", function TDSLinkDirective_click_HostBindingHandler($event) { return ctx._haltDisabledEvents($event); });
    } if (rf & 2) {
        i0.ɵɵclassProp("cursor-pointer", !ctx.disabled)("hover:underline", !ctx.disabled)("active:pointer-events-none", ctx.disabled)("cursor-not-allowed", ctx.disabled)("text-neutral-1-300", ctx.disabled)("dark:text-d-neutral-1-300", ctx.disabled)("text-info-400", !ctx.danger && !ctx.disabled)("dark:text-d-info-400", !ctx.danger && !ctx.disabled)("hover:text-info-500", !ctx.danger && !ctx.disabled)("dark:hover:text-d-info-500", !ctx.danger && !ctx.disabled)("text-error-400", ctx.danger && !ctx.disabled)("dark:text-d-error-400", ctx.danger && !ctx.disabled)("hover:text-error-500", ctx.danger && !ctx.disabled)("dark:hover:text-d-error-500", ctx.danger && !ctx.disabled);
    } }, inputs: { disabled: "disabled", danger: "danger" } });
__decorate([
    InputBoolean()
], TDSLinkDirective.prototype, "disabled", void 0);
__decorate([
    InputBoolean()
], TDSLinkDirective.prototype, "danger", void 0);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSLinkDirective, [{
        type: Directive,
        args: [{
                selector: 'a[tds-link]',
                host: {
                    'class': 'text-body-2 font-semibold ',
                    '[class.cursor-pointer]': '!disabled',
                    '[class.hover:underline]': '!disabled',
                    '[class.active:pointer-events-none]': 'disabled',
                    '[class.cursor-not-allowed]': 'disabled',
                    '[class.text-neutral-1-300]': 'disabled',
                    '[class.dark:text-d-neutral-1-300]': 'disabled',
                    '[class.text-info-400]': '!danger && !disabled',
                    '[class.dark:text-d-info-400]': '!danger && !disabled',
                    '[class.hover:text-info-500]': '!danger && !disabled',
                    '[class.dark:hover:text-d-info-500]': '!danger && !disabled',
                    '[class.text-error-400]': 'danger && !disabled',
                    '[class.dark:text-d-error-400]': 'danger && !disabled',
                    '[class.hover:text-error-500]': 'danger && !disabled',
                    '[class.dark:hover:text-d-error-500]': 'danger && !disabled',
                    '(click)': '_haltDisabledEvents($event)',
                }
            }]
    }], function () { return []; }, { disabled: [{
            type: Input
        }], danger: [{
            type: Input
        }] }); })();

class TDSButtonModule {
}
TDSButtonModule.ɵfac = function TDSButtonModule_Factory(t) { return new (t || TDSButtonModule)(); };
TDSButtonModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: TDSButtonModule });
TDSButtonModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [[
            CommonModule,
            OverlayModule,
            PortalModule,
            TDSSpinnerModule,
            TDSOutletModule
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSButtonModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    OverlayModule,
                    PortalModule,
                    TDSSpinnerModule,
                    TDSOutletModule
                ],
                declarations: [
                    TDSButtonGroupComponent,
                    TDSButtonComponent,
                    TDSButtonIconComponent,
                    TDSButtonFlatIconComponent,
                    TDSButtonOutlineIconComponent,
                    TDSButtonOutlineComponent,
                    TDSButtonFlatComponent,
                    TDSButtonCloseComponent,
                    TDSLinkDirective
                ],
                exports: [
                    TDSButtonGroupComponent,
                    TDSButtonComponent,
                    TDSButtonIconComponent,
                    TDSButtonFlatIconComponent,
                    TDSButtonOutlineIconComponent,
                    TDSButtonOutlineComponent,
                    TDSButtonFlatComponent,
                    TDSButtonCloseComponent,
                    TDSLinkDirective
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(TDSButtonModule, { declarations: [TDSButtonGroupComponent,
        TDSButtonComponent,
        TDSButtonIconComponent,
        TDSButtonFlatIconComponent,
        TDSButtonOutlineIconComponent,
        TDSButtonOutlineComponent,
        TDSButtonFlatComponent,
        TDSButtonCloseComponent,
        TDSLinkDirective], imports: [CommonModule,
        OverlayModule,
        PortalModule,
        TDSSpinnerModule,
        TDSOutletModule], exports: [TDSButtonGroupComponent,
        TDSButtonComponent,
        TDSButtonIconComponent,
        TDSButtonFlatIconComponent,
        TDSButtonOutlineIconComponent,
        TDSButtonOutlineComponent,
        TDSButtonFlatComponent,
        TDSButtonCloseComponent,
        TDSLinkDirective] }); })();

/**
 * List of classes to add to MatButton instances based on host attributes to
 * style as different variants.
 */
const BUTTON_HOST_ATTRIBUTES = [
    'tds-button',
    'tds-flat-button',
    'ta-icon-button',
    'ta-raised-button',
    'ta-stroked-button',
];
/** List of classes to add to buttons instances based on host attribute selector. */
const HOST_SELECTOR_TMT_CLASS_PAIR = [
    {
        selector: 'tds-button',
        tmtClasses: ['focus:outline-none', 'font-semibold', 'box-border', 'ring-opacity-20', 'focus:ring', 'whitespace-nowrap'],
    },
    {
        selector: 'tds-flat-button',
        tmtClasses: ['focus:outline-none', 'rounded-md', 'font-semibold', 'box-border', 'ring-opacity-20', 'focus:ring', 'whitespace-nowrap'],
    },
    {
        selector: 'tds-button-icon',
        tmtClasses: ['focus:outline-none', 'font-semibold', 'border', 'box-border', 'ring-opacity-20', 'focus:ring', 'whitespace-nowrap'],
    },
];
/** Mixin to augment a directive with a `color` property. */
function mixinButtonColor(base, defaultColor, defaultButtonType) {
    return class extends base {
        constructor(...args) {
            super(...args);
            this.defaultColor = defaultColor;
            this.defaultButtonType = defaultButtonType;
            // Set the default color that can be specified from the mixin.
            this.buttonType = defaultButtonType;
            this.color = defaultColor;
        }
        get buttonType() {
            return this._buttonType;
        }
        set buttonType(val) {
            this._buttonType = val;
        }
        get color() { return this._color; }
        set color(value) {
            if (this.buttonType) {
                const colorPalette = value || this.defaultColor;
                if (colorPalette !== this._color) {
                    if (this._color) {
                        const lstClass = this.getActiveBackgroundColor(this.color);
                        lstClass.forEach(cl => {
                            this._elementRef.nativeElement.classList.remove(cl);
                        });
                    }
                    if (colorPalette) {
                        const lstClass = this.getActiveBackgroundColor(colorPalette);
                        lstClass.forEach(cl => {
                            this._elementRef.nativeElement.classList.add(cl);
                        });
                    }
                    this._color = colorPalette;
                }
            }
        }
        getActiveBackgroundColor(color) {
            let result = [];
            switch (this.buttonType) {
                case "tds-button":
                    result = this.p_DefaultClass(color);
                    break;
                case "tds-flat-button":
                    result = this.p_FlatClass(color);
                    break;
                case "tds-button-icon":
                    result = this.p_ButtonIconClass(color);
                    break;
                default:
                    result = this.p_DefaultClass(color);
                    break;
            }
            return result;
        }
        p_DefaultClass(color) {
            let result = [];
            switch (color) {
                case "primary":
                    result = ['text-white', `ring-primary-1`, `border-primary-1`, `bg-primary-1`, `hover:bg-primary-2`, `focus:bg-primary-1`, `hover:border-primary-2`, `focus:border-primary-1`, `disabled:border-primary-1`, `disabled:bg-primary-1`, 'disabled:opacity-65'];
                    break;
                case "secondary":
                    result = ['text-neutral-1-900', 'dark:text-d-neutral-1-900', 'text-body-2', 'ring-primary-1', 'border-neutral-2-200', 'dark:border-d-neutral-2-200', 'bg-white', 'hover:bg-neutral-3-50', 'focus:bg-white', 'dark:focus:bg-d-neutral-3-300', 'focus:border-primary-1', 'dark:focus:border-primary-1', 'disabled:text-neutral-1-300', 'disabled:border-neutral-2-200', 'disabled:bg-neutral-3-50',
                        'dark:disabled:text-d-neutral-1-300', 'dark:disabled:border-d-neutral-2-200', 'dark:disabled:bg-d-neutral-3-200',
                        'dark:bg-d-neutral-3-300', 'dark:hover:bg-d-neutral-3-400'];
                    break;
                case 'info':
                    result = ['text-white', `ring-info-400`, `border-info-400`, `bg-info-400`, `hover:bg-info-500`, `focus:bg-info-400`, `hover:border-info-500`, `focus:border-info-400`, `disabled:border-info-400`, `disabled:bg-info-400`, 'disabled:opacity-65'];
                    break;
                case 'success':
                    result = ['text-white', `ring-success-400`, `border-success-400`, `bg-success-400`, `hover:bg-success-500`, `focus:bg-success-400`, `hover:border-success-500`, `focus:border-success-400`, `disabled:border-success-400`, `disabled:bg-success-400`, 'disabled:opacity-65'];
                    break;
                case 'warning':
                    result = ['text-white', `ring-warning-400`, `border-warning-400`, `bg-warning-400`, `hover:bg-warning-500`, `focus:bg-warning-400`, `hover:border-warning-500`, `focus:border-warning-400`, `disabled:border-warning-400`, `disabled:bg-warning-400`, 'disabled:opacity-65'];
                    break;
                case 'error':
                    result = ['text-white', `ring-error-400`, `border-error-400`, `bg-error-400`, `hover:bg-error-500`, `focus:bg-error-400`, `hover:border-error-500`, `focus:border-error-400`, `disabled:border-error-400`, `disabled:bg-error-400`, 'disabled:opacity-65'];
                    break;
                default:
                    result = ['text-white', `ring-${color}-400`, `border-${color}-400`, `bg-${color}-400`, `hover:bg-${color}-500`, `focus:bg-${color}-400`, `hover:border-${color}-500`, `focus:border-${color}-400`, `disabled:border-${color}-400`, `disabled:bg-${color}-400`, 'disabled:opacity-65'];
                    break;
            }
            return result;
        }
        p_ButtonIconClass(color) {
            let result = [];
            switch (color) {
                case "primary":
                    result = ['text-white', `ring-primary-1`, `border-primary-1`, `bg-primary-1`, `hover:bg-primary-2`, `hover:border-primary-2`, `focus:bg-primary-1`, `focus:border-primary-1`, `disabled:border-primary-1`, `disabled:bg-primary-1`, 'disabled:opacity-65'];
                    break;
                case "secondary":
                    result = ['text-neutral-1-500', 'ring-primary-1', 'border-neutral-2-200', 'bg-white', 'hover:bg-neutral-3-50', 'focus:bg-white', 'focus:border-primary-1', 'disabled:text-neutral-1-300', 'disabled:border-neutral-2-200', 'disabled:bg-neutral-3-50',
                        'dark:text-d-neutral-1-500', 'dark:border-d-neutral-2-200', 'dark:bg-d-neutral-3-200', 'dark:hover:bg-d-neutral-3-400', 'dark:focus:bg-d-neutral-3-300', 'dark:focus:border-primary-1', 'dark:disabled:text-d-neutral-1-300', 'dark:disabled:border-d-neutral-2-200', 'disabled:bg-d-neutral-3-200',
                    ];
                    break;
                default:
                    result = ['text-white', `ring-${color}-400`, `border-${color}-400`, `bg-${color}-400`, `hover:border-${color}-500`, `hover:bg-${color}-500`, `focus:bg-${color}-400`, `focus:border-${color}-400`, `disabled:border-${color}-400`, `disabled:bg-${color}-400`, 'disabled:opacity-65'];
                    break;
            }
            return result;
        }
        p_FlatClass(color) {
            let result = [];
            // switch (color) {
            //     default:
            result = [`text-body-2`, `focus:bg-neutral-3-50`, `ring-primary-1`, 'disabled:opacity-65', 'text-neutral-1-900', 'dark:text-d-neutral-1-900', 'dark:hover:bg-d-neutral-3-200', `dark:focus:bg-d-neutral-3-50`];
            //         break;
            // }
            return result;
        }
    };
}
function mixinButtonSize(base, defaultSize) {
    return class extends base {
        constructor(...args) {
            super(...args);
            this.defaultSize = defaultSize;
            // Set the default color that can be specified from the mixin.
            this.size = defaultSize;
        }
        get size() { return this._size; }
        set size(value) {
            const _size = value || this.defaultSize;
            if (_size !== this._size) {
                if (this._size) {
                    const lstClass = this.getClassbySize(this._size);
                    lstClass.forEach(cl => {
                        this._elementRef.nativeElement.classList.remove(cl);
                    });
                }
                if (_size) {
                    const lstClass = this.getClassbySize(_size);
                    lstClass.forEach(cl => {
                        this._elementRef.nativeElement.classList.add(cl);
                    });
                }
                this._size = defaultSize;
            }
        }
        getClassbySize(size) {
            let result = [];
            switch (size) {
                case "sm":
                    result = ['py-1', 'px-2.5', 'text-body-2', 'h-sm'];
                    break;
                case "md":
                    result = ['py-1.5', 'px-3', 'text-body-2', 'h-md'];
                    break;
                case "lg":
                    result = ['py-2', 'px-4', 'text-body-2', 'h-lg'];
                    break;
            }
            return result;
        }
    };
}

/**
 * Generated bundle index. Do not edit.
 */

export { BUTTON_HOST_ATTRIBUTES, HOST_SELECTOR_TMT_CLASS_PAIR, TDSButtonCloseComponent, TDSButtonComponent, TDSButtonFlatComponent, TDSButtonFlatIconComponent, TDSButtonGroupComponent, TDSButtonIconComponent, TDSButtonModule, TDSButtonOutlineComponent, TDSButtonOutlineIconComponent, TDSLinkDirective, mixinButtonColor, mixinButtonSize };
//# sourceMappingURL=tds-ui-button.mjs.map
