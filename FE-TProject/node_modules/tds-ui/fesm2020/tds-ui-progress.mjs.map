{"version":3,"file":"tds-ui-progress.mjs","sources":["../../../projects/tds-ui/progress/utils.ts","../../../projects/tds-ui/progress/progress.component.ts","../../../projects/tds-ui/progress/progress.module.ts","../../../projects/tds-ui/progress/tds-ui-progress.ts"],"sourcesContent":["\r\n\r\nimport { TDSProgressColorGradient, TDSProgressGradientProgress } from './typings';\r\n\r\nfunction stripPercentToNumber(percent: string): number {\r\n  return +percent.replace('%', '');\r\n}\r\n\r\nexport const sortGradient = (gradients: TDSProgressGradientProgress) => {\r\n  let tempArr: Array<{ key: number; value: string }> = [];\r\n\r\n  Object.keys(gradients).forEach(key => {\r\n    const value = gradients[key];\r\n    const formatKey = stripPercentToNumber(key);\r\n    if (!isNaN(formatKey)) {\r\n      tempArr.push({\r\n        key: formatKey,\r\n        value\r\n      });\r\n    }\r\n  });\r\n\r\n  tempArr = tempArr.sort((a, b) => a.key - b.key);\r\n  return tempArr;\r\n};\r\n\r\nexport const handleCircleGradient = (strokeColor: TDSProgressGradientProgress): Array<{ offset: string; color: string }> => {\r\n  return sortGradient(strokeColor).map(({ key, value }) => ({ offset: `${key}%`, color: value }));\r\n};\r\n\r\nexport const handleLinearGradient = (strokeColor: TDSProgressColorGradient) => {\r\n  const { from = '#1890ff', to = '#1890ff', direction = 'to right', ...rest } = strokeColor;\r\n  if (Object.keys(rest).length !== 0) {\r\n    const sortedGradients = sortGradient(rest as TDSProgressGradientProgress)\r\n      .map(({ key, value }) => `${value} ${key}%`)\r\n      .join(', ');\r\n    return `linear-gradient(${direction}, ${sortedGradients})`;\r\n  }\r\n  return `linear-gradient(${direction}, ${from}, ${to})`;\r\n};\r\n","\r\n\r\nimport { Direction, Directionality } from '@angular/cdk/bidi';\r\nimport { NumberInput } from '@angular/cdk/coercion';\r\nimport { E } from '@angular/cdk/keycodes';\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  Optional,\r\n  SimpleChanges,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { NgStyleInterface } from 'tds-ui/core/config';\r\nimport { InputBoolean, InputNumber, TDSHelperObject, TDSHelperString } from 'tds-ui/shared/utility';\r\n\r\nimport {\r\n  TDSProgressCirclePath,\r\n  TDSProgressColorGradient,\r\n  TDSProgressFormatter,\r\n  TDSProgressGapPositionType,\r\n  TDSProgressGradientProgress,\r\n  TDSProgressStatusType,\r\n  TDSProgressStepItem,\r\n  TDSProgressStrokeColorType,\r\n  TDSProgressStrokeLinecapType,\r\n  TDSProgressTypeType\r\n} from './typings';\r\nimport { handleCircleGradient, handleLinearGradient } from './utils';\r\n\r\nlet gradientIdSeed = 0;\r\n\r\nconst TDS_CONFIG_MODULE_NAME = 'progress';\r\nconst statusIconNameMap = new Map([\r\n  ['success', 'success'],\r\n  ['exception', 'error']\r\n]);\r\nconst statusColorMap = new Map([\r\n  ['normal', '#28A745'],\r\n  ['exception', '#28A745'],\r\n  ['success', '#28A745']\r\n]);\r\nconst defaultFormatter: TDSProgressFormatter = (p: number): string => `${p}%`;\r\n\r\n@Component({\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  selector: 'tds-progress',\r\n  exportAs: 'tdsProgress',\r\n  preserveWhitespaces: false,\r\n  template: `\r\n    <ng-template #progressInfoTemplate>\r\n      <span class=\"tds-progress-text pl-2 text-body-2 font-regular text-neutral-1-900 dark:text-d-neutral-1-900\" *ngIf=\"showInfo\" [ngClass]=\"{'p-0 m-0 absolute w-full inset-0 flex items-center justify-center':isCircleStyle}\">\r\n        <ng-container *ngIf=\"(_status === 'exception' || _status === 'success') && !format; else formatTemplate\">\r\n          <span [ngClass]=\"icon\"> </span>\r\n        </ng-container>\r\n        <ng-template #formatTemplate>\r\n          <ng-container *tdsStringTemplateOutlet=\"formatter; context: { $implicit: percent }; let formatter\">\r\n            {{ formatter(percent) }}\r\n          </ng-container>\r\n        </ng-template>\r\n      </span>\r\n    </ng-template>\r\n\r\n    <div\r\n      class=\"tds-progress  m-0 p-0 border-box  {{'tds-progress-_status-' + _status}}\"\r\n      [ngClass]=\"{'relative w-full ':type == 'line'}\"\r\n      [class.tds-progress-line]=\"type == 'line'\"\r\n      [class.tds-progress-small]=\"size == 'small'\"\r\n      [class.tds-progress-show-info]=\"showInfo\"\r\n      [class.tds-progress-circle]=\"isCircleStyle\"\r\n      [class.tds-progress-_steps]=\"isSteps\"\r\n      [class.tds-progress-rtl]=\"dir === 'rtl'\"\r\n    >\r\n      <!-- line progress -->\r\n      <div *ngIf=\"type === 'line'\" class=\"w-full flex items-center\">\r\n        <!-- normal line style -->\r\n        <ng-container *ngIf=\"!isSteps\">\r\n          <div class=\"tds-progress-outer flex-auto\" *ngIf=\"!isSteps\">\r\n            <div class=\"tds-progress-inner relative w-full bg-neutral-2-300 dark:bg-d-neutral-2-300 overflow-hidden rounded-full\">\r\n              <div\r\n                class=\"tds-progress-bg bg-primary-1\"\r\n                [style.width.%]=\"percent\"\r\n                [style.border-radius]=\"strokeLinecap === 'round' ? '100px' : '0'\"\r\n                [style.background]=\"!isGradient ? strokeColor : null\"\r\n                [style.background-image]=\"isGradient ? lineGradient : null\"\r\n                [style.height.px]=\"_strokeWidth\"\r\n              ></div>\r\n              <div\r\n                *ngIf=\"successPercent || successPercent === 0\"\r\n                class=\"tds-progress-success-bg  bg-primary-1\"\r\n                [style.width.%]=\"successPercent\"\r\n                [style.border-radius]=\"strokeLinecap === 'round' ? '100px' : '0'\"\r\n                [style.height.px]=\"_strokeWidth\"\r\n              ></div>\r\n            </div>\r\n          </div>\r\n          <ng-template [ngTemplateOutlet]=\"progressInfoTemplate\"></ng-template>\r\n        </ng-container>\r\n        <!-- step style -->\r\n        <div class=\"tds-progress-_steps-outer\" *ngIf=\"isSteps\">\r\n          <div *ngFor=\"let step of _steps; let i = index\" class=\"tds-progress-_steps-item\" [ngStyle]=\"step\"></div>\r\n          <ng-template [ngTemplateOutlet]=\"progressInfoTemplate\"></ng-template>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- circle / dashboard progress -->\r\n      <div\r\n        [style.width.px]=\"this.width\"\r\n        [style.height.px]=\"this.width\"\r\n        [style.fontSize.px]=\"this.width * 0.15 + 6\"\r\n        class=\"tds-progress-inner relative\"\r\n        [class.tds-progress-circle-gradient]=\"isGradient\"\r\n        *ngIf=\"isCircleStyle\"\r\n      >\r\n        <svg class=\"tds-progress-circle \" viewBox=\"0 0 100 100\">\r\n          <defs *ngIf=\"isGradient\">\r\n            <linearGradient [id]=\"'gradient-' + gradientId\" x1=\"100%\" y1=\"0%\" x2=\"0%\" y2=\"0%\">\r\n              <stop *ngFor=\"let i of circleGradient\" [attr.offset]=\"i.offset\" [attr.stop-color]=\"i.color\"></stop>\r\n            </linearGradient>\r\n          </defs>\r\n          <path\r\n            class=\"tds-progress-circle-trail stroke-current text-neutral-2-300 dark:text-d-neutral-2-300\"\r\n           \r\n            fill-opacity=\"0\"\r\n            [attr.stroke-width]=\"_strokeWidth\"\r\n            [attr.d]=\"pathString\"\r\n            [ngStyle]=\"trailPathStyle\"\r\n          ></path>\r\n          <path\r\n            *ngFor=\"let p of progressCirclePath; trackBy: trackByFn\"\r\n            class=\"tds-progress-circle-path stroke-current text-success-400\"\r\n            fill-opacity=\"0\"\r\n            [attr.d]=\"pathString\"\r\n            [attr.stroke-linecap]=\"strokeLinecap\"\r\n           \r\n            [attr.stroke-width]=\"percent ? _strokeWidth : 0\"\r\n            [ngStyle]=\"p.strokePathStyle\"\r\n          >{{p.stroke}}</path>\r\n        </svg>\r\n        <ng-template [ngTemplateOutlet]=\"progressInfoTemplate\"></ng-template>\r\n      </div>\r\n    </div>\r\n  `\r\n})\r\nexport class TDSProgressComponent implements OnChanges, OnInit, OnDestroy {\r\n\r\n  static ngAcceptInputType_successPercent: NumberInput;\r\n  static ngAcceptInputType_percent: NumberInput;\r\n  static ngAcceptInputType_ptrokeWidth: NumberInput;\r\n  static ngAcceptInputType_gapDegree: NumberInput;\r\n  static ngAcceptInputType_steps: NumberInput;\r\n\r\n  @Input() @InputBoolean() showInfo: boolean = true;\r\n  @Input() width = 132;\r\n  @Input() strokeColor?: TDSProgressStrokeColorType = undefined;\r\n  @Input() size: 'default' | 'small' = 'default';\r\n  @Input() format?: TDSProgressFormatter;\r\n  @Input() @InputNumber() successPercent?: number;\r\n  @Input() @InputNumber() percent: number = 0;\r\n  @Input() @InputNumber() strokeWidth?: number = undefined;\r\n  @Input() @InputNumber() gapDegree?: number = undefined;\r\n  @Input() status?: TDSProgressStatusType;\r\n  @Input() type: TDSProgressTypeType = 'line';\r\n  @Input() gapPosition: TDSProgressGapPositionType = 'top';\r\n  @Input() strokeLinecap: TDSProgressStrokeLinecapType = 'round';\r\n\r\n  @Input() @InputNumber() steps: number = 0;\r\n\r\n  _steps: TDSProgressStepItem[] = [];\r\n\r\n  /** Gradient style when `type` is `line`. */\r\n  lineGradient: string | null = null;\r\n\r\n  /** If user uses gradient color. */\r\n  isGradient = false;\r\n\r\n  /** If the linear progress is a step progress. */\r\n  isSteps = false;\r\n\r\n  /**\r\n   * Each progress whose `type` is circle or dashboard should have unique id to\r\n   * define `<linearGradient>`.\r\n   */\r\n  gradientId = gradientIdSeed++;\r\n\r\n  /** Paths to rendered in the template. */\r\n  progressCirclePath: TDSProgressCirclePath[] = [];\r\n  circleGradient?: Array<{ offset: string; color: string }>;\r\n  trailPathStyle: NgStyleInterface | null = null;\r\n  pathString?: string;\r\n  icon!: string;\r\n\r\n  dir: Direction = 'ltr';\r\n\r\n  trackByFn = (index: number) => `${index}`;\r\n\r\n  get formatter(): TDSProgressFormatter {\r\n    return this.format || defaultFormatter;\r\n  }\r\n\r\n  get _status(): TDSProgressStatusType {\r\n    return this.status || this.inferredStatus;\r\n  }\r\n\r\n  get _strokeWidth(): number {\r\n    return this.strokeWidth || (this.type === 'line' && this.size !== 'small' ? 8 : 6);\r\n  }\r\n\r\n  get isCircleStyle(): boolean {\r\n    return this.type === 'circle' || this.type === 'dashboard';\r\n  }\r\n\r\n  private cachedStatus: TDSProgressStatusType = 'normal';\r\n  private inferredStatus: TDSProgressStatusType = 'normal';\r\n  private destroy$ = new Subject<void>();\r\n\r\n  constructor(\r\n    private cdr: ChangeDetectorRef,\r\n    // public tdsConfigService: TDSConfigService,\r\n    @Optional() private directionality: Directionality\r\n  ) { }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    const {\r\n      steps,\r\n      gapPosition,\r\n      strokeLinecap,\r\n      strokeColor,\r\n      gapDegree,\r\n      type,\r\n      status,\r\n      percent,\r\n      successPercent,\r\n      strokeWidth\r\n    } = changes;\r\n\r\n    if (status) {\r\n      this.cachedStatus = this.status || this.cachedStatus;\r\n    }\r\n\r\n    if (percent || successPercent) {\r\n      const fillAll = parseInt(this.percent.toString(), 10) >= 100;\r\n      if (fillAll) {\r\n        if ((TDSHelperObject.hasValue(this.successPercent) && this.successPercent! >= 100) || this.successPercent === undefined) {\r\n          this.inferredStatus = 'success';\r\n        }\r\n      } else {\r\n        this.inferredStatus = this.cachedStatus;\r\n      }\r\n    }\r\n\r\n    if (status || percent || successPercent || strokeColor) {\r\n      this.updateIcon();\r\n    }\r\n\r\n    if (strokeColor) {\r\n      this.setStrokeColor();\r\n    }\r\n\r\n    if (gapPosition || strokeLinecap || gapDegree || type || percent || strokeColor || strokeColor) {\r\n      this.getCirclePaths();\r\n    }\r\n\r\n    if (percent || steps || strokeWidth) {\r\n      this.isSteps = this.steps > 0;\r\n      if (this.isSteps) {\r\n        this.getSteps();\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    // this.tdsConfigService\r\n    //   .getConfigChangeEventForComponent(TDS_CONFIG_MODULE_NAME)\r\n    //   .pipe(takeUntil(this.destroy$))\r\n    //   .subscribe(() => {\r\n    this.updateIcon();\r\n    this.setStrokeColor();\r\n    this.getCirclePaths();\r\n    // });\r\n\r\n    this.directionality.change?.pipe(takeUntil(this.destroy$)).subscribe((direction: Direction) => {\r\n      this.dir = direction;\r\n      this.cdr.detectChanges();\r\n    });\r\n\r\n    this.dir = this.directionality.value;\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroy$.next();\r\n    this.destroy$.complete();\r\n  }\r\n\r\n  private updateIcon(): void {\r\n    const ret = statusIconNameMap.get(this._status);\r\n    this.icon = \"\";\r\n    if (TDSHelperString.hasValueString(ret)) {\r\n      if (!this.isCircleStyle) {\r\n        this.icon = `tdsi-${ret}-fill text-${ret}-400`;\r\n      }else{\r\n        switch (ret) {\r\n          case \"error\":\r\n            this.icon = `tdsi-close-fill text-${ret}-400`;\r\n            break;\r\n        \r\n          default:\r\n            this.icon = `tdsi-tick-fill text-${ret}-400`;\r\n            break;\r\n        }\r\n      }\r\n     \r\n    }\r\n   \r\n  }\r\n\r\n  /**\r\n   * Calculate step render configs.\r\n   */\r\n  private getSteps(): void {\r\n    const current = Math.floor(this.steps * (this.percent / 100));\r\n    const stepWidth = this.size === 'small' ? 2 : 14;\r\n\r\n    const _steps = [];\r\n\r\n    for (let i = 0; i < this.steps; i++) {\r\n      let color;\r\n      if (i <= current - 1) {\r\n        color = this.strokeColor;\r\n      }\r\n      const stepStyle = {\r\n        backgroundColor: `${color}`,\r\n        width: `${stepWidth}px`,\r\n        height: `${this._strokeWidth}px`\r\n      };\r\n      _steps.push(stepStyle);\r\n    }\r\n\r\n    this._steps = _steps;\r\n  }\r\n\r\n  /**\r\n   * Calculate paths when the type is circle or dashboard.\r\n   */\r\n  private getCirclePaths(): void {\r\n    if (!this.isCircleStyle) {\r\n      return;\r\n    }\r\n\r\n    const values = TDSHelperObject.hasValue(this.successPercent) ? [this.successPercent!, this.percent] : [this.percent];\r\n\r\n    // Calculate shared styles.\r\n    const radius = 50 - this._strokeWidth / 2;\r\n    const gapPosition = this.gapPosition || (this.type === 'circle' ? 'top' : 'bottom');\r\n    const len = Math.PI * 2 * radius;\r\n    const gapDegree = this.gapDegree || (this.type === 'circle' ? 0 : 75);\r\n\r\n    let beginPositionX = 0;\r\n    let beginPositionY = -radius;\r\n    let endPositionX = 0;\r\n    let endPositionY = radius * -2;\r\n\r\n    switch (gapPosition) {\r\n      case 'left':\r\n        beginPositionX = -radius;\r\n        beginPositionY = 0;\r\n        endPositionX = radius * 2;\r\n        endPositionY = 0;\r\n        break;\r\n      case 'right':\r\n        beginPositionX = radius;\r\n        beginPositionY = 0;\r\n        endPositionX = radius * -2;\r\n        endPositionY = 0;\r\n        break;\r\n      case 'bottom':\r\n        beginPositionY = radius;\r\n        endPositionY = radius * 2;\r\n        break;\r\n      default:\r\n    }\r\n\r\n    this.pathString = `M 50,50 m ${beginPositionX},${beginPositionY}\r\n       a ${radius},${radius} 0 1 1 ${endPositionX},${-endPositionY}\r\n       a ${radius},${radius} 0 1 1 ${-endPositionX},${endPositionY}`;\r\n\r\n    this.trailPathStyle = {\r\n      strokeDasharray: `${len - gapDegree}px ${len}px`,\r\n      strokeDashoffset: `-${gapDegree / 2}px`,\r\n      transition: 'stroke-dashoffset .3s ease 0s, stroke-dasharray .3s ease 0s, stroke .3s'\r\n    };\r\n\r\n    // Calculate styles for each path.\r\n    this.progressCirclePath = values\r\n      .map((value, index) => {\r\n        const isSuccessPercent = values.length === 2 && index === 0;\r\n        return {\r\n          stroke: this.isGradient && !isSuccessPercent ? `url(#gradient-${this.gradientId})` : null,\r\n          strokePathStyle: {\r\n            stroke: !this.isGradient ? (isSuccessPercent ? statusColorMap.get('success') : (this.strokeColor as string)) : null,\r\n            transition: 'stroke-dashoffset .3s ease 0s, stroke-dasharray .3s ease 0s, stroke .3s, stroke-width .06s ease .3s',\r\n            strokeDasharray: `${((value || 0) / 100) * (len - gapDegree)}px ${len}px`,\r\n            strokeDashoffset: `-${gapDegree / 2}px`\r\n          }\r\n        };\r\n      })\r\n      .reverse();\r\n  }\r\n\r\n  private setStrokeColor(): void {\r\n    const color = this.strokeColor;\r\n    const isGradient = (this.isGradient = !!color && typeof color !== 'string');\r\n    if (isGradient && !this.isCircleStyle) {\r\n      this.lineGradient = handleLinearGradient(color as TDSProgressColorGradient);\r\n    } else if (isGradient && this.isCircleStyle) {\r\n      this.circleGradient = handleCircleGradient(this.strokeColor as TDSProgressGradientProgress);\r\n    } else {\r\n      this.lineGradient = null;\r\n      this.circleGradient = [];\r\n    }\r\n  }\r\n}\r\n","\r\n\r\nimport { BidiModule } from '@angular/cdk/bidi';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { TDSOutletModule } from 'tds-ui/core/outlet';\r\n\r\nimport { TDSProgressComponent } from './progress.component';\r\n\r\n@NgModule({\r\n  exports: [TDSProgressComponent],\r\n  declarations: [TDSProgressComponent],\r\n  imports: [BidiModule, CommonModule, TDSOutletModule]\r\n})\r\nexport class TDSProgressModule {}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}