{"version":3,"file":"tds-ui-tinycolor.mjs","sources":["../../../projects/tds-ui/tinycolor/util.ts","../../../projects/tds-ui/tinycolor/conversion.ts","../../../projects/tds-ui/tinycolor/css-color-names.ts","../../../projects/tds-ui/tinycolor/format-input.ts","../../../projects/tds-ui/tinycolor/tinycolor.ts","../../../projects/tds-ui/tinycolor/readability.ts","../../../projects/tds-ui/tinycolor/to-ms-filter.ts","../../../projects/tds-ui/tinycolor/from-ratio.ts","../../../projects/tds-ui/tinycolor/random.ts","../../../projects/tds-ui/tinycolor/tds-ui-tinycolor.ts"],"sourcesContent":["/**\r\n * Take input from [0, n] and return it as [0, 1]\r\n * @hidden\r\n */\r\nexport function bound01(n: any, max: number): number {\r\n  if (isOnePointZero(n)) {\r\n    n = '100%';\r\n  }\r\n\r\n  const isPercent = isPercentage(n);\r\n  n = max === 360 ? n : Math.min(max, Math.max(0, parseFloat(n)));\r\n\r\n  // Automatically convert percentage into number\r\n  if (isPercent) {\r\n    n = parseInt(String(n * max), 10) / 100;\r\n  }\r\n\r\n  // Handle floating point rounding errors\r\n  if (Math.abs(n - max) < 0.000001) {\r\n    return 1;\r\n  }\r\n\r\n  // Convert into [0, 1] range if it isn't already\r\n  if (max === 360) {\r\n    // If n is a hue given in degrees,\r\n    // wrap around out-of-range values into [0, 360] range\r\n    // then convert into [0, 1].\r\n    n = (n < 0 ? (n % max) + max : n % max) / parseFloat(String(max));\r\n  } else {\r\n    // If n not a hue given in degrees\r\n    // Convert into [0, 1] range if it isn't already.\r\n    n = (n % max) / parseFloat(String(max));\r\n  }\r\n\r\n  return n;\r\n}\r\n\r\n/**\r\n * Force a number between 0 and 1\r\n * @hidden\r\n */\r\nexport function clamp01(val: number): number {\r\n  return Math.min(1, Math.max(0, val));\r\n}\r\n\r\n/**\r\n * Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\r\n * <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>\r\n * @hidden\r\n */\r\nexport function isOnePointZero(n: string | number): boolean {\r\n  return typeof n === 'string' && n.indexOf('.') !== -1 && parseFloat(n) === 1;\r\n}\r\n\r\n/**\r\n * Check to see if string passed in is a percentage\r\n * @hidden\r\n */\r\nexport function isPercentage(n: string | number): boolean {\r\n  return typeof n === 'string' && n.indexOf('%') !== -1;\r\n}\r\n\r\n/**\r\n * Return a valid alpha value [0,1] with all invalid values being set to 1\r\n * @hidden\r\n */\r\nexport function boundAlpha(a?: number | string): number {\r\n  a = parseFloat(a as string);\r\n\r\n  if (isNaN(a) || a < 0 || a > 1) {\r\n    a = 1;\r\n  }\r\n\r\n  return a;\r\n}\r\n\r\n/**\r\n * Replace a decimal with it's percentage value\r\n * @hidden\r\n */\r\nexport function convertToPercentage(n: number | string): number | string {\r\n  if (n <= 1) {\r\n    return `${Number(n) * 100}%`;\r\n  }\r\n\r\n  return n;\r\n}\r\n\r\n/**\r\n * Force a hex value to have 2 characters\r\n * @hidden\r\n */\r\nexport function pad2(c: string): string {\r\n  return c.length === 1 ? '0' + c : String(c);\r\n}\r\n","import { HSL, HSV, Numberify, RGB } from './interfaces';\r\nimport { bound01, pad2 } from './util';\r\n\r\n// `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:\r\n// <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>\r\n\r\n/**\r\n * Handle bounds / percentage checking to conform to CSS color spec\r\n * <http://www.w3.org/TR/css3-color/>\r\n * *Assumes:* r, g, b in [0, 255] or [0, 1]\r\n * *Returns:* { r, g, b } in [0, 255]\r\n */\r\nexport function rgbToRgb(\r\n  r: number | string,\r\n  g: number | string,\r\n  b: number | string,\r\n): Numberify<RGB> {\r\n  return {\r\n    r: bound01(r, 255) * 255,\r\n    g: bound01(g, 255) * 255,\r\n    b: bound01(b, 255) * 255,\r\n  };\r\n}\r\n\r\n/**\r\n * Converts an RGB color value to HSL.\r\n * *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]\r\n * *Returns:* { h, s, l } in [0,1]\r\n */\r\nexport function rgbToHsl(r: number, g: number, b: number): Numberify<HSL> {\r\n  r = bound01(r, 255);\r\n  g = bound01(g, 255);\r\n  b = bound01(b, 255);\r\n\r\n  const max = Math.max(r, g, b);\r\n  const min = Math.min(r, g, b);\r\n  let h = 0;\r\n  let s = 0;\r\n  const l = (max + min) / 2;\r\n\r\n  if (max === min) {\r\n    s = 0;\r\n    h = 0; // achromatic\r\n  } else {\r\n    const d = max - min;\r\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\r\n    switch (max) {\r\n      case r:\r\n        h = (g - b) / d + (g < b ? 6 : 0);\r\n        break;\r\n      case g:\r\n        h = (b - r) / d + 2;\r\n        break;\r\n      case b:\r\n        h = (r - g) / d + 4;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    h /= 6;\r\n  }\r\n\r\n  return { h, s, l };\r\n}\r\n\r\nfunction hue2rgb(p: number, q: number, t: number): number {\r\n  if (t < 0) {\r\n    t += 1;\r\n  }\r\n\r\n  if (t > 1) {\r\n    t -= 1;\r\n  }\r\n\r\n  if (t < 1 / 6) {\r\n    return p + (q - p) * (6 * t);\r\n  }\r\n\r\n  if (t < 1 / 2) {\r\n    return q;\r\n  }\r\n\r\n  if (t < 2 / 3) {\r\n    return p + (q - p) * (2 / 3 - t) * 6;\r\n  }\r\n\r\n  return p;\r\n}\r\n\r\n/**\r\n * Converts an HSL color value to RGB.\r\n *\r\n * *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]\r\n * *Returns:* { r, g, b } in the set [0, 255]\r\n */\r\nexport function hslToRgb(\r\n  h: number | string,\r\n  s: number | string,\r\n  l: number | string,\r\n): Numberify<RGB> {\r\n  let r: number;\r\n  let g: number;\r\n  let b: number;\r\n\r\n  h = bound01(h, 360);\r\n  s = bound01(s, 100);\r\n  l = bound01(l, 100);\r\n\r\n  if (s === 0) {\r\n    // achromatic\r\n    g = l;\r\n    b = l;\r\n    r = l;\r\n  } else {\r\n    const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\r\n    const p = 2 * l - q;\r\n    r = hue2rgb(p, q, h + 1 / 3);\r\n    g = hue2rgb(p, q, h);\r\n    b = hue2rgb(p, q, h - 1 / 3);\r\n  }\r\n\r\n  return { r: r * 255, g: g * 255, b: b * 255 };\r\n}\r\n\r\n/**\r\n * Converts an RGB color value to HSV\r\n *\r\n * *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]\r\n * *Returns:* { h, s, v } in [0,1]\r\n */\r\nexport function rgbToHsv(r: number, g: number, b: number): Numberify<HSV> {\r\n  r = bound01(r, 255);\r\n  g = bound01(g, 255);\r\n  b = bound01(b, 255);\r\n\r\n  const max = Math.max(r, g, b);\r\n  const min = Math.min(r, g, b);\r\n  let h = 0;\r\n  const v = max;\r\n  const d = max - min;\r\n  const s = max === 0 ? 0 : d / max;\r\n\r\n  if (max === min) {\r\n    h = 0; // achromatic\r\n  } else {\r\n    switch (max) {\r\n      case r:\r\n        h = (g - b) / d + (g < b ? 6 : 0);\r\n        break;\r\n      case g:\r\n        h = (b - r) / d + 2;\r\n        break;\r\n      case b:\r\n        h = (r - g) / d + 4;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    h /= 6;\r\n  }\r\n\r\n  return { h, s, v };\r\n}\r\n\r\n/**\r\n * Converts an HSV color value to RGB.\r\n *\r\n * *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]\r\n * *Returns:* { r, g, b } in the set [0, 255]\r\n */\r\nexport function hsvToRgb(\r\n  h: number | string,\r\n  s: number | string,\r\n  v: number | string,\r\n): Numberify<RGB> {\r\n  h = bound01(h, 360) * 6;\r\n  s = bound01(s, 100);\r\n  v = bound01(v, 100);\r\n\r\n  const i = Math.floor(h);\r\n  const f = h - i;\r\n  const p = v * (1 - s);\r\n  const q = v * (1 - f * s);\r\n  const t = v * (1 - (1 - f) * s);\r\n  const mod = i % 6;\r\n  const r = [v, q, p, p, t, v][mod];\r\n  const g = [t, v, v, q, p, p][mod];\r\n  const b = [p, p, t, v, v, q][mod];\r\n\r\n  return { r: r * 255, g: g * 255, b: b * 255 };\r\n}\r\n\r\n/**\r\n * Converts an RGB color to hex\r\n *\r\n * Assumes r, g, and b are contained in the set [0, 255]\r\n * Returns a 3 or 6 character hex\r\n */\r\nexport function rgbToHex(r: number, g: number, b: number, allow3Char: boolean): string {\r\n  const hex = [\r\n    pad2(Math.round(r).toString(16)),\r\n    pad2(Math.round(g).toString(16)),\r\n    pad2(Math.round(b).toString(16)),\r\n  ];\r\n\r\n  // Return a 3 character hex if possible\r\n  if (\r\n    allow3Char &&\r\n    hex[0].startsWith(hex[0].charAt(1)) &&\r\n    hex[1].startsWith(hex[1].charAt(1)) &&\r\n    hex[2].startsWith(hex[2].charAt(1))\r\n  ) {\r\n    return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\r\n  }\r\n\r\n  return hex.join('');\r\n}\r\n\r\n/**\r\n * Converts an RGBA color plus alpha transparency to hex\r\n *\r\n * Assumes r, g, b are contained in the set [0, 255] and\r\n * a in [0, 1]. Returns a 4 or 8 character rgba hex\r\n */\r\n// eslint-disable-next-line max-params\r\nexport function rgbaToHex(r: number, g: number, b: number, a: number, allow4Char: boolean): string {\r\n  const hex = [\r\n    pad2(Math.round(r).toString(16)),\r\n    pad2(Math.round(g).toString(16)),\r\n    pad2(Math.round(b).toString(16)),\r\n    pad2(convertDecimalToHex(a)),\r\n  ];\r\n\r\n  // Return a 4 character hex if possible\r\n  if (\r\n    allow4Char &&\r\n    hex[0].startsWith(hex[0].charAt(1)) &&\r\n    hex[1].startsWith(hex[1].charAt(1)) &&\r\n    hex[2].startsWith(hex[2].charAt(1)) &&\r\n    hex[3].startsWith(hex[3].charAt(1))\r\n  ) {\r\n    return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);\r\n  }\r\n\r\n  return hex.join('');\r\n}\r\n\r\n/**\r\n * Converts an RGBA color to an ARGB Hex8 string\r\n * Rarely used, but required for \"toFilter()\"\r\n */\r\nexport function rgbaToArgbHex(r: number, g: number, b: number, a: number): string {\r\n  const hex = [\r\n    pad2(convertDecimalToHex(a)),\r\n    pad2(Math.round(r).toString(16)),\r\n    pad2(Math.round(g).toString(16)),\r\n    pad2(Math.round(b).toString(16)),\r\n  ];\r\n\r\n  return hex.join('');\r\n}\r\n\r\n/** Converts a decimal to a hex value */\r\nexport function convertDecimalToHex(d: string | number): string {\r\n  return Math.round(parseFloat(d as string) * 255).toString(16);\r\n}\r\n\r\n/** Converts a hex value to a decimal */\r\nexport function convertHexToDecimal(h: string): number {\r\n  return parseIntFromHex(h) / 255;\r\n}\r\n\r\n/** Parse a base-16 hex value into a base-10 integer */\r\nexport function parseIntFromHex(val: string): number {\r\n  return parseInt(val, 16);\r\n}\r\n\r\nexport function numberInputToObject(color: number): RGB {\r\n  return {\r\n    r: color >> 16,\r\n    g: (color & 0xff00) >> 8,\r\n    b: color & 0xff,\r\n  };\r\n}\r\n","// https://github.com/bahamas10/css-color-names/blob/master/css-color-names.json\r\n/**\r\n * @hidden\r\n */\r\nexport const names: Record<string, string> = {\r\n  aliceblue: '#f0f8ff',\r\n  antiquewhite: '#faebd7',\r\n  aqua: '#00ffff',\r\n  aquamarine: '#7fffd4',\r\n  azure: '#f0ffff',\r\n  beige: '#f5f5dc',\r\n  bisque: '#ffe4c4',\r\n  black: '#000000',\r\n  blanchedalmond: '#ffebcd',\r\n  blue: '#0000ff',\r\n  blueviolet: '#8a2be2',\r\n  brown: '#a52a2a',\r\n  burlywood: '#deb887',\r\n  cadetblue: '#5f9ea0',\r\n  chartreuse: '#7fff00',\r\n  chocolate: '#d2691e',\r\n  coral: '#ff7f50',\r\n  cornflowerblue: '#6495ed',\r\n  cornsilk: '#fff8dc',\r\n  crimson: '#dc143c',\r\n  cyan: '#00ffff',\r\n  darkblue: '#00008b',\r\n  darkcyan: '#008b8b',\r\n  darkgoldenrod: '#b8860b',\r\n  darkgray: '#a9a9a9',\r\n  darkgreen: '#006400',\r\n  darkgrey: '#a9a9a9',\r\n  darkkhaki: '#bdb76b',\r\n  darkmagenta: '#8b008b',\r\n  darkolivegreen: '#556b2f',\r\n  darkorange: '#ff8c00',\r\n  darkorchid: '#9932cc',\r\n  darkred: '#8b0000',\r\n  darksalmon: '#e9967a',\r\n  darkseagreen: '#8fbc8f',\r\n  darkslateblue: '#483d8b',\r\n  darkslategray: '#2f4f4f',\r\n  darkslategrey: '#2f4f4f',\r\n  darkturquoise: '#00ced1',\r\n  darkviolet: '#9400d3',\r\n  deeppink: '#ff1493',\r\n  deepskyblue: '#00bfff',\r\n  dimgray: '#696969',\r\n  dimgrey: '#696969',\r\n  dodgerblue: '#1e90ff',\r\n  firebrick: '#b22222',\r\n  floralwhite: '#fffaf0',\r\n  forestgreen: '#228b22',\r\n  fuchsia: '#ff00ff',\r\n  gainsboro: '#dcdcdc',\r\n  ghostwhite: '#f8f8ff',\r\n  goldenrod: '#daa520',\r\n  gold: '#ffd700',\r\n  gray: '#808080',\r\n  green: '#008000',\r\n  greenyellow: '#adff2f',\r\n  grey: '#808080',\r\n  honeydew: '#f0fff0',\r\n  hotpink: '#ff69b4',\r\n  indianred: '#cd5c5c',\r\n  indigo: '#4b0082',\r\n  ivory: '#fffff0',\r\n  khaki: '#f0e68c',\r\n  lavenderblush: '#fff0f5',\r\n  lavender: '#e6e6fa',\r\n  lawngreen: '#7cfc00',\r\n  lemonchiffon: '#fffacd',\r\n  lightblue: '#add8e6',\r\n  lightcoral: '#f08080',\r\n  lightcyan: '#e0ffff',\r\n  lightgoldenrodyellow: '#fafad2',\r\n  lightgray: '#d3d3d3',\r\n  lightgreen: '#90ee90',\r\n  lightgrey: '#d3d3d3',\r\n  lightpink: '#ffb6c1',\r\n  lightsalmon: '#ffa07a',\r\n  lightseagreen: '#20b2aa',\r\n  lightskyblue: '#87cefa',\r\n  lightslategray: '#778899',\r\n  lightslategrey: '#778899',\r\n  lightsteelblue: '#b0c4de',\r\n  lightyellow: '#ffffe0',\r\n  lime: '#00ff00',\r\n  limegreen: '#32cd32',\r\n  linen: '#faf0e6',\r\n  magenta: '#ff00ff',\r\n  maroon: '#800000',\r\n  mediumaquamarine: '#66cdaa',\r\n  mediumblue: '#0000cd',\r\n  mediumorchid: '#ba55d3',\r\n  mediumpurple: '#9370db',\r\n  mediumseagreen: '#3cb371',\r\n  mediumslateblue: '#7b68ee',\r\n  mediumspringgreen: '#00fa9a',\r\n  mediumturquoise: '#48d1cc',\r\n  mediumvioletred: '#c71585',\r\n  midnightblue: '#191970',\r\n  mintcream: '#f5fffa',\r\n  mistyrose: '#ffe4e1',\r\n  moccasin: '#ffe4b5',\r\n  navajowhite: '#ffdead',\r\n  navy: '#000080',\r\n  oldlace: '#fdf5e6',\r\n  olive: '#808000',\r\n  olivedrab: '#6b8e23',\r\n  orange: '#ffa500',\r\n  orangered: '#ff4500',\r\n  orchid: '#da70d6',\r\n  palegoldenrod: '#eee8aa',\r\n  palegreen: '#98fb98',\r\n  paleturquoise: '#afeeee',\r\n  palevioletred: '#db7093',\r\n  papayawhip: '#ffefd5',\r\n  peachpuff: '#ffdab9',\r\n  peru: '#cd853f',\r\n  pink: '#ffc0cb',\r\n  plum: '#dda0dd',\r\n  powderblue: '#b0e0e6',\r\n  purple: '#800080',\r\n  rebeccapurple: '#663399',\r\n  red: '#ff0000',\r\n  rosybrown: '#bc8f8f',\r\n  royalblue: '#4169e1',\r\n  saddlebrown: '#8b4513',\r\n  salmon: '#fa8072',\r\n  sandybrown: '#f4a460',\r\n  seagreen: '#2e8b57',\r\n  seashell: '#fff5ee',\r\n  sienna: '#a0522d',\r\n  silver: '#c0c0c0',\r\n  skyblue: '#87ceeb',\r\n  slateblue: '#6a5acd',\r\n  slategray: '#708090',\r\n  slategrey: '#708090',\r\n  snow: '#fffafa',\r\n  springgreen: '#00ff7f',\r\n  steelblue: '#4682b4',\r\n  tan: '#d2b48c',\r\n  teal: '#008080',\r\n  thistle: '#d8bfd8',\r\n  tomato: '#ff6347',\r\n  turquoise: '#40e0d0',\r\n  violet: '#ee82ee',\r\n  wheat: '#f5deb3',\r\n  white: '#ffffff',\r\n  whitesmoke: '#f5f5f5',\r\n  yellow: '#ffff00',\r\n  yellowgreen: '#9acd32',\r\n};\r\n","import { convertHexToDecimal, hslToRgb, hsvToRgb, parseIntFromHex, rgbToRgb } from './conversion';\r\nimport { names } from './css-color-names';\r\nimport { HSL, HSLA, HSV, HSVA, RGB, RGBA } from './interfaces';\r\nimport { boundAlpha, convertToPercentage } from './util';\r\n\r\n/**\r\n * Given a string or object, convert that input to RGB\r\n *\r\n * Possible string inputs:\r\n * ```\r\n * \"red\"\r\n * \"#f00\" or \"f00\"\r\n * \"#ff0000\" or \"ff0000\"\r\n * \"#ff000000\" or \"ff000000\"\r\n * \"rgb 255 0 0\" or \"rgb (255, 0, 0)\"\r\n * \"rgb 1.0 0 0\" or \"rgb (1, 0, 0)\"\r\n * \"rgba (255, 0, 0, 1)\" or \"rgba 255, 0, 0, 1\"\r\n * \"rgba (1.0, 0, 0, 1)\" or \"rgba 1.0, 0, 0, 1\"\r\n * \"hsl(0, 100%, 50%)\" or \"hsl 0 100% 50%\"\r\n * \"hsla(0, 100%, 50%, 1)\" or \"hsla 0 100% 50%, 1\"\r\n * \"hsv(0, 100%, 100%)\" or \"hsv 0 100% 100%\"\r\n * ```\r\n */\r\nexport function inputToRGB(color: string | RGB | RGBA | HSL | HSLA | HSV | HSVA | any): {\r\n  ok: boolean;\r\n  format: any;\r\n  r: number;\r\n  g: number;\r\n  b: number;\r\n  a: number;\r\n} {\r\n  let rgb = { r: 0, g: 0, b: 0 };\r\n  let a = 1;\r\n  let s: string | number | null = null;\r\n  let v: string | number | null = null;\r\n  let l: string | number | null = null;\r\n  let ok = false;\r\n  let format: string | false = false;\r\n\r\n  if (typeof color === 'string') {\r\n    color = stringInputToObject(color);\r\n  }\r\n\r\n  if (typeof color === 'object') {\r\n    if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {\r\n      rgb = rgbToRgb(color.r, color.g, color.b);\r\n      ok = true;\r\n      format = String(color.r).substr(-1) === '%' ? 'prgb' : 'rgb';\r\n    } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {\r\n      s = convertToPercentage(color.s);\r\n      v = convertToPercentage(color.v);\r\n      rgb = hsvToRgb(color.h, s as number, v as number);\r\n      ok = true;\r\n      format = 'hsv';\r\n    } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {\r\n      s = convertToPercentage(color.s);\r\n      l = convertToPercentage(color.l);\r\n      rgb = hslToRgb(color.h, s as number, l as number);\r\n      ok = true;\r\n      format = 'hsl';\r\n    }\r\n\r\n    if (Object.prototype.hasOwnProperty.call(color, 'a')) {\r\n      a = color.a;\r\n    }\r\n  }\r\n\r\n  a = boundAlpha(a);\r\n\r\n  return {\r\n    ok,\r\n    format: color.format || format,\r\n    r: Math.min(255, Math.max(rgb.r, 0)),\r\n    g: Math.min(255, Math.max(rgb.g, 0)),\r\n    b: Math.min(255, Math.max(rgb.b, 0)),\r\n    a,\r\n  };\r\n}\r\n\r\n// <http://www.w3.org/TR/css3-values/#integers>\r\nconst CSS_INTEGER = '[-\\\\+]?\\\\d+%?';\r\n\r\n// <http://www.w3.org/TR/css3-values/#number-value>\r\nconst CSS_NUMBER = '[-\\\\+]?\\\\d*\\\\.\\\\d+%?';\r\n\r\n// Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.\r\nconst CSS_UNIT = `(?:${CSS_NUMBER})|(?:${CSS_INTEGER})`;\r\n\r\n// Actual matching.\r\n// Parentheses and commas are optional, but not required.\r\n// Whitespace can take the place of commas or opening paren\r\nconst PERMISSIVE_MATCH3 = `[\\\\s|\\\\(]+(${CSS_UNIT})[,|\\\\s]+(${CSS_UNIT})[,|\\\\s]+(${CSS_UNIT})\\\\s*\\\\)?`;\r\nconst PERMISSIVE_MATCH4 = `[\\\\s|\\\\(]+(${CSS_UNIT})[,|\\\\s]+(${CSS_UNIT})[,|\\\\s]+(${CSS_UNIT})[,|\\\\s]+(${CSS_UNIT})\\\\s*\\\\)?`;\r\n\r\nconst matchers = {\r\n  CSS_UNIT: new RegExp(CSS_UNIT),\r\n  rgb: new RegExp('rgb' + PERMISSIVE_MATCH3),\r\n  rgba: new RegExp('rgba' + PERMISSIVE_MATCH4),\r\n  hsl: new RegExp('hsl' + PERMISSIVE_MATCH3),\r\n  hsla: new RegExp('hsla' + PERMISSIVE_MATCH4),\r\n  hsv: new RegExp('hsv' + PERMISSIVE_MATCH3),\r\n  hsva: new RegExp('hsva' + PERMISSIVE_MATCH4),\r\n  hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\r\n  hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\r\n  hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\r\n  hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\r\n};\r\n\r\n/**\r\n * Permissive string parsing.  Take in a number of formats, and output an object\r\n * based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`\r\n */\r\nexport function stringInputToObject(color: string): any {\r\n  color = color.trim().toLowerCase();\r\n  if (color.length === 0) {\r\n    return false;\r\n  }\r\n\r\n  let named = false;\r\n  if (names[color]) {\r\n    color = names[color];\r\n    named = true;\r\n  } else if (color === 'transparent') {\r\n    return { r: 0, g: 0, b: 0, a: 0, format: 'name' };\r\n  }\r\n\r\n  // Try to match string input using regular expressions.\r\n  // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]\r\n  // Just return an object and let the conversion functions handle that.\r\n  // This way the result will be the same whether the tinycolor is initialized with string or object.\r\n  let match = matchers.rgb.exec(color);\r\n  if (match) {\r\n    return { r: match[1], g: match[2], b: match[3] };\r\n  }\r\n\r\n  match = matchers.rgba.exec(color);\r\n  if (match) {\r\n    return { r: match[1], g: match[2], b: match[3], a: match[4] };\r\n  }\r\n\r\n  match = matchers.hsl.exec(color);\r\n  if (match) {\r\n    return { h: match[1], s: match[2], l: match[3] };\r\n  }\r\n\r\n  match = matchers.hsla.exec(color);\r\n  if (match) {\r\n    return { h: match[1], s: match[2], l: match[3], a: match[4] };\r\n  }\r\n\r\n  match = matchers.hsv.exec(color);\r\n  if (match) {\r\n    return { h: match[1], s: match[2], v: match[3] };\r\n  }\r\n\r\n  match = matchers.hsva.exec(color);\r\n  if (match) {\r\n    return { h: match[1], s: match[2], v: match[3], a: match[4] };\r\n  }\r\n\r\n  match = matchers.hex8.exec(color);\r\n  if (match) {\r\n    return {\r\n      r: parseIntFromHex(match[1]),\r\n      g: parseIntFromHex(match[2]),\r\n      b: parseIntFromHex(match[3]),\r\n      a: convertHexToDecimal(match[4]),\r\n      format: named ? 'name' : 'hex8',\r\n    };\r\n  }\r\n\r\n  match = matchers.hex6.exec(color);\r\n  if (match) {\r\n    return {\r\n      r: parseIntFromHex(match[1]),\r\n      g: parseIntFromHex(match[2]),\r\n      b: parseIntFromHex(match[3]),\r\n      format: named ? 'name' : 'hex',\r\n    };\r\n  }\r\n\r\n  match = matchers.hex4.exec(color);\r\n  if (match) {\r\n    return {\r\n      r: parseIntFromHex(match[1] + match[1]),\r\n      g: parseIntFromHex(match[2] + match[2]),\r\n      b: parseIntFromHex(match[3] + match[3]),\r\n      a: convertHexToDecimal(match[4] + match[4]),\r\n      format: named ? 'name' : 'hex8',\r\n    };\r\n  }\r\n\r\n  match = matchers.hex3.exec(color);\r\n  if (match) {\r\n    return {\r\n      r: parseIntFromHex(match[1] + match[1]),\r\n      g: parseIntFromHex(match[2] + match[2]),\r\n      b: parseIntFromHex(match[3] + match[3]),\r\n      format: named ? 'name' : 'hex',\r\n    };\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\n/**\r\n * Check to see if it looks like a CSS unit\r\n * (see `matchers` above for definition).\r\n */\r\nexport function isValidCSSUnit(color: string | number): boolean {\r\n  return Boolean(matchers.CSS_UNIT.exec(String(color)));\r\n}\r\n","import { numberInputToObject, rgbaToHex, rgbToHex, rgbToHsl, rgbToHsv } from './conversion';\r\nimport { names } from './css-color-names';\r\nimport { inputToRGB } from './format-input';\r\nimport { HSL, HSLA, HSV, HSVA, Numberify, RGB, RGBA } from './interfaces';\r\nimport { bound01, boundAlpha, clamp01 } from './util';\r\n\r\nexport interface TinyColorOptions {\r\n  format: string;\r\n  gradientType: string;\r\n}\r\n\r\nexport type ColorInput = string | number | RGB | RGBA | HSL | HSLA | HSV | HSVA | TinyColor;\r\n\r\nexport type ColorFormats =\r\n  | 'rgb'\r\n  | 'prgb'\r\n  | 'hex'\r\n  | 'hex3'\r\n  | 'hex4'\r\n  | 'hex6'\r\n  | 'hex8'\r\n  | 'name'\r\n  | 'hsl'\r\n  | 'hsv';\r\n\r\nexport class TinyColor {\r\n  /** red */\r\n  r!: number;\r\n\r\n  /** green */\r\n  g!: number;\r\n\r\n  /** blue */\r\n  b!: number;\r\n\r\n  /** alpha */\r\n  a!: number;\r\n\r\n  /** the format used to create the tinycolor instance */\r\n  format!: ColorFormats;\r\n\r\n  /** input passed into the constructer used to create the tinycolor instance */\r\n  originalInput!: ColorInput;\r\n\r\n  /** the color was successfully parsed */\r\n  isValid!: boolean;\r\n\r\n  gradientType?: string;\r\n\r\n  /** rounded alpha */\r\n  roundA!: number;\r\n\r\n  constructor(color: ColorInput = '', opts: Partial<TinyColorOptions> = {}) {\r\n    // If input is already a tinycolor, return itself\r\n    if (color instanceof TinyColor) {\r\n      // eslint-disable-next-line no-constructor-return\r\n      return color;\r\n    }\r\n\r\n    if (typeof color === 'number') {\r\n      color = numberInputToObject(color);\r\n    }\r\n\r\n    this.originalInput = color;\r\n    const rgb = inputToRGB(color);\r\n    this.originalInput = color;\r\n    this.r = rgb.r;\r\n    this.g = rgb.g;\r\n    this.b = rgb.b;\r\n    this.a = rgb.a;\r\n    this.roundA = Math.round(100 * this.a) / 100;\r\n    this.format = opts.format ?? rgb.format;\r\n    this.gradientType = opts.gradientType;\r\n\r\n    // Don't let the range of [0,255] come back in [0,1].\r\n    // Potentially lose a little bit of precision here, but will fix issues where\r\n    // .5 gets interpreted as half of the total, instead of half of 1\r\n    // If it was supposed to be 128, this was already taken care of by `inputToRgb`\r\n    if (this.r < 1) {\r\n      this.r = Math.round(this.r);\r\n    }\r\n\r\n    if (this.g < 1) {\r\n      this.g = Math.round(this.g);\r\n    }\r\n\r\n    if (this.b < 1) {\r\n      this.b = Math.round(this.b);\r\n    }\r\n\r\n    this.isValid = rgb.ok;\r\n  }\r\n\r\n  isDark(): boolean {\r\n    return this.getBrightness() < 128;\r\n  }\r\n\r\n  isLight(): boolean {\r\n    return !this.isDark();\r\n  }\r\n\r\n  /**\r\n   * Returns the perceived brightness of the color, from 0-255.\r\n   */\r\n  getBrightness(): number {\r\n    // http://www.w3.org/TR/AERT#color-contrast\r\n    const rgb = this.toRgb();\r\n    return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\r\n  }\r\n\r\n  /**\r\n   * Returns the perceived luminance of a color, from 0-1.\r\n   */\r\n  getLuminance(): number {\r\n    // http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\r\n    const rgb = this.toRgb();\r\n    let R;\r\n    let G;\r\n    let B;\r\n    const RsRGB = rgb.r / 255;\r\n    const GsRGB = rgb.g / 255;\r\n    const BsRGB = rgb.b / 255;\r\n\r\n    if (RsRGB <= 0.03928) {\r\n      R = RsRGB / 12.92;\r\n    } else {\r\n      // eslint-disable-next-line prefer-exponentiation-operator\r\n      R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);\r\n    }\r\n\r\n    if (GsRGB <= 0.03928) {\r\n      G = GsRGB / 12.92;\r\n    } else {\r\n      // eslint-disable-next-line prefer-exponentiation-operator\r\n      G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);\r\n    }\r\n\r\n    if (BsRGB <= 0.03928) {\r\n      B = BsRGB / 12.92;\r\n    } else {\r\n      // eslint-disable-next-line prefer-exponentiation-operator\r\n      B = Math.pow((BsRGB + 0.055) / 1.055, 2.4);\r\n    }\r\n\r\n    return 0.2126 * R + 0.7152 * G + 0.0722 * B;\r\n  }\r\n\r\n  /**\r\n   * Returns the alpha value of a color, from 0-1.\r\n   */\r\n  getAlpha(): number {\r\n    return this.a;\r\n  }\r\n\r\n  /**\r\n   * Sets the alpha value on the current color.\r\n   *\r\n   * @param alpha - The new alpha value. The accepted range is 0-1.\r\n   */\r\n  setAlpha(alpha?: string | number): this {\r\n    this.a = boundAlpha(alpha);\r\n    this.roundA = Math.round(100 * this.a) / 100;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Returns the object as a HSVA object.\r\n   */\r\n  toHsv(): Numberify<HSVA> {\r\n    const hsv = rgbToHsv(this.r, this.g, this.b);\r\n    return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this.a };\r\n  }\r\n\r\n  /**\r\n   * Returns the hsva values interpolated into a string with the following format:\r\n   * \"hsva(xxx, xxx, xxx, xx)\".\r\n   */\r\n  toHsvString(): string {\r\n    const hsv = rgbToHsv(this.r, this.g, this.b);\r\n    const h = Math.round(hsv.h * 360);\r\n    const s = Math.round(hsv.s * 100);\r\n    const v = Math.round(hsv.v * 100);\r\n    return this.a === 1 ? `hsv(${h}, ${s}%, ${v}%)` : `hsva(${h}, ${s}%, ${v}%, ${this.roundA})`;\r\n  }\r\n\r\n  /**\r\n   * Returns the object as a HSLA object.\r\n   */\r\n  toHsl(): Numberify<HSLA> {\r\n    const hsl = rgbToHsl(this.r, this.g, this.b);\r\n    return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this.a };\r\n  }\r\n\r\n  /**\r\n   * Returns the hsla values interpolated into a string with the following format:\r\n   * \"hsla(xxx, xxx, xxx, xx)\".\r\n   */\r\n  toHslString(): string {\r\n    const hsl = rgbToHsl(this.r, this.g, this.b);\r\n    const h = Math.round(hsl.h * 360);\r\n    const s = Math.round(hsl.s * 100);\r\n    const l = Math.round(hsl.l * 100);\r\n    return this.a === 1 ? `hsl(${h}, ${s}%, ${l}%)` : `hsla(${h}, ${s}%, ${l}%, ${this.roundA})`;\r\n  }\r\n\r\n  /**\r\n   * Returns the hex value of the color.\r\n   * @param allow3Char will shorten hex value to 3 char if possible\r\n   */\r\n  toHex(allow3Char = false): string {\r\n    return rgbToHex(this.r, this.g, this.b, allow3Char);\r\n  }\r\n\r\n  /**\r\n   * Returns the hex value of the color -with a # appened.\r\n   * @param allow3Char will shorten hex value to 3 char if possible\r\n   */\r\n  toHexString(allow3Char = false): string {\r\n    return '#' + this.toHex(allow3Char);\r\n  }\r\n\r\n  /**\r\n   * Returns the hex 8 value of the color.\r\n   * @param allow4Char will shorten hex value to 4 char if possible\r\n   */\r\n  toHex8(allow4Char = false): string {\r\n    return rgbaToHex(this.r, this.g, this.b, this.a, allow4Char);\r\n  }\r\n\r\n  /**\r\n   * Returns the hex 8 value of the color -with a # appened.\r\n   * @param allow4Char will shorten hex value to 4 char if possible\r\n   */\r\n  toHex8String(allow4Char = false): string {\r\n    return '#' + this.toHex8(allow4Char);\r\n  }\r\n\r\n  /**\r\n   * Returns the object as a RGBA object.\r\n   */\r\n  toRgb(): Numberify<RGBA> {\r\n    return {\r\n      r: Math.round(this.r),\r\n      g: Math.round(this.g),\r\n      b: Math.round(this.b),\r\n      a: this.a,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Returns the RGBA values interpolated into a string with the following format:\r\n   * \"RGBA(xxx, xxx, xxx, xx)\".\r\n   */\r\n  toRgbString(): string {\r\n    const r = Math.round(this.r);\r\n    const g = Math.round(this.g);\r\n    const b = Math.round(this.b);\r\n    return this.a === 1 ? `rgb(${r}, ${g}, ${b})` : `rgba(${r}, ${g}, ${b}, ${this.roundA})`;\r\n  }\r\n\r\n  /**\r\n   * Returns the object as a RGBA object.\r\n   */\r\n  toPercentageRgb(): RGBA {\r\n    const fmt = (x: number): string => `${Math.round(bound01(x, 255) * 100)}%`;\r\n    return {\r\n      r: fmt(this.r),\r\n      g: fmt(this.g),\r\n      b: fmt(this.b),\r\n      a: this.a,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Returns the RGBA relative values interpolated into a string\r\n   */\r\n  toPercentageRgbString(): string {\r\n    const rnd = (x: number): number => Math.round(bound01(x, 255) * 100);\r\n    return this.a === 1\r\n      ? `rgb(${rnd(this.r)}%, ${rnd(this.g)}%, ${rnd(this.b)}%)`\r\n      : `rgba(${rnd(this.r)}%, ${rnd(this.g)}%, ${rnd(this.b)}%, ${this.roundA})`;\r\n  }\r\n\r\n  /**\r\n   * The 'real' name of the color -if there is one.\r\n   */\r\n  toName(): string | false {\r\n    if (this.a === 0) {\r\n      return 'transparent';\r\n    }\r\n\r\n    if (this.a < 1) {\r\n      return false;\r\n    }\r\n\r\n    const hex = '#' + rgbToHex(this.r, this.g, this.b, false);\r\n    for (const [key, value] of Object.entries(names)) {\r\n      if (hex === value) {\r\n        return key;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * String representation of the color.\r\n   *\r\n   * @param format - The format to be used when displaying the string representation.\r\n   */\r\n  toString<T extends 'name'>(format: T): boolean | string;\r\n  toString<T extends ColorFormats>(format?: T): string;\r\n  toString(format?: ColorFormats): string | false {\r\n    const formatSet = Boolean(format);\r\n    format = format ?? this.format;\r\n\r\n    let formattedString: string | false = false;\r\n    const hasAlpha = this.a < 1 && this.a >= 0;\r\n    const needsAlphaFormat =\r\n      !formatSet && hasAlpha && (format.startsWith('hex') || format === 'name');\r\n\r\n    if (needsAlphaFormat) {\r\n      // Special case for \"transparent\", all other non-alpha formats\r\n      // will return rgba when there is transparency.\r\n      if (format === 'name' && this.a === 0) {\r\n        return this.toName();\r\n      }\r\n\r\n      return this.toRgbString();\r\n    }\r\n\r\n    if (format === 'rgb') {\r\n      formattedString = this.toRgbString();\r\n    }\r\n\r\n    if (format === 'prgb') {\r\n      formattedString = this.toPercentageRgbString();\r\n    }\r\n\r\n    if (format === 'hex' || format === 'hex6') {\r\n      formattedString = this.toHexString();\r\n    }\r\n\r\n    if (format === 'hex3') {\r\n      formattedString = this.toHexString(true);\r\n    }\r\n\r\n    if (format === 'hex4') {\r\n      formattedString = this.toHex8String(true);\r\n    }\r\n\r\n    if (format === 'hex8') {\r\n      formattedString = this.toHex8String();\r\n    }\r\n\r\n    if (format === 'name') {\r\n      formattedString = this.toName();\r\n    }\r\n\r\n    if (format === 'hsl') {\r\n      formattedString = this.toHslString();\r\n    }\r\n\r\n    if (format === 'hsv') {\r\n      formattedString = this.toHsvString();\r\n    }\r\n\r\n    return formattedString || this.toHexString();\r\n  }\r\n\r\n  toNumber(): number {\r\n    return (Math.round(this.r) << 16) + (Math.round(this.g) << 8) + Math.round(this.b);\r\n  }\r\n\r\n  clone(): TinyColor {\r\n    return new TinyColor(this.toString());\r\n  }\r\n\r\n  /**\r\n   * Lighten the color a given amount. Providing 100 will always return white.\r\n   * @param amount - valid between 1-100\r\n   */\r\n  lighten(amount = 10): TinyColor {\r\n    const hsl = this.toHsl();\r\n    hsl.l += amount / 100;\r\n    hsl.l = clamp01(hsl.l);\r\n    return new TinyColor(hsl);\r\n  }\r\n\r\n  /**\r\n   * Brighten the color a given amount, from 0 to 100.\r\n   * @param amount - valid between 1-100\r\n   */\r\n  brighten(amount = 10): TinyColor {\r\n    const rgb = this.toRgb();\r\n    rgb.r = Math.max(0, Math.min(255, rgb.r - Math.round(255 * -(amount / 100))));\r\n    rgb.g = Math.max(0, Math.min(255, rgb.g - Math.round(255 * -(amount / 100))));\r\n    rgb.b = Math.max(0, Math.min(255, rgb.b - Math.round(255 * -(amount / 100))));\r\n    return new TinyColor(rgb);\r\n  }\r\n\r\n  /**\r\n   * Darken the color a given amount, from 0 to 100.\r\n   * Providing 100 will always return black.\r\n   * @param amount - valid between 1-100\r\n   */\r\n  darken(amount = 10): TinyColor {\r\n    const hsl = this.toHsl();\r\n    hsl.l -= amount / 100;\r\n    hsl.l = clamp01(hsl.l);\r\n    return new TinyColor(hsl);\r\n  }\r\n\r\n  /**\r\n   * Mix the color with pure white, from 0 to 100.\r\n   * Providing 0 will do nothing, providing 100 will always return white.\r\n   * @param amount - valid between 1-100\r\n   */\r\n  tint(amount = 10): TinyColor {\r\n    return this.mix('white', amount);\r\n  }\r\n\r\n  /**\r\n   * Mix the color with pure black, from 0 to 100.\r\n   * Providing 0 will do nothing, providing 100 will always return black.\r\n   * @param amount - valid between 1-100\r\n   */\r\n  shade(amount = 10): TinyColor {\r\n    return this.mix('black', amount);\r\n  }\r\n\r\n  /**\r\n   * Desaturate the color a given amount, from 0 to 100.\r\n   * Providing 100 will is the same as calling greyscale\r\n   * @param amount - valid between 1-100\r\n   */\r\n  desaturate(amount = 10): TinyColor {\r\n    const hsl = this.toHsl();\r\n    hsl.s -= amount / 100;\r\n    hsl.s = clamp01(hsl.s);\r\n    return new TinyColor(hsl);\r\n  }\r\n\r\n  /**\r\n   * Saturate the color a given amount, from 0 to 100.\r\n   * @param amount - valid between 1-100\r\n   */\r\n  saturate(amount = 10): TinyColor {\r\n    const hsl = this.toHsl();\r\n    hsl.s += amount / 100;\r\n    hsl.s = clamp01(hsl.s);\r\n    return new TinyColor(hsl);\r\n  }\r\n\r\n  /**\r\n   * Completely desaturates a color into greyscale.\r\n   * Same as calling `desaturate(100)`\r\n   */\r\n  greyscale(): TinyColor {\r\n    return this.desaturate(100);\r\n  }\r\n\r\n  /**\r\n   * Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.\r\n   * Values outside of this range will be wrapped into this range.\r\n   */\r\n  spin(amount: number): TinyColor {\r\n    const hsl = this.toHsl();\r\n    const hue = (hsl.h + amount) % 360;\r\n    hsl.h = hue < 0 ? 360 + hue : hue;\r\n    return new TinyColor(hsl);\r\n  }\r\n\r\n  /**\r\n   * Mix the current color a given amount with another color, from 0 to 100.\r\n   * 0 means no mixing (return current color).\r\n   */\r\n  mix(color: ColorInput, amount = 50): TinyColor {\r\n    const rgb1 = this.toRgb();\r\n    const rgb2 = new TinyColor(color).toRgb();\r\n\r\n    const p = amount / 100;\r\n    const rgba = {\r\n      r: (rgb2.r - rgb1.r) * p + rgb1.r,\r\n      g: (rgb2.g - rgb1.g) * p + rgb1.g,\r\n      b: (rgb2.b - rgb1.b) * p + rgb1.b,\r\n      a: (rgb2.a - rgb1.a) * p + rgb1.a,\r\n    };\r\n\r\n    return new TinyColor(rgba);\r\n  }\r\n\r\n  analogous(results = 6, slices = 30): TinyColor[] {\r\n    const hsl = this.toHsl();\r\n    const part = 360 / slices;\r\n    const ret: TinyColor[] = [this];\r\n\r\n    for (hsl.h = (hsl.h - ((part * results) >> 1) + 720) % 360; --results; ) {\r\n      hsl.h = (hsl.h + part) % 360;\r\n      ret.push(new TinyColor(hsl));\r\n    }\r\n\r\n    return ret;\r\n  }\r\n\r\n  /**\r\n   * taken from https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js\r\n   */\r\n  complement(): TinyColor {\r\n    const hsl = this.toHsl();\r\n    hsl.h = (hsl.h + 180) % 360;\r\n    return new TinyColor(hsl);\r\n  }\r\n\r\n  monochromatic(results = 6): TinyColor[] {\r\n    const hsv = this.toHsv();\r\n    const { h } = hsv;\r\n    const { s } = hsv;\r\n    let { v } = hsv;\r\n    const res: TinyColor[] = [];\r\n    const modification = 1 / results;\r\n\r\n    while (results--) {\r\n      res.push(new TinyColor({ h, s, v }));\r\n      v = (v + modification) % 1;\r\n    }\r\n\r\n    return res;\r\n  }\r\n\r\n  splitcomplement(): TinyColor[] {\r\n    const hsl = this.toHsl();\r\n    const { h } = hsl;\r\n    return [\r\n      this,\r\n      new TinyColor({ h: (h + 72) % 360, s: hsl.s, l: hsl.l }),\r\n      new TinyColor({ h: (h + 216) % 360, s: hsl.s, l: hsl.l }),\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Compute how the color would appear on a background\r\n   */\r\n  onBackground(background: ColorInput): TinyColor {\r\n    const fg = this.toRgb();\r\n    const bg = new TinyColor(background).toRgb();\r\n\r\n    return new TinyColor({\r\n      r: bg.r + (fg.r - bg.r) * fg.a,\r\n      g: bg.g + (fg.g - bg.g) * fg.a,\r\n      b: bg.b + (fg.b - bg.b) * fg.a,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Alias for `polyad(3)`\r\n   */\r\n  triad(): TinyColor[] {\r\n    return this.polyad(3);\r\n  }\r\n\r\n  /**\r\n   * Alias for `polyad(4)`\r\n   */\r\n  tetrad(): TinyColor[] {\r\n    return this.polyad(4);\r\n  }\r\n\r\n  /**\r\n   * Get polyad colors, like (for 1, 2, 3, 4, 5, 6, 7, 8, etc...)\r\n   * monad, dyad, triad, tetrad, pentad, hexad, heptad, octad, etc...\r\n   */\r\n  polyad(n: number): TinyColor[] {\r\n    const hsl = this.toHsl();\r\n    const { h } = hsl;\r\n\r\n    const result: TinyColor[] = [this];\r\n    const increment = 360 / n;\r\n    for (let i = 1; i < n; i++) {\r\n      result.push(new TinyColor({ h: (h + i * increment) % 360, s: hsl.s, l: hsl.l }));\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * compare color vs current color\r\n   */\r\n  equals(color?: ColorInput): boolean {\r\n    return this.toRgbString() === new TinyColor(color).toRgbString();\r\n  }\r\n}\r\n\r\n// kept for backwards compatability with v1\r\nexport function tinycolor(color: ColorInput = '', opts: Partial<TinyColorOptions> = {}): TinyColor {\r\n  return new TinyColor(color, opts);\r\n}\r\n","import { ColorInput, TinyColor } from './tinycolor';\r\n\r\n// Readability Functions\r\n// ---------------------\r\n// <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)\r\n\r\n/**\r\n * AKA `contrast`\r\n *\r\n * Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)\r\n */\r\nexport function readability(color1: ColorInput, color2: ColorInput): number {\r\n  const c1 = new TinyColor(color1);\r\n  const c2 = new TinyColor(color2);\r\n  return (\r\n    (Math.max(c1.getLuminance(), c2.getLuminance()) + 0.05) /\r\n    (Math.min(c1.getLuminance(), c2.getLuminance()) + 0.05)\r\n  );\r\n}\r\n\r\nexport interface WCAG2Parms {\r\n  level?: 'AA' | 'AAA';\r\n  size?: 'large' | 'small';\r\n}\r\n\r\n/**\r\n * Ensure that foreground and background color combinations meet WCAG2 guidelines.\r\n * The third argument is an object.\r\n *      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';\r\n *      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.\r\n * If the entire object is absent, isReadable defaults to {level:\"AA\",size:\"small\"}.\r\n *\r\n * Example\r\n * ```ts\r\n * new TinyColor().isReadable('#000', '#111') => false\r\n * new TinyColor().isReadable('#000', '#111', { level: 'AA', size: 'large' }) => false\r\n * ```\r\n */\r\nexport function isReadable(\r\n  color1: ColorInput,\r\n  color2: ColorInput,\r\n  wcag2: WCAG2Parms = { level: 'AA', size: 'small' },\r\n): boolean {\r\n  const readabilityLevel = readability(color1, color2);\r\n  switch ((wcag2.level ?? 'AA') + (wcag2.size ?? 'small')) {\r\n    case 'AAsmall':\r\n    case 'AAAlarge':\r\n      return readabilityLevel >= 4.5;\r\n    case 'AAlarge':\r\n      return readabilityLevel >= 3;\r\n    case 'AAAsmall':\r\n      return readabilityLevel >= 7;\r\n    default:\r\n      return false;\r\n  }\r\n}\r\n\r\nexport interface WCAG2FallbackParms extends WCAG2Parms {\r\n  includeFallbackColors?: boolean;\r\n}\r\n\r\n/**\r\n * Given a base color and a list of possible foreground or background\r\n * colors for that base, returns the most readable color.\r\n * Optionally returns Black or White if the most readable color is unreadable.\r\n *\r\n * @param baseColor - the base color.\r\n * @param colorList - array of colors to pick the most readable one from.\r\n * @param args - and object with extra arguments\r\n *\r\n * Example\r\n * ```ts\r\n * new TinyColor().mostReadable('#123', ['#124\", \"#125'], { includeFallbackColors: false }).toHexString(); // \"#112255\"\r\n * new TinyColor().mostReadable('#123', ['#124\", \"#125'],{ includeFallbackColors: true }).toHexString();  // \"#ffffff\"\r\n * new TinyColor().mostReadable('#a8015a', [\"#faf3f3\"], { includeFallbackColors:true, level: 'AAA', size: 'large' }).toHexString(); // \"#faf3f3\"\r\n * new TinyColor().mostReadable('#a8015a', [\"#faf3f3\"], { includeFallbackColors:true, level: 'AAA', size: 'small' }).toHexString(); // \"#ffffff\"\r\n * ```\r\n */\r\nexport function mostReadable(\r\n  baseColor: ColorInput,\r\n  colorList: ColorInput[],\r\n  args: WCAG2FallbackParms = { includeFallbackColors: false, level: 'AA', size: 'small' },\r\n): TinyColor | null {\r\n  let bestColor: TinyColor | null = null;\r\n  let bestScore = 0;\r\n  const { includeFallbackColors, level, size } = args;\r\n\r\n  for (const color of colorList) {\r\n    const score = readability(baseColor, color);\r\n    if (score > bestScore) {\r\n      bestScore = score;\r\n      bestColor = new TinyColor(color);\r\n    }\r\n  }\r\n\r\n  if (isReadable(baseColor, bestColor!, { level, size }) || !includeFallbackColors) {\r\n    return bestColor;\r\n  }\r\n\r\n  args.includeFallbackColors = false;\r\n  return mostReadable(baseColor, ['#fff', '#000'], args);\r\n}\r\n","import { rgbaToArgbHex } from './conversion';\r\nimport { ColorInput, TinyColor } from './tinycolor';\r\n/**\r\n * Returns the color represented as a Microsoft filter for use in old versions of IE.\r\n */\r\nexport function toMsFilter(firstColor: ColorInput, secondColor?: ColorInput): string {\r\n  const color = new TinyColor(firstColor);\r\n  const hex8String = '#' + rgbaToArgbHex(color.r, color.g, color.b, color.a);\r\n  let secondHex8String = hex8String;\r\n  const gradientType: string = color.gradientType ? 'GradientType = 1, ' : '';\r\n\r\n  if (secondColor) {\r\n    const s = new TinyColor(secondColor);\r\n    secondHex8String = '#' + rgbaToArgbHex(s.r, s.g, s.b, s.a);\r\n  }\r\n\r\n  return `progid:DXImageTransform.Microsoft.gradient(${gradientType}startColorstr=${hex8String},endColorstr=${secondHex8String})`;\r\n}\r\n","import { TinyColor } from './tinycolor';\r\nimport { RGBA } from './interfaces';\r\nimport { convertToPercentage } from './util';\r\n\r\nexport interface RatioInput {\r\n  r: number | string;\r\n  g: number | string;\r\n  b: number | string;\r\n  a?: number | string;\r\n}\r\n\r\n/**\r\n * If input is an object, force 1 into \"1.0\" to handle ratios properly\r\n * String input requires \"1.0\" as input, so 1 will be treated as 1\r\n */\r\nexport function fromRatio(ratio: RatioInput, opts?: any): TinyColor {\r\n  const newColor: Partial<RGBA> = {\r\n    r: convertToPercentage(ratio.r),\r\n    g: convertToPercentage(ratio.g),\r\n    b: convertToPercentage(ratio.b),\r\n  };\r\n  if (ratio.a !== undefined) {\r\n    newColor.a = Number(ratio.a);\r\n  }\r\n\r\n  return new TinyColor(newColor as RGBA, opts);\r\n}\r\n\r\n/** old random function */\r\nexport function legacyRandom(): TinyColor {\r\n  return new TinyColor({\r\n    r: Math.random(),\r\n    g: Math.random(),\r\n    b: Math.random(),\r\n  });\r\n}\r\n","// randomColor by David Merfield under the CC0 license\r\n// https://github.com/davidmerfield/randomColor/\r\nimport { TinyColor } from './tinycolor';\r\nimport { HSVA } from './interfaces';\r\n\r\nexport interface RandomOptions {\r\n  seed?: number;\r\n  hue?:\r\n    | number\r\n    | string\r\n    | 'red'\r\n    | 'orange'\r\n    | 'yellow'\r\n    | 'green'\r\n    | 'blue'\r\n    | 'purple'\r\n    | 'pink'\r\n    | 'monochrome';\r\n  luminosity?: 'random' | 'bright' | 'dark' | 'light';\r\n  alpha?: number;\r\n}\r\n\r\nexport interface RandomCountOptions extends RandomOptions {\r\n  count?: number | null;\r\n}\r\n\r\nexport function random(options?: RandomOptions): TinyColor;\r\nexport function random(options?: RandomCountOptions): TinyColor[];\r\nexport function random(options: RandomOptions | RandomCountOptions = {}): TinyColor | TinyColor[] {\r\n  // Check if we need to generate multiple colors\r\n  if (\r\n    (options as RandomCountOptions).count !== undefined &&\r\n    (options as RandomCountOptions).count !== null\r\n  ) {\r\n    const totalColors: number = (options as RandomCountOptions).count!;\r\n    const colors: TinyColor[] = [];\r\n\r\n    (options as RandomCountOptions).count = undefined;\r\n\r\n    while (totalColors > colors.length) {\r\n      // Since we're generating multiple colors,\r\n      // incremement the seed. Otherwise we'd just\r\n      // generate the same color each time...\r\n      (options as RandomCountOptions).count = null;\r\n      if (options.seed) {\r\n        options.seed += 1;\r\n      }\r\n\r\n      colors.push(random(options as RandomOptions));\r\n    }\r\n\r\n    (options as RandomCountOptions).count = totalColors;\r\n    return colors;\r\n  }\r\n\r\n  // First we pick a hue (H)\r\n  const h = pickHue(options.hue, options.seed);\r\n\r\n  // Then use H to determine saturation (S)\r\n  const s = pickSaturation(h, options);\r\n\r\n  // Then use S and H to determine brightness (B).\r\n  const v = pickBrightness(h, s, options);\r\n  const res: Partial<HSVA> = { h, s, v };\r\n  if (options.alpha !== undefined) {\r\n    res.a = options.alpha;\r\n  }\r\n\r\n  // Then we return the HSB color in the desired format\r\n  return new TinyColor(res as HSVA);\r\n}\r\n\r\nfunction pickHue(hue: number | string | undefined, seed?: number): number {\r\n  const hueRange = getHueRange(hue);\r\n  let res = randomWithin(hueRange, seed);\r\n\r\n  // Instead of storing red as two seperate ranges,\r\n  // we group them, using negative numbers\r\n  if (res < 0) {\r\n    res = 360 + res;\r\n  }\r\n\r\n  return res;\r\n}\r\n\r\nfunction pickSaturation(hue: number, options: RandomOptions): number {\r\n  if (options.hue === 'monochrome') {\r\n    return 0;\r\n  }\r\n\r\n  if (options.luminosity === 'random') {\r\n    return randomWithin([0, 100], options.seed);\r\n  }\r\n\r\n  const { saturationRange } = getColorInfo(hue);\r\n\r\n  let sMin = saturationRange[0];\r\n  let sMax = saturationRange[1];\r\n\r\n  switch (options.luminosity) {\r\n    case 'bright':\r\n      sMin = 55;\r\n      break;\r\n    case 'dark':\r\n      sMin = sMax - 10;\r\n      break;\r\n    case 'light':\r\n      sMax = 55;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n\r\n  return randomWithin([sMin, sMax], options.seed);\r\n}\r\n\r\nfunction pickBrightness(H: number, S: number, options: RandomOptions): number {\r\n  let bMin = getMinimumBrightness(H, S);\r\n  let bMax = 100;\r\n\r\n  switch (options.luminosity) {\r\n    case 'dark':\r\n      bMax = bMin + 20;\r\n      break;\r\n    case 'light':\r\n      bMin = (bMax + bMin) / 2;\r\n      break;\r\n    case 'random':\r\n      bMin = 0;\r\n      bMax = 100;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n\r\n  return randomWithin([bMin, bMax], options.seed);\r\n}\r\n\r\nfunction getMinimumBrightness(H: number, S: number): number {\r\n  const { lowerBounds } = getColorInfo(H);\r\n\r\n  for (let i = 0; i < lowerBounds.length - 1; i++) {\r\n    const s1 = lowerBounds[i][0];\r\n    const v1 = lowerBounds[i][1];\r\n\r\n    const s2 = lowerBounds[i + 1][0];\r\n    const v2 = lowerBounds[i + 1][1];\r\n\r\n    if (S >= s1 && S <= s2) {\r\n      const m = (v2 - v1) / (s2 - s1);\r\n      const b = v1 - m * s1;\r\n\r\n      return m * S + b;\r\n    }\r\n  }\r\n\r\n  return 0;\r\n}\r\n\r\nfunction getHueRange(colorInput?: number | string): [number, number] {\r\n  const num = parseInt(colorInput as string, 10);\r\n  if (!Number.isNaN(num) && num < 360 && num > 0) {\r\n    return [num, num];\r\n  }\r\n\r\n  if (typeof colorInput === 'string') {\r\n    const namedColor = bounds.find(n => n.name === colorInput);\r\n    if (namedColor) {\r\n      const color = defineColor(namedColor);\r\n      if (color.hueRange) {\r\n        return color.hueRange;\r\n      }\r\n    }\r\n\r\n    const parsed = new TinyColor(colorInput);\r\n    if (parsed.isValid) {\r\n      const hue = parsed.toHsv().h;\r\n      return [hue, hue];\r\n    }\r\n  }\r\n\r\n  return [0, 360];\r\n}\r\n\r\nfunction getColorInfo(hue: number): {\r\n  name: string;\r\n  hueRange: [number, number] | null;\r\n  lowerBounds: Array<[number, number]>;\r\n  saturationRange: number[];\r\n  brightnessRange: number[];\r\n} {\r\n  // Maps red colors to make picking hue easier\r\n  if (hue >= 334 && hue <= 360) {\r\n    hue -= 360;\r\n  }\r\n\r\n  for (const bound of bounds) {\r\n    const color = defineColor(bound);\r\n    if (color.hueRange && hue >= color.hueRange[0] && hue <= color.hueRange[1]) {\r\n      return color;\r\n    }\r\n  }\r\n\r\n  throw Error('Color not found');\r\n}\r\n\r\nfunction randomWithin(range: [number, number], seed?: number): number {\r\n  if (seed === undefined) {\r\n    return Math.floor(range[0] + Math.random() * (range[1] + 1 - range[0]));\r\n  }\r\n\r\n  // Seeded random algorithm from http://indiegamr.com/generate-repeatable-random-numbers-in-js/\r\n  const max = range[1] || 1;\r\n  const min = range[0] || 0;\r\n  seed = (seed * 9301 + 49297) % 233280;\r\n  const rnd = seed / 233280.0;\r\n  return Math.floor(min + rnd * (max - min));\r\n}\r\n\r\nfunction defineColor(bound: ColorBound): {\r\n  name: string;\r\n  hueRange: [number, number] | null;\r\n  lowerBounds: Array<[number, number]>;\r\n  saturationRange: number[];\r\n  brightnessRange: number[];\r\n} {\r\n  const sMin = bound.lowerBounds[0][0];\r\n  const sMax = bound.lowerBounds[bound.lowerBounds.length - 1][0];\r\n  const bMin = bound.lowerBounds[bound.lowerBounds.length - 1][1];\r\n  const bMax = bound.lowerBounds[0][1];\r\n\r\n  return {\r\n    name: bound.name,\r\n    hueRange: bound.hueRange,\r\n    lowerBounds: bound.lowerBounds,\r\n    saturationRange: [sMin, sMax],\r\n    brightnessRange: [bMin, bMax],\r\n  };\r\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport interface ColorBound {\r\n  name: string;\r\n  hueRange: [number, number] | null;\r\n  lowerBounds: Array<[number, number]>;\r\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport const bounds: ColorBound[] = [\r\n  {\r\n    name: 'monochrome',\r\n    hueRange: null,\r\n    lowerBounds: [\r\n      [0, 0],\r\n      [100, 0],\r\n    ],\r\n  },\r\n  {\r\n    name: 'red',\r\n    hueRange: [-26, 18],\r\n    lowerBounds: [\r\n      [20, 100],\r\n      [30, 92],\r\n      [40, 89],\r\n      [50, 85],\r\n      [60, 78],\r\n      [70, 70],\r\n      [80, 60],\r\n      [90, 55],\r\n      [100, 50],\r\n    ],\r\n  },\r\n  {\r\n    name: 'orange',\r\n    hueRange: [19, 46],\r\n    lowerBounds: [\r\n      [20, 100],\r\n      [30, 93],\r\n      [40, 88],\r\n      [50, 86],\r\n      [60, 85],\r\n      [70, 70],\r\n      [100, 70],\r\n    ],\r\n  },\r\n  {\r\n    name: 'yellow',\r\n    hueRange: [47, 62],\r\n    lowerBounds: [\r\n      [25, 100],\r\n      [40, 94],\r\n      [50, 89],\r\n      [60, 86],\r\n      [70, 84],\r\n      [80, 82],\r\n      [90, 80],\r\n      [100, 75],\r\n    ],\r\n  },\r\n  {\r\n    name: 'green',\r\n    hueRange: [63, 178],\r\n    lowerBounds: [\r\n      [30, 100],\r\n      [40, 90],\r\n      [50, 85],\r\n      [60, 81],\r\n      [70, 74],\r\n      [80, 64],\r\n      [90, 50],\r\n      [100, 40],\r\n    ],\r\n  },\r\n  {\r\n    name: 'blue',\r\n    hueRange: [179, 257],\r\n    lowerBounds: [\r\n      [20, 100],\r\n      [30, 86],\r\n      [40, 80],\r\n      [50, 74],\r\n      [60, 60],\r\n      [70, 52],\r\n      [80, 44],\r\n      [90, 39],\r\n      [100, 35],\r\n    ],\r\n  },\r\n  {\r\n    name: 'purple',\r\n    hueRange: [258, 282],\r\n    lowerBounds: [\r\n      [20, 100],\r\n      [30, 87],\r\n      [40, 79],\r\n      [50, 70],\r\n      [60, 65],\r\n      [70, 59],\r\n      [80, 52],\r\n      [90, 45],\r\n      [100, 42],\r\n    ],\r\n  },\r\n  {\r\n    name: 'pink',\r\n    hueRange: [283, 334],\r\n    lowerBounds: [\r\n      [20, 100],\r\n      [30, 90],\r\n      [40, 86],\r\n      [60, 84],\r\n      [80, 80],\r\n      [90, 75],\r\n      [100, 73],\r\n    ],\r\n  },\r\n];\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}