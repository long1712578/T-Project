{"version":3,"file":"tds-ui-tds-checkbox.mjs","sources":["../../../projects/tds-ui/tds-checkbox/checkbox-config.ts","../../../projects/tds-ui/tds-checkbox/checkbox.html","../../../projects/tds-ui/tds-checkbox/checkbox.ts","../../../projects/tds-ui/tds-checkbox/checkbox.module.ts","../../../projects/tds-ui/tds-checkbox/tds-ui-tds-checkbox.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {InjectionToken} from '@angular/core';\r\nimport { TDSThemePalette } from 'tds-ui/shared/common';\r\n\r\n/** Default `mat-checkbox` options that can be overridden. */\r\nexport interface TDSCheckboxDefaultOptions {\r\n  color?: TDSThemePalette;\r\n  clickAction?: TDSCheckboxClickAction;\r\n}\r\n\r\n/** Injection token to be used to override the default options for `tds-checkbox`. */\r\nexport const TDS_CHECKBOX_DEFAULT_OPTIONS =\r\n    new InjectionToken<TDSCheckboxDefaultOptions>('tds-checkbox-default-options', {\r\n      providedIn: 'root',\r\n      factory: TDS_CHECKBOX_DEFAULT_OPTIONS_FACTORY\r\n    });\r\n\r\n/** @docs-private */\r\nexport function TDS_CHECKBOX_DEFAULT_OPTIONS_FACTORY(): TDSCheckboxDefaultOptions {\r\n  return {   \r\n    clickAction: 'check-indeterminate',\r\n  };\r\n}\r\n\r\n/**\r\n * Checkbox click action when user click on input element.\r\n * noop: Do not toggle checked or indeterminate.\r\n * check: Only toggle checked status, ignore indeterminate.\r\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\r\n * undefined: Same as `check-indeterminate`.\r\n */\r\nexport type TDSCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\r\n","<label class=\"flex items-center group\" [attr.for]=\"inputId\" #label>\r\n    <span\r\n        class=\"p-0.5 border rounded   relative flex items-center justify-center box-content border-neutral-2-200 dark:border-d-neutral-2-200\"\r\n        [ngClass]=\"{'group-hover:border-primary-1  cursor-pointer':!disabled,\r\n        'bg-primary-1 border-primary-1':!disabled  && (checked || indeterminate),\r\n        'bg-white dark:bg-d-neutral-3-50 ':!checked && !indeterminate,\r\n        ' bg-neutral-3-50 dark:bg-d-neutral-2-200':disabled && !checked && !indeterminate,\r\n        ' bg-neutral-2-200 dark:bg-d-neutral-1-200':disabled && (checked || indeterminate),\r\n        'cursor-not-allowed':disabled\r\n    }\">\r\n        <input #input type=\"checkbox\"\r\n            class=\"border-0 overflow-hidden padding-0 absolute whitespace-nowrap outline outline-none\"\r\n            style=\"height: 1px; margin: -1px;clip: rect(0 0 0 0); width:1px\" [id]=\"inputId\" [required]=\"required\"\r\n            [checked]=\"checked\" [attr.value]=\"value\" [disabled]=\"disabled\" [attr.name]=\"name\" [tabIndex]=\"tabIndex\"\r\n            [attr.aria-label]=\"ariaLabel || null\" [attr.aria-labelledby]=\"ariaLabelledby\"\r\n            [attr.aria-checked]=\"_getAriaChecked()\" [attr.aria-describedby]=\"ariaDescribedby\"\r\n            (change)=\"_onInteractionEvent($event)\" (click)=\"_onInputClick($event)\" />\r\n\r\n        <span [ngClass]=\"{\r\n            'h-3 w-3':size == 'md',\r\n            'h-2.5 w-2.5':size == 'sm',\r\n            'h-3.5 w-3.5':size == 'lg'\r\n        }\">\r\n            <svg *ngIf=\"checked && !indeterminate \" [attr.width]=\"widthHieghtSvg\" [attr.height]=\"widthHieghtSvg\"\r\n                viewBox=\"0 0 12 8\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <path class=\"fill-current text-white \" [class]=\"{'dark:text-d-neutral-3-50': disabled}\"\r\n                    d=\"M10.7307 0.90316C10.5348 0.707751 10.2694 0.598045 9.99275 0.598045C9.71605 0.598045 9.45061 0.707751 9.25471 0.90316L4.75471 5.40316L2.78572 3.4352C2.68953 3.33465 2.57426 3.25427 2.44661 3.19888C2.31895 3.14348 2.18152 3.11414 2.04237 3.11257C1.90323 3.111 1.76517 3.13728 1.6363 3.18978C1.50744 3.24229 1.39031 3.31999 1.29188 3.41836C1.19345 3.51672 1.11565 3.63376 1.06306 3.7626C1.01047 3.89143 0.984135 4.02946 0.985609 4.1686C0.987082 4.30775 1.01636 4.44521 1.07167 4.5729C1.12698 4.70059 1.20726 4.81594 1.30775 4.91219L4.01674 7.6202C4.21298 7.81573 4.47872 7.9255 4.75575 7.9255C5.03278 7.9255 5.29846 7.81573 5.4947 7.6202L10.7367 2.38021C10.8346 2.28323 10.9123 2.1678 10.9653 2.04061C11.0184 1.91343 11.0457 1.77698 11.0457 1.63918C11.0457 1.50138 11.0184 1.36494 10.9653 1.23775C10.9123 1.11057 10.8346 0.995193 10.7367 0.898216L10.7307 0.90316Z\" />\r\n            </svg>\r\n            <svg *ngIf=\"indeterminate\" xmlns=\"http://www.w3.org/2000/svg\" [attr.width]=\"widthHieghtSvg\"\r\n                [attr.height]=\"widthHieghtSvg\" viewBox=\"0 0 12 4\" fill=\"none\">\r\n                <path fill-rule=\"evenodd\" clip-rule=\"evenodd\"\r\n                    d=\"M0.600006 2C0.600006 1.33726 1.13726 0.800003 1.80001 0.800003L10.2 0.800003C10.8627 0.800003 11.4 1.33726 11.4 2C11.4 2.66274 10.8627 3.2 10.2 3.2L1.80001 3.2C1.13726 3.2 0.600006 2.66274 0.600006 2Z\"\r\n                    class=\"fill-current text-white\" [class]=\"{'dark:text-d-neutral-3-50': disabled}\" />\r\n            </svg>\r\n        </span>\r\n    </span>\r\n    <span class=\"ml-2 text-body-2 font-regular  select-none empty:hidden\"\r\n        [ngClass]=\"{'text-neutral-1-900 dark:text-d-neutral-1-900':!disabled,'text-neutral-1-300 dark:text-d-neutral-1-300':disabled,'ml-2':checkboxLabel.children.length}\"\r\n        #checkboxLabel (cdkObserveContent)=\"_onLabelTextChange()\"\r\n        [ngClass]=\"{'cursor-pointer':!disabled,'opacity-65 cursor-not-allowed':disabled}\">        \r\n        <ng-content></ng-content>\r\n    </span>\r\n</label>","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { FocusableOption, FocusMonitor, FocusOrigin } from '@angular/cdk/a11y';\r\nimport { BooleanInput, coerceBooleanProperty, NumberInput } from '@angular/cdk/coercion';\r\nimport {\r\n  AfterViewChecked,\r\n  Attribute,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Inject,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  AfterViewInit,\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { ButtonSize } from \"tds-ui/core/config\";\r\nimport { CanDisable, CanDisableCtor, HasTabIndex, HasTabIndexCtor, mixinDisabled, mixinTabIndex } from 'tds-ui/shared/common';\r\nimport {\r\n  TDS_CHECKBOX_DEFAULT_OPTIONS,\r\n  TDSCheckboxDefaultOptions,\r\n  TDS_CHECKBOX_DEFAULT_OPTIONS_FACTORY,\r\n} from './checkbox-config';\r\n\r\n\r\n// Increasing integer for generating unique ids for checkbox components.\r\nlet nextUniqueId = 0;\r\n\r\n// Default checkbox configuration.\r\nconst defaults = TDS_CHECKBOX_DEFAULT_OPTIONS_FACTORY();\r\n\r\n/**\r\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\r\n * This allows it to support [(ngModel)].\r\n * @docs-private\r\n */\r\nexport const TDS_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => TDSCheckbox),\r\n  multi: true\r\n};\r\n\r\n/**\r\n * Represents the different states that require custom transitions between them.\r\n * @docs-private\r\n */\r\nexport const enum TransitionCheckState {\r\n  /** The initial state of the component before any user interaction. */\r\n  Init,\r\n  /** The state representing the component when it's becoming checked. */\r\n  Checked,\r\n  /** The state representing the component when it's becoming unchecked. */\r\n  Unchecked,\r\n  /** The state representing the component when it's becoming indeterminate. */\r\n  Indeterminate\r\n}\r\n\r\n/** Change event object emitted by MatCheckbox. */\r\nexport class TDSCheckboxChange {\r\n  /** The source MatCheckbox of the event. */\r\n  source!: TDSCheckbox;\r\n  /** The new `checked` value of the checkbox. */\r\n  checked!: boolean;\r\n}\r\n\r\n// Boilerplate for applying mixins to MatCheckbox.\r\n/** @docs-private */\r\nclass TDSCheckboxBase {\r\n  constructor(public _elementRef: ElementRef) { }\r\n}\r\nconst _TACheckboxMixinBase:\r\n  HasTabIndexCtor &\r\n  CanDisableCtor &\r\n  typeof TDSCheckboxBase =\r\n  mixinTabIndex(mixinDisabled(TDSCheckboxBase));\r\n\r\n\r\n/**\r\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\r\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\r\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\r\n * so there is no need to provide them yourself. However, if you want to omit a label and still\r\n * have the checkbox be accessible, you may supply an [aria-label] input.\r\n * See: https://material.io/design/components/selection-controls.html\r\n */\r\n@Component({\r\n  selector: 'tds-checkbox',\r\n  templateUrl: 'checkbox.html',\r\n  exportAs: 'taCheckbox',\r\n  host: {\r\n    'class': 'tds-checkbox',\r\n    '[id]': 'id',\r\n    '[attr.tabindex]': 'null',\r\n    '[class.tds-checkbox-indeterminate]': 'indeterminate',\r\n    '[class.opacity-65]': 'disabled',\r\n    '[class.inline-block]': 'true',\r\n  },\r\n  providers: [TDS_CHECKBOX_CONTROL_VALUE_ACCESSOR],\r\n  inputs: ['color', 'tabIndex'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class TDSCheckbox extends _TACheckboxMixinBase implements ControlValueAccessor,\r\n  AfterViewInit, AfterViewChecked, OnDestroy, CanDisable, HasTabIndex,\r\n  FocusableOption {\r\n  private _size: ButtonSize = 'md';\r\n  widthHieghtSvg = 12;\r\n  @Input()\r\n\r\n  get size(): ButtonSize { return this._size; }\r\n  set size(value: ButtonSize) {\r\n    if (value !== this._size) {\r\n      this._size = value;\r\n      this.widthHieghtSvg = this._size == \"sm\" ? 10 : this._size == \"lg\" ? 14 : 12;\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\r\n  /**\r\n   * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\r\n   * take precedence so this may be omitted.\r\n   */\r\n  @Input('aria-label') ariaLabel: string = '';\r\n\r\n  /**\r\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\r\n   */\r\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\r\n\r\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\r\n  @Input('aria-describedby') ariaDescribedby!: string;\r\n\r\n  private _uniqueId: string = `tds-checkbox-${++nextUniqueId}`;\r\n\r\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\r\n  @Input() id: string = this._uniqueId;\r\n\r\n  /** Returns the unique id for the visual hidden input. */\r\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\r\n\r\n  /** Whether the checkbox is required. */\r\n  @Input()\r\n  get required(): boolean { return this._required; }\r\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\r\n  private _required!: boolean;\r\n\r\n  /** Name value will be applied to the input element if present */\r\n  @Input() name: string | null = null;\r\n\r\n  /** Event emitted when the checkbox's `checked` value changes. */\r\n  @Output() readonly tdsChange: EventEmitter<TDSCheckboxChange> =\r\n    new EventEmitter<TDSCheckboxChange>();\r\n    /**\r\n     * @deprecated sẽ không hỗ trợ từ bản 2.1.0, dùng tdsChange để thay thế\r\n     */\r\n    @Output() readonly change: EventEmitter<TDSCheckboxChange> =\r\n    new EventEmitter<TDSCheckboxChange>();\r\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\r\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n\r\n  /** The value attribute of the native input element */\r\n  @Input() value!: string;\r\n\r\n  /** The native `<input type=\"checkbox\">` element */\r\n  @ViewChild('input') _inputElement!: ElementRef<HTMLInputElement>;\r\n\r\n  /**\r\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\r\n   * @docs-private\r\n   */\r\n  _onTouched: () => any = () => { };\r\n\r\n\r\n\r\n  private _controlValueAccessorChangeFn: (value: any) => void = () => { };\r\n\r\n  constructor(elementRef: ElementRef<HTMLElement>,\r\n    private _changeDetectorRef: ChangeDetectorRef,\r\n    private _focusMonitor: FocusMonitor,\r\n    @Attribute('tabindex') tabIndex: string,\r\n\r\n    @Optional() @Inject(TDS_CHECKBOX_DEFAULT_OPTIONS)\r\n    private _options?: TDSCheckboxDefaultOptions) {\r\n    super(elementRef);\r\n    this._options = this._options || defaults;\r\n    this.tabIndex = parseInt(tabIndex) || 0;\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this._focusMonitor.monitor(this._elementRef, true).subscribe(focusOrigin => {\r\n      if (!focusOrigin) {\r\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\r\n        // Angular does not expect events to be raised during change detection, so any state change\r\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\r\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\r\n        // telling the form control it has been touched until the next tick.\r\n        Promise.resolve().then(() => {\r\n          this._onTouched();\r\n          this._changeDetectorRef.markForCheck();\r\n        });\r\n      }\r\n    });\r\n\r\n    this._syncIndeterminate(this._indeterminate);\r\n  }\r\n\r\n  // TODO: Delete next major revision.\r\n  ngAfterViewChecked() { }\r\n\r\n  ngOnDestroy() {\r\n    this._focusMonitor.stopMonitoring(this._elementRef);\r\n  }\r\n\r\n  /**\r\n   * Whether the checkbox is checked.\r\n   */\r\n  @Input()\r\n  get checked(): boolean { return this._checked; }\r\n  set checked(value: boolean) {\r\n    if (value != this.checked) {\r\n      this._checked = value;\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\r\n  private _checked: boolean = false;\r\n\r\n  /**\r\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\r\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\r\n   */\r\n  @Input()\r\n  get disabled() { return this._disabled; }\r\n  set disabled(value: any) {\r\n    const newValue = coerceBooleanProperty(value);\r\n\r\n    if (newValue !== this.disabled) {\r\n      this._disabled = newValue;\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\r\n  private _disabled: boolean = false;\r\n\r\n  /**\r\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\r\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\r\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\r\n   * set to false.\r\n   */\r\n  @Input()\r\n  get indeterminate(): boolean { return this._indeterminate; }\r\n  set indeterminate(value: boolean) {\r\n    const changed = value != this._indeterminate;\r\n    this._indeterminate = coerceBooleanProperty(value);\r\n\r\n    if (changed) {\r\n\r\n      this.indeterminateChange.emit(this._indeterminate);\r\n    }\r\n\r\n    this._syncIndeterminate(this._indeterminate);\r\n  }\r\n  private _indeterminate: boolean = false;\r\n\r\n\r\n\r\n  /** Method being called whenever the label text changes. */\r\n  _onLabelTextChange() {\r\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\r\n    // component will be only marked for check, but no actual change detection runs automatically.\r\n    // Instead of going back into the zone in order to trigger a change detection which causes\r\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\r\n    // an explicit change detection for the checkbox view and its children.\r\n    this._changeDetectorRef.detectChanges();\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  writeValue(value: any) {\r\n    this.checked = !!value;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  registerOnChange(fn: (value: any) => void) {\r\n    this._controlValueAccessorChangeFn = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  registerOnTouched(fn: any) {\r\n    this._onTouched = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  setDisabledState(isDisabled: boolean) {\r\n    this.disabled = isDisabled;\r\n  }\r\n\r\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\r\n    if (this.checked) {\r\n      return 'true';\r\n    }\r\n\r\n    return this.indeterminate ? 'mixed' : 'false';\r\n  }\r\n\r\n\r\n\r\n  private _emitChangeEvent() {\r\n    const event = new TDSCheckboxChange();\r\n    event.source = this;\r\n    event.checked = this.checked;\r\n\r\n    this._controlValueAccessorChangeFn(this.checked);\r\n    this.change.emit(event);\r\n    this.tdsChange.emit(event);    \r\n    // Assigning the value again here is redundant, but we have to do it in case it was\r\n    // changed inside the `change` listener which will cause the input to be out of sync.\r\n    if (this._inputElement) {\r\n      this._inputElement.nativeElement.checked = this.checked;\r\n    }\r\n  }\r\n\r\n  /** Toggles the `checked` state of the checkbox. */\r\n  toggle(): void {\r\n    \r\n    this.checked = !this.checked;\r\n  }\r\n\r\n  /**\r\n   * Event handler for checkbox input element.\r\n   * Toggles checked state if element is not disabled.\r\n   * Do not toggle on (change) event since IE doesn't fire change event when\r\n   *   indeterminate checkbox is clicked.\r\n   * @param event\r\n   */\r\n  _onInputClick(event: Event) {\r\n    const clickAction = this._options?.clickAction;\r\n\r\n    // We have to stop propagation for click events on the visual hidden input element.\r\n    // By default, when a user clicks on a label element, a generated click event will be\r\n    // dispatched on the associated input element. Since we are using a label element as our\r\n    // root container, the click event on the `checkbox` will be executed twice.\r\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\r\n    // This will lead to multiple click events.\r\n    // Preventing bubbling for the second event will solve that issue.\r\n    event.stopPropagation();\r\n\r\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\r\n    if (!this.disabled && clickAction !== 'noop') {\r\n      // When user manually click on the checkbox, `indeterminate` is set to false.\r\n      if (this.indeterminate && clickAction !== 'check') {\r\n\r\n        Promise.resolve().then(() => {\r\n          this._indeterminate = false;\r\n          this.indeterminateChange.emit(this._indeterminate);\r\n        });\r\n      }\r\n\r\n      this.toggle();\r\n      //  this._transitionCheckState(\r\n      //      this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\r\n\r\n      // Emit our custom change event if the native input emitted one.\r\n      // It is important to only emit it, if the native input triggered one, because\r\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\r\n      this._emitChangeEvent();\r\n    } else if (!this.disabled && clickAction === 'noop') {\r\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\r\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\r\n      this._inputElement.nativeElement.checked = this.checked;\r\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\r\n    }\r\n  }\r\n\r\n  /** Focuses the checkbox. */\r\n  focus(origin?: FocusOrigin, options?: FocusOptions): void {\r\n    if (origin) {\r\n      this._focusMonitor.focusVia(this._inputElement, origin, options);\r\n    } else {\r\n      this._inputElement.nativeElement.focus(options);\r\n    }\r\n  }\r\n\r\n  _onInteractionEvent(event: Event) {\r\n    // We always have to stop propagation on the change event.\r\n    // Otherwise the change event, from the input element, will bubble up and\r\n    // emit its event object to the `change` output.\r\n    event.stopPropagation();\r\n  }\r\n\r\n\r\n  /**\r\n   * Syncs the indeterminate value with the checkbox DOM node.\r\n   *\r\n   * We sync `indeterminate` directly on the DOM node, because in Ivy the check for whether a\r\n   * property is supported on an element boils down to `if (propName in element)`. Domino's\r\n   * HTMLInputElement doesn't have an `indeterminate` property so Ivy will warn during\r\n   * server-side rendering.\r\n   */\r\n  private _syncIndeterminate(value: boolean) {\r\n    const nativeCheckbox = this._inputElement;\r\n\r\n    if (nativeCheckbox) {\r\n      nativeCheckbox.nativeElement.indeterminate = value;\r\n    }\r\n  }\r\n\r\n  static ngAcceptInputType_disabled: BooleanInput;\r\n  static ngAcceptInputType_required: BooleanInput;\r\n  static ngAcceptInputType_disableRipple: BooleanInput;\r\n  static ngAcceptInputType_indeterminate: BooleanInput;\r\n  static ngAcceptInputType_tabIndex: NumberInput;\r\n}\r\n","import { CommonModule } from \"@angular/common\";\r\nimport { NgModule } from \"@angular/core\";\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\nimport { TDSCheckbox } from \"./checkbox\";\r\n\r\n\r\n@NgModule({\r\n  declarations: [TDSCheckbox],\r\n  imports: [\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n    CommonModule      \r\n  ],\r\n  exports: [\r\n    TDSCheckbox\r\n  ],\r\n  \r\n})\r\nexport class TDSCheckBoxModule { }","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}