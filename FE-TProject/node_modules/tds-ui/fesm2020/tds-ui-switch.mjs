import { coerceBooleanProperty } from '@angular/cdk/coercion';
import * as i0 from '@angular/core';
import { forwardRef, EventEmitter, Component, ViewEncapsulation, Attribute, Input, Output, ViewChild, NgModule } from '@angular/core';
import { NG_VALUE_ACCESSOR, ReactiveFormsModule, FormsModule } from '@angular/forms';
import { mixinTabIndex, mixinDisabled } from 'tds-ui/shared/common';
import * as i1 from '@angular/cdk/a11y';
import * as i2 from '@angular/common';
import { CommonModule } from '@angular/common';

const _c0 = ["input"];
const _c1 = function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) { return { "pr-4": a0, "pl-4": a1, "pr-5": a2, "pl-5": a3, "pl-6": a4, "pr-6": a5, "border-neutral-2-200 bg-white dark:bg-d-neutral-3-50 dark:border-d-neutral-2-200": a6, "bg-primary-1 border-primary-1": a7, "pl-0.5": a8, "pr-0.5": a9 }; };
const _c2 = function (a0, a1, a2, a3, a4) { return { "h-3 w-3": a0, "h-3.5 w-3.5": a1, "h-2.5 w-2.5": a2, "bg-neutral-1-300 dark:bg-d-neutral-1-300": a3, "bg-white ": a4 }; };
function TDSSwitch_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    const _r6 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "label", 2, 3)(3, "div", 4)(4, "input", 5, 6);
    i0.ɵɵlistener("change", function TDSSwitch_ng_container_0_Template_input_change_4_listener($event) { i0.ɵɵrestoreView(_r6); const ctx_r5 = i0.ɵɵnextContext(); return ctx_r5._onChangeEvent($event); })("click", function TDSSwitch_ng_container_0_Template_input_click_4_listener($event) { i0.ɵɵrestoreView(_r6); const ctx_r7 = i0.ɵɵnextContext(); return ctx_r7._onInputClick($event); });
    i0.ɵɵelementEnd();
    i0.ɵɵelement(6, "div", 7);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunctionV(5, _c1, [ctx_r0.size == "sm" && !ctx_r0.checked, ctx_r0.size == "sm" && ctx_r0.checked, ctx_r0.size == "md" && !ctx_r0.checked, ctx_r0.size == "md" && ctx_r0.checked, ctx_r0.size == "lg" && ctx_r0.checked, ctx_r0.size == "lg" && !ctx_r0.checked, !ctx_r0.checked, ctx_r0.checked, !ctx_r0.checked, ctx_r0.checked]))("tabindex", ctx_r0.tabIndex);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("checked", ctx_r0.checked)("disabled", ctx_r0.disabled);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction5(16, _c2, ctx_r0.size == "md", ctx_r0.size == "lg", ctx_r0.size == "sm", !ctx_r0.checked, ctx_r0.checked));
} }
const _c3 = function (a0, a1, a2, a3, a4, a5, a6, a7) { return { "pr-4": a0, "pl-4": a1, "pr-5": a2, "pl-5": a3, "pl-6": a4, "pr-6": a5, "pl-0.5": a6, "pr-0.5 bg-neutral-1-200  dark:bg-d-neutral-1-200 ": a7 }; };
const _c4 = function (a0, a1, a2, a3, a4) { return { "h-3 w-3": a0, "h-3.5 w-3.5": a1, "h-2.5 w-2.5": a2, "bg-white dark:bg-d-neutral-3-50": a3, "bg-neutral-1-200  dark:bg-d-neutral-1-200": a4 }; };
function TDSSwitch_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    const _r11 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "label", 8, 3)(2, "div", 9)(3, "input", 5, 6);
    i0.ɵɵlistener("change", function TDSSwitch_ng_template_1_Template_input_change_3_listener($event) { i0.ɵɵrestoreView(_r11); const ctx_r10 = i0.ɵɵnextContext(); return ctx_r10._onChangeEvent($event); })("click", function TDSSwitch_ng_template_1_Template_input_click_3_listener($event) { i0.ɵɵrestoreView(_r11); const ctx_r12 = i0.ɵɵnextContext(); return ctx_r12._onInputClick($event); });
    i0.ɵɵelementEnd();
    i0.ɵɵelement(5, "div", 7);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction8(5, _c3, ctx_r2.size == "sm" && !ctx_r2.checked, ctx_r2.size == "sm" && ctx_r2.checked, ctx_r2.size == "md" && !ctx_r2.checked, ctx_r2.size == "md" && ctx_r2.checked, ctx_r2.size == "lg" && ctx_r2.checked, ctx_r2.size == "lg" && !ctx_r2.checked, !ctx_r2.checked, ctx_r2.checked))("tabindex", ctx_r2.tabIndex);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("checked", ctx_r2.checked)("disabled", ctx_r2.disabled);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction5(14, _c4, ctx_r2.size == "md", ctx_r2.size == "lg", ctx_r2.size == "sm", ctx_r2.checked, !ctx_r2.checked));
} }
let nextUniqueId = 0;
const TDS_SWITCH_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => TDSSwitch),
    multi: true
};
class TdsSwitchChange {
    constructor(source, checked) {
        this.source = source;
        this.checked = checked;
    }
}
class TdsSwitchBase {
    constructor(_elementRef) {
        this._elementRef = _elementRef;
    }
}
const _TdsSwitchMixinBase = mixinTabIndex(mixinDisabled(TdsSwitchBase));
class TDSSwitch extends _TdsSwitchMixinBase {
    constructor(elementRef, _focusMonitor, _changeDetectorRef, tabIndex) {
        super(elementRef);
        this._focusMonitor = _focusMonitor;
        this._changeDetectorRef = _changeDetectorRef;
        this._size = 'md';
        this._disabled = false;
        this.active = false;
        this.onChange = (_) => { };
        this.onTouched = () => { };
        this._checked = false;
        this.change = new EventEmitter();
        this._onTouched = () => { };
        this.tabIndex = parseInt(tabIndex) || 0;
    }
    //     @Output() checkedA = new EventEmitter<any>();
    //    inputCheck = true;
    get size() { return this._size; }
    set size(value) {
        if (value !== this._size) {
            this._size = value;
            this._changeDetectorRef.markForCheck();
        }
    }
    get checked() { return this._checked; }
    set checked(value) {
        if (value != this.checked) {
            this._checked = value;
            this._changeDetectorRef.markForCheck();
        }
    }
    get disabled() { return this._disabled; }
    set disabled(value) {
        const newValue = coerceBooleanProperty(value);
        if (newValue !== this.disabled) {
            this._disabled = newValue;
            this._changeDetectorRef.markForCheck();
        }
    }
    ngOnInit() {
        // this.inputCheck; debugger
    }
    _onChangeEvent(event) {
        event.stopPropagation();
        this.checked = this._inputElement.nativeElement.checked;
        this._emitChangeEvent();
    }
    _onInputClick(event) {
        event.stopPropagation();
    }
    writeValue(value) {
        this.checked = !!value;
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this._changeDetectorRef.markForCheck();
    }
    focus() {
        this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');
    }
    toggle() {
        if (!this.disabled) {
            this.checked = !this.checked;
            //   this.checkedA.emit(this.checked);
        }
    }
    _emitChangeEvent() {
        this.onChange(this.checked);
        this.change.emit(new TdsSwitchChange(this, this.checked));
    }
}
TDSSwitch.ɵfac = function TDSSwitch_Factory(t) { return new (t || TDSSwitch)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.FocusMonitor), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵinjectAttribute('tabindex')); };
TDSSwitch.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSSwitch, selectors: [["tds-switch"]], viewQuery: function TDSSwitch_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);
    } }, hostAttrs: [1, "inline-block"], hostVars: 1, hostBindings: function TDSSwitch_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵhostProperty("id", ctx.id);
    } }, inputs: { size: "size", checked: "checked", disabled: "disabled" }, outputs: { change: "change" }, exportAs: ["tdsSwitch"], features: [i0.ɵɵProvidersFeature([TDS_SWITCH_VALUE_ACCESSOR]), i0.ɵɵInheritDefinitionFeature], decls: 3, vars: 2, consts: [[4, "ngIf", "ngIfElse"], ["switchDisable", ""], [1, "cursor-pointer"], ["label", ""], [1, "border", "focus:outline-none", "switch", "py-0.5", "rounded-full", "block", "focus:border-primary-1", "focus:ring-3", "focus:ring-primary-1", "focus:ring-opacity-20", 3, "ngClass", "tabindex"], ["type", "checkbox", 1, "hidden", 3, "checked", "disabled", "change", "click"], ["input", ""], [1, "rounded-full", "block", 3, "ngClass"], [1, "cursor-not-allowed"], [1, "border", "focus:outline-none", "switch", "py-0.5", "rounded-full", "block", "border-neutral-2-200", "dark:border-d-neutral-2-200", 3, "ngClass", "tabindex"]], template: function TDSSwitch_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtemplate(0, TDSSwitch_ng_container_0_Template, 7, 22, "ng-container", 0);
        i0.ɵɵtemplate(1, TDSSwitch_ng_template_1_Template, 6, 20, "ng-template", null, 1, i0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r1 = i0.ɵɵreference(2);
        i0.ɵɵproperty("ngIf", !ctx.disabled)("ngIfElse", _r1);
    } }, directives: [i2.NgIf, i2.NgClass], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSSwitch, [{
        type: Component,
        args: [{ moduleId: 'module.id', selector: 'tds-switch', exportAs: 'tdsSwitch', providers: [TDS_SWITCH_VALUE_ACCESSOR], encapsulation: ViewEncapsulation.None, host: {
                    '[id]': 'id',
                    class: "inline-block"
                }, template: "<ng-container *ngIf=\"!disabled;else switchDisable\">\r\n  <label #label class=\"cursor-pointer\">\r\n    <div class=\"border focus:outline-none switch py-0.5 rounded-full block focus:border-primary-1 focus:ring-3 focus:ring-primary-1 focus:ring-opacity-20\"\r\n    [ngClass]=\"{'pr-4':size == 'sm' && !checked,'pl-4':size == 'sm' && checked,\r\n    'pr-5':size == 'md' && !checked ,\r\n    'pl-5':size == 'md' && checked,\r\n    'pl-6':size == 'lg' && checked,\r\n    'pr-6':size == 'lg' && !checked,\r\n    'border-neutral-2-200 bg-white dark:bg-d-neutral-3-50 dark:border-d-neutral-2-200':!checked ,\r\n    'bg-primary-1 border-primary-1':checked ,\r\n    'pl-0.5':!checked,'pr-0.5':checked\r\n  }\" [tabindex]=\"tabIndex\">\r\n      <input #input class=\"hidden\" type=\"checkbox\" [checked]=\"checked\" [disabled]=\"disabled\"\r\n        (change)=\"_onChangeEvent($event)\" (click)=\"_onInputClick($event)\">\r\n      <div [ngClass]=\"{'h-3 w-3':size == 'md',\r\n    'h-3.5 w-3.5':size == 'lg',\r\n    'h-2.5 w-2.5':size == 'sm',\r\n    'bg-neutral-1-300 dark:bg-d-neutral-1-300':!checked ,\r\n    'bg-white ': checked}\" class=\"rounded-full block\">\r\n      </div>\r\n    </div>\r\n  </label>\r\n</ng-container>\r\n<ng-template #switchDisable>\r\n  <label #label class=\"cursor-not-allowed\">\r\n    <div class=\"border focus:outline-none switch py-0.5 rounded-full block border-neutral-2-200 dark:border-d-neutral-2-200\" \r\n    [ngClass]=\"{'pr-4':size == 'sm' && !checked,\r\n    'pl-4':size == 'sm' && checked,\r\n    'pr-5':size == 'md' && !checked,\r\n    'pl-5':size == 'md' && checked,\r\n    'pl-6':size == 'lg' && checked,\r\n    'pr-6':size == 'lg' && !checked,    \r\n    'pl-0.5':!checked,\r\n    'pr-0.5 bg-neutral-1-200  dark:bg-d-neutral-1-200 ':checked\r\n    \r\n  }\" [tabindex]=\"tabIndex\">\r\n      <input #input class=\"hidden\" type=\"checkbox\" [checked]=\"checked\" [disabled]=\"disabled\"\r\n        (change)=\"_onChangeEvent($event)\" (click)=\"_onInputClick($event)\">\r\n      <div [ngClass]=\"{'h-3 w-3':size == 'md',\r\n    'h-3.5 w-3.5':size == 'lg',\r\n    'h-2.5 w-2.5':size == 'sm',\r\n    'bg-white dark:bg-d-neutral-3-50': checked, \r\n    'bg-neutral-1-200  dark:bg-d-neutral-1-200': !checked}\" class=\"rounded-full block\">\r\n      </div>\r\n    </div>\r\n  </label>\r\n</ng-template>" }]
    }], function () { return [{ type: i0.ElementRef }, { type: i1.FocusMonitor }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{
                type: Attribute,
                args: ['tabindex']
            }] }]; }, { size: [{
            type: Input
        }], checked: [{
            type: Input
        }], disabled: [{
            type: Input
        }], change: [{
            type: Output
        }], _inputElement: [{
            type: ViewChild,
            args: ['input']
        }] }); })();

class TDSSwitchModule {
}
TDSSwitchModule.ɵfac = function TDSSwitchModule_Factory(t) { return new (t || TDSSwitchModule)(); };
TDSSwitchModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: TDSSwitchModule });
TDSSwitchModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [[
            ReactiveFormsModule,
            FormsModule,
            CommonModule
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSSwitchModule, [{
        type: NgModule,
        args: [{
                declarations: [TDSSwitch],
                imports: [
                    ReactiveFormsModule,
                    FormsModule,
                    CommonModule
                ],
                exports: [
                    TDSSwitch
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(TDSSwitchModule, { declarations: [TDSSwitch], imports: [ReactiveFormsModule,
        FormsModule,
        CommonModule], exports: [TDSSwitch] }); })();

/**
 * Generated bundle index. Do not edit.
 */

export { TDSSwitch, TDSSwitchModule, TDS_SWITCH_VALUE_ACCESSOR, TdsSwitchBase, TdsSwitchChange, _TdsSwitchMixinBase };
//# sourceMappingURL=tds-ui-switch.mjs.map
