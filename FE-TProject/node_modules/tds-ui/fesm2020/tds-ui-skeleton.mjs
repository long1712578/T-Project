import * as i0 from '@angular/core';
import { Directive, Input, Component, ChangeDetectionStrategy, ViewEncapsulation, NgModule } from '@angular/core';
import { toCssPixel } from 'tds-ui/shared/utility';
import * as i1 from '@angular/common';
import { CommonModule } from '@angular/common';
import { BidiModule } from '@angular/cdk/bidi';

const _c0$1 = ["tdsType", "button"];
const _c1 = ["tdsType", "avatar"];
const _c2 = ["tdsType", "input"];
const _c3 = ["tdsType", "image"];
class TDSSkeletonElementDirective {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.tdsActive = false;
        // TODO: move to host after View Engine deprecation
        this.elementRef.nativeElement.classList.add('tds-skeleton', 'tds-skeleton-element');
    }
}
TDSSkeletonElementDirective.ɵfac = function TDSSkeletonElementDirective_Factory(t) { return new (t || TDSSkeletonElementDirective)(i0.ɵɵdirectiveInject(i0.ElementRef)); };
TDSSkeletonElementDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: TDSSkeletonElementDirective, selectors: [["tds-skeleton-element"]], hostVars: 4, hostBindings: function TDSSkeletonElementDirective_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵclassProp("tds-skeleton-active", ctx.tdsActive)("animate-pulse", ctx.tdsActive);
    } }, inputs: { tdsActive: "tdsActive", tdsType: "tdsType" } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSSkeletonElementDirective, [{
        type: Directive,
        args: [{
                selector: 'tds-skeleton-element',
                host: {
                    '[class.tds-skeleton-active]': 'tdsActive',
                    '[class.animate-pulse]': 'tdsActive',
                }
            }]
    }], function () { return [{ type: i0.ElementRef }]; }, { tdsActive: [{
            type: Input
        }], tdsType: [{
            type: Input
        }] }); })();
class TDSSkeletonElementButtonComponent {
    constructor() {
        this.tdsShape = 'round';
        this.tdsSize = 'md';
        this.styleMap = {};
    }
    ngOnChanges(changes) {
        this.styleMap = this.updateSize();
    }
    updateSize() {
        let result = {
            width: '68px',
            height: '34px'
        };
        switch (this.tdsSize) {
            case 'sm':
                result = {
                    width: '60px',
                    height: '30px'
                };
                break;
            case 'lg':
                result = {
                    width: '76px',
                    height: '38px'
                };
                break;
            default:
                break;
        }
        return result;
    }
}
TDSSkeletonElementButtonComponent.ɵfac = function TDSSkeletonElementButtonComponent_Factory(t) { return new (t || TDSSkeletonElementButtonComponent)(); };
TDSSkeletonElementButtonComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSSkeletonElementButtonComponent, selectors: [["tds-skeleton-element", "tdsType", "button"]], inputs: { tdsShape: "tdsShape", tdsSize: "tdsSize" }, features: [i0.ɵɵNgOnChangesFeature], attrs: _c0$1, decls: 1, vars: 15, consts: [[1, "tds-skeleton-button", "inline-block", "bg-neutral-2-100", "dark:bg-d-neutral-2-200", 3, "ngStyle"]], template: function TDSSkeletonElementButtonComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span", 0);
    } if (rf & 2) {
        i0.ɵɵclassProp("tds-skeleton-button-round", ctx.tdsShape === "round")("rounded-md", ctx.tdsShape === "round")("tds-skeleton-button-circle", ctx.tdsShape === "circle")("rounded-full", ctx.tdsShape === "circle")("tds-skeleton-button-lg", ctx.tdsSize === "lg")("tds-skeleton-button-sm", ctx.tdsSize === "sm")("tds-skeleton-button-md", ctx.tdsSize === "md");
        i0.ɵɵproperty("ngStyle", ctx.styleMap);
    } }, directives: [i1.NgStyle], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSSkeletonElementButtonComponent, [{
        type: Component,
        args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                selector: 'tds-skeleton-element[tdsType="button"]',
                template: `
    <span
      class="tds-skeleton-button inline-block  bg-neutral-2-100 dark:bg-d-neutral-2-200"
      [class.tds-skeleton-button-round]="tdsShape === 'round'"
      [class.rounded-md]="tdsShape === 'round'"
      [class.tds-skeleton-button-circle]="tdsShape === 'circle'"
      [class.rounded-full]="tdsShape === 'circle'"
      [class.tds-skeleton-button-lg]="tdsSize === 'lg'"
      [class.tds-skeleton-button-sm]="tdsSize === 'sm'"
      [class.tds-skeleton-button-md]="tdsSize === 'md'"
      [ngStyle]="styleMap"
    ></span>
  `
            }]
    }], null, { tdsShape: [{
            type: Input
        }], tdsSize: [{
            type: Input
        }] }); })();
class TDSSkeletonElementAvatarComponent {
    constructor() {
        this.tdsShape = 'circle';
        this.tdsSize = 'md';
        this.styleMap = {};
    }
    ngOnChanges(changes) {
        if (changes.tdsSize && typeof this.tdsSize === 'number') {
            const sideLength = `${this.tdsSize}px`;
            this.styleMap = { width: sideLength, height: sideLength, 'line-height': sideLength };
        }
        else {
            let sideLength = '58px';
            if (this.tdsShape === 'square') {
                sideLength = '98px';
            }
            this.styleMap = { width: sideLength, height: sideLength, 'line-height': sideLength };
        }
    }
}
TDSSkeletonElementAvatarComponent.ɵfac = function TDSSkeletonElementAvatarComponent_Factory(t) { return new (t || TDSSkeletonElementAvatarComponent)(); };
TDSSkeletonElementAvatarComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSSkeletonElementAvatarComponent, selectors: [["tds-skeleton-element", "tdsType", "avatar"]], hostAttrs: [1, "inline-block"], inputs: { tdsShape: "tdsShape", tdsSize: "tdsSize" }, features: [i0.ɵɵNgOnChangesFeature], attrs: _c1, decls: 1, vars: 9, consts: [[1, "tds-skeleton-avatar", "rounded-[50%]", "h-[58px]", "w-[58px]", "inline-block", "align-top", "bg-neutral-2-100", "dark:bg-d-neutral-2-200", 3, "ngStyle"]], template: function TDSSkeletonElementAvatarComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span", 0);
    } if (rf & 2) {
        i0.ɵɵclassProp("tds-skeleton-avatar-square", ctx.tdsShape === "square")("tds-skeleton-avatar-circle", ctx.tdsShape === "circle")("tds-skeleton-avatar-lg", ctx.tdsSize === "lg")("tds-skeleton-avatar-sm", ctx.tdsSize === "sm");
        i0.ɵɵproperty("ngStyle", ctx.styleMap);
    } }, directives: [i1.NgStyle], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSSkeletonElementAvatarComponent, [{
        type: Component,
        args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                selector: 'tds-skeleton-element[tdsType="avatar"]',
                host: {
                    class: "inline-block"
                },
                template: `
    <span
      class="tds-skeleton-avatar rounded-[50%] h-[58px] w-[58px] inline-block align-top bg-neutral-2-100 dark:bg-d-neutral-2-200 "
      [class.tds-skeleton-avatar-square]="tdsShape === 'square'"
      [class.tds-skeleton-avatar-circle]="tdsShape === 'circle'"
      [class.tds-skeleton-avatar-lg]="tdsSize === 'lg'"
      [class.tds-skeleton-avatar-sm]="tdsSize === 'sm'"
      [ngStyle]="styleMap"
    ></span>
  `
            }]
    }], null, { tdsShape: [{
            type: Input
        }], tdsSize: [{
            type: Input
        }] }); })();
class TDSSkeletonElementInputComponent {
    constructor() {
        this.tdsSize = 'md';
        this.styleMap = {};
    }
    ngOnChanges(changes) {
        this.styleMap = this.updateSize();
    }
    updateSize() {
        let result = {
            // width: '68px',
            height: '34px'
        };
        switch (this.tdsSize) {
            case 'sm':
                result = {
                    // width: '60px',
                    height: '28px'
                };
                break;
            case 'lg':
                result = {
                    // width: '76px',
                    height: '38px'
                };
                break;
            default:
                break;
        }
        return result;
    }
}
TDSSkeletonElementInputComponent.ɵfac = function TDSSkeletonElementInputComponent_Factory(t) { return new (t || TDSSkeletonElementInputComponent)(); };
TDSSkeletonElementInputComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSSkeletonElementInputComponent, selectors: [["tds-skeleton-element", "tdsType", "input"]], hostAttrs: [1, "inline-block"], inputs: { tdsSize: "tdsSize" }, features: [i0.ɵɵNgOnChangesFeature], attrs: _c2, decls: 1, vars: 7, consts: [[1, "tds-skeleton-input", "block", "align-top", "bg-neutral-2-100", "dark:bg-d-neutral-2-200", "w-full", "rounded-md", 3, "ngStyle"]], template: function TDSSkeletonElementInputComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span", 0);
    } if (rf & 2) {
        i0.ɵɵclassProp("tds-skeleton-input-lg", ctx.tdsSize === "lg")("tds-skeleton-input-sm", ctx.tdsSize === "sm")("tds-skeleton-input-md", ctx.tdsSize === "md");
        i0.ɵɵproperty("ngStyle", ctx.styleMap);
    } }, directives: [i1.NgStyle], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSSkeletonElementInputComponent, [{
        type: Component,
        args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                selector: 'tds-skeleton-element[tdsType="input"]',
                host: {
                    class: "inline-block"
                },
                template: `
    <span
      class="tds-skeleton-input block align-top bg-neutral-2-100 dark:bg-d-neutral-2-200 w-full rounded-md"
      [class.tds-skeleton-input-lg]="tdsSize === 'lg'"
      [class.tds-skeleton-input-sm]="tdsSize === 'sm'"
      [class.tds-skeleton-input-md]="tdsSize === 'md'"
      [ngStyle]="styleMap"
    ></span>
  `
            }]
    }], null, { tdsSize: [{
            type: Input
        }] }); })();
class TDSSkeletonElementImageComponent {
}
TDSSkeletonElementImageComponent.ɵfac = function TDSSkeletonElementImageComponent_Factory(t) { return new (t || TDSSkeletonElementImageComponent)(); };
TDSSkeletonElementImageComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSSkeletonElementImageComponent, selectors: [["tds-skeleton-element", "tdsType", "image"]], hostAttrs: [1, "inline-block"], attrs: _c3, decls: 3, vars: 0, consts: [[1, "tds-skeleton-image", "flex", "items-center", "justify-center", "align-top", "w-[96px]", "h-[96px]"], ["viewBox", "0 0 1098 1024", "xmlns", "http://www.w3.org/2000/svg", 1, "tds-skeleton-image-svg"], ["d", "M365.714286 329.142857q0 45.714286-32.036571 77.677714t-77.677714 32.036571-77.677714-32.036571-32.036571-77.677714 32.036571-77.677714 77.677714-32.036571 77.677714 32.036571 32.036571 77.677714zM950.857143 548.571429l0 256-804.571429 0 0-109.714286 182.857143-182.857143 91.428571 91.428571 292.571429-292.571429zM1005.714286 146.285714l-914.285714 0q-7.460571 0-12.873143 5.412571t-5.412571 12.873143l0 694.857143q0 7.460571 5.412571 12.873143t12.873143 5.412571l914.285714 0q7.460571 0 12.873143-5.412571t5.412571-12.873143l0-694.857143q0-7.460571-5.412571-12.873143t-12.873143-5.412571zM1097.142857 164.571429l0 694.857143q0 37.741714-26.843429 64.585143t-64.585143 26.843429l-914.285714 0q-37.741714 0-64.585143-26.843429t-26.843429-64.585143l0-694.857143q0-37.741714 26.843429-64.585143t64.585143-26.843429l914.285714 0q37.741714 0 64.585143 26.843429t26.843429 64.585143z", 1, "fill-current", "text-neutral-2-100", "dark:text-d-neutral-2-200"]], template: function TDSSkeletonElementImageComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 0);
        i0.ɵɵnamespaceSVG();
        i0.ɵɵelementStart(1, "svg", 1);
        i0.ɵɵelement(2, "path", 2);
        i0.ɵɵelementEnd()();
    } }, encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSSkeletonElementImageComponent, [{
        type: Component,
        args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                selector: 'tds-skeleton-element[tdsType="image"]',
                host: {
                    class: "inline-block"
                },
                template: `
    <span class="tds-skeleton-image flex items-center justify-center align-top w-[96px] h-[96px] ">
      <svg class="tds-skeleton-image-svg" viewBox="0 0 1098 1024" xmlns="http://www.w3.org/2000/svg">
        <path
          d="M365.714286 329.142857q0 45.714286-32.036571 77.677714t-77.677714 32.036571-77.677714-32.036571-32.036571-77.677714 32.036571-77.677714 77.677714-32.036571 77.677714 32.036571 32.036571 77.677714zM950.857143 548.571429l0 256-804.571429 0 0-109.714286 182.857143-182.857143 91.428571 91.428571 292.571429-292.571429zM1005.714286 146.285714l-914.285714 0q-7.460571 0-12.873143 5.412571t-5.412571 12.873143l0 694.857143q0 7.460571 5.412571 12.873143t12.873143 5.412571l914.285714 0q7.460571 0 12.873143-5.412571t5.412571-12.873143l0-694.857143q0-7.460571-5.412571-12.873143t-12.873143-5.412571zM1097.142857 164.571429l0 694.857143q0 37.741714-26.843429 64.585143t-64.585143 26.843429l-914.285714 0q-37.741714 0-64.585143-26.843429t-26.843429-64.585143l0-694.857143q0-37.741714 26.843429-64.585143t64.585143-26.843429l914.285714 0q37.741714 0 64.585143 26.843429t26.843429 64.585143z"
          class="fill-current text-neutral-2-100 dark:text-d-neutral-2-200"
        />
      </svg>
    </span>
  `
            }]
    }], null, null); })();

function TDSSkeletonComponent_ng_container_0_div_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 5);
    i0.ɵɵelement(1, "tds-skeleton-element", 6);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("tdsSize", ctx_r2.avatar.size || "md")("tdsShape", ctx_r2.avatar.shape || "circle");
} }
function TDSSkeletonComponent_ng_container_0_h3_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "h3", 7);
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext(2);
    i0.ɵɵstyleProp("width", ctx_r3.toCSSUnit(ctx_r3.title.width));
} }
function TDSSkeletonComponent_ng_container_0_ul_4_li_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "li", 10);
} if (rf & 2) {
    const i_r7 = ctx.index;
    const ctx_r5 = i0.ɵɵnextContext(3);
    i0.ɵɵstyleProp("width", ctx_r5.toCSSUnit(ctx_r5.widthList[i_r7]));
} }
function TDSSkeletonComponent_ng_container_0_ul_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "ul", 8);
    i0.ɵɵtemplate(1, TDSSkeletonComponent_ng_container_0_ul_4_li_1_Template, 1, 2, "li", 9);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngForOf", ctx_r4.rowsList);
} }
function TDSSkeletonComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtemplate(1, TDSSkeletonComponent_ng_container_0_div_1_Template, 2, 2, "div", 1);
    i0.ɵɵelementStart(2, "div", 2);
    i0.ɵɵtemplate(3, TDSSkeletonComponent_ng_container_0_h3_3_Template, 1, 2, "h3", 3);
    i0.ɵɵtemplate(4, TDSSkeletonComponent_ng_container_0_ul_4_Template, 2, 1, "ul", 4);
    i0.ɵɵelementEnd();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", !!ctx_r0.tdsAvatar);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !!ctx_r0.tdsTitle);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", !!ctx_r0.tdsParagraph);
} }
function TDSSkeletonComponent_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵprojection(1);
    i0.ɵɵelementContainerEnd();
} }
const _c0 = ["*"];
class TDSSkeletonComponent {
    constructor(cdr, renderer, elementRef) {
        this.cdr = cdr;
        this.tdsActive = false;
        this.tdsLoading = true;
        this.tdsRound = false;
        this.tdsTitle = true;
        this.tdsAvatar = false;
        this.tdsParagraph = true;
        this.rowsList = [];
        this.widthList = [];
        renderer.addClass(elementRef.nativeElement, 'tds-skeleton');
    }
    toCSSUnit(value = '') {
        return toCssPixel(value);
    }
    getTitleProps() {
        const hasAvatar = !!this.tdsAvatar;
        const hasParagraph = !!this.tdsParagraph;
        let width = '';
        if (!hasAvatar && hasParagraph) {
            width = '38%';
        }
        else if (hasAvatar && hasParagraph) {
            width = '50%';
        }
        return { width, ...this.getProps(this.tdsTitle) };
    }
    getAvatarProps() {
        const shape = !!this.tdsTitle && !this.tdsParagraph ? 'square' : 'circle';
        const size = 'md';
        return { shape, size, ...this.getProps(this.tdsAvatar) };
    }
    getParagraphProps() {
        const hasAvatar = !!this.tdsAvatar;
        const hasTitle = !!this.tdsTitle;
        const basicProps = {};
        // Width
        if (!hasAvatar || !hasTitle) {
            basicProps.width = '61%';
        }
        // Rows
        if (!hasAvatar && hasTitle) {
            basicProps.rows = 3;
        }
        else {
            basicProps.rows = 2;
        }
        return { ...basicProps, ...this.getProps(this.tdsParagraph) };
    }
    getProps(prop) {
        return prop && typeof prop === 'object' ? prop : {};
    }
    getWidthList() {
        const { width, rows } = this.paragraph;
        let widthList = [];
        if (width && Array.isArray(width)) {
            widthList = width;
        }
        else if (width && !Array.isArray(width)) {
            widthList = [];
            widthList[rows - 1] = width;
        }
        return widthList;
    }
    updateProps() {
        this.title = this.getTitleProps();
        this.avatar = this.getAvatarProps();
        this.paragraph = this.getParagraphProps();
        this.rowsList = [...Array(this.paragraph.rows)];
        this.widthList = this.getWidthList();
        this.cdr.markForCheck();
    }
    ngOnInit() {
        this.updateProps();
    }
    ngOnChanges(changes) {
        if (changes.tdsTitle || changes.tdsAvatar || changes.tdsParagraph) {
            this.updateProps();
        }
    }
}
TDSSkeletonComponent.ɵfac = function TDSSkeletonComponent_Factory(t) { return new (t || TDSSkeletonComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef)); };
TDSSkeletonComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSSkeletonComponent, selectors: [["tds-skeleton"]], hostAttrs: [1, "table", "w-full", "box-border"], hostVars: 8, hostBindings: function TDSSkeletonComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵclassProp("tds-skeleton-with-avatar", !!ctx.tdsAvatar)("tds-skeleton-active", ctx.tdsActive)("animate-pulse", ctx.tdsActive)("tds-skeleton-round", !!ctx.tdsRound);
    } }, inputs: { tdsActive: "tdsActive", tdsLoading: "tdsLoading", tdsRound: "tdsRound", tdsTitle: "tdsTitle", tdsAvatar: "tdsAvatar", tdsParagraph: "tdsParagraph" }, exportAs: ["tdsSkeleton"], features: [i0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0, decls: 2, vars: 2, consts: [[4, "ngIf"], ["class", "tds-skeleton-header table-cell pr-4 align-top", 4, "ngIf"], [1, "tds-skeleton-content", "w-full", "table-cell", "align-top", "m-0", "p-0"], ["class", "tds-skeleton-title w-full h-[18px] mt-4 bg-neutral-2-100 dark:bg-d-neutral-2-200 rounded-10", 3, "width", 4, "ngIf"], ["class", "tds-skeleton-paragraph mt-4 w-full", 4, "ngIf"], [1, "tds-skeleton-header", "table-cell", "pr-4", "align-top"], ["tdsType", "avatar", 3, "tdsSize", "tdsShape"], [1, "tds-skeleton-title", "w-full", "h-[18px]", "mt-4", "bg-neutral-2-100", "dark:bg-d-neutral-2-200", "rounded-10"], [1, "tds-skeleton-paragraph", "mt-4", "w-full"], ["class", "w-full h-[14px] bg-neutral-2-100 dark:bg-d-neutral-2-200 rounded-10 mb-2.5", 3, "width", 4, "ngFor", "ngForOf"], [1, "w-full", "h-[14px]", "bg-neutral-2-100", "dark:bg-d-neutral-2-200", "rounded-10", "mb-2.5"]], template: function TDSSkeletonComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵtemplate(0, TDSSkeletonComponent_ng_container_0_Template, 5, 3, "ng-container", 0);
        i0.ɵɵtemplate(1, TDSSkeletonComponent_ng_container_1_Template, 2, 0, "ng-container", 0);
    } if (rf & 2) {
        i0.ɵɵproperty("ngIf", ctx.tdsLoading);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx.tdsLoading);
    } }, directives: [i1.NgIf, TDSSkeletonElementDirective, TDSSkeletonElementAvatarComponent, i1.NgForOf], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSSkeletonComponent, [{
        type: Component,
        args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                selector: 'tds-skeleton',
                exportAs: 'tdsSkeleton',
                host: {
                    'class': "table w-full box-border",
                    '[class.tds-skeleton-with-avatar]': '!!tdsAvatar',
                    '[class.tds-skeleton-active]': 'tdsActive',
                    '[class.animate-pulse]': 'tdsActive',
                    '[class.tds-skeleton-round]': '!!tdsRound'
                },
                template: `
    <ng-container *ngIf="tdsLoading">
      <div class="tds-skeleton-header table-cell pr-4 align-top" *ngIf="!!tdsAvatar">
        <tds-skeleton-element tdsType="avatar" [tdsSize]="avatar.size || 'md'" [tdsShape]="avatar.shape || 'circle'"></tds-skeleton-element>
      </div>
      <div class="tds-skeleton-content w-full table-cell align-top m-0 p-0">
        <h3 *ngIf="!!tdsTitle" class="tds-skeleton-title w-full h-[18px] mt-4 bg-neutral-2-100 dark:bg-d-neutral-2-200 rounded-10" [style.width]="toCSSUnit(title.width)"></h3>
        <ul *ngIf="!!tdsParagraph" class="tds-skeleton-paragraph mt-4 w-full">
          <li class="w-full h-[14px] bg-neutral-2-100 dark:bg-d-neutral-2-200 rounded-10 mb-2.5" *ngFor="let row of rowsList; let i = index" [style.width]="toCSSUnit(widthList[i])"></li>
        </ul>
      </div>
    </ng-container>
    <ng-container *ngIf="!tdsLoading">
      <ng-content></ng-content>
    </ng-container>
  `
            }]
    }], function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.Renderer2 }, { type: i0.ElementRef }]; }, { tdsActive: [{
            type: Input
        }], tdsLoading: [{
            type: Input
        }], tdsRound: [{
            type: Input
        }], tdsTitle: [{
            type: Input
        }], tdsAvatar: [{
            type: Input
        }], tdsParagraph: [{
            type: Input
        }] }); })();

class TDSSkeletonModule {
}
TDSSkeletonModule.ɵfac = function TDSSkeletonModule_Factory(t) { return new (t || TDSSkeletonModule)(); };
TDSSkeletonModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: TDSSkeletonModule });
TDSSkeletonModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [[BidiModule, CommonModule]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSSkeletonModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    TDSSkeletonComponent,
                    TDSSkeletonElementDirective,
                    TDSSkeletonElementButtonComponent,
                    TDSSkeletonElementAvatarComponent,
                    TDSSkeletonElementImageComponent,
                    TDSSkeletonElementInputComponent
                ],
                imports: [BidiModule, CommonModule],
                exports: [
                    TDSSkeletonComponent,
                    TDSSkeletonElementDirective,
                    TDSSkeletonElementButtonComponent,
                    TDSSkeletonElementAvatarComponent,
                    TDSSkeletonElementImageComponent,
                    TDSSkeletonElementInputComponent
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(TDSSkeletonModule, { declarations: [TDSSkeletonComponent,
        TDSSkeletonElementDirective,
        TDSSkeletonElementButtonComponent,
        TDSSkeletonElementAvatarComponent,
        TDSSkeletonElementImageComponent,
        TDSSkeletonElementInputComponent], imports: [BidiModule, CommonModule], exports: [TDSSkeletonComponent,
        TDSSkeletonElementDirective,
        TDSSkeletonElementButtonComponent,
        TDSSkeletonElementAvatarComponent,
        TDSSkeletonElementImageComponent,
        TDSSkeletonElementInputComponent] }); })();

/**
 * Generated bundle index. Do not edit.
 */

export { TDSSkeletonComponent, TDSSkeletonElementAvatarComponent, TDSSkeletonElementButtonComponent, TDSSkeletonElementDirective, TDSSkeletonElementImageComponent, TDSSkeletonElementInputComponent, TDSSkeletonModule };
//# sourceMappingURL=tds-ui-skeleton.mjs.map
