import * as i0 from '@angular/core';
import { Component, ChangeDetectionStrategy, ViewEncapsulation, Optional, Input, NgModule } from '@angular/core';
import * as i4 from '@angular/common';
import { CommonModule } from '@angular/common';
import { mixinColor } from 'tds-ui/shared/common';
import { __decorate } from 'tslib';
import { Subject, BehaviorSubject, ReplaySubject, timer } from 'rxjs';
import { startWith, distinctUntilChanged, switchMap, debounce, takeUntil } from 'rxjs/operators';
import { InputNumber, InputBoolean } from 'tds-ui/shared/utility';
import * as i1 from 'tds-ui/core/config';
import { WithConfig } from 'tds-ui/core/config';
import * as i2 from '@angular/cdk/bidi';

const SPINNER_DEFAULT_COLOR = "primary";
// Boilerplate for applying mixins to TButtonBase.
/** @docs-private */
class TDSSpinnerBase {
    constructor(_elementRef) {
        this._elementRef = _elementRef;
    }
}
const _TDSSpinnerMixinBase = mixinColor(TDSSpinnerBase, SPINNER_DEFAULT_COLOR);
class TDSProgressSpinnerComponent extends _TDSSpinnerMixinBase {
    constructor(elementRef) {
        super(elementRef);
        this._color = 'primary';
        this.cssColor = 'text-primary-1 dark:text-d-primary-1';
    }
    get color() {
        return this._color;
    }
    set color(value) {
        const colorPalette = value || this.defaultColor;
        if (colorPalette !== this._color) {
            // if (this._color) {
            //   this._elementRef.nativeElement.classList.remove(this.getClassColor(this._color));
            // }
            // if (colorPalette) {
            //   this._elementRef.nativeElement.classList.add(this.getClassColor(colorPalette));
            // }
            this.cssColor = this.getClassColor(colorPalette);
            this._color = colorPalette;
        }
    }
    getClassColor(color) {
        let result = "";
        switch (color) {
            case 'primary':
                result = 'text-primary-1 dark:text-d-primary-1';
                break;
            case 'secondary':
                result = 'text-secondary-2 dark:text-d-secondary-2';
                break;
            case 'info':
                result = 'text-info-500 dark:text-d-info-500';
                break;
            case 'warning':
                result = 'text-warning-500 dark:text-d-warning-500';
                break;
            case 'error':
                result = 'text-error-500 dark:text-d-error-500 ';
                break;
            case 'black':
                result = 'text-black-500';
                break;
            case 'white':
                result = 'text-white';
                break;
            // case 'gray':
            //   result = 'text-gray-500'
            //   break;
            case 'red':
                result = 'text-base-red-500 dark:text-d-base-red-500 ';
                break;
            case 'yellow':
                result = 'text-base-yellow-500 dark:text-d-base-yellow-500';
                break;
            case 'green':
                result = 'text-base-green-500 dark:text-d-base-green-500';
                break;
            case 'blue':
                result = 'text-base-blue-500 dark:text-d-base-blue-500';
                break;
            case 'indigo':
                result = 'text-base-indigo-500 dark:text-d-base-indigo-500';
                break;
            case 'purple':
                result = 'text-base-purple-500 dark:text-d-base-purple-500';
                break;
            case 'pink':
                result = 'text-base-pink-500 dark:text-d-base-pink-500';
                break;
            case 'amber':
                result = 'text-base-amber-500 dark:text-d-base-amber-500';
                break;
            case 'sky':
                result = 'text-base-sky-500 dark:text-d-base-sky-500';
                break;
            case 'lime':
                result = 'text-base-lime-500 dark:text-d-base-lime-500';
                break;
            case 'teal':
                result = 'text-base-teal-500 dark:text-d-base-teal-500';
                break;
            case 'orange':
                result = 'text-base-orange-500 dark:text-d-base-orange-500';
                break;
            default:
                result = "text-primary-1 dark:text-d-primary-1";
                break;
        }
        return result;
    }
}
TDSProgressSpinnerComponent.ɵfac = function TDSProgressSpinnerComponent_Factory(t) { return new (t || TDSProgressSpinnerComponent)(i0.ɵɵdirectiveInject(i0.ElementRef)); };
TDSProgressSpinnerComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSProgressSpinnerComponent, selectors: [["tds-spinner"]], hostAttrs: [1, "block", "relative", "overflow-hiden"], hostVars: 2, hostBindings: function TDSProgressSpinnerComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵclassMap(ctx.cssColor);
    } }, inputs: { color: "color" }, features: [i0.ɵɵInheritDefinitionFeature], decls: 2, vars: 0, consts: [["viewBox", "0 0 16 16", "fill", "none", "xmlns", "http://www.w3.org/2000/svg", 1, "animate-spin", "w-full", "h-full"], ["d", "M8 0C9.58225 1.88681e-08 11.129 0.469192 12.4446 1.34824C13.7602 2.22729 14.7855 3.47672 15.391 4.93853C15.9965 6.40034 16.155 8.00887 15.8463 9.56072C15.5376 11.1126 14.7757 12.538 13.6569 13.6569C12.538 14.7757 11.1126 15.5376 9.56072 15.8463C8.00887 16.155 6.40034 15.9965 4.93853 15.391C3.47672 14.7855 2.22729 13.7602 1.34824 12.4446C0.469192 11.129 -3.77363e-08 9.58225 0 8L1.56233 8C1.56233 9.27325 1.93989 10.5179 2.64727 11.5766C3.35465 12.6352 4.36008 13.4604 5.53641 13.9476C6.71274 14.4349 8.00714 14.5624 9.25593 14.314C10.5047 14.0656 11.6518 13.4524 12.5521 12.5521C13.4524 11.6518 14.0656 10.5047 14.314 9.25593C14.5624 8.00714 14.4349 6.71274 13.9476 5.53641C13.4604 4.36008 12.6352 3.35465 11.5766 2.64727C10.5179 1.93989 9.27325 1.56233 8 1.56233L8 0Z", "fill", "currentColor"]], template: function TDSProgressSpinnerComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵnamespaceSVG();
        i0.ɵɵelementStart(0, "svg", 0);
        i0.ɵɵelement(1, "path", 1);
        i0.ɵɵelementEnd();
    } }, encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSProgressSpinnerComponent, [{
        type: Component,
        args: [{
                selector: 'tds-spinner',
                template: `
  <svg class="animate-spin w-full h-full" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8 0C9.58225 1.88681e-08 11.129 0.469192 12.4446 1.34824C13.7602 2.22729 14.7855 3.47672 15.391 4.93853C15.9965 6.40034 16.155 8.00887 15.8463 9.56072C15.5376 11.1126 14.7757 12.538 13.6569 13.6569C12.538 14.7757 11.1126 15.5376 9.56072 15.8463C8.00887 16.155 6.40034 15.9965 4.93853 15.391C3.47672 14.7855 2.22729 13.7602 1.34824 12.4446C0.469192 11.129 -3.77363e-08 9.58225 0 8L1.56233 8C1.56233 9.27325 1.93989 10.5179 2.64727 11.5766C3.35465 12.6352 4.36008 13.4604 5.53641 13.9476C6.71274 14.4349 8.00714 14.5624 9.25593 14.314C10.5047 14.0656 11.6518 13.4524 12.5521 12.5521C13.4524 11.6518 14.0656 10.5047 14.314 9.25593C14.5624 8.00714 14.4349 6.71274 13.9476 5.53641C13.4604 4.36008 12.6352 3.35465 11.5766 2.64727C10.5179 1.93989 9.27325 1.56233 8 1.56233L8 0Z" fill="currentColor"/>
</svg>
 `,
                inputs: ["color"],
                host: {
                    'class': "block relative overflow-hiden",
                    '[class]': 'cssColor'
                },
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: i0.ElementRef }]; }, null); })();

function TDSSpinComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "tds-spinner", 3);
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵproperty("color", ctx_r1.color);
} }
function TDSSpinComponent_div_2_ng_template_2_Template(rf, ctx) { }
function TDSSpinComponent_div_2_div_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 7);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r5.tip);
} }
function TDSSpinComponent_div_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div")(1, "div", 4);
    i0.ɵɵtemplate(2, TDSSpinComponent_div_2_ng_template_2_Template, 0, 0, "ng-template", 5);
    i0.ɵɵtemplate(3, TDSSpinComponent_div_2_div_3_Template, 2, 1, "div", 6);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    const _r0 = i0.ɵɵreference(1);
    i0.ɵɵadvance(1);
    i0.ɵɵclassProp("tds-spin-rtl", ctx_r2.dir === "rtl")("tds-spin-spinning", ctx_r2.isLoading)("opacity-100", ctx_r2.isLoading)("tds-spin-xl", ctx_r2.size === "xl")("tds-spin-sm", ctx_r2.size === "sm")("tds-spin-show-text", ctx_r2.tip);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r2.indicator || _r0);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r2.tip);
} }
const _c0 = function (a0) { return { "select-none opacity-50 overflow-hidden pointer-events-none clear-both": a0 }; };
function TDSSpinComponent_div_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 8);
    i0.ɵɵprojection(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵclassProp("tds-spin-blur", ctx_r3.isLoading);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(3, _c0, ctx_r3.isLoading));
} }
const _c1 = ["*"];
const TDS_CONFIG_MODULE_NAME = 'spin';
class TDSSpinComponent {
    constructor(tdsConfigService, cdr, directionality) {
        this.tdsConfigService = tdsConfigService;
        this.cdr = cdr;
        this.directionality = directionality;
        this._tdsModuleName = TDS_CONFIG_MODULE_NAME;
        this.indicator = null;
        this.size = 'md';
        this.tip = null;
        this.delay = 0;
        this.simple = false;
        this.spinning = true;
        this.color = 'primary';
        this.destroy$ = new Subject();
        this.spinning$ = new BehaviorSubject(this.spinning);
        this.delay$ = new ReplaySubject(1);
        this.isLoading = false;
        this.dir = 'ltr';
    }
    ngOnInit() {
        const loading$ = this.delay$.pipe(startWith(this.delay), distinctUntilChanged(), switchMap(delay => {
            if (delay === 0) {
                return this.spinning$;
            }
            return this.spinning$.pipe(debounce(spinning => timer(spinning ? delay : 0)));
        }), takeUntil(this.destroy$));
        loading$.subscribe(loading => {
            this.isLoading = loading;
            this.cdr.markForCheck();
        });
        this.tdsConfigService
            .getConfigChangeEventForComponent(TDS_CONFIG_MODULE_NAME)
            .pipe(takeUntil(this.destroy$))
            .subscribe(() => this.cdr.markForCheck());
        this.directionality.change?.pipe(takeUntil(this.destroy$)).subscribe((direction) => {
            this.dir = direction;
            this.cdr.detectChanges();
        });
        this.dir = this.directionality.value;
    }
    ngOnChanges(changes) {
        const { spinning, delay } = changes;
        if (spinning) {
            this.spinning$.next(this.spinning);
        }
        if (delay) {
            this.delay$.next(this.delay);
        }
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
}
TDSSpinComponent.ɵfac = function TDSSpinComponent_Factory(t) { return new (t || TDSSpinComponent)(i0.ɵɵdirectiveInject(i1.TDSConfigService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.Directionality, 8)); };
TDSSpinComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSSpinComponent, selectors: [["tds-spin"]], hostVars: 4, hostBindings: function TDSSpinComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵclassProp("relative", !ctx.simple)("block", ctx.isLoading);
    } }, inputs: { indicator: "indicator", size: "size", tip: "tip", delay: "delay", simple: "simple", spinning: "spinning", color: "color" }, exportAs: ["tdsSpin"], features: [i0.ɵɵNgOnChangesFeature], ngContentSelectors: _c1, decls: 4, vars: 2, consts: [["defaultTemplate", ""], [4, "ngIf"], ["class", "tds-spin-container flex flex-col h-full w-full", 3, "tds-spin-blur", "ngClass", 4, "ngIf"], [1, "w-8", "h-8", 3, "color"], [1, "tds-spin", "absolute", "top-0", "left-0", "z-10", "w-full", "h-full", "box-border", "m-0", "p-0", "text-center", "flex", "flex-col", "items-center", "justify-center"], [3, "ngTemplateOutlet"], ["class", "tds-spin-text mt-2 text-caption-2 font-regular text-neutral-1-700", 4, "ngIf"], [1, "tds-spin-text", "mt-2", "text-caption-2", "font-regular", "text-neutral-1-700"], [1, "tds-spin-container", "flex", "flex-col", "h-full", "w-full", 3, "ngClass"]], template: function TDSSpinComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵtemplate(0, TDSSpinComponent_ng_template_0_Template, 1, 1, "ng-template", null, 0, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtemplate(2, TDSSpinComponent_div_2_Template, 4, 14, "div", 1);
        i0.ɵɵtemplate(3, TDSSpinComponent_div_3_Template, 2, 5, "div", 2);
    } if (rf & 2) {
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.isLoading);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx.simple);
    } }, directives: [TDSProgressSpinnerComponent, i4.NgIf, i4.NgTemplateOutlet, i4.NgClass], encapsulation: 2 });
__decorate([
    WithConfig()
], TDSSpinComponent.prototype, "indicator", void 0);
__decorate([
    InputNumber()
], TDSSpinComponent.prototype, "delay", void 0);
__decorate([
    InputBoolean()
], TDSSpinComponent.prototype, "simple", void 0);
__decorate([
    InputBoolean()
], TDSSpinComponent.prototype, "spinning", void 0);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSSpinComponent, [{
        type: Component,
        args: [{
                selector: 'tds-spin',
                exportAs: 'tdsSpin',
                preserveWhitespaces: false,
                encapsulation: ViewEncapsulation.None,
                template: `
    <ng-template #defaultTemplate>
      <tds-spinner [color]="color" class="w-8 h-8"></tds-spinner>      
    </ng-template>
    <div *ngIf="isLoading">
      <div
        class="tds-spin absolute top-0 left-0 z-10  w-full h-full box-border m-0 p-0 text-center flex flex-col items-center justify-center"
        [class.tds-spin-rtl]="dir === 'rtl'"
        [class.tds-spin-spinning]="isLoading"
        [class.opacity-100]="isLoading"
        [class.tds-spin-xl]="size === 'xl'"
        [class.tds-spin-sm]="size === 'sm'"
        [class.tds-spin-show-text]="tip"
      >
        <ng-template [ngTemplateOutlet]="indicator || defaultTemplate"></ng-template>
        <div class="tds-spin-text mt-2 text-caption-2 font-regular text-neutral-1-700" *ngIf="tip">{{ tip }}</div>
      </div>
    </div>
    <div *ngIf="!simple" class="tds-spin-container flex flex-col h-full w-full"
     [class.tds-spin-blur]="isLoading"
     [ngClass]="{'select-none opacity-50 overflow-hidden pointer-events-none clear-both':isLoading}"
     >
      <ng-content></ng-content>
    </div>
  `,
                host: {
                    '[class.relative]': '!simple',
                    '[class.block]': "isLoading"
                }
            }]
    }], function () { return [{ type: i1.TDSConfigService }, { type: i0.ChangeDetectorRef }, { type: i2.Directionality, decorators: [{
                type: Optional
            }] }]; }, { indicator: [{
            type: Input
        }], size: [{
            type: Input
        }], tip: [{
            type: Input
        }], delay: [{
            type: Input
        }], simple: [{
            type: Input
        }], spinning: [{
            type: Input
        }], color: [{
            type: Input
        }] }); })();

class TDSSpinnerModule {
}
TDSSpinnerModule.ɵfac = function TDSSpinnerModule_Factory(t) { return new (t || TDSSpinnerModule)(); };
TDSSpinnerModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: TDSSpinnerModule });
TDSSpinnerModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [[
            CommonModule
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSSpinnerModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    TDSProgressSpinnerComponent,
                    TDSSpinComponent
                ],
                imports: [
                    CommonModule
                ],
                exports: [
                    TDSProgressSpinnerComponent,
                    TDSSpinComponent
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(TDSSpinnerModule, { declarations: [TDSProgressSpinnerComponent,
        TDSSpinComponent], imports: [CommonModule], exports: [TDSProgressSpinnerComponent,
        TDSSpinComponent] }); })();

/**
 * Generated bundle index. Do not edit.
 */

export { TDSProgressSpinnerComponent, TDSSpinComponent, TDSSpinnerModule };
//# sourceMappingURL=tds-ui-progress-spinner.mjs.map
