{"version":3,"file":"tds-ui-core-pipes.mjs","sources":["../../../projects/tds-ui/core/pipes/tds-aggregate.pipe.ts","../../../projects/tds-ui/core/pipes/tds-bytes.pipe.ts","../../../projects/tds-ui/core/pipes/tds-css-unit.pipe.ts","../../../projects/tds-ui/core/pipes/tds-ellipsis.pipe.ts","../../../projects/tds-ui/core/pipes/tds-safe-null.pipe.ts","../../../projects/tds-ui/core/pipes/tds-sanitizer.pipe.ts","../../../projects/tds-ui/core/pipes/tds-trim.pipe.ts","../../../projects/tds-ui/core/pipes/tds-pipes.module.ts","../../../projects/tds-ui/core/pipes/tds-ui-core-pipes.ts"],"sourcesContent":["\r\n\r\nimport { Pipe, PipeTransform } from '@angular/core';\r\nimport { sum } from 'tds-ui/core/util';\r\n\r\nexport type AggregateMethod = 'sum' | 'max' | 'min' | 'avg';\r\n\r\n@Pipe({\r\n  name: 'tdsAggregate'\r\n})\r\nexport class TDSAggregatePipe implements PipeTransform {\r\n  transform(value: number[], method: AggregateMethod): undefined | number {\r\n    if (!Array.isArray(value)) {\r\n      return value;\r\n    }\r\n\r\n    if (value.length === 0) {\r\n      return undefined;\r\n    }\r\n\r\n    switch (method) {\r\n      case 'sum':\r\n        return sum(value);\r\n      case 'avg':\r\n        return sum(value) / value.length;\r\n      case 'max':\r\n        return Math.max(...value);\r\n      case 'min':\r\n        return Math.min(...value);\r\n      default:\r\n        throw Error(`Invalid Pipe Arguments: Aggregate pipe doesn't support this type`);\r\n    }\r\n  }\r\n}\r\n","\r\n\r\nimport { Pipe, PipeTransform } from '@angular/core';\r\nimport { isNumberFinite, toDecimal } from 'tds-ui/core/util';\r\n\r\nexport type ByteUnit = 'B' | 'kB' | 'KB' | 'MB' | 'GB' | 'TB';\r\n\r\n@Pipe({\r\n  name: 'tdsBytes'\r\n})\r\nexport class TDSBytesPipe implements PipeTransform {\r\n  static formats: { [key: string]: { max: number; prev?: ByteUnit } } = {\r\n    B: { max: 1024 },\r\n    kB: { max: Math.pow(1024, 2), prev: 'B' },\r\n    KB: { max: Math.pow(1024, 2), prev: 'B' },\r\n    MB: { max: Math.pow(1024, 3), prev: 'kB' },\r\n    GB: { max: Math.pow(1024, 4), prev: 'MB' },\r\n    TB: { max: Number.MAX_SAFE_INTEGER, prev: 'GB' }\r\n  };\r\n\r\n  transform(input: any, decimal: number = 0, from: ByteUnit = 'B', to?: ByteUnit): any {\r\n    if (!(isNumberFinite(input) && isNumberFinite(decimal) && decimal % 1 === 0 && decimal >= 0)) {\r\n      return input;\r\n    }\r\n\r\n    let bytes = input;\r\n    let unit = from;\r\n    while (unit !== 'B') {\r\n      bytes *= 1024;\r\n      unit = TDSBytesPipe.formats[unit].prev!;\r\n    }\r\n\r\n    if (to) {\r\n      const format = TDSBytesPipe.formats[to];\r\n\r\n      const result = toDecimal(TDSBytesPipe.calculateResult(format, bytes), decimal);\r\n\r\n      return TDSBytesPipe.formatResult(result, to);\r\n    }\r\n\r\n    for (const key in TDSBytesPipe.formats) {\r\n      if (TDSBytesPipe.formats.hasOwnProperty(key)) {\r\n        const format = TDSBytesPipe.formats[key];\r\n        if (bytes < format.max) {\r\n          const result = toDecimal(TDSBytesPipe.calculateResult(format, bytes), decimal);\r\n\r\n          return TDSBytesPipe.formatResult(result, key);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  static formatResult(result: number, unit: string): string {\r\n    return `${result} ${unit}`;\r\n  }\r\n\r\n  static calculateResult(format: { max: number; prev?: ByteUnit }, bytes: number): number {\r\n    const prev = format.prev ? TDSBytesPipe.formats[format.prev] : undefined;\r\n    return prev ? bytes / prev.max : bytes;\r\n  }\r\n}\r\n","\r\n\r\nimport { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'tdsToCssUnit'\r\n})\r\nexport class TDSToCssUnitPipe implements PipeTransform {\r\n  transform(value: number | string, defaultUnit: string = 'px'): string {\r\n    const absoluteLengthUnit = ['cm', 'mm', 'Q', 'in', 'pc', 'pt', 'px'];\r\n    const relativeLengthUnit = ['em', 'ex', 'ch', 'rem', '1h', 'vw', 'vh', 'vmin', 'vmax'];\r\n    const percentagesUnit = ['%'];\r\n    const listOfUnit = [...absoluteLengthUnit, ...relativeLengthUnit, ...percentagesUnit];\r\n    let unit = 'px';\r\n    if (listOfUnit.some(u => u === defaultUnit)) {\r\n      unit = defaultUnit;\r\n    }\r\n    return typeof value === 'number' ? `${value}${unit}` : `${value}`;\r\n  }\r\n}\r\n","\r\n\r\nimport { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'tdsEllipsis'\r\n})\r\nexport class TDSEllipsisPipe implements PipeTransform {\r\n  transform(value: any, length?: number, suffix: string = ''): any {\r\n    if (typeof value !== 'string') {\r\n      return value;\r\n    }\r\n\r\n    const len = typeof length === 'undefined' ? value.length : length;\r\n\r\n    if (value.length <= len) {\r\n      return value;\r\n    }\r\n\r\n    return value.substring(0, len) + suffix;\r\n  }\r\n}\r\n","\r\n\r\nimport { Pipe, PipeTransform } from '@angular/core';\r\nimport { isNil } from 'tds-ui/core/util';\r\n\r\n@Pipe({\r\n  name: 'tdsSafeNull'\r\n})\r\nexport class TDSSafeNullPipe implements PipeTransform {\r\n  transform<T>(value: T, replace: string = ''): T | string {\r\n    if (isNil(value)) {\r\n      return replace;\r\n    }\r\n    return value;\r\n  }\r\n}\r\n","\r\n\r\nimport { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer, SafeHtml, SafeResourceUrl, SafeStyle, SafeUrl } from '@angular/platform-browser';\r\n\r\n\r\ntype DomSanitizerType = 'html' | 'style' | 'url' | 'resourceUrl';\r\n\r\n@Pipe({\r\n  name: 'tdsSanitizer'\r\n})\r\nexport class TDSSanitizerPipe implements PipeTransform {\r\n  constructor(protected sanitizer: DomSanitizer) {}\r\n  transform(value: any, type: 'html'): SafeHtml;\r\n  transform(value: any, type: 'style'): SafeStyle;\r\n  transform(value: any, type: 'url'): SafeUrl;\r\n  transform(value: any, type: 'resourceUrl'): SafeResourceUrl;\r\n  transform(value: any, type: DomSanitizerType = 'html'): SafeHtml | SafeStyle | SafeUrl | SafeResourceUrl {\r\n    switch (type) {\r\n      case 'html':\r\n        return this.sanitizer.bypassSecurityTrustHtml(value);\r\n      case 'style':\r\n        return this.sanitizer.bypassSecurityTrustStyle(value);\r\n      case 'url':\r\n        return this.sanitizer.bypassSecurityTrustUrl(value);\r\n      case 'resourceUrl':\r\n        return this.sanitizer.bypassSecurityTrustResourceUrl(value);\r\n      default:\r\n        throw new Error(`Invalid safe type specified`);\r\n    }\r\n  }\r\n}\r\n","\r\n\r\nimport { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'tdsTrim'\r\n})\r\nexport class TDSTrimPipe implements PipeTransform {\r\n  // TODO(chensimeng) trimEnd, trimStart\r\n  transform(text: string): string {\r\n    return text.trim();\r\n  }\r\n}\r\n","\r\n\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { TDSAggregatePipe } from './tds-aggregate.pipe';\r\nimport { TDSBytesPipe } from './tds-bytes.pipe';\r\nimport { TDSToCssUnitPipe } from './tds-css-unit.pipe';\r\nimport { TDSEllipsisPipe } from './tds-ellipsis.pipe';\r\nimport { TDSSafeNullPipe } from './tds-safe-null.pipe';\r\nimport { TDSSanitizerPipe } from './tds-sanitizer.pipe';\r\nimport { TDSTrimPipe } from './tds-trim.pipe';\r\n\r\nconst pipes = [TDSToCssUnitPipe,\r\n  TDSSafeNullPipe,\r\n  TDSSanitizerPipe,\r\n  TDSTrimPipe,\r\n  TDSBytesPipe,\r\n  TDSAggregatePipe,\r\n  TDSEllipsisPipe];\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  exports: [pipes],\r\n  declarations: [pipes]\r\n})\r\nexport class TDSPipesModule { }\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}