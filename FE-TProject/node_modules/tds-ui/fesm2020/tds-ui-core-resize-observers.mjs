import * as i0 from '@angular/core';
import { Injectable, EventEmitter, Directive, Output, Input, NgModule } from '@angular/core';
import { __decorate } from 'tslib';
import { InputBoolean } from 'tds-ui/shared/utility';
import { coerceElement } from '@angular/cdk/coercion';
import { Observable, Subject } from 'rxjs';

/**
 * Factory that creates a new ResizeObserver and allows us to stub it out in unit tests.
 */
class TDSResizeObserverFactory {
    create(callback) {
        return typeof ResizeObserver === 'undefined' ? null : new ResizeObserver(callback);
    }
}
TDSResizeObserverFactory.ɵfac = function TDSResizeObserverFactory_Factory(t) { return new (t || TDSResizeObserverFactory)(); };
TDSResizeObserverFactory.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: TDSResizeObserverFactory, factory: TDSResizeObserverFactory.ɵfac, providedIn: 'root' });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSResizeObserverFactory, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], null, null); })();
/** An injectable service that allows watching elements for changes to their content. */
class TDSResizeObserver {
    constructor(tdsResizeObserverFactory) {
        this.tdsResizeObserverFactory = tdsResizeObserverFactory;
        /** Keeps track of the existing ResizeObservers so they can be reused. */
        this.observedElements = new Map();
    }
    ngOnDestroy() {
        this.observedElements.forEach((_, element) => this.cleanupObserver(element));
    }
    observe(elementOrRef) {
        const element = coerceElement(elementOrRef);
        return new Observable((observer) => {
            const stream = this.observeElement(element);
            const subscription = stream.subscribe(observer);
            return () => {
                subscription.unsubscribe();
                this.unobserveElement(element);
            };
        });
    }
    /**
     * Observes the given element by using the existing ResizeObserver if available, or creating a
     * new one if not.
     */
    observeElement(element) {
        if (!this.observedElements.has(element)) {
            const stream = new Subject();
            const observer = this.tdsResizeObserverFactory.create((mutations) => stream.next(mutations));
            if (observer) {
                observer.observe(element);
            }
            this.observedElements.set(element, { observer, stream, count: 1 });
        }
        else {
            this.observedElements.get(element).count++;
        }
        return this.observedElements.get(element).stream;
    }
    /**
     * Un-observes the given element and cleans up the underlying ResizeObserver if nobody else is
     * observing this element.
     */
    unobserveElement(element) {
        if (this.observedElements.has(element)) {
            this.observedElements.get(element).count--;
            if (!this.observedElements.get(element).count) {
                this.cleanupObserver(element);
            }
        }
    }
    /** Clean up the underlying ResizeObserver for the specified element. */
    cleanupObserver(element) {
        if (this.observedElements.has(element)) {
            const { observer, stream } = this.observedElements.get(element);
            if (observer) {
                observer.disconnect();
            }
            stream.complete();
            this.observedElements.delete(element);
        }
    }
}
TDSResizeObserver.ɵfac = function TDSResizeObserver_Factory(t) { return new (t || TDSResizeObserver)(i0.ɵɵinject(TDSResizeObserverFactory)); };
TDSResizeObserver.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: TDSResizeObserver, factory: TDSResizeObserver.ɵfac, providedIn: 'root' });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSResizeObserver, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: TDSResizeObserverFactory }]; }, null); })();

class TDSResizeObserverDirective {
    constructor(resizeObserver, elementRef) {
        this.resizeObserver = resizeObserver;
        this.elementRef = elementRef;
        this.resizeObserve = new EventEmitter();
        this.resizeObserverDisabled = false;
        this.currentSubscription = null;
    }
    subscribe() {
        this.unsubscribe();
        this.currentSubscription = this.resizeObserver.observe(this.elementRef).subscribe(this.resizeObserve);
    }
    unsubscribe() {
        this.currentSubscription?.unsubscribe();
    }
    ngAfterContentInit() {
        if (!this.currentSubscription && !this.resizeObserverDisabled) {
            this.subscribe();
        }
    }
    ngOnDestroy() {
        this.unsubscribe();
    }
    ngOnChanges(changes) {
        const { resizeObserve } = changes;
        if (resizeObserve) {
            if (this.resizeObserverDisabled) {
                this.unsubscribe();
            }
            else {
                this.subscribe();
            }
        }
    }
}
TDSResizeObserverDirective.ɵfac = function TDSResizeObserverDirective_Factory(t) { return new (t || TDSResizeObserverDirective)(i0.ɵɵdirectiveInject(TDSResizeObserver), i0.ɵɵdirectiveInject(i0.ElementRef)); };
TDSResizeObserverDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: TDSResizeObserverDirective, selectors: [["", "resizeObserver", ""]], inputs: { resizeObserverDisabled: "resizeObserverDisabled" }, outputs: { resizeObserve: "resizeObserve" }, features: [i0.ɵɵNgOnChangesFeature] });
__decorate([
    InputBoolean()
], TDSResizeObserverDirective.prototype, "resizeObserverDisabled", void 0);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSResizeObserverDirective, [{
        type: Directive,
        args: [{
                selector: '[resizeObserver]'
            }]
    }], function () { return [{ type: TDSResizeObserver }, { type: i0.ElementRef }]; }, { resizeObserve: [{
            type: Output
        }], resizeObserverDisabled: [{
            type: Input
        }] }); })();

class TDSResizeObserverModule {
}
TDSResizeObserverModule.ɵfac = function TDSResizeObserverModule_Factory(t) { return new (t || TDSResizeObserverModule)(); };
TDSResizeObserverModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: TDSResizeObserverModule });
TDSResizeObserverModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [TDSResizeObserverFactory] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSResizeObserverModule, [{
        type: NgModule,
        args: [{
                providers: [TDSResizeObserverFactory],
                declarations: [TDSResizeObserverDirective],
                exports: [TDSResizeObserverDirective]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(TDSResizeObserverModule, { declarations: [TDSResizeObserverDirective], exports: [TDSResizeObserverDirective] }); })();

/**
 * Generated bundle index. Do not edit.
 */

export { TDSResizeObserver, TDSResizeObserverDirective, TDSResizeObserverFactory, TDSResizeObserverModule };
//# sourceMappingURL=tds-ui-core-resize-observers.mjs.map
