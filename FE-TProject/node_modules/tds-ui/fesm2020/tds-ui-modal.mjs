import * as i2 from '@angular/cdk/overlay';
import { OverlayConfig, OverlayRef, OverlayModule } from '@angular/cdk/overlay';
import * as i7 from '@angular/cdk/portal';
import { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal, PortalModule } from '@angular/cdk/portal';
import * as i0 from '@angular/core';
import { EventEmitter, Directive, Component, ChangeDetectionStrategy, Optional, Inject, ViewChild, Output, Injector, TemplateRef, Injectable, SkipSelf, Input, ContentChild, NgModule } from '@angular/core';
import { Subject, defer } from 'rxjs';
import { takeUntil, filter, take, startWith } from 'rxjs/operators';
import { getElementOffset, isNotNil, isPromise } from 'tds-ui/core/util';
import * as i5 from '@angular/common';
import { DOCUMENT, CommonModule } from '@angular/common';
import { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';
import { trigger, state, style, transition, animate } from '@angular/animations';
import * as i1 from '@angular/cdk/a11y';
import * as i3 from 'tds-ui/core/config';
import * as i2$1 from 'tds-ui/core/outlet';
import { TDSOutletModule } from 'tds-ui/core/outlet';
import * as i8 from 'tds-ui/button';
import { TDSButtonModule } from 'tds-ui/button';
import * as i9 from 'tds-ui/core/pipes';
import { TDSPipesModule } from 'tds-ui/core/pipes';
import { TDSHelperObject, InputBoolean } from 'tds-ui/shared/utility';
import { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';
import * as i2$2 from '@angular/cdk/bidi';
import { BidiModule } from '@angular/cdk/bidi';
import { __decorate } from 'tslib';

const noopFun = () => void 0;
class ModalOptions {
    constructor() {
        this.size = null;
        this.centered = false;
        this.closable = true;
        this.okLoading = false;
        this.okDisabled = false;
        this.cancelDisabled = false;
        this.cancelLoading = false;
        this.noAnimation = false;
        this.autofocus = null;
        this.keyboard = true;
        this.zindex = 60;
        this.width = 500;
        this.closeIcon = 'close';
        this.okType = 'primary';
        this.okDanger = false;
        this.modalType = 'default';
        this.onCancel = noopFun;
        this.onOk = noopFun;
        // Confirm
        this.iconType = 'question-circle';
        this.confirmViewType = "default";
    }
}

const ZOOM_CLASS_NAME_MAP = {
    enter: 'tds-zoom-enter',
    enterActive: 'tds-zoom-enter-active',
    leave: 'tds-zoom-leave',
    leaveActive: 'tds-zoom-leave-active'
};
const TDS_FADE_CLASS_NAME_MAP = {
    enter: 'tds-fade-enter',
    enterActive: 'tds-fade-enter-active',
    leave: 'tds-fade-leave',
    leaveActive: 'tds-fade-leave-active'
};
const MODAL_MASK_CLASS_NAME = ['tds-modal-mask', 'fixed', 'top-0', 'left-0', 'right-0', 'bottom-0', 'h-full', 'bg-opacity-40', 'bg-black'];
const TDS_CONFIG_MODULE_NAME$1 = 'modal';

const TDSModalAnimations = {
    modalContainer: trigger('modalContainer', [
        state('void, exit', style({})),
        state('enter', style({})),
        transition('* => enter', animate('.24s', style({}))),
        transition('* => void, * => exit', animate('.2s', style({})))
    ])
};

function applyConfigDefaults(config, defaultOptions) {
    return { ...defaultOptions, ...config };
}
function getValueWithConfig(userValue, configValue, defaultValue) {
    return typeof userValue === 'undefined' ? (typeof configValue === 'undefined' ? defaultValue : configValue) : userValue;
}
/**
 * Assign the params into the content component instance.
 * @deprecated Should use dependency injection to get the params for user
 * @breaking-change 12.0.0
 */
function setContentInstanceParams(instance, params) {
    Object.assign(instance, params);
}
function getConfigFromComponent(component) {
    const { size, centered, mask, autoClose, closable, okLoading, okDisabled, cancelDisabled, cancelLoading, keyboard, noAnimation, content, componentParams, footer, zindex, width, wrapClassName, className, style, title, closeIcon, maskStyle, bodyStyle, okText, cancelText, okType, okDanger, iconType, modalType, onOk, onCancel, onAfterOpen, onAfterClose, closeOnNavigation, autofocus } = component;
    return {
        size,
        centered,
        mask,
        autoClose,
        closable,
        okLoading,
        okDisabled,
        cancelDisabled,
        cancelLoading,
        keyboard,
        noAnimation,
        content,
        componentParams,
        footer,
        zindex,
        width,
        wrapClassName,
        className,
        style,
        title,
        closeIcon,
        maskStyle,
        bodyStyle,
        okText,
        cancelText,
        okType,
        okDanger,
        iconType,
        modalType,
        onOk,
        onCancel,
        onAfterOpen,
        onAfterClose,
        closeOnNavigation,
        autofocus
    };
}

const TDS_CONFIG_MODULE_NAME = 'modal';
function throwNzModalContentAlreadyAttachedError() {
    throw Error('Attempting to attach modal content after content is already attached');
}
class BaseModalContainerComponent extends BasePortalOutlet {
    constructor(elementRef, focusTrapFactory, cdr, render, overlayRef, tdsConfigService, config, document, animationType) {
        super();
        this.elementRef = elementRef;
        this.focusTrapFactory = focusTrapFactory;
        this.cdr = cdr;
        this.render = render;
        this.overlayRef = overlayRef;
        this.tdsConfigService = tdsConfigService;
        this.config = config;
        this.animationType = animationType;
        this.animationStateChanged = new EventEmitter();
        this.containerClick = new EventEmitter();
        this.cancelTriggered = new EventEmitter();
        this.okTriggered = new EventEmitter();
        this.state = 'enter';
        this.isStringContent = false;
        this.dir = 'ltr';
        this.elementFocusedBeforeModalWasOpened = null;
        this.mouseDown = false;
        this.oldMaskStyle = null;
        this.destroy$ = new Subject();
        this.document = document;
        this.dir = overlayRef.getDirection();
        this.isStringContent = typeof config.content === 'string';
        this.tdsConfigService
            .getConfigChangeEventForComponent(TDS_CONFIG_MODULE_NAME)
            .pipe(takeUntil(this.destroy$))
            .subscribe(() => {
            this.updateMaskClassname();
        });
        this.updateMaskClassname();
    }
    get showMask() {
        const defaultConfig = this.tdsConfigService.getConfigForComponent(TDS_CONFIG_MODULE_NAME) || {};
        return !!getValueWithConfig(this.config.mask, defaultConfig.mask, true);
    }
    get autoClose() {
        const defaultConfig = this.tdsConfigService.getConfigForComponent(TDS_CONFIG_MODULE_NAME) || {};
        return !!getValueWithConfig(this.config.autoClose, defaultConfig.autoClose, false);
    }
    onContainerClick(e) {
        if (e.target === e.currentTarget && !this.mouseDown && this.showMask && this.autoClose) {
            this.containerClick.emit();
        }
    }
    onMousedown() {
        this.mouseDown = true;
    }
    onMouseup() {
        if (this.mouseDown) {
            setTimeout(() => {
                this.mouseDown = false;
            });
        }
    }
    onCloseClick() {
        this.cancelTriggered.emit();
    }
    onOkClick() {
        this.okTriggered.emit();
    }
    attachComponentPortal(portal) {
        if (this.portalOutlet.hasAttached()) {
            throwNzModalContentAlreadyAttachedError();
        }
        this.savePreviouslyFocusedElement();
        this.setZIndexForBackdrop();
        return this.portalOutlet.attachComponentPortal(portal);
    }
    attachTemplatePortal(portal) {
        if (this.portalOutlet.hasAttached()) {
            throwNzModalContentAlreadyAttachedError();
        }
        this.savePreviouslyFocusedElement();
        this.setZIndexForBackdrop();
        return this.portalOutlet.attachTemplatePortal(portal);
    }
    attachStringContent() {
        this.savePreviouslyFocusedElement();
        this.setZIndexForBackdrop();
    }
    getNativeElement() {
        return this.elementRef.nativeElement;
    }
    animationDisabled() {
        return this.config.noAnimation || this.animationType === 'NoopAnimations';
    }
    setModalTransformOrigin() {
        const modalElement = this.modalElementRef.nativeElement;
        if (this.elementFocusedBeforeModalWasOpened) {
            const previouslyDOMRect = this.elementFocusedBeforeModalWasOpened.getBoundingClientRect();
            const lastPosition = getElementOffset(this.elementFocusedBeforeModalWasOpened);
            const x = lastPosition.left + previouslyDOMRect.width / 2;
            const y = lastPosition.top + previouslyDOMRect.height / 2;
            const transformOrigin = `${x - modalElement.offsetLeft}px ${y - modalElement.offsetTop}px 0px`;
            this.render.setStyle(modalElement, 'transform-origin', transformOrigin);
        }
    }
    savePreviouslyFocusedElement() {
        if (!this.focusTrap) {
            this.focusTrap = this.focusTrapFactory.create(this.elementRef.nativeElement);
        }
        if (this.document) {
            this.elementFocusedBeforeModalWasOpened = this.document.activeElement;
            if (this.elementRef.nativeElement.focus) {
                Promise.resolve().then(() => this.elementRef.nativeElement.focus());
            }
        }
    }
    trapFocus() {
        const element = this.elementRef.nativeElement;
        if (this.config.autofocus) {
            this.focusTrap.focusInitialElementWhenReady().then();
        }
        else {
            const activeElement = this.document.activeElement;
            if (activeElement !== element && !element.contains(activeElement)) {
                element.focus();
            }
        }
    }
    restoreFocus() {
        const toFocus = this.elementFocusedBeforeModalWasOpened;
        // We need the extra check, because IE can set the `activeElement` to null in some cases.
        if (toFocus && typeof toFocus.focus === 'function') {
            const activeElement = this.document.activeElement;
            const element = this.elementRef.nativeElement;
            if (!activeElement || activeElement === this.document.body || activeElement === element || element.contains(activeElement)) {
                toFocus.focus();
            }
        }
        if (this.focusTrap) {
            this.focusTrap.destroy();
        }
    }
    setEnterAnimationClass() {
        if (this.animationDisabled()) {
            return;
        }
        // Make sure to set the `TransformOrigin` style before set the modelElement's class names
        this.setModalTransformOrigin();
        const modalElement = this.modalElementRef.nativeElement;
        const backdropElement = this.overlayRef.backdropElement;
        modalElement.classList.add(ZOOM_CLASS_NAME_MAP.enter);
        modalElement.classList.add(ZOOM_CLASS_NAME_MAP.enterActive);
        if (backdropElement) {
            backdropElement.classList.add(TDS_FADE_CLASS_NAME_MAP.enter);
            backdropElement.classList.add(TDS_FADE_CLASS_NAME_MAP.enterActive);
        }
    }
    setExitAnimationClass() {
        const modalElement = this.modalElementRef.nativeElement;
        modalElement.classList.add(ZOOM_CLASS_NAME_MAP.leave);
        modalElement.classList.add(ZOOM_CLASS_NAME_MAP.leaveActive);
        this.setMaskExitAnimationClass();
    }
    setMaskExitAnimationClass(force = false) {
        const backdropElement = this.overlayRef.backdropElement;
        if (backdropElement) {
            if (this.animationDisabled() || force) {
                // https://github.com/angular/components/issues/18645
                backdropElement.classList.remove(...MODAL_MASK_CLASS_NAME);
                return;
            }
            backdropElement.classList.add(TDS_FADE_CLASS_NAME_MAP.leave);
            backdropElement.classList.add(TDS_FADE_CLASS_NAME_MAP.leaveActive);
        }
    }
    cleanAnimationClass() {
        if (this.animationDisabled()) {
            return;
        }
        const backdropElement = this.overlayRef.backdropElement;
        const modalElement = this.modalElementRef.nativeElement;
        if (backdropElement) {
            backdropElement.classList.remove(TDS_FADE_CLASS_NAME_MAP.enter);
            backdropElement.classList.remove(TDS_FADE_CLASS_NAME_MAP.enterActive);
        }
        modalElement.classList.remove(ZOOM_CLASS_NAME_MAP.enter);
        modalElement.classList.remove(ZOOM_CLASS_NAME_MAP.enterActive);
        modalElement.classList.remove(ZOOM_CLASS_NAME_MAP.leave);
        modalElement.classList.remove(ZOOM_CLASS_NAME_MAP.leaveActive);
    }
    setZIndexForBackdrop() {
        const backdropElement = this.overlayRef.backdropElement;
        if (backdropElement) {
            if (isNotNil(this.config.zindex)) {
                this.render.setStyle(backdropElement, 'z-index', this.config.zindex);
            }
        }
    }
    bindBackdropStyle() {
        const backdropElement = this.overlayRef.backdropElement;
        if (backdropElement) {
            if (this.oldMaskStyle) {
                const styles = this.oldMaskStyle;
                Object.keys(styles).forEach(key => {
                    this.render.removeStyle(backdropElement, key);
                });
                this.oldMaskStyle = null;
            }
            this.setZIndexForBackdrop();
            if (typeof this.config.maskStyle === 'object' && Object.keys(this.config.maskStyle).length) {
                const styles = { ...this.config.maskStyle };
                Object.keys(styles).forEach(key => {
                    this.render.setStyle(backdropElement, key, styles[key]);
                });
                this.oldMaskStyle = styles;
            }
        }
    }
    updateMaskClassname() {
        const backdropElement = this.overlayRef.backdropElement;
        if (backdropElement) {
            if (this.showMask) {
                backdropElement.classList.add(...MODAL_MASK_CLASS_NAME);
            }
            else {
                backdropElement.classList.remove(...MODAL_MASK_CLASS_NAME);
            }
        }
    }
    onAnimationDone(event) {
        if (event.toState === 'enter') {
            this.trapFocus();
        }
        else if (event.toState === 'exit') {
            this.restoreFocus();
        }
        this.cleanAnimationClass();
        this.animationStateChanged.emit(event);
    }
    onAnimationStart(event) {
        if (event.toState === 'enter') {
            this.setEnterAnimationClass();
            this.bindBackdropStyle();
        }
        else if (event.toState === 'exit') {
            this.setExitAnimationClass();
        }
        this.animationStateChanged.emit(event);
    }
    startExitAnimation() {
        this.state = 'exit';
        this.cdr.markForCheck();
    }
    ngOnDestroy() {
        this.setMaskExitAnimationClass(true);
        //fix lỗi ko xóa overlayRef khi chuyển router
        if (this.modalRef?.state == 0 /* OPEN */) {
            this.overlayRef.dispose();
        }
        this.destroy$.next();
        this.destroy$.complete();
    }
}
BaseModalContainerComponent.ɵfac = function BaseModalContainerComponent_Factory(t) { i0.ɵɵinvalidFactory(); };
BaseModalContainerComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: BaseModalContainerComponent, features: [i0.ɵɵInheritDefinitionFeature] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(BaseModalContainerComponent, [{
        type: Directive
    }], function () { return [{ type: i0.ElementRef }, { type: i1.FocusTrapFactory }, { type: i0.ChangeDetectorRef }, { type: i0.Renderer2 }, { type: i2.OverlayRef }, { type: i3.TDSConfigService }, { type: ModalOptions }, { type: undefined }, { type: undefined }]; }, null); })();

const _c0$5 = ["modalElement"];
function TDSModalConfirmContainerComponent_ng_container_5_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function TDSModalConfirmContainerComponent_ng_container_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtemplate(1, TDSModalConfirmContainerComponent_ng_container_5_ng_container_1_Template, 1, 0, "ng-container", 7);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    i0.ɵɵnextContext();
    const _r3 = i0.ɵɵreference(8);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngTemplateOutlet", _r3);
} }
function TDSModalConfirmContainerComponent_ng_container_6_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function TDSModalConfirmContainerComponent_ng_container_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtemplate(1, TDSModalConfirmContainerComponent_ng_container_6_ng_container_1_Template, 1, 0, "ng-container", 7);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    i0.ɵɵnextContext();
    const _r5 = i0.ɵɵreference(10);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngTemplateOutlet", _r5);
} }
const _c1$2 = function (a0, a1, a2, a3) { return { "text-warning-400 dark:text-d-warning-400": a0, "text-info-400 dark:text-d-info-400": a1, "text-success-400 dark:text-d-success-400": a2, "text-error-400 dark:text-d-error-400": a3 }; };
function TDSModalConfirmContainerComponent_ng_template_7_div_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 20);
    i0.ɵɵelement(1, "i", 21);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r9 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction4(2, _c1$2, ctx_r9.config.confirmType == "warning", ctx_r9.config.confirmType == "info", ctx_r9.config.confirmType == "success", ctx_r9.config.confirmType == "error"));
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngClass", ctx_r9.config.iconType);
} }
const _c2$1 = function (a0, a1, a2, a3) { return { "bg-warning-400 dark:bg-d-warning-400": a0, "bg-info-400 dark:bg-d-info-400": a1, "bg-success-400 dark:bg-d-success-400": a2, "bg-error-400 dark:bg-d-error-400": a3 }; };
function TDSModalConfirmContainerComponent_ng_template_7_div_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 22)(1, "div", 23);
    i0.ɵɵelement(2, "i", 24);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r10 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction4(2, _c2$1, ctx_r10.config.confirmType == "warning", ctx_r10.config.confirmType == "info", ctx_r10.config.confirmType == "success", ctx_r10.config.confirmType == "error"));
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngClass", ctx_r10.config.confirmIcon);
} }
function TDSModalConfirmContainerComponent_ng_template_7_ng_container_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelement(1, "span", 25);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r11 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("innerHTML", ctx_r11.config.title, i0.ɵɵsanitizeHtml);
} }
function TDSModalConfirmContainerComponent_ng_template_7_ng_template_7_Template(rf, ctx) { }
function TDSModalConfirmContainerComponent_ng_template_7_div_8_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "div", 25);
} if (rf & 2) {
    const ctx_r13 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("innerHTML", ctx_r13.config.content, i0.ɵɵsanitizeHtml);
} }
function TDSModalConfirmContainerComponent_ng_template_7_button_10_Template(rf, ctx) { if (rf & 1) {
    const _r17 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 26);
    i0.ɵɵlistener("click", function TDSModalConfirmContainerComponent_ng_template_7_button_10_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r17); const ctx_r16 = i0.ɵɵnextContext(2); return ctx_r16.onCancel(); });
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r14 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("disabled", ctx_r14.config.cancelDisabled);
    i0.ɵɵattribute("cdkFocusInitial", ctx_r14.config.autofocus === "cancel" || null);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" ", ctx_r14.config.cancelText || ctx_r14.locale.cancelText, " ");
} }
function TDSModalConfirmContainerComponent_ng_template_7_button_11_Template(rf, ctx) { if (rf & 1) {
    const _r19 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 27);
    i0.ɵɵlistener("click", function TDSModalConfirmContainerComponent_ng_template_7_button_11_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r19); const ctx_r18 = i0.ɵɵnextContext(2); return ctx_r18.onOk(); });
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r15 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("color", ctx_r15.config.confirmType === "confirm" ? "primary" : ctx_r15.config.confirmType)("disabled", ctx_r15.config.okDisabled);
    i0.ɵɵattribute("cdkFocusInitial", ctx_r15.config.autofocus === "ok" || null);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" ", ctx_r15.config.okText || ctx_r15.locale.okText, " ");
} }
function TDSModalConfirmContainerComponent_ng_template_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 8);
    i0.ɵɵtemplate(1, TDSModalConfirmContainerComponent_ng_template_7_div_1_Template, 2, 7, "div", 9);
    i0.ɵɵtemplate(2, TDSModalConfirmContainerComponent_ng_template_7_div_2_Template, 3, 7, "div", 10);
    i0.ɵɵelementStart(3, "div", 11)(4, "div", 12);
    i0.ɵɵtemplate(5, TDSModalConfirmContainerComponent_ng_template_7_ng_container_5_Template, 2, 1, "ng-container", 13);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(6, "div", 14);
    i0.ɵɵtemplate(7, TDSModalConfirmContainerComponent_ng_template_7_ng_template_7_Template, 0, 0, "ng-template", 15);
    i0.ɵɵtemplate(8, TDSModalConfirmContainerComponent_ng_template_7_div_8_Template, 1, 1, "div", 16);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(9, "div", 17);
    i0.ɵɵtemplate(10, TDSModalConfirmContainerComponent_ng_template_7_button_10_Template, 2, 3, "button", 18);
    i0.ɵɵtemplate(11, TDSModalConfirmContainerComponent_ng_template_7_button_11_Template, 2, 4, "button", 19);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", !(ctx_r4.config == null ? null : ctx_r4.config.confirmIcon));
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", !!(ctx_r4.config == null ? null : ctx_r4.config.confirmIcon));
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("tdsStringTemplateOutlet", ctx_r4.config.title);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", ctx_r4.isStringContent);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r4.config.cancelText !== null);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r4.config.okText !== null);
} }
function TDSModalConfirmContainerComponent_ng_template_9_div_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 38);
    i0.ɵɵelement(1, "i", 39);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r20 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction4(2, _c1$2, ctx_r20.config.confirmType == "warning", ctx_r20.config.confirmType == "info", ctx_r20.config.confirmType == "success", ctx_r20.config.confirmType == "error"));
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngClass", ctx_r20.config.iconType);
} }
function TDSModalConfirmContainerComponent_ng_template_9_div_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 40)(1, "div", 41);
    i0.ɵɵelement(2, "i", 42);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r21 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction4(2, _c2$1, ctx_r21.config.confirmType == "warning", ctx_r21.config.confirmType == "info", ctx_r21.config.confirmType == "success", ctx_r21.config.confirmType == "error"));
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngClass", ctx_r21.config.confirmIcon);
} }
function TDSModalConfirmContainerComponent_ng_template_9_ng_container_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelement(1, "span", 25);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r22 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("innerHTML", ctx_r22.config.title, i0.ɵɵsanitizeHtml);
} }
function TDSModalConfirmContainerComponent_ng_template_9_ng_template_9_Template(rf, ctx) { }
function TDSModalConfirmContainerComponent_ng_template_9_div_10_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "div", 25);
} if (rf & 2) {
    const ctx_r24 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("innerHTML", ctx_r24.config.content, i0.ɵɵsanitizeHtml);
} }
function TDSModalConfirmContainerComponent_ng_template_9_button_12_Template(rf, ctx) { if (rf & 1) {
    const _r28 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 43);
    i0.ɵɵlistener("click", function TDSModalConfirmContainerComponent_ng_template_9_button_12_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r28); const ctx_r27 = i0.ɵɵnextContext(2); return ctx_r27.onCancel(); });
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r25 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("disabled", ctx_r25.config.cancelDisabled);
    i0.ɵɵattribute("cdkFocusInitial", ctx_r25.config.autofocus === "cancel" || null);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" ", ctx_r25.config.cancelText || ctx_r25.locale.cancelText, " ");
} }
function TDSModalConfirmContainerComponent_ng_template_9_button_13_Template(rf, ctx) { if (rf & 1) {
    const _r30 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 44);
    i0.ɵɵlistener("click", function TDSModalConfirmContainerComponent_ng_template_9_button_13_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r30); const ctx_r29 = i0.ɵɵnextContext(2); return ctx_r29.onOk(); });
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r26 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("color", ctx_r26.config.confirmType === "confirm" ? "primary" : ctx_r26.config.confirmType)("disabled", ctx_r26.config.okDisabled);
    i0.ɵɵattribute("cdkFocusInitial", ctx_r26.config.autofocus === "ok" || null);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" ", ctx_r26.config.okText || ctx_r26.locale.okText, " ");
} }
function TDSModalConfirmContainerComponent_ng_template_9_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 8)(1, "div", 28);
    i0.ɵɵtemplate(2, TDSModalConfirmContainerComponent_ng_template_9_div_2_Template, 2, 7, "div", 29);
    i0.ɵɵtemplate(3, TDSModalConfirmContainerComponent_ng_template_9_div_3_Template, 3, 7, "div", 30);
    i0.ɵɵelementStart(4, "div", 31)(5, "div", 32)(6, "div", 33);
    i0.ɵɵtemplate(7, TDSModalConfirmContainerComponent_ng_template_9_ng_container_7_Template, 2, 1, "ng-container", 13);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(8, "div", 34);
    i0.ɵɵtemplate(9, TDSModalConfirmContainerComponent_ng_template_9_ng_template_9_Template, 0, 0, "ng-template", 15);
    i0.ɵɵtemplate(10, TDSModalConfirmContainerComponent_ng_template_9_div_10_Template, 1, 1, "div", 16);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(11, "div", 35);
    i0.ɵɵtemplate(12, TDSModalConfirmContainerComponent_ng_template_9_button_12_Template, 2, 3, "button", 36);
    i0.ɵɵtemplate(13, TDSModalConfirmContainerComponent_ng_template_9_button_13_Template, 2, 4, "button", 37);
    i0.ɵɵelementEnd()()()();
} if (rf & 2) {
    const ctx_r6 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !(ctx_r6.config == null ? null : ctx_r6.config.confirmIcon));
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", !!(ctx_r6.config == null ? null : ctx_r6.config.confirmIcon));
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("tdsStringTemplateOutlet", ctx_r6.config.title);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", ctx_r6.isStringContent);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r6.config.cancelText !== null);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r6.config.okText !== null);
} }
const _c3 = function (a0, a1) { return { "px-6 pb-4": a0, "px-4 pb-6": a1 }; };
class TDSModalConfirmContainerComponent extends BaseModalContainerComponent {
    constructor(elementRef, focusTrapFactory, cdr, render, overlayRef, tdsConfigService, config, document, animationType) {
        super(elementRef, focusTrapFactory, cdr, render, overlayRef, tdsConfigService, config, document, animationType);
        this.config = config;
        this.cancelTriggered = new EventEmitter();
        this.okTriggered = new EventEmitter();
        this.locale = {
            okText: "Đồng ý",
            cancelText: "Hủy"
        };
    }
    onCancel() {
        this.cancelTriggered.emit();
    }
    onOk() {
        this.okTriggered.emit();
    }
}
TDSModalConfirmContainerComponent.ɵfac = function TDSModalConfirmContainerComponent_Factory(t) { return new (t || TDSModalConfirmContainerComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.FocusTrapFactory), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i2.OverlayRef), i0.ɵɵdirectiveInject(i3.TDSConfigService), i0.ɵɵdirectiveInject(ModalOptions), i0.ɵɵdirectiveInject(DOCUMENT, 8), i0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };
TDSModalConfirmContainerComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSModalConfirmContainerComponent, selectors: [["tds-modal-confirm-container"]], viewQuery: function TDSModalConfirmContainerComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(CdkPortalOutlet, 7);
        i0.ɵɵviewQuery(_c0$5, 7);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.portalOutlet = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.modalElementRef = _t.first);
    } }, hostAttrs: ["tabindex", "-1", "role", "dialog"], hostVars: 10, hostBindings: function TDSModalConfirmContainerComponent_HostBindings(rf, ctx) { if (rf & 1) {
        i0.ɵɵsyntheticHostListener("@modalContainer.start", function TDSModalConfirmContainerComponent_animation_modalContainer_start_HostBindingHandler($event) { return ctx.onAnimationStart($event); })("@modalContainer.done", function TDSModalConfirmContainerComponent_animation_modalContainer_done_HostBindingHandler($event) { return ctx.onAnimationDone($event); });
        i0.ɵɵlistener("click", function TDSModalConfirmContainerComponent_click_HostBindingHandler($event) { return ctx.onContainerClick($event); })("mouseup", function TDSModalConfirmContainerComponent_mouseup_HostBindingHandler() { return ctx.onMouseup(); });
    } if (rf & 2) {
        i0.ɵɵsyntheticHostProperty("@.disabled", ctx.config.noAnimation)("@modalContainer", ctx.state);
        i0.ɵɵclassMap(ctx.config.wrapClassName ? "tds-modal-wrap fixed top-0 left-0 right-0 bottom-0 overflow-auto outline-none" + ctx.config.wrapClassName : "tds-modal-wrap fixed top-0 left-0 right-0 bottom-0 overflow-auto outline-none");
        i0.ɵɵstyleProp("z-index", ctx.config.zindex);
        i0.ɵɵclassProp("tds-modal-wrap-rtl", ctx.dir === "rtl")("tds-modal-centered", ctx.config.centered);
    } }, outputs: { cancelTriggered: "cancelTriggered", okTriggered: "okTriggered" }, exportAs: ["tdsModalConfirmContainer"], features: [i0.ɵɵInheritDefinitionFeature], decls: 11, vars: 13, consts: [["role", "document", 1, "tds-modal", "bg-white", "dark:bg-d-neutral-3-200", "text-neutral-1-900", "dark:text-d-neutral-1-900", "top-24", "rounded-md", "border-box", "pointer-events-none", "relative", "my-auto", "mx-auto", 3, "ngClass", "ngStyle", "mousedown"], ["modalElement", ""], [1, "tds-modal-content", "pt-7", "pointer-events-auto", 3, "ngClass"], [1, "tds-modal-body", 3, "ngStyle"], [4, "ngIf"], ["defaultTemplate", ""], ["compactTemplate", ""], [4, "ngTemplateOutlet"], [1, "tds-modal-confirm-body-wrapper"], ["class", "tds-modal-confirm-icon w-full flex items-center justify-center pb-6", 3, "ngClass", 4, "ngIf"], ["class", "tds-modal-confirm-icon w-full flex items-center justify-center pb-6", 4, "ngIf"], [1, "tds-modal-confirm-body", "pb-4"], [1, "tds-modal-confirm-title", "text-center", "break-words", "text-header-1", "text-neutral-1-900", "dark:text-d-neutral-1-900", "font-semibold"], [4, "tdsStringTemplateOutlet"], [1, "tds-modal-confirm-content", "pt-2", "text-center", "break-words", "text=neutral-1-900", "dark:text-d-neutral-1-900", "text-body-2", "font-regular"], ["cdkPortalOutlet", ""], [3, "innerHTML", 4, "ngIf"], [1, "tds-modal-confirm-btns", "p-4", "pb-0", "flex", "justify-center"], ["class", "min-w-[100px]", "tds-button", "", "color", "secondary", 3, "disabled", "click", 4, "ngIf"], ["class", "ml-4 min-w-[100px]", "tds-button", "", 3, "color", "disabled", "click", 4, "ngIf"], [1, "tds-modal-confirm-icon", "w-full", "flex", "items-center", "justify-center", "pb-6", 3, "ngClass"], [2, "font-size", "60px", 3, "ngClass"], [1, "tds-modal-confirm-icon", "w-full", "flex", "items-center", "justify-center", "pb-6"], [1, "w-[60px]", "h-[60px]", "rounded-full", "text-white", "p-3", 3, "ngClass"], [1, "text-4xl", "leading-9", 3, "ngClass"], [3, "innerHTML"], ["tds-button", "", "color", "secondary", 1, "min-w-[100px]", 3, "disabled", "click"], ["tds-button", "", 1, "ml-4", "min-w-[100px]", 3, "color", "disabled", "click"], [1, "w-full", "flex"], ["class", "tds-modal-confirm-icon", 3, "ngClass", 4, "ngIf"], ["class", "tds-modal-confirm-icon text-white", 4, "ngIf"], [1, "pl-6", "flex-auto"], [1, "tds-modal-confirm-body", "w-full", "pb-8"], [1, "tds-modal-confirm-title", "break-words", "text-header-1", "text-neutral-1-900", "dark:text-d-neutral-1-900", "font-semibold"], [1, "tds-modal-confirm-content", "pt-4", "break-words", "text=neutral-1-900", "dark:text-d-neutral-1-900", "text-body-2", "font-regular"], [1, "tds-modal-confirm-btns", "w-full", "flex", "justify-end"], ["class", "min-w-[100px", "tds-button", "", "color", "secondary", 3, "disabled", "click", 4, "ngIf"], ["class", "ml-4 min-w-[100px", "tds-button", "", 3, "color", "disabled", "click", 4, "ngIf"], [1, "tds-modal-confirm-icon", 3, "ngClass"], [1, "text-[32px]", "leading-8", 3, "ngClass"], [1, "tds-modal-confirm-icon", "text-white"], [1, "w-[32px]", "h-[32px]", "rounded-full", "p-1.5", 3, "ngClass"], [1, "text-xl", "leading-5", 3, "ngClass"], ["tds-button", "", "color", "secondary", 1, "min-w-[100px", 3, "disabled", "click"], ["tds-button", "", 1, "ml-4", "min-w-[100px", 3, "color", "disabled", "click"]], template: function TDSModalConfirmContainerComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 0, 1);
        i0.ɵɵlistener("mousedown", function TDSModalConfirmContainerComponent_Template_div_mousedown_0_listener() { return ctx.onMousedown(); });
        i0.ɵɵpipe(2, "tdsToCssUnit");
        i0.ɵɵelementStart(3, "div", 2)(4, "div", 3);
        i0.ɵɵtemplate(5, TDSModalConfirmContainerComponent_ng_container_5_Template, 2, 1, "ng-container", 4);
        i0.ɵɵtemplate(6, TDSModalConfirmContainerComponent_ng_container_6_Template, 2, 1, "ng-container", 4);
        i0.ɵɵelementEnd()()();
        i0.ɵɵtemplate(7, TDSModalConfirmContainerComponent_ng_template_7_Template, 12, 6, "ng-template", null, 5, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtemplate(9, TDSModalConfirmContainerComponent_ng_template_9_Template, 14, 6, "ng-template", null, 6, i0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        i0.ɵɵstyleProp("width", i0.ɵɵpipeBind1(2, 8, ctx.config.width));
        i0.ɵɵproperty("ngClass", ctx.config.className)("ngStyle", ctx.config.style);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction2(10, _c3, ctx.config.confirmViewType == "compact", ctx.config.confirmViewType != "compact"));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngStyle", ctx.config.bodyStyle);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx.config.confirmViewType != "compact");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx.config.confirmViewType == "compact");
    } }, directives: [i5.NgClass, i5.NgStyle, i5.NgIf, i5.NgTemplateOutlet, i2$1.TDSStringTemplateOutletDirective, i7.CdkPortalOutlet, i8.TDSButtonComponent], pipes: [i9.TDSToCssUnitPipe], encapsulation: 2, data: { animation: [TDSModalAnimations.modalContainer] } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSModalConfirmContainerComponent, [{
        type: Component,
        args: [{ selector: 'tds-modal-confirm-container', exportAs: 'tdsModalConfirmContainer', animations: [TDSModalAnimations.modalContainer], changeDetection: ChangeDetectionStrategy.Default, host: {
                    tabindex: '-1',
                    role: 'dialog',
                    '[class]': 'config.wrapClassName ? "tds-modal-wrap fixed top-0 left-0 right-0 bottom-0 overflow-auto outline-none" + config.wrapClassName : "tds-modal-wrap fixed top-0 left-0 right-0 bottom-0 overflow-auto outline-none"',
                    '[class.tds-modal-wrap-rtl]': `dir === 'rtl'`,
                    '[class.tds-modal-centered]': 'config.centered',
                    '[style.zIndex]': 'config.zindex',
                    '[@.disabled]': 'config.noAnimation',
                    '[@modalContainer]': 'state',
                    '(@modalContainer.start)': 'onAnimationStart($event)',
                    '(@modalContainer.done)': 'onAnimationDone($event)',
                    '(click)': 'onContainerClick($event)',
                    '(mouseup)': 'onMouseup()'
                }, template: "<div #modalElement role=\"document\"\r\n    class=\"tds-modal bg-white dark:bg-d-neutral-3-200 text-neutral-1-900 dark:text-d-neutral-1-900 top-24  rounded-md border-box pointer-events-none relative my-auto mx-auto\"\r\n    (mousedown)=\"onMousedown()\" [ngClass]=\"config.className!\" [ngStyle]=\"config.style!\"\r\n    [style.width]=\"config.width! | tdsToCssUnit\">\r\n    <div class=\"tds-modal-content  pt-7 pointer-events-auto\"\r\n        [ngClass]=\"{'px-6 pb-4':config.confirmViewType == 'compact','px-4 pb-6': config.confirmViewType != 'compact'}\">\r\n        <div class=\"tds-modal-body\" [ngStyle]=\"config.bodyStyle!\">\r\n            <ng-container *ngIf=\"config.confirmViewType != 'compact'\">\r\n                <ng-container *ngTemplateOutlet=\"defaultTemplate\"></ng-container>\r\n            </ng-container>\r\n            <ng-container *ngIf=\"config.confirmViewType == 'compact'\">\r\n                <ng-container *ngTemplateOutlet=\"compactTemplate\"></ng-container>\r\n            </ng-container>\r\n        </div>\r\n    </div>\r\n</div>\r\n<ng-template #defaultTemplate>\r\n    <div class=\"tds-modal-confirm-body-wrapper\">\r\n        <div class=\"tds-modal-confirm-icon w-full flex items-center justify-center pb-6\" *ngIf=\"!config?.confirmIcon\"\r\n            [ngClass]=\"{'text-warning-400 dark:text-d-warning-400':config.confirmType == 'warning',\r\n                    'text-info-400 dark:text-d-info-400':config.confirmType == 'info',\r\n                    'text-success-400 dark:text-d-success-400':config.confirmType == 'success',\r\n                    'text-error-400 dark:text-d-error-400':config.confirmType == 'error'}\">\r\n            <i style=\"font-size:60px\" [ngClass]=\"config.iconType!\"></i>\r\n        </div>\r\n        <div *ngIf=\"!!config?.confirmIcon\" class=\"tds-modal-confirm-icon w-full flex items-center justify-center pb-6\">\r\n            <div class=\"w-[60px] h-[60px] rounded-full text-white p-3\" [ngClass]=\"{'bg-warning-400 dark:bg-d-warning-400':config.confirmType == 'warning',\r\n            'bg-info-400 dark:bg-d-info-400':config.confirmType == 'info',\r\n            'bg-success-400 dark:bg-d-success-400':config.confirmType == 'success',\r\n            'bg-error-400 dark:bg-d-error-400':config.confirmType == 'error'}\">\r\n                <i class=\"text-4xl leading-9\" [ngClass]=\"config.confirmIcon!\"></i>\r\n            </div>\r\n        </div>\r\n        <div class=\"tds-modal-confirm-body pb-4\">\r\n            <div\r\n                class=\"tds-modal-confirm-title text-center break-words text-header-1 text-neutral-1-900 dark:text-d-neutral-1-900 font-semibold\">\r\n                <ng-container *tdsStringTemplateOutlet=\"config.title\">\r\n                    <span [innerHTML]=\"config.title\"></span>\r\n                </ng-container>\r\n            </div>\r\n            <div\r\n                class=\"tds-modal-confirm-content pt-2 text-center break-words text=neutral-1-900 dark:text-d-neutral-1-900 text-body-2 font-regular\">\r\n                <ng-template cdkPortalOutlet></ng-template>\r\n                <div *ngIf=\"isStringContent\" [innerHTML]=\"config.content\"></div>\r\n            </div>\r\n        </div>\r\n        <div class=\"tds-modal-confirm-btns p-4 pb-0 flex justify-center\">\r\n            <button class=\"min-w-[100px]\" *ngIf=\"config.cancelText !== null\"\r\n                [attr.cdkFocusInitial]=\"config.autofocus === 'cancel' || null\" tds-button color=\"secondary\"\r\n                (click)=\"onCancel()\" [disabled]=\"config.cancelDisabled!\">\r\n                {{ config.cancelText || locale.cancelText }}\r\n            </button>\r\n            <button class=\"ml-4 min-w-[100px]\" *ngIf=\"config.okText !== null\"\r\n                [attr.cdkFocusInitial]=\"config.autofocus === 'ok' || null\" tds-button\r\n                [color]=\"config.confirmType === 'confirm' ?'primary' : config.confirmType!\" (click)=\"onOk()\"\r\n                [disabled]=\"config.okDisabled!\">\r\n                {{ config.okText || locale.okText }}\r\n            </button>\r\n        </div>\r\n    </div>\r\n</ng-template>\r\n<ng-template #compactTemplate>\r\n    <div class=\"tds-modal-confirm-body-wrapper\">\r\n        <div class=\"w-full flex\">\r\n            <div class=\"tds-modal-confirm-icon\" *ngIf=\"!config?.confirmIcon\" [ngClass]=\"{'text-warning-400 dark:text-d-warning-400':config.confirmType == 'warning',\r\n'text-info-400 dark:text-d-info-400':config.confirmType == 'info',\r\n'text-success-400 dark:text-d-success-400':config.confirmType == 'success',\r\n'text-error-400 dark:text-d-error-400':config.confirmType == 'error'}\">\r\n                <i class=\"text-[32px] leading-8\" [ngClass]=\"config.iconType!\"></i>\r\n            </div>\r\n            <div class=\"tds-modal-confirm-icon text-white\" *ngIf=\"!!config?.confirmIcon\">\r\n                <div class=\"w-[32px] h-[32px] rounded-full p-1.5\" [ngClass]=\"{'bg-warning-400 dark:bg-d-warning-400':config.confirmType == 'warning',\r\n                'bg-info-400 dark:bg-d-info-400':config.confirmType == 'info',\r\n                'bg-success-400 dark:bg-d-success-400':config.confirmType == 'success',\r\n                'bg-error-400 dark:bg-d-error-400':config.confirmType == 'error'}\">\r\n                    <i class=\"text-xl leading-5\" [ngClass]=\"config.confirmIcon!\"></i>\r\n                </div>\r\n\r\n            </div>\r\n            <div class=\"pl-6 flex-auto\">\r\n                <div class=\"tds-modal-confirm-body w-full pb-8\">\r\n                    <div\r\n                        class=\"tds-modal-confirm-title break-words text-header-1 text-neutral-1-900 dark:text-d-neutral-1-900 font-semibold\">\r\n                        <ng-container *tdsStringTemplateOutlet=\"config.title\">\r\n                            <span [innerHTML]=\"config.title\"></span>\r\n                        </ng-container>\r\n                    </div>\r\n                    <div\r\n                        class=\"tds-modal-confirm-content pt-4 break-words text=neutral-1-900 dark:text-d-neutral-1-900 text-body-2 font-regular\">\r\n                        <ng-template cdkPortalOutlet></ng-template>\r\n                        <div *ngIf=\"isStringContent\" [innerHTML]=\"config.content\"></div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"tds-modal-confirm-btns w-full  flex justify-end\">\r\n                    <button *ngIf=\"config.cancelText !== null\" class=\"min-w-[100px\"\r\n                        [attr.cdkFocusInitial]=\"config.autofocus === 'cancel' || null\" tds-button color=\"secondary\"\r\n                        (click)=\"onCancel()\" [disabled]=\"config.cancelDisabled!\">\r\n                        {{ config.cancelText || locale.cancelText }}\r\n                    </button>\r\n                    <button class=\"ml-4 min-w-[100px\" *ngIf=\"config.okText !== null\"\r\n                        [attr.cdkFocusInitial]=\"config.autofocus === 'ok' || null\" tds-button\r\n                        [color]=\"config.confirmType === 'confirm' ?'primary' : config.confirmType!\" (click)=\"onOk()\"\r\n                        [disabled]=\"config.okDisabled!\">\r\n                        {{ config.okText || locale.okText }}\r\n                    </button>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n\r\n    </div>\r\n</ng-template>" }]
    }], function () { return [{ type: i0.ElementRef }, { type: i1.FocusTrapFactory }, { type: i0.ChangeDetectorRef }, { type: i0.Renderer2 }, { type: i2.OverlayRef }, { type: i3.TDSConfigService }, { type: ModalOptions }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [DOCUMENT]
            }] }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [ANIMATION_MODULE_TYPE]
            }] }]; }, { portalOutlet: [{
            type: ViewChild,
            args: [CdkPortalOutlet, { static: true }]
        }], modalElementRef: [{
            type: ViewChild,
            args: ['modalElement', { static: true }]
        }], cancelTriggered: [{
            type: Output
        }], okTriggered: [{
            type: Output
        }] }); })();

const _c0$4 = ["modalElement"];
function TDSModalContainerComponent_div_4_div_1_Template(rf, ctx) { if (rf & 1) {
    const _r7 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 11);
    i0.ɵɵlistener("click", function TDSModalContainerComponent_div_4_div_1_Template_div_click_0_listener() { i0.ɵɵrestoreView(_r7); const ctx_r6 = i0.ɵɵnextContext(2); return ctx_r6.onCloseClick(); });
    i0.ɵɵelementEnd();
} }
function TDSModalContainerComponent_div_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 8);
    i0.ɵɵtemplate(1, TDSModalContainerComponent_div_4_div_1_Template, 1, 0, "div", 9);
    i0.ɵɵelement(2, "div", 10);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r1.config.closable);
} }
function TDSModalContainerComponent_ng_template_6_Template(rf, ctx) { }
function TDSModalContainerComponent_div_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "div", 12);
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵproperty("innerHTML", ctx_r3.config.content, i0.ɵɵsanitizeHtml);
} }
function TDSModalContainerComponent_div_8_Template(rf, ctx) { if (rf & 1) {
    const _r9 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 13);
    i0.ɵɵlistener("cancelTriggered", function TDSModalContainerComponent_div_8_Template_div_cancelTriggered_0_listener() { i0.ɵɵrestoreView(_r9); const ctx_r8 = i0.ɵɵnextContext(); return ctx_r8.onCloseClick(); })("okTriggered", function TDSModalContainerComponent_div_8_Template_div_okTriggered_0_listener() { i0.ɵɵrestoreView(_r9); const ctx_r10 = i0.ɵɵnextContext(); return ctx_r10.onOkClick(); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext();
    i0.ɵɵproperty("modalRef", ctx_r4.modalRef);
} }
const _c1$1 = function (a0) { return { "top-24": a0 }; };
const _c2 = function (a0) { return { "max-h-[calc(100vh-148px)] overflow-auto tds-custom-scroll": a0 }; };
class TDSModalContainerComponent extends BaseModalContainerComponent {
    constructor(elementRef, focusTrapFactory, cdr, render, overlayRef, tdsConfigService, config, document, animationType) {
        super(elementRef, focusTrapFactory, cdr, render, overlayRef, tdsConfigService, config, document, animationType);
        this.config = config;
    }
    get width() {
        let result = 520;
        if (TDSHelperObject.hasValue(this.config)) {
            if (TDSHelperObject.hasValue(this.config.size)) {
                switch (this.config.size) {
                    case "sm":
                        result = 300;
                        break;
                    case "md":
                        result = 500;
                        break;
                    case "lg":
                        result = 800;
                        break;
                    case "xl":
                        result = 1140;
                        break;
                    default:
                        result = 500;
                        break;
                }
                return result;
            }
            else {
                return this.config?.width;
            }
        }
        return result;
    }
}
TDSModalContainerComponent.ɵfac = function TDSModalContainerComponent_Factory(t) { return new (t || TDSModalContainerComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.FocusTrapFactory), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i2.OverlayRef), i0.ɵɵdirectiveInject(i3.TDSConfigService), i0.ɵɵdirectiveInject(ModalOptions), i0.ɵɵdirectiveInject(DOCUMENT, 8), i0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };
TDSModalContainerComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSModalContainerComponent, selectors: [["tds-modal-container"]], viewQuery: function TDSModalContainerComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(CdkPortalOutlet, 7);
        i0.ɵɵviewQuery(_c0$4, 7);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.portalOutlet = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.modalElementRef = _t.first);
    } }, hostAttrs: ["tabindex", "-1", "role", "dialog"], hostVars: 12, hostBindings: function TDSModalContainerComponent_HostBindings(rf, ctx) { if (rf & 1) {
        i0.ɵɵsyntheticHostListener("@modalContainer.start", function TDSModalContainerComponent_animation_modalContainer_start_HostBindingHandler($event) { return ctx.onAnimationStart($event); })("@modalContainer.done", function TDSModalContainerComponent_animation_modalContainer_done_HostBindingHandler($event) { return ctx.onAnimationDone($event); });
        i0.ɵɵlistener("click", function TDSModalContainerComponent_click_HostBindingHandler($event) { return ctx.onContainerClick($event); })("mouseup", function TDSModalContainerComponent_mouseup_HostBindingHandler() { return ctx.onMouseup(); });
    } if (rf & 2) {
        i0.ɵɵsyntheticHostProperty("@.disabled", ctx.config.noAnimation)("@modalContainer", ctx.state);
        i0.ɵɵclassMap(ctx.config.wrapClassName ? "tds-modal-wrap fixed top-0 left-0 right-0 bottom-0 overflow-auto outline-none " + ctx.config.wrapClassName : "tds-modal-wrap fixed top-0 left-0 right-0 bottom-0 overflow-auto outline-none");
        i0.ɵɵstyleProp("z-index", ctx.config.zindex);
        i0.ɵɵclassProp("tds-modal-wrap-rtl", ctx.dir === "rtl")("tds-modal-centered", ctx.config.centered)("flex", ctx.config.centered);
    } }, exportAs: ["tdsModalContainer"], features: [i0.ɵɵInheritDefinitionFeature], decls: 9, vars: 18, consts: [["role", "document", 3, "ngClass", "ngStyle", "mousedown"], ["modalElement", ""], [1, "tds-modal-content", "pointer-events-auto"], ["class", "w-full p-3 pl-4 flex  flex-row-reverse items-center justify-between border-b  border-neutral-2-200 dark:border-d-neutral-2-200", 4, "ngIf"], [1, "tds-modal-body", "p-4", 3, "ngStyle", "ngClass"], ["cdkPortalOutlet", ""], [3, "innerHTML", 4, "ngIf"], ["tds-modal-footer", "", 3, "modalRef", "cancelTriggered", "okTriggered", 4, "ngIf"], [1, "w-full", "p-3", "pl-4", "flex", "flex-row-reverse", "items-center", "justify-between", "border-b", "border-neutral-2-200", "dark:border-d-neutral-2-200"], ["class", "justify-self-end pl-2", "tds-modal-close", "", 3, "click", 4, "ngIf"], ["tds-modal-title", "", 1, "flex-auto", "tds-modal-title"], ["tds-modal-close", "", 1, "justify-self-end", "pl-2", 3, "click"], [3, "innerHTML"], ["tds-modal-footer", "", 3, "modalRef", "cancelTriggered", "okTriggered"]], template: function TDSModalContainerComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 0, 1);
        i0.ɵɵlistener("mousedown", function TDSModalContainerComponent_Template_div_mousedown_0_listener() { return ctx.onMousedown(); });
        i0.ɵɵpipe(2, "tdsToCssUnit");
        i0.ɵɵelementStart(3, "div", 2);
        i0.ɵɵtemplate(4, TDSModalContainerComponent_div_4_Template, 3, 1, "div", 3);
        i0.ɵɵelementStart(5, "div", 4);
        i0.ɵɵtemplate(6, TDSModalContainerComponent_ng_template_6_Template, 0, 0, "ng-template", 5);
        i0.ɵɵtemplate(7, TDSModalContainerComponent_div_7_Template, 1, 1, "div", 6);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(8, TDSModalContainerComponent_div_8_Template, 1, 1, "div", 7);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        i0.ɵɵclassMapInterpolate1("tds-modal bg-white dark:bg-d-neutral-3-300 text-neutral-1-900 dark:text-d-neutral-1-900 rounded-md border-box pointer-events-none relative my-auto mx-auto ", ctx.config.className, "");
        i0.ɵɵstyleProp("width", i0.ɵɵpipeBind1(2, 12, ctx.width));
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(14, _c1$1, !ctx.config.centered))("ngStyle", ctx.config.style);
        i0.ɵɵadvance(4);
        i0.ɵɵproperty("ngIf", ctx.config.title);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngStyle", ctx.config.bodyStyle)("ngClass", i0.ɵɵpureFunction1(16, _c2, ctx.config.centered));
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.isStringContent);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx.config.footer !== null);
    } }, encapsulation: 2, data: { animation: [TDSModalAnimations.modalContainer] } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSModalContainerComponent, [{
        type: Component,
        args: [{
                selector: 'tds-modal-container',
                exportAs: 'tdsModalContainer',
                template: `
    <div
      #modalElement
      role="document"
      class="tds-modal bg-white dark:bg-d-neutral-3-300 text-neutral-1-900 dark:text-d-neutral-1-900 rounded-md border-box pointer-events-none relative my-auto mx-auto {{config.className!}}"
      (mousedown)="onMousedown()"
      [ngClass]="{'top-24':!config.centered}"
      [ngStyle]="config.style!"
      [style.width]="width! | tdsToCssUnit"
    >  
      <div class="tds-modal-content pointer-events-auto" >
        <div class="w-full p-3 pl-4 flex  flex-row-reverse items-center justify-between border-b  border-neutral-2-200 dark:border-d-neutral-2-200"  *ngIf="config.title">       
        <div class="justify-self-end pl-2" *ngIf="config.closable" tds-modal-close (click)="onCloseClick()"></div>
        <div class="flex-auto tds-modal-title"  tds-modal-title></div>
        
        </div>
        
        <div class="tds-modal-body p-4" [ngStyle]="config.bodyStyle!" [ngClass]="{'max-h-[calc(100vh-148px)] overflow-auto tds-custom-scroll':config.centered}">
          <ng-template cdkPortalOutlet></ng-template>
          <div *ngIf="isStringContent" [innerHTML]="config.content"></div>
         
        </div>
        
        <div
          *ngIf="config.footer !== null"
          tds-modal-footer
          [modalRef]="modalRef"
          (cancelTriggered)="onCloseClick()"
          (okTriggered)="onOkClick()"
        ></div>
      </div>
    </div>
  `,
                animations: [TDSModalAnimations.modalContainer],
                // Using OnPush for modal caused footer can not to detect changes. we can fix it when 8.x.
                changeDetection: ChangeDetectionStrategy.Default,
                host: {
                    tabindex: '-1',
                    role: 'dialog',
                    '[class]': 'config.wrapClassName ? "tds-modal-wrap fixed top-0 left-0 right-0 bottom-0 overflow-auto outline-none " + config.wrapClassName : "tds-modal-wrap fixed top-0 left-0 right-0 bottom-0 overflow-auto outline-none"',
                    '[class.tds-modal-wrap-rtl]': `dir === 'rtl'`,
                    '[class.tds-modal-centered]': 'config.centered',
                    '[class.flex]': 'config.centered',
                    '[style.zIndex]': 'config.zindex',
                    '[@.disabled]': 'config.noAnimation',
                    '[@modalContainer]': 'state',
                    '(@modalContainer.start)': 'onAnimationStart($event)',
                    '(@modalContainer.done)': 'onAnimationDone($event)',
                    '(click)': 'onContainerClick($event)',
                    '(mouseup)': 'onMouseup()'
                }
            }]
    }], function () { return [{ type: i0.ElementRef }, { type: i1.FocusTrapFactory }, { type: i0.ChangeDetectorRef }, { type: i0.Renderer2 }, { type: i2.OverlayRef }, { type: i3.TDSConfigService }, { type: ModalOptions }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [DOCUMENT]
            }] }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [ANIMATION_MODULE_TYPE]
            }] }]; }, { portalOutlet: [{
            type: ViewChild,
            args: [CdkPortalOutlet, { static: true }]
        }], modalElementRef: [{
            type: ViewChild,
            args: ['modalElement', { static: true }]
        }] }); })();

class TDSModalRef {
    constructor(overlayRef, config, containerInstance) {
        this.overlayRef = overlayRef;
        this.config = config;
        this.containerInstance = containerInstance;
        this.componentInstance = null;
        this.state = 0 /* OPEN */;
        this.afterClose = new Subject();
        this.afterOpen = new Subject();
        containerInstance.animationStateChanged
            .pipe(filter(event => event.phaseName === 'done' && event.toState === 'enter'), take(1))
            .subscribe(() => {
            this.afterOpen.next();
            this.afterOpen.complete();
            if (config.onAfterOpen instanceof EventEmitter) {
                config.onAfterOpen.emit();
            }
        });
        containerInstance.animationStateChanged
            .pipe(filter(event => event.phaseName === 'done' && event.toState === 'exit'), take(1))
            .subscribe(() => {
            clearTimeout(this.closeTimeout);
            this._finishDialogClose();
        });
        containerInstance.containerClick.pipe(take(1)).subscribe(() => {
            const cancelable = !this.config.cancelLoading && !this.config.okLoading;
            if (cancelable) {
                this.trigger("cancel" /* CANCEL */);
            }
        });
        overlayRef
            .keydownEvents()
            .pipe(filter(event => {
            return (this.config.keyboard &&
                !this.config.cancelLoading &&
                !this.config.okLoading &&
                event.keyCode === ESCAPE &&
                !hasModifierKey(event));
        }))
            .subscribe(event => {
            event.preventDefault();
            this.trigger("cancel" /* CANCEL */);
        });
        containerInstance.cancelTriggered.subscribe(() => this.trigger("cancel" /* CANCEL */));
        containerInstance.okTriggered.subscribe(() => this.trigger("ok" /* OK */));
        overlayRef.detachments().subscribe(() => {
            this.afterClose.next(this.result);
            this.afterClose.complete();
            if (config.onAfterClose instanceof EventEmitter) {
                config.onAfterClose.emit(this.result);
            }
            this.componentInstance = null;
            this.overlayRef.dispose();
        });
    }
    getContentComponent() {
        return this.componentInstance;
    }
    getElement() {
        return this.containerInstance.getNativeElement();
    }
    destroy(result) {
        this.close(result);
    }
    triggerOk() {
        return this.trigger("ok" /* OK */);
    }
    triggerCancel() {
        return this.trigger("cancel" /* CANCEL */);
    }
    close(result) {
        if (this.state !== 0 /* OPEN */) {
            return;
        }
        this.result = result;
        this.containerInstance.animationStateChanged
            .pipe(filter(event => event.phaseName === 'start'), take(1))
            .subscribe(event => {
            this.overlayRef.detachBackdrop();
            this.closeTimeout = setTimeout(() => {
                this._finishDialogClose();
            }, event.totalTime + 100);
        });
        this.containerInstance.startExitAnimation();
        this.state = 1 /* CLOSING */;
    }
    updateConfig(config) {
        Object.assign(this.config, config);
        this.containerInstance.bindBackdropStyle();
        this.containerInstance.cdr.markForCheck();
    }
    getState() {
        return this.state;
    }
    getConfig() {
        return this.config;
    }
    getBackdropElement() {
        return this.overlayRef.backdropElement;
    }
    async trigger(action) {
        const trigger = { ok: this.config.onOk, cancel: this.config.onCancel }[action];
        const loadingKey = { ok: 'okLoading', cancel: 'cancelLoading' }[action];
        const loading = this.config[loadingKey];
        if (loading) {
            return;
        }
        if (trigger instanceof EventEmitter) {
            trigger.emit(this.getContentComponent());
        }
        else if (typeof trigger === 'function') {
            const result = trigger(this.getContentComponent());
            if (isPromise(result)) {
                this.config[loadingKey] = true;
                let doClose = false;
                try {
                    doClose = await result;
                }
                finally {
                    this.config[loadingKey] = false;
                    this.closeWhitResult(doClose);
                }
            }
            else {
                this.closeWhitResult(result);
            }
        }
    }
    closeWhitResult(result) {
        if (result !== false) {
            this.close(result);
        }
    }
    _finishDialogClose() {
        this.state = 2 /* CLOSED */;
        this.overlayRef.dispose();
    }
}

class TDSModalService {
    constructor(overlay, injector, parentModal, directionality) {
        this.overlay = overlay;
        this.injector = injector;
        this.parentModal = parentModal;
        this.directionality = directionality;
        this.openModalsAtThisLevel = [];
        this.afterAllClosedAtThisLevel = new Subject();
        this.afterAllClose = defer(() => this.openModals.length ? this._afterAllClosed : this._afterAllClosed.pipe(startWith(undefined)));
    }
    get openModals() {
        return this.parentModal ? this.parentModal.openModals : this.openModalsAtThisLevel;
    }
    get _afterAllClosed() {
        const parent = this.parentModal;
        return parent ? parent._afterAllClosed : this.afterAllClosedAtThisLevel;
    }
    create(config) {
        return this.open(config.content, config);
    }
    closeAll() {
        this.closeModals(this.openModals);
    }
    confirm(options = {}, confirmType = 'confirm') {
        if ('footer' in options) {
            console.warn(`The Confirm-Modal doesn't support "footer", this property will be ignored.`);
        }
        if (!('width' in options)) {
            options.width = 500;
        }
        if (!('autoClose' in options)) {
            options.autoClose = false;
        }
        options.confirmType = confirmType;
        options.modalType = 'confirm';
        options.className = `tds-modal-confirm tds-modal-confirm-${confirmType} ${options.className || ''}`;
        return this.create(options);
    }
    info(options = {}) {
        return this.confirmFactory(options, 'info');
    }
    success(options = {}) {
        return this.confirmFactory(options, 'success');
    }
    error(options = {}) {
        return this.confirmFactory(options, 'error');
    }
    warning(options = {}) {
        return this.confirmFactory(options, 'warning');
    }
    open(componentOrTemplateRef, config) {
        const configMerged = applyConfigDefaults(config || {}, new ModalOptions());
        const overlayRef = this.createOverlay(configMerged);
        const modalContainer = this.attachModalContainer(overlayRef, configMerged);
        const modalRef = this.attachModalContent(componentOrTemplateRef, modalContainer, overlayRef, configMerged);
        modalContainer.modalRef = modalRef;
        this.openModals.push(modalRef);
        modalRef.afterClose.subscribe(() => this.removeOpenModal(modalRef));
        return modalRef;
    }
    removeOpenModal(modalRef) {
        const index = this.openModals.indexOf(modalRef);
        if (index > -1) {
            this.openModals.splice(index, 1);
            if (!this.openModals.length) {
                this._afterAllClosed.next();
            }
        }
    }
    closeModals(dialogs) {
        let i = dialogs.length;
        while (i--) {
            dialogs[i].close();
            if (!this.openModals.length) {
                this._afterAllClosed.next();
            }
        }
    }
    createOverlay(config) {
        const globalConfig = {};
        const overlayConfig = new OverlayConfig({
            hasBackdrop: true,
            scrollStrategy: this.overlay.scrollStrategies.block(),
            positionStrategy: this.overlay.position().global(),
            disposeOnNavigation: getValueWithConfig(config.closeOnNavigation, globalConfig.closeOnNavigation, true),
            direction: getValueWithConfig(config.direction, globalConfig.direction, this.directionality.value)
        });
        if (getValueWithConfig(config.mask, globalConfig.mask, true)) {
            overlayConfig.backdropClass = MODAL_MASK_CLASS_NAME;
        }
        return this.overlay.create(overlayConfig);
    }
    attachModalContainer(overlayRef, config) {
        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;
        const injector = Injector.create({
            parent: userInjector || this.injector,
            providers: [
                { provide: OverlayRef, useValue: overlayRef },
                { provide: ModalOptions, useValue: config }
            ]
        });
        const ContainerComponent = config.modalType === 'confirm'
            ? // If the mode is `confirm`, use `TDSModalConfirmContainerComponent`
                TDSModalConfirmContainerComponent
            : // If the mode is not `confirm`, use `TDSModalContainerComponent`
                TDSModalContainerComponent;
        const containerPortal = new ComponentPortal(ContainerComponent, config.viewContainerRef, injector);
        const containerRef = overlayRef.attach(containerPortal);
        return containerRef.instance;
    }
    attachModalContent(componentOrTemplateRef, modalContainer, overlayRef, config) {
        const modalRef = new TDSModalRef(overlayRef, config, modalContainer);
        if (componentOrTemplateRef instanceof TemplateRef) {
            modalContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, null, { $implicit: config.componentParams, modalRef }));
        }
        else if (isNotNil(componentOrTemplateRef) && typeof componentOrTemplateRef !== 'string') {
            const injector = this.createInjector(modalRef, config);
            const contentRef = modalContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, config.viewContainerRef, injector));
            setContentInstanceParams(contentRef.instance, config.componentParams);
            modalRef.componentInstance = contentRef.instance;
        }
        else {
            modalContainer.attachStringContent();
        }
        return modalRef;
    }
    createInjector(modalRef, config) {
        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;
        return Injector.create({
            parent: userInjector || this.injector,
            providers: [{ provide: TDSModalRef, useValue: modalRef }]
        });
    }
    confirmFactory(options = {}, confirmType) {
        const iconMap = {
            info: ' tdsi-information-fill',
            success: 'tdsi-success-fill',
            error: 'tdsi-error-fill',
            warning: ' tdsi-warning-fill'
        };
        if (!('iconType' in options)) {
            options.iconType = iconMap[confirmType];
        }
        if (!('cancelText' in options)) {
            // Remove the Cancel button if the user not specify a Cancel button
            options.cancelText = null;
        }
        return this.confirm(options, confirmType);
    }
    ngOnDestroy() {
        this.closeModals(this.openModalsAtThisLevel);
        this.afterAllClosedAtThisLevel.complete();
    }
}
TDSModalService.ɵfac = function TDSModalService_Factory(t) { return new (t || TDSModalService)(i0.ɵɵinject(i2.Overlay), i0.ɵɵinject(i0.Injector), i0.ɵɵinject(TDSModalService, 12), i0.ɵɵinject(i2$2.Directionality, 8)); };
TDSModalService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: TDSModalService, factory: TDSModalService.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSModalService, [{
        type: Injectable
    }], function () { return [{ type: i2.Overlay }, { type: i0.Injector }, { type: TDSModalService, decorators: [{
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: i2$2.Directionality, decorators: [{
                type: Optional
            }] }]; }, null); })();

class TDSModalContentDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
TDSModalContentDirective.ɵfac = function TDSModalContentDirective_Factory(t) { return new (t || TDSModalContentDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef)); };
TDSModalContentDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: TDSModalContentDirective, selectors: [["", "tdsModalContent", ""]], exportAs: ["tdsModalContent"] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSModalContentDirective, [{
        type: Directive,
        args: [{
                selector: '[tdsModalContent]',
                exportAs: 'tdsModalContent'
            }]
    }], function () { return [{ type: i0.TemplateRef }]; }, null); })();

class TDSModalFooterDirective {
    constructor(modalRef, templateRef) {
        this.modalRef = modalRef;
        this.templateRef = templateRef;
        if (this.modalRef) {
            this.modalRef.updateConfig({
                footer: this.templateRef
            });
        }
    }
}
TDSModalFooterDirective.ɵfac = function TDSModalFooterDirective_Factory(t) { return new (t || TDSModalFooterDirective)(i0.ɵɵdirectiveInject(TDSModalRef, 8), i0.ɵɵdirectiveInject(i0.TemplateRef)); };
TDSModalFooterDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: TDSModalFooterDirective, selectors: [["", "tdsModalFooter", ""]], exportAs: ["tdsModalFooter"] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSModalFooterDirective, [{
        type: Directive,
        args: [{
                selector: '[tdsModalFooter]',
                exportAs: 'tdsModalFooter'
            }]
    }], function () { return [{ type: TDSModalRef, decorators: [{
                type: Optional
            }] }, { type: i0.TemplateRef }]; }, null); })();

class TDSModalTitleDirective {
    constructor(modalRef, templateRef) {
        this.modalRef = modalRef;
        this.templateRef = templateRef;
        if (this.modalRef) {
            this.modalRef.updateConfig({
                title: this.templateRef
            });
        }
    }
}
TDSModalTitleDirective.ɵfac = function TDSModalTitleDirective_Factory(t) { return new (t || TDSModalTitleDirective)(i0.ɵɵdirectiveInject(TDSModalRef, 8), i0.ɵɵdirectiveInject(i0.TemplateRef)); };
TDSModalTitleDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: TDSModalTitleDirective, selectors: [["", "tdsModalTitle", ""]], exportAs: ["tdsModalTitle"] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSModalTitleDirective, [{
        type: Directive,
        args: [{
                selector: '[tdsModalTitle]',
                exportAs: 'tdsModalTitle'
            }]
    }], function () { return [{ type: TDSModalRef, decorators: [{
                type: Optional
            }] }, { type: i0.TemplateRef }]; }, null); })();

function TDSModalComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵprojection(0);
} }
const _c0$3 = ["*"];
class TDSModalComponent {
    constructor(cdr, modal, viewContainerRef) {
        this.cdr = cdr;
        this.modal = modal;
        this.viewContainerRef = viewContainerRef;
        this.visible = false;
        this.closable = true;
        this.okLoading = false;
        this.okDisabled = false;
        this.cancelDisabled = false;
        this.cancelLoading = false;
        this.keyboard = true;
        this.noAnimation = false;
        this.centered = false;
        this.size = "md";
        this.zindex = 60;
        this.closeIcon = 'close';
        this.okType = 'primary';
        this.okDanger = false;
        this.iconType = 'question-circle'; // Confirm Modal ONLY
        this.modalType = 'default';
        this.autofocus = 'auto';
        // TODO(@hsuanxyz) Input will not be supported
        this.onOk = new EventEmitter();
        // TODO(@hsuanxyz) Input will not be supported
        this.onCancel = new EventEmitter();
        this.onAfterOpen = new EventEmitter();
        this.onAfterClose = new EventEmitter();
        this.visibleChange = new EventEmitter();
        this.modalRef = null;
        this.destroy$ = new Subject();
    }
    set modalTitle(value) {
        if (value) {
            this.setTitleWithTemplate(value);
        }
    }
    set modalFooter(value) {
        if (value) {
            this.setFooterWithTemplate(value);
        }
    }
    get width() {
        let result = 500;
        switch (this.size) {
            case "sm":
                result = 300;
                break;
            case "md":
                result = 500;
                break;
            case "lg":
                result = 800;
                break;
            case "xl":
                result = 1140;
                break;
            default:
                result = 500;
                break;
        }
        return result;
    }
    get afterOpen() {
        // Observable alias for afterOpen
        return this.onAfterOpen.asObservable();
    }
    get afterClose() {
        // Observable alias for afterClose
        return this.onAfterClose.asObservable();
    }
    open() {
        if (!this.visible) {
            this.visible = true;
            this.visibleChange.emit(true);
        }
        if (!this.modalRef) {
            const config = this.getConfig();
            this.modalRef = this.modal.create(config);
            // When the modal is implicitly closed (e.g. closeAll) the visible needs to be set to the correct value and emit.
            this.modalRef.afterClose
                .asObservable()
                .pipe(takeUntil(this.destroy$))
                .subscribe(() => {
                this.close();
            });
        }
    }
    close(result) {
        if (this.visible) {
            this.visible = false;
            this.visibleChange.emit(false);
        }
        if (this.modalRef) {
            this.modalRef.close(result);
            this.modalRef = null;
        }
    }
    destroy(result) {
        this.close(result);
    }
    triggerOk() {
        this.modalRef?.triggerOk();
    }
    triggerCancel() {
        this.modalRef?.triggerCancel();
    }
    getContentComponent() {
        return this.modalRef?.getContentComponent();
    }
    getElement() {
        return this.modalRef?.getElement();
    }
    getModalRef() {
        return this.modalRef;
    }
    setTitleWithTemplate(templateRef) {
        this.title = templateRef;
        if (this.modalRef) {
            // If modalRef already created, set the title in next tick
            Promise.resolve().then(() => {
                this.modalRef.updateConfig({
                    title: this.title
                });
            });
        }
    }
    setFooterWithTemplate(templateRef) {
        this.footer = templateRef;
        if (this.modalRef) {
            // If modalRef already created, set the footer in next tick
            Promise.resolve().then(() => {
                this.modalRef.updateConfig({
                    footer: this.footer
                });
            });
        }
        this.cdr.markForCheck();
    }
    getConfig() {
        const componentConfig = getConfigFromComponent(this);
        componentConfig.viewContainerRef = this.viewContainerRef;
        componentConfig.content = this.content || this.contentFromContentChild;
        return componentConfig;
    }
    ngOnChanges(changes) {
        const { visible, ...otherChanges } = changes;
        if (Object.keys(otherChanges).length && this.modalRef) {
            this.modalRef.updateConfig(getConfigFromComponent(this));
        }
        if (visible) {
            if (this.visible) {
                this.open();
            }
            else {
                this.close();
            }
        }
    }
    ngOnDestroy() {
        this.modalRef?._finishDialogClose();
        this.destroy$.next();
        this.destroy$.complete();
    }
}
TDSModalComponent.ɵfac = function TDSModalComponent_Factory(t) { return new (t || TDSModalComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(TDSModalService), i0.ɵɵdirectiveInject(i0.ViewContainerRef)); };
TDSModalComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSModalComponent, selectors: [["tds-modal"]], contentQueries: function TDSModalComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        i0.ɵɵcontentQuery(dirIndex, TDSModalTitleDirective, 7, TemplateRef);
        i0.ɵɵcontentQuery(dirIndex, TDSModalContentDirective, 7, TemplateRef);
        i0.ɵɵcontentQuery(dirIndex, TDSModalFooterDirective, 7, TemplateRef);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.modalTitle = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.contentFromContentChild = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.modalFooter = _t.first);
    } }, viewQuery: function TDSModalComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(TemplateRef, 7);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.contentTemplateRef = _t.first);
    } }, inputs: { mask: "mask", autoClose: "autoClose", closeOnNavigation: "closeOnNavigation", visible: "visible", closable: "closable", okLoading: "okLoading", okDisabled: "okDisabled", cancelDisabled: "cancelDisabled", cancelLoading: "cancelLoading", keyboard: "keyboard", noAnimation: "noAnimation", centered: "centered", size: "size", content: "content", componentParams: "componentParams", footer: "footer", zindex: "zindex", wrapClassName: "wrapClassName", className: "className", style: "style", title: "title", closeIcon: "closeIcon", maskStyle: "maskStyle", bodyStyle: "bodyStyle", okText: "okText", cancelText: "cancelText", okType: "okType", okDanger: "okDanger", iconType: "iconType", modalType: "modalType", autofocus: "autofocus", onOk: "onOk", onCancel: "onCancel" }, outputs: { onOk: "onOk", onCancel: "onCancel", onAfterOpen: "onAfterOpen", onAfterClose: "onAfterClose", visibleChange: "visibleChange" }, exportAs: ["tdsModal"], features: [i0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0$3, decls: 1, vars: 0, template: function TDSModalComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵtemplate(0, TDSModalComponent_ng_template_0_Template, 1, 0, "ng-template");
    } }, encapsulation: 2, changeDetection: 0 });
__decorate([
    InputBoolean()
], TDSModalComponent.prototype, "mask", void 0);
__decorate([
    InputBoolean()
], TDSModalComponent.prototype, "autoClose", void 0);
__decorate([
    InputBoolean()
], TDSModalComponent.prototype, "closeOnNavigation", void 0);
__decorate([
    InputBoolean()
], TDSModalComponent.prototype, "visible", void 0);
__decorate([
    InputBoolean()
], TDSModalComponent.prototype, "closable", void 0);
__decorate([
    InputBoolean()
], TDSModalComponent.prototype, "okLoading", void 0);
__decorate([
    InputBoolean()
], TDSModalComponent.prototype, "okDisabled", void 0);
__decorate([
    InputBoolean()
], TDSModalComponent.prototype, "cancelDisabled", void 0);
__decorate([
    InputBoolean()
], TDSModalComponent.prototype, "cancelLoading", void 0);
__decorate([
    InputBoolean()
], TDSModalComponent.prototype, "keyboard", void 0);
__decorate([
    InputBoolean()
], TDSModalComponent.prototype, "noAnimation", void 0);
__decorate([
    InputBoolean()
], TDSModalComponent.prototype, "centered", void 0);
__decorate([
    InputBoolean()
], TDSModalComponent.prototype, "okDanger", void 0);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSModalComponent, [{
        type: Component,
        args: [{
                selector: 'tds-modal',
                exportAs: 'tdsModal',
                template: `
    <ng-template>
      <ng-content></ng-content>
    </ng-template>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: i0.ChangeDetectorRef }, { type: TDSModalService }, { type: i0.ViewContainerRef }]; }, { mask: [{
            type: Input
        }], autoClose: [{
            type: Input
        }], closeOnNavigation: [{
            type: Input
        }], visible: [{
            type: Input
        }], closable: [{
            type: Input
        }], okLoading: [{
            type: Input
        }], okDisabled: [{
            type: Input
        }], cancelDisabled: [{
            type: Input
        }], cancelLoading: [{
            type: Input
        }], keyboard: [{
            type: Input
        }], noAnimation: [{
            type: Input
        }], centered: [{
            type: Input
        }], size: [{
            type: Input
        }], content: [{
            type: Input
        }], componentParams: [{
            type: Input
        }], footer: [{
            type: Input
        }], zindex: [{
            type: Input
        }], wrapClassName: [{
            type: Input
        }], className: [{
            type: Input
        }], style: [{
            type: Input
        }], title: [{
            type: Input
        }], closeIcon: [{
            type: Input
        }], maskStyle: [{
            type: Input
        }], bodyStyle: [{
            type: Input
        }], okText: [{
            type: Input
        }], cancelText: [{
            type: Input
        }], okType: [{
            type: Input
        }], okDanger: [{
            type: Input
        }], iconType: [{
            type: Input
        }], modalType: [{
            type: Input
        }], autofocus: [{
            type: Input
        }], onOk: [{
            type: Input
        }, {
            type: Output
        }], onCancel: [{
            type: Input
        }, {
            type: Output
        }], onAfterOpen: [{
            type: Output
        }], onAfterClose: [{
            type: Output
        }], visibleChange: [{
            type: Output
        }], contentTemplateRef: [{
            type: ViewChild,
            args: [TemplateRef, { static: true }]
        }], modalTitle: [{
            type: ContentChild,
            args: [TDSModalTitleDirective, { static: true, read: TemplateRef }]
        }], contentFromContentChild: [{
            type: ContentChild,
            args: [TDSModalContentDirective, { static: true, read: TemplateRef }]
        }], modalFooter: [{
            type: ContentChild,
            args: [TDSModalFooterDirective, { static: true, read: TemplateRef }]
        }] }); })();

const _c0$2 = ["tds-modal-close", ""];
function TdsModalCloseComponent_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelement(1, "button", 2);
    i0.ɵɵelementContainerEnd();
} }
class TdsModalCloseComponent {
    constructor(config) {
        this.config = config;
    }
}
TdsModalCloseComponent.ɵfac = function TdsModalCloseComponent_Factory(t) { return new (t || TdsModalCloseComponent)(i0.ɵɵdirectiveInject(ModalOptions)); };
TdsModalCloseComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TdsModalCloseComponent, selectors: [["div", "tds-modal-close", ""]], hostAttrs: ["aria-label", "Close", 1, "tds-modal-close"], exportAs: ["tdsModalCloseBuiltin"], attrs: _c0$2, decls: 2, vars: 1, consts: [[1, "tds-modal-close-x", "flex"], [4, "tdsStringTemplateOutlet"], ["tds-button-close", ""]], template: function TdsModalCloseComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 0);
        i0.ɵɵtemplate(1, TdsModalCloseComponent_ng_container_1_Template, 2, 0, "ng-container", 1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("tdsStringTemplateOutlet", ctx.config.closeIcon);
    } }, directives: [i2$1.TDSStringTemplateOutletDirective, i8.TDSButtonCloseComponent], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TdsModalCloseComponent, [{
        type: Component,
        args: [{
                selector: 'div[tds-modal-close]',
                exportAs: 'tdsModalCloseBuiltin',
                template: `
    <span class="tds-modal-close-x flex">
      <ng-container *tdsStringTemplateOutlet="config.closeIcon; let closeIcon">
       <button tds-button-close></button>
      </ng-container>
    </span>
  `,
                host: {
                    class: 'tds-modal-close',
                    'aria-label': 'Close'
                },
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: ModalOptions }]; }, null); })();

const _c0$1 = ["tds-modal-footer", ""];
function TDSModalFooterComponent_ng_container_0_ng_container_1_div_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "div", 5);
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext(3);
    i0.ɵɵproperty("innerHTML", ctx_r4.config.footer, i0.ɵɵsanitizeHtml);
} }
function TDSModalFooterComponent_ng_container_0_ng_container_1_ng_container_2_button_2_Template(rf, ctx) { if (rf & 1) {
    const _r9 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 8);
    i0.ɵɵlistener("click", function TDSModalFooterComponent_ng_container_0_ng_container_1_ng_container_2_button_2_Template_button_click_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r9); const button_r7 = restoredCtx.$implicit; const ctx_r8 = i0.ɵɵnextContext(4); return ctx_r8.onButtonClick(button_r7); });
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const button_r7 = ctx.$implicit;
    const ctx_r6 = i0.ɵɵnextContext(4);
    i0.ɵɵproperty("hidden", !ctx_r6.getButtonCallableProp(button_r7, "show"))("loading", ctx_r6.getButtonCallableProp(button_r7, "loading"))("disabled", ctx_r6.getButtonCallableProp(button_r7, "disabled"))("size", button_r7.size);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" ", button_r7.label, " ");
} }
function TDSModalFooterComponent_ng_container_0_ng_container_1_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "div", 6);
    i0.ɵɵtemplate(2, TDSModalFooterComponent_ng_container_0_ng_container_1_ng_container_2_button_2_Template, 2, 5, "button", 7);
    i0.ɵɵelementEnd();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r5 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngForOf", ctx_r5.buttons);
} }
function TDSModalFooterComponent_ng_container_0_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtemplate(1, TDSModalFooterComponent_ng_container_0_ng_container_1_div_1_Template, 1, 1, "div", 3);
    i0.ɵɵtemplate(2, TDSModalFooterComponent_ng_container_0_ng_container_1_ng_container_2_Template, 3, 1, "ng-container", 4);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", !ctx_r3.buttonsFooter);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r3.buttonsFooter);
} }
const _c1 = function (a0, a1) { return { $implicit: a0, modalRef: a1 }; };
function TDSModalFooterComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtemplate(1, TDSModalFooterComponent_ng_container_0_ng_container_1_Template, 3, 2, "ng-container", 2);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("tdsStringTemplateOutlet", ctx_r0.config.footer)("tdsStringTemplateOutletContext", i0.ɵɵpureFunction2(2, _c1, ctx_r0.config.componentParams, ctx_r0.modalRef));
} }
function TDSModalFooterComponent_ng_template_1_button_1_Template(rf, ctx) { if (rf & 1) {
    const _r13 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 11);
    i0.ɵɵlistener("click", function TDSModalFooterComponent_ng_template_1_button_1_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r13); const ctx_r12 = i0.ɵɵnextContext(2); return ctx_r12.onCancel(); });
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r10 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("disabled", ctx_r10.config.cancelDisabled);
    i0.ɵɵattribute("cdkFocusInitial", ctx_r10.config.autofocus === "cancel" || null);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" ", ctx_r10.config.cancelText || ctx_r10.locale.cancelText, " ");
} }
function TDSModalFooterComponent_ng_template_1_button_2_Template(rf, ctx) { if (rf & 1) {
    const _r15 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 12);
    i0.ɵɵlistener("click", function TDSModalFooterComponent_ng_template_1_button_2_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r15); const ctx_r14 = i0.ɵɵnextContext(2); return ctx_r14.onOk(); });
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r11 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("disabled", ctx_r11.config.okDisabled);
    i0.ɵɵattribute("cdkFocusInitial", ctx_r11.config.autofocus === "ok" || null);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" ", ctx_r11.config.okText || ctx_r11.locale.okText, " ");
} }
function TDSModalFooterComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 6);
    i0.ɵɵtemplate(1, TDSModalFooterComponent_ng_template_1_button_1_Template, 2, 3, "button", 9);
    i0.ɵɵtemplate(2, TDSModalFooterComponent_ng_template_1_button_2_Template, 2, 3, "button", 10);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r2.config.cancelText !== null);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r2.config.okText !== null);
} }
class TDSModalFooterComponent {
    constructor(config) {
        this.config = config;
        this.buttonsFooter = false;
        this.buttons = [];
        this.cancelTriggered = new EventEmitter();
        this.okTriggered = new EventEmitter();
        this.destroy$ = new Subject();
        this.locale = {
            okText: "Lưu",
            cancelText: "Hủy",
        };
        if (Array.isArray(config.footer)) {
            this.buttonsFooter = true;
            this.buttons = config.footer.map(mergeDefaultOption);
        }
    }
    onCancel() {
        this.cancelTriggered.emit();
    }
    onOk() {
        this.okTriggered.emit();
    }
    /**
     * Returns the value of the specified key.
     * If it is a function, run and return the return value of the function.
     */
    getButtonCallableProp(options, prop) {
        const value = options[prop];
        const componentInstance = this.modalRef.getContentComponent();
        return typeof value === 'function' ? value.apply(options, componentInstance && [componentInstance]) : value;
    }
    /**
     * Run function based on the type and set its `loading` prop if needed.
     */
    onButtonClick(options) {
        const loading = this.getButtonCallableProp(options, 'loading');
        if (!loading) {
            const result = this.getButtonCallableProp(options, 'onClick');
            if (options.autoLoading && isPromise(result)) {
                options.loading = true;
                result.then(() => (options.loading = false)).catch(() => (options.loading = false));
            }
        }
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
}
TDSModalFooterComponent.ɵfac = function TDSModalFooterComponent_Factory(t) { return new (t || TDSModalFooterComponent)(i0.ɵɵdirectiveInject(ModalOptions)); };
TDSModalFooterComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSModalFooterComponent, selectors: [["div", "tds-modal-footer", ""]], hostAttrs: [1, "tds-modal-footer"], inputs: { modalRef: "modalRef" }, outputs: { cancelTriggered: "cancelTriggered", okTriggered: "okTriggered" }, exportAs: ["tdsModalFooterBuiltin"], attrs: _c0$1, decls: 3, vars: 2, consts: [[4, "ngIf", "ngIfElse"], ["defaultFooterButtons", ""], [4, "tdsStringTemplateOutlet", "tdsStringTemplateOutletContext"], [3, "innerHTML", 4, "ngIf"], [4, "ngIf"], [3, "innerHTML"], [1, "w-full", "flex", "justify-end", "p-4"], ["class", "ml-2 min-w-[100px]", "tds-button", "", 3, "hidden", "loading", "disabled", "size", "click", 4, "ngFor", "ngForOf"], ["tds-button", "", 1, "ml-2", "min-w-[100px]", 3, "hidden", "loading", "disabled", "size", "click"], ["class", "ml-2", "tds-button", "", "class", "min-w-[100px]", "color", "secondary", 3, "disabled", "click", 4, "ngIf"], ["tds-button", "", "class", "ml-2 min-w-[100px]", 3, "disabled", "click", 4, "ngIf"], ["tds-button", "", "color", "secondary", 1, "min-w-[100px]", 3, "disabled", "click"], ["tds-button", "", 1, "ml-2", "min-w-[100px]", 3, "disabled", "click"]], template: function TDSModalFooterComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtemplate(0, TDSModalFooterComponent_ng_container_0_Template, 2, 5, "ng-container", 0);
        i0.ɵɵtemplate(1, TDSModalFooterComponent_ng_template_1_Template, 3, 2, "ng-template", null, 1, i0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r1 = i0.ɵɵreference(2);
        i0.ɵɵproperty("ngIf", ctx.config.footer)("ngIfElse", _r1);
    } }, directives: [i5.NgIf, i2$1.TDSStringTemplateOutletDirective, i5.NgForOf, i8.TDSButtonComponent], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSModalFooterComponent, [{
        type: Component,
        args: [{
                selector: 'div[tds-modal-footer]',
                exportAs: 'tdsModalFooterBuiltin',
                template: `
    <ng-container *ngIf="config.footer; else defaultFooterButtons">
      <ng-container *tdsStringTemplateOutlet="config.footer; context: { $implicit: config.componentParams, modalRef: modalRef }">
        <div *ngIf="!buttonsFooter" [innerHTML]="config.footer"></div>
        <ng-container *ngIf="buttonsFooter">
        <div class="w-full flex justify-end p-4">
        <button
        class="ml-2 min-w-[100px]"
            *ngFor="let button of buttons"
            tds-button
            (click)="onButtonClick(button)"
            [hidden]="!getButtonCallableProp(button, 'show')"
            [loading]="getButtonCallableProp(button, 'loading')"
            [disabled]="getButtonCallableProp(button, 'disabled')"          
            [size]="button.size!"
          >
            {{ button.label }}
          </button>
        </div>
          
        </ng-container>
      </ng-container>
    </ng-container>
    <ng-template #defaultFooterButtons>
     <div class="w-full flex justify-end p-4">
     <button
     class="ml-2"
     *ngIf="config.cancelText !== null"
     [attr.cdkFocusInitial]="config.autofocus === 'cancel' || null"
     tds-button
     class="min-w-[100px]"
     color="secondary"
     (click)="onCancel()"      
     [disabled]="config.cancelDisabled!"
   >
     {{ config.cancelText || locale.cancelText }}
   </button>
   <button
     *ngIf="config.okText !== null"
     [attr.cdkFocusInitial]="config.autofocus === 'ok' || null"
     tds-button   
     (click)="onOk()"        
     [disabled]="config.okDisabled!"
     class="ml-2 min-w-[100px]"
   >
     {{ config.okText || locale.okText }} 
       </button>
     </div>
    </ng-template>
  `,
                host: {
                    class: 'tds-modal-footer'
                },
                changeDetection: ChangeDetectionStrategy.Default
            }]
    }], function () { return [{ type: ModalOptions }]; }, { cancelTriggered: [{
            type: Output
        }], okTriggered: [{
            type: Output
        }], modalRef: [{
            type: Input
        }] }); })();
function mergeDefaultOption(options) {
    return {
        type: null,
        size: 'md',
        autoLoading: true,
        show: true,
        loading: false,
        disabled: false,
        color: 'secondary',
        ...options
    };
}

const _c0 = ["tds-modal-title", ""];
function TDSModalTitleComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelement(1, "div", 1);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("innerHTML", ctx_r0.config.title, i0.ɵɵsanitizeHtml);
} }
class TDSModalTitleComponent {
    constructor(config) {
        this.config = config;
    }
}
TDSModalTitleComponent.ɵfac = function TDSModalTitleComponent_Factory(t) { return new (t || TDSModalTitleComponent)(i0.ɵɵdirectiveInject(ModalOptions)); };
TDSModalTitleComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSModalTitleComponent, selectors: [["div", "tds-modal-title", ""]], hostAttrs: [1, "tds-modal-header"], exportAs: ["tdsModalTitleBuiltin"], attrs: _c0, decls: 1, vars: 1, consts: [[4, "tdsStringTemplateOutlet"], [1, "text-title-1", "text-neutral-1-900", "dark:text-d-neutral-1-900", "font-semibold", "break-words", 3, "innerHTML"]], template: function TDSModalTitleComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtemplate(0, TDSModalTitleComponent_ng_container_0_Template, 2, 1, "ng-container", 0);
    } if (rf & 2) {
        i0.ɵɵproperty("tdsStringTemplateOutlet", ctx.config.title);
    } }, directives: [i2$1.TDSStringTemplateOutletDirective], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSModalTitleComponent, [{
        type: Component,
        args: [{
                selector: 'div[tds-modal-title]',
                exportAs: 'tdsModalTitleBuiltin',
                template: `
    <ng-container *tdsStringTemplateOutlet="config.title">
        <div [innerHTML]="config.title" class="text-title-1 text-neutral-1-900 dark:text-d-neutral-1-900 font-semibold break-words"></div>
      </ng-container>
  `,
                host: {
                    class: 'tds-modal-header'
                },
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: ModalOptions }]; }, null); })();

class TDSModalModule {
}
TDSModalModule.ɵfac = function TDSModalModule_Factory(t) { return new (t || TDSModalModule)(); };
TDSModalModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: TDSModalModule });
TDSModalModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [TDSModalService], imports: [[
            CommonModule,
            BidiModule,
            OverlayModule,
            TDSOutletModule,
            PortalModule,
            TDSPipesModule,
            TDSButtonModule
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSModalModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    BidiModule,
                    OverlayModule,
                    TDSOutletModule,
                    PortalModule,
                    TDSPipesModule,
                    TDSButtonModule
                ],
                exports: [TDSModalComponent, TDSModalFooterDirective, TDSModalContentDirective, TDSModalTitleDirective],
                providers: [TDSModalService],
                declarations: [
                    TDSModalComponent,
                    TDSModalFooterDirective,
                    TDSModalContentDirective,
                    TdsModalCloseComponent,
                    TDSModalFooterComponent,
                    TDSModalTitleComponent,
                    TDSModalTitleDirective,
                    TDSModalContainerComponent,
                    TDSModalConfirmContainerComponent,
                    TDSModalComponent
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(TDSModalModule, { declarations: [TDSModalComponent,
        TDSModalFooterDirective,
        TDSModalContentDirective,
        TdsModalCloseComponent,
        TDSModalFooterComponent,
        TDSModalTitleComponent,
        TDSModalTitleDirective,
        TDSModalContainerComponent,
        TDSModalConfirmContainerComponent,
        TDSModalComponent], imports: [CommonModule,
        BidiModule,
        OverlayModule,
        TDSOutletModule,
        PortalModule,
        TDSPipesModule,
        TDSButtonModule], exports: [TDSModalComponent, TDSModalFooterDirective, TDSModalContentDirective, TDSModalTitleDirective] }); })();
i0.ɵɵsetComponentScope(TDSModalContainerComponent, [i5.NgClass, i5.NgStyle, i5.NgIf, TdsModalCloseComponent,
    TDSModalTitleComponent, i7.CdkPortalOutlet, TDSModalFooterComponent], [i9.TDSToCssUnitPipe]);

class TDSModalLegacyAPI {
}

/**
 * Generated bundle index. Do not edit.
 */

export { BaseModalContainerComponent, MODAL_MASK_CLASS_NAME, ModalOptions, TDSModalAnimations, TDSModalComponent, TDSModalConfirmContainerComponent, TDSModalContainerComponent, TDSModalContentDirective, TDSModalFooterComponent, TDSModalFooterDirective, TDSModalLegacyAPI, TDSModalModule, TDSModalRef, TDSModalService, TDSModalTitleComponent, TDSModalTitleDirective, TDS_CONFIG_MODULE_NAME$1 as TDS_CONFIG_MODULE_NAME, TDS_FADE_CLASS_NAME_MAP, TdsModalCloseComponent, ZOOM_CLASS_NAME_MAP, applyConfigDefaults, getConfigFromComponent, getValueWithConfig, noopFun, setContentInstanceParams, throwNzModalContentAlreadyAttachedError };
//# sourceMappingURL=tds-ui-modal.mjs.map
