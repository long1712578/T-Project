import { ENTER } from '@angular/cdk/keycodes';
import * as i1 from '@angular/common/http';
import { HttpRequest, HttpHeaders, HttpEventType, HttpResponse } from '@angular/common/http';
import * as i0 from '@angular/core';
import { Component, ViewEncapsulation, Optional, ViewChild, Input, ChangeDetectionStrategy, Inject, EventEmitter, Output, NgModule } from '@angular/core';
import { of, Observable, Subscription, Subject } from 'rxjs';
import { switchMap, map, filter, takeUntil } from 'rxjs/operators';
import { trigger, transition, style, animate } from '@angular/animations';
import * as i2 from '@angular/common';
import { DOCUMENT, CommonModule } from '@angular/common';
import * as i1$1 from '@angular/cdk/platform';
import { PlatformModule } from '@angular/cdk/platform';
import * as i3 from 'tds-ui/tooltip';
import { TDSToolTipModule } from 'tds-ui/tooltip';
import * as i4 from 'tds-ui/progress-spinner';
import { TDSSpinnerModule } from 'tds-ui/progress-spinner';
import * as i5 from 'tds-ui/progress';
import { TDSProgressModule } from 'tds-ui/progress';
import { __decorate } from 'tslib';
import { toBoolean, InputNumber, InputBoolean } from 'tds-ui/shared/utility';
import * as i1$2 from 'tds-ui/i18n';
import { TDSI18nModule } from 'tds-ui/i18n';
import * as i2$1 from '@angular/cdk/bidi';
import { BidiModule } from '@angular/cdk/bidi';
import { FormsModule } from '@angular/forms';
import { TDSButtonModule } from 'tds-ui/button';

const _c0$2 = ["file"];
const _c1$2 = ["tds-upload-btn", ""];
const _c2$2 = ["*"];
class TDSUploadBtnComponent {
    constructor(http, elementRef) {
        this.http = http;
        this.elementRef = elementRef;
        this.reqs = {};
        this.destroy = false;
        // TODO: move to host after View Engine deprecation
        this.elementRef.nativeElement.classList.add('tds-upload');
        if (!http) {
            throw new Error(`Not found 'HttpClient', You can import 'HttpClientModule' in your root module.`);
        }
    }
    onClick() {
        if (this.options.disabled || !this.options.openFileDialogOnClick) {
            return;
        }
        this.file.nativeElement.click();
    }
    onKeyDown(e) {
        if (this.options.disabled) {
            return;
        }
        if (e.key === 'Enter' || e.keyCode === ENTER) {
            this.onClick();
        }
    }
    // skip safari bug
    onFileDrop(e) {
        if (this.options.disabled || e.type === 'dragover') {
            e.preventDefault();
            return;
        }
        if (this.options.directory) {
            this.traverseFileTree(e.dataTransfer.items);
        }
        else {
            const files = Array.prototype.slice
                .call(e.dataTransfer.files)
                .filter((file) => this.attrAccept(file, this.options.accept));
            if (files.length) {
                this.uploadFiles(files);
            }
        }
        e.preventDefault();
    }
    onChange(e) {
        if (this.options.disabled) {
            return;
        }
        const hie = e.target;
        this.uploadFiles(hie.files);
        hie.value = '';
    }
    traverseFileTree(files) {
        const _traverseFileTree = (item, path) => {
            if (item.isFile) {
                item.file((file) => {
                    if (this.attrAccept(file, this.options.accept)) {
                        this.uploadFiles([file]);
                    }
                });
            }
            else if (item.isDirectory) {
                const dirReader = item.createReader();
                dirReader.readEntries((entries) => {
                    for (const entrieItem of entries) {
                        _traverseFileTree(entrieItem, `${path}${item.name}/`);
                    }
                });
            }
        };
        for (const file of files) {
            _traverseFileTree(file.webkitGetAsEntry(), '');
        }
    }
    attrAccept(file, acceptedFiles) {
        if (file && acceptedFiles) {
            const acceptedFilesArray = Array.isArray(acceptedFiles) ? acceptedFiles : acceptedFiles.split(',');
            const fileName = `${file.name}`;
            const mimeType = `${file.type}`;
            const baseMimeType = mimeType.replace(/\/.*$/, '');
            return acceptedFilesArray.some(type => {
                const validType = type.trim();
                if (validType.charAt(0) === '.') {
                    return (fileName
                        .toLowerCase()
                        .indexOf(validType.toLowerCase(), fileName.toLowerCase().length - validType.toLowerCase().length) !== -1);
                }
                else if (/\/\*$/.test(validType)) {
                    // This is something like a image/* mime type
                    return baseMimeType === validType.replace(/\/.*$/, '');
                }
                return mimeType === validType;
            });
        }
        return true;
    }
    attachUid(file) {
        if (!file.uid) {
            file.uid = Math.random().toString(36).substring(2);
        }
        return file;
    }
    uploadFiles(fileList) {
        let filters$ = of(Array.prototype.slice.call(fileList));
        if (this.options.filters) {
            this.options.filters.forEach(f => {
                filters$ = filters$.pipe(switchMap(list => {
                    const fnRes = f.fn(list);
                    return fnRes instanceof Observable ? fnRes : of(fnRes);
                }));
            });
        }
        filters$.subscribe(list => {
            list.forEach((file) => {
                this.attachUid(file);
                this.upload(file, list);
            });
        }, e => {
            console.warn(`Unhandled upload filter error`, e);
        });
    }
    upload(file, fileList) {
        if (!this.options.onBeforeUpload) {
            return this.post(file);
        }
        const before = this.options.onBeforeUpload(file, fileList);
        if (before instanceof Observable) {
            before.subscribe((processedFile) => {
                const processedFileType = Object.prototype.toString.call(processedFile);
                if (processedFileType === '[object File]' || processedFileType === '[object Blob]') {
                    this.attachUid(processedFile);
                    this.post(processedFile);
                }
                else if (typeof processedFile === 'boolean' && processedFile !== false) {
                    this.post(file);
                }
            }, e => {
                console.warn(`Unhandled upload onBeforeUpload error`, e);
            });
        }
        else if (before !== false) {
            return this.post(file);
        }
    }
    post(file) {
        if (this.destroy) {
            return;
        }
        let process$ = of(file);
        const opt = this.options;
        const { uid } = file;
        const { action, data, headers, transformFile } = opt;
        const args = {
            action: typeof action === 'string' ? action : '',
            name: opt.name,
            headers,
            file,
            postFile: file,
            data,
            withCredentials: opt.withCredentials,
            onProgress: opt.onProgress
                ? e => {
                    opt.onProgress(e, file);
                }
                : undefined,
            onSuccess: (ret, xhr) => {
                this.clean(uid);
                opt.onSuccess(ret, file, xhr);
            },
            onError: xhr => {
                this.clean(uid);
                opt.onError(xhr, file);
            }
        };
        if (typeof action === 'function') {
            const actionResult = action(file);
            if (actionResult instanceof Observable) {
                process$ = process$.pipe(switchMap(() => actionResult), map(res => {
                    args.action = res;
                    return file;
                }));
            }
            else {
                args.action = actionResult;
            }
        }
        if (typeof transformFile === 'function') {
            const transformResult = transformFile(file);
            process$ = process$.pipe(switchMap(() => (transformResult instanceof Observable ? transformResult : of(transformResult))));
        }
        if (typeof data === 'function') {
            const dataResult = data(file);
            if (dataResult instanceof Observable) {
                process$ = process$.pipe(switchMap(() => dataResult), map(res => {
                    args.data = res;
                    return file;
                }));
            }
            else {
                args.data = dataResult;
            }
        }
        if (typeof headers === 'function') {
            const headersResult = headers(file);
            if (headersResult instanceof Observable) {
                process$ = process$.pipe(switchMap(() => headersResult), map(res => {
                    args.headers = res;
                    return file;
                }));
            }
            else {
                args.headers = headersResult;
            }
        }
        process$.subscribe(newFile => {
            args.postFile = newFile;
            const req$ = (opt.customRequest || this.xhr).call(this, args);
            if (!(req$ instanceof Subscription)) {
                console.warn(`Must return Subscription type in '[customRequest]' property`);
            }
            this.reqs[uid] = req$;
            opt.onStart(file);
        });
    }
    xhr(args) {
        const formData = new FormData();
        if (args.data) {
            Object.keys(args.data).map(key => {
                formData.append(key, args.data[key]);
            });
        }
        formData.append(args.name, args.postFile);
        if (!args.headers) {
            args.headers = {};
        }
        if (args.headers['X-Requested-With'] !== null) {
            args.headers['X-Requested-With'] = `XMLHttpRequest`;
        }
        else {
            delete args.headers['X-Requested-With'];
        }
        const req = new HttpRequest('POST', args.action, formData, {
            reportProgress: true,
            withCredentials: args.withCredentials,
            headers: new HttpHeaders(args.headers)
        });
        return this.http.request(req).subscribe((event) => {
            if (event.type === HttpEventType.UploadProgress) {
                if (event.total > 0) {
                    event.percent = (event.loaded / event.total) * 100;
                }
                args.onProgress(event, args.file);
            }
            else if (event instanceof HttpResponse) {
                args.onSuccess(event.body, args.file, event);
            }
        }, err => {
            this.abort(args.file);
            args.onError(err, args.file);
        });
    }
    clean(uid) {
        const req$ = this.reqs[uid];
        if (req$ instanceof Subscription) {
            req$.unsubscribe();
        }
        delete this.reqs[uid];
    }
    abort(file) {
        if (file) {
            this.clean(file && file.uid);
        }
        else {
            Object.keys(this.reqs).forEach(uid => this.clean(uid));
        }
    }
    ngOnDestroy() {
        this.destroy = true;
        this.abort();
    }
}
TDSUploadBtnComponent.ɵfac = function TDSUploadBtnComponent_Factory(t) { return new (t || TDSUploadBtnComponent)(i0.ɵɵdirectiveInject(i1.HttpClient, 8), i0.ɵɵdirectiveInject(i0.ElementRef)); };
TDSUploadBtnComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSUploadBtnComponent, selectors: [["", "tds-upload-btn", ""]], viewQuery: function TDSUploadBtnComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0$2, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.file = _t.first);
    } }, hostVars: 4, hostBindings: function TDSUploadBtnComponent_HostBindings(rf, ctx) { if (rf & 1) {
        i0.ɵɵlistener("click", function TDSUploadBtnComponent_click_HostBindingHandler() { return ctx.onClick(); })("keydown", function TDSUploadBtnComponent_keydown_HostBindingHandler($event) { return ctx.onKeyDown($event); })("drop", function TDSUploadBtnComponent_drop_HostBindingHandler($event) { return ctx.onFileDrop($event); })("dragover", function TDSUploadBtnComponent_dragover_HostBindingHandler($event) { return ctx.onFileDrop($event); });
    } if (rf & 2) {
        i0.ɵɵattribute("tabindex", "0")("role", "button");
        i0.ɵɵclassProp("tds-upload-disabled", ctx.options.disabled);
    } }, inputs: { options: "options" }, exportAs: ["tdsUploadBtn"], attrs: _c1$2, ngContentSelectors: _c2$2, decls: 3, vars: 4, consts: [["type", "file", 2, "display", "none", 3, "multiple", "change"], ["file", ""]], template: function TDSUploadBtnComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵelementStart(0, "input", 0, 1);
        i0.ɵɵlistener("change", function TDSUploadBtnComponent_Template_input_change_0_listener($event) { return ctx.onChange($event); });
        i0.ɵɵelementEnd();
        i0.ɵɵprojection(2);
    } if (rf & 2) {
        i0.ɵɵproperty("multiple", ctx.options.multiple);
        i0.ɵɵattribute("accept", ctx.options.accept)("directory", ctx.options.directory ? "directory" : null)("webkitdirectory", ctx.options.directory ? "webkitdirectory" : null);
    } }, encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSUploadBtnComponent, [{
        type: Component,
        args: [{ selector: '[tds-upload-btn]', exportAs: 'tdsUploadBtn', host: {
                    '[attr.tabindex]': '"0"',
                    '[attr.role]': '"button"',
                    '[class.tds-upload-disabled]': 'options.disabled',
                    '(click)': 'onClick()',
                    '(keydown)': 'onKeyDown($event)',
                    '(drop)': 'onFileDrop($event)',
                    '(dragover)': 'onFileDrop($event)'
                }, preserveWhitespaces: false, encapsulation: ViewEncapsulation.None, template: "<input\r\n  type=\"file\"\r\n  #file\r\n  (change)=\"onChange($event)\"\r\n  [attr.accept]=\"options.accept\"\r\n  [attr.directory]=\"options.directory ? 'directory' : null\"\r\n  [attr.webkitdirectory]=\"options.directory ? 'webkitdirectory' : null\"\r\n  [multiple]=\"options.multiple\"\r\n  style=\"display: none\"\r\n/>\r\n<ng-content></ng-content>\r\n" }]
    }], function () { return [{ type: i1.HttpClient, decorators: [{
                type: Optional
            }] }, { type: i0.ElementRef }]; }, { file: [{
            type: ViewChild,
            args: ['file', { static: false }]
        }], options: [{
            type: Input
        }] }); })();

function TDSUploadListComponent_div_0_ng_template_2_div_1_ng_template_1_Template(rf, ctx) { }
const _c0$1 = function (a0) { return { $implicit: a0 }; };
function TDSUploadListComponent_div_0_ng_template_2_div_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 19);
    i0.ɵɵtemplate(1, TDSUploadListComponent_div_0_ng_template_2_div_1_ng_template_1_Template, 0, 0, "ng-template", 20);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const file_r1 = i0.ɵɵnextContext(2).$implicit;
    const _r4 = i0.ɵɵreference(5);
    i0.ɵɵclassProp("tds-upload-list-item-file", !file_r1.isUploading);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngTemplateOutlet", _r4)("ngTemplateOutletContext", i0.ɵɵpureFunction1(4, _c0$1, file_r1));
} }
const _c1$1 = function (a0) { return { "h-28 w-28": a0 }; };
function TDSUploadListComponent_div_0_ng_template_2_a_2_img_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "img", 23);
} if (rf & 2) {
    const file_r1 = i0.ɵɵnextContext(3).$implicit;
    const ctx_r25 = i0.ɵɵnextContext();
    i0.ɵɵproperty("src", file_r1.thumbUrl || file_r1.url, i0.ɵɵsanitizeUrl)("ngClass", i0.ɵɵpureFunction1(3, _c1$1, ctx_r25.isPictureCard));
    i0.ɵɵattribute("alt", file_r1.name);
} }
const _c2$1 = function (a0, a1) { return { "w-12 h-12 mr-2": a0, "h-28 w-28": a1 }; };
function TDSUploadListComponent_div_0_ng_template_2_a_2_Template(rf, ctx) { if (rf & 1) {
    const _r29 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "a", 21);
    i0.ɵɵlistener("click", function TDSUploadListComponent_div_0_ng_template_2_a_2_Template_a_click_0_listener($event) { i0.ɵɵrestoreView(_r29); const file_r1 = i0.ɵɵnextContext(2).$implicit; const ctx_r27 = i0.ɵɵnextContext(); return ctx_r27.handlePreview(file_r1, $event); });
    i0.ɵɵtemplate(1, TDSUploadListComponent_div_0_ng_template_2_a_2_img_1_Template, 1, 5, "img", 22);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    i0.ɵɵnextContext();
    const _r21 = i0.ɵɵreference(5);
    const file_r1 = i0.ɵɵnextContext().$implicit;
    const ctx_r19 = i0.ɵɵnextContext();
    i0.ɵɵclassProp("tds-upload-list-item-file", !file_r1.isImageUrl);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction2(6, _c2$1, !ctx_r19.isPictureCard, ctx_r19.isPictureCard))("href", file_r1.url || file_r1.thumbUrl, i0.ɵɵsanitizeUrl);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", file_r1.isImageUrl)("ngIfElse", _r21);
} }
function TDSUploadListComponent_div_0_ng_template_2_div_3_ng_template_1_Template(rf, ctx) { }
function TDSUploadListComponent_div_0_ng_template_2_div_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 24);
    i0.ɵɵtemplate(1, TDSUploadListComponent_div_0_ng_template_2_div_3_ng_template_1_Template, 0, 0, "ng-template", 20);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const file_r1 = i0.ɵɵnextContext(2).$implicit;
    const _r4 = i0.ɵɵreference(5);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngTemplateOutlet", _r4)("ngTemplateOutletContext", i0.ɵɵpureFunction1(2, _c0$1, file_r1));
} }
function TDSUploadListComponent_div_0_ng_template_2_ng_template_4_ng_template_0_Template(rf, ctx) { }
function TDSUploadListComponent_div_0_ng_template_2_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, TDSUploadListComponent_div_0_ng_template_2_ng_template_4_ng_template_0_Template, 0, 0, "ng-template", 20);
} if (rf & 2) {
    const file_r1 = i0.ɵɵnextContext(2).$implicit;
    const _r4 = i0.ɵɵreference(5);
    i0.ɵɵproperty("ngTemplateOutlet", _r4)("ngTemplateOutletContext", i0.ɵɵpureFunction1(2, _c0$1, file_r1));
} }
function TDSUploadListComponent_div_0_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0, 14);
    i0.ɵɵtemplate(1, TDSUploadListComponent_div_0_ng_template_2_div_1_Template, 2, 6, "div", 15);
    i0.ɵɵtemplate(2, TDSUploadListComponent_div_0_ng_template_2_a_2_Template, 2, 9, "a", 16);
    i0.ɵɵtemplate(3, TDSUploadListComponent_div_0_ng_template_2_div_3_Template, 2, 4, "div", 17);
    i0.ɵɵelementContainerEnd();
    i0.ɵɵtemplate(4, TDSUploadListComponent_div_0_ng_template_2_ng_template_4_Template, 1, 4, "ng-template", null, 18, i0.ɵɵtemplateRefExtractor);
} if (rf & 2) {
    const file_r1 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵproperty("ngSwitch", file_r1.iconType);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngSwitchCase", "uploading");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngSwitchCase", "thumbnail");
} }
function TDSUploadListComponent_div_0_ng_template_4_ng_container_0_ng_container_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function TDSUploadListComponent_div_0_ng_template_4_ng_container_0_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtemplate(1, TDSUploadListComponent_div_0_ng_template_4_ng_container_0_ng_container_2_ng_container_1_Template, 1, 0, "ng-container", 25);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const file_r36 = i0.ɵɵnextContext(2).$implicit;
    const _r40 = i0.ɵɵreference(4);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", file_r36.isUploading)("ngIfElse", _r40);
} }
function TDSUploadListComponent_div_0_ng_template_4_ng_container_0_ng_container_3_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r47 = i0.ɵɵnextContext(5);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" ", ctx_r47.locale.uploading, " ");
} }
function TDSUploadListComponent_div_0_ng_template_4_ng_container_0_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtemplate(1, TDSUploadListComponent_div_0_ng_template_4_ng_container_0_ng_container_3_ng_container_1_Template, 2, 1, "ng-container", 25);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const file_r36 = i0.ɵɵnextContext(2).$implicit;
    const _r40 = i0.ɵɵreference(4);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", file_r36.isUploading)("ngIfElse", _r40);
} }
function TDSUploadListComponent_div_0_ng_template_4_ng_container_0_ng_container_4_i_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "i", 32);
} }
function TDSUploadListComponent_div_0_ng_template_4_ng_container_0_ng_container_4_tds_spinner_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "tds-spinner", 33);
} }
function TDSUploadListComponent_div_0_ng_template_4_ng_container_0_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtemplate(1, TDSUploadListComponent_div_0_ng_template_4_ng_container_0_ng_container_4_i_1_Template, 1, 0, "i", 30);
    i0.ɵɵtemplate(2, TDSUploadListComponent_div_0_ng_template_4_ng_container_0_ng_container_4_tds_spinner_2_Template, 1, 0, "tds-spinner", 31);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const file_r36 = i0.ɵɵnextContext(2).$implicit;
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", !file_r36.isUploading);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", file_r36.isUploading);
} }
function TDSUploadListComponent_div_0_ng_template_4_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0)(1, 14);
    i0.ɵɵtemplate(2, TDSUploadListComponent_div_0_ng_template_4_ng_container_0_ng_container_2_Template, 2, 2, "ng-container", 28);
    i0.ɵɵtemplate(3, TDSUploadListComponent_div_0_ng_template_4_ng_container_0_ng_container_3_Template, 2, 2, "ng-container", 28);
    i0.ɵɵtemplate(4, TDSUploadListComponent_div_0_ng_template_4_ng_container_0_ng_container_4_Template, 3, 2, "ng-container", 29);
    i0.ɵɵelementContainerEnd()();
} if (rf & 2) {
    const ctx_r37 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngSwitch", ctx_r37.listType);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngSwitchCase", "picture");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngSwitchCase", "picture-card");
} }
function TDSUploadListComponent_div_0_ng_template_4_ng_template_1_Template(rf, ctx) { }
function TDSUploadListComponent_div_0_ng_template_4_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "span", 34);
} }
function TDSUploadListComponent_div_0_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, TDSUploadListComponent_div_0_ng_template_4_ng_container_0_Template, 5, 3, "ng-container", 25);
    i0.ɵɵtemplate(1, TDSUploadListComponent_div_0_ng_template_4_ng_template_1_Template, 0, 0, "ng-template", 20, 26, i0.ɵɵtemplateRefExtractor);
    i0.ɵɵtemplate(3, TDSUploadListComponent_div_0_ng_template_4_ng_template_3_Template, 1, 0, "ng-template", null, 27, i0.ɵɵtemplateRefExtractor);
} if (rf & 2) {
    const file_r36 = ctx.$implicit;
    const _r38 = i0.ɵɵreference(2);
    const ctx_r5 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("ngIf", !ctx_r5.iconRender)("ngIfElse", _r38);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r5.iconRender)("ngTemplateOutletContext", i0.ɵɵpureFunction1(4, _c0$1, file_r36));
} }
const _c3$1 = function (a0, a1) { return { "text-white": a0, "text-neutral-1-500 dark:text-d-neutral-1-500": a1 }; };
function TDSUploadListComponent_div_0_ng_template_6_button_0_Template(rf, ctx) { if (rf & 1) {
    const _r55 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 36);
    i0.ɵɵlistener("click", function TDSUploadListComponent_div_0_ng_template_6_button_0_Template_button_click_0_listener($event) { i0.ɵɵrestoreView(_r55); const file_r1 = i0.ɵɵnextContext(2).$implicit; const ctx_r53 = i0.ɵɵnextContext(); return ctx_r53.handleRemove(file_r1, $event); });
    i0.ɵɵelementStart(1, "span", 37);
    i0.ɵɵelement(2, "i", 38);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r52 = i0.ɵɵnextContext(3);
    i0.ɵɵattribute("title", ctx_r52.locale.removeFile);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction2(2, _c3$1, ctx_r52.isPictureCard, !ctx_r52.isPictureCard));
} }
function TDSUploadListComponent_div_0_ng_template_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, TDSUploadListComponent_div_0_ng_template_6_button_0_Template, 3, 5, "button", 35);
} if (rf & 2) {
    const ctx_r7 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("ngIf", ctx_r7.icons.showRemoveIcon);
} }
function TDSUploadListComponent_div_0_ng_template_8_button_0_Template(rf, ctx) { if (rf & 1) {
    const _r59 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 40);
    i0.ɵɵlistener("click", function TDSUploadListComponent_div_0_ng_template_8_button_0_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r59); const file_r1 = i0.ɵɵnextContext(2).$implicit; const ctx_r57 = i0.ɵɵnextContext(); return ctx_r57.handleDownload(file_r1); });
    i0.ɵɵelementStart(1, "span", 37);
    i0.ɵɵelement(2, "i", 41);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r56 = i0.ɵɵnextContext(3);
    i0.ɵɵattribute("title", ctx_r56.locale.downloadFile);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction2(2, _c3$1, ctx_r56.isPictureCard, !ctx_r56.isPictureCard));
} }
function TDSUploadListComponent_div_0_ng_template_8_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, TDSUploadListComponent_div_0_ng_template_8_button_0_Template, 3, 5, "button", 39);
} if (rf & 2) {
    const file_r1 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵproperty("ngIf", file_r1.showDownload);
} }
function TDSUploadListComponent_div_0_ng_template_10_span_0_ng_template_1_Template(rf, ctx) { }
function TDSUploadListComponent_div_0_ng_template_10_span_0_ng_template_2_Template(rf, ctx) { }
function TDSUploadListComponent_div_0_ng_template_10_span_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtemplate(1, TDSUploadListComponent_div_0_ng_template_10_span_0_ng_template_1_Template, 0, 0, "ng-template", 11);
    i0.ɵɵtemplate(2, TDSUploadListComponent_div_0_ng_template_10_span_0_ng_template_2_Template, 0, 0, "ng-template", 11);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    i0.ɵɵnextContext(2);
    const _r8 = i0.ɵɵreference(9);
    const _r6 = i0.ɵɵreference(7);
    const ctx_r61 = i0.ɵɵnextContext();
    i0.ɵɵclassMapInterpolate1("tds-upload-list-item-card-actions ", ctx_r61.listType === "picture" ? "picture" : "", " flex");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngTemplateOutlet", _r8);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngTemplateOutlet", _r6);
} }
function TDSUploadListComponent_div_0_ng_template_10_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, TDSUploadListComponent_div_0_ng_template_10_span_0_Template, 3, 5, "span", 42);
} if (rf & 2) {
    const ctx_r11 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("ngIf", ctx_r11.listType !== "picture-card");
} }
const _c4$1 = function (a0) { return { "hidden": a0 }; };
function TDSUploadListComponent_div_0_ng_template_12_a_0_Template(rf, ctx) { if (rf & 1) {
    const _r69 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "a", 45);
    i0.ɵɵlistener("click", function TDSUploadListComponent_div_0_ng_template_12_a_0_Template_a_click_0_listener($event) { i0.ɵɵrestoreView(_r69); const file_r1 = i0.ɵɵnextContext(2).$implicit; const ctx_r67 = i0.ɵɵnextContext(); return ctx_r67.handlePreview(file_r1, $event); });
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const file_r1 = i0.ɵɵnextContext(2).$implicit;
    const ctx_r64 = i0.ɵɵnextContext();
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(5, _c4$1, ctx_r64.isPictureCard && file_r1.status !== "error"))("href", file_r1.url, i0.ɵɵsanitizeUrl);
    i0.ɵɵattribute("title", file_r1.name)("download", file_r1.linkProps && file_r1.linkProps.download);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" ", file_r1.name, " ");
} }
function TDSUploadListComponent_div_0_ng_template_12_span_1_Template(rf, ctx) { if (rf & 1) {
    const _r73 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "span", 46);
    i0.ɵɵlistener("click", function TDSUploadListComponent_div_0_ng_template_12_span_1_Template_span_click_0_listener($event) { i0.ɵɵrestoreView(_r73); const file_r1 = i0.ɵɵnextContext(2).$implicit; const ctx_r71 = i0.ɵɵnextContext(); return ctx_r71.handlePreview(file_r1, $event); });
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const file_r1 = i0.ɵɵnextContext(2).$implicit;
    const ctx_r65 = i0.ɵɵnextContext();
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(3, _c4$1, ctx_r65.isPictureCard && (file_r1.isUploading || file_r1.iconType == "thumbnail")));
    i0.ɵɵattribute("title", file_r1.name);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" ", file_r1.name, " ");
} }
function TDSUploadListComponent_div_0_ng_template_12_ng_template_2_Template(rf, ctx) { }
function TDSUploadListComponent_div_0_ng_template_12_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, TDSUploadListComponent_div_0_ng_template_12_a_0_Template, 2, 7, "a", 43);
    i0.ɵɵtemplate(1, TDSUploadListComponent_div_0_ng_template_12_span_1_Template, 2, 5, "span", 44);
    i0.ɵɵtemplate(2, TDSUploadListComponent_div_0_ng_template_12_ng_template_2_Template, 0, 0, "ng-template", 11);
} if (rf & 2) {
    const file_r1 = i0.ɵɵnextContext().$implicit;
    const _r10 = i0.ɵɵreference(11);
    i0.ɵɵproperty("ngIf", file_r1.url);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", !file_r1.url);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngTemplateOutlet", _r10);
} }
function TDSUploadListComponent_div_0_ng_template_16_Template(rf, ctx) { }
function TDSUploadListComponent_div_0_ng_template_17_Template(rf, ctx) { }
const _c5 = function () { return { opacity: 0.5, "pointer-events": "none" }; };
function TDSUploadListComponent_div_0_span_18_a_1_Template(rf, ctx) { if (rf & 1) {
    const _r81 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "a", 50);
    i0.ɵɵlistener("click", function TDSUploadListComponent_div_0_span_18_a_1_Template_a_click_0_listener($event) { i0.ɵɵrestoreView(_r81); const file_r1 = i0.ɵɵnextContext(2).$implicit; const ctx_r79 = i0.ɵɵnextContext(); return ctx_r79.handlePreview(file_r1, $event); });
    i0.ɵɵelement(1, "i", 51);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const file_r1 = i0.ɵɵnextContext(2).$implicit;
    const ctx_r76 = i0.ɵɵnextContext();
    i0.ɵɵproperty("href", file_r1.url || file_r1.thumbUrl, i0.ɵɵsanitizeUrl)("ngStyle", !(file_r1.url || file_r1.thumbUrl) ? i0.ɵɵpureFunction0(3, _c5) : null);
    i0.ɵɵattribute("title", ctx_r76.locale.previewFile);
} }
function TDSUploadListComponent_div_0_span_18_ng_container_2_ng_template_1_Template(rf, ctx) { }
function TDSUploadListComponent_div_0_span_18_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtemplate(1, TDSUploadListComponent_div_0_span_18_ng_container_2_ng_template_1_Template, 0, 0, "ng-template", 11);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    i0.ɵɵnextContext(2);
    const _r8 = i0.ɵɵreference(9);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngTemplateOutlet", _r8);
} }
function TDSUploadListComponent_div_0_span_18_ng_template_3_Template(rf, ctx) { }
function TDSUploadListComponent_div_0_span_18_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 47);
    i0.ɵɵtemplate(1, TDSUploadListComponent_div_0_span_18_a_1_Template, 2, 4, "a", 48);
    i0.ɵɵtemplate(2, TDSUploadListComponent_div_0_span_18_ng_container_2_Template, 2, 1, "ng-container", 49);
    i0.ɵɵtemplate(3, TDSUploadListComponent_div_0_span_18_ng_template_3_Template, 0, 0, "ng-template", 11);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const file_r1 = i0.ɵɵnextContext().$implicit;
    const _r6 = i0.ɵɵreference(7);
    const ctx_r16 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r16.icons.showPreviewIcon);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", file_r1.status === "done");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngTemplateOutlet", _r6);
} }
const _c6 = function (a0) { return { "mt-6": a0 }; };
function TDSUploadListComponent_div_0_div_19_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 52);
    i0.ɵɵelement(1, "tds-progress", 53);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const file_r1 = i0.ɵɵnextContext().$implicit;
    const ctx_r17 = i0.ɵɵnextContext();
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(4, _c6, ctx_r17.isPictureCard));
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("percent", file_r1.percent)("showInfo", false)("strokeWidth", 2);
} }
const _c7 = function (a0, a1) { return { "h-28 w-28  mr-2.5 flex justify-center items-center relative group ": a0, "border-dashed border-neutral-2-200 dark:border-d-neutral-2-200 border rounded": a1 }; };
const _c8 = function (a0, a1, a2) { return { "bg-neutral-3-50 rounded dark:bg-d-neutral-3-200": a0, "w-full h-full flex justify-center items-center relative": a1, "border-error-300 border rounded": a2 }; };
const _c9 = function (a0, a1) { return { "h-full p-1": a0, "text-center": a1 }; };
const _c10 = function (a0) { return { "flex items-center": a0 }; };
function TDSUploadListComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 1)(1, "div", 2);
    i0.ɵɵtemplate(2, TDSUploadListComponent_div_0_ng_template_2_Template, 6, 3, "ng-template", null, 3, i0.ɵɵtemplateRefExtractor);
    i0.ɵɵtemplate(4, TDSUploadListComponent_div_0_ng_template_4_Template, 5, 6, "ng-template", null, 4, i0.ɵɵtemplateRefExtractor);
    i0.ɵɵtemplate(6, TDSUploadListComponent_div_0_ng_template_6_Template, 1, 1, "ng-template", null, 5, i0.ɵɵtemplateRefExtractor);
    i0.ɵɵtemplate(8, TDSUploadListComponent_div_0_ng_template_8_Template, 1, 1, "ng-template", null, 6, i0.ɵɵtemplateRefExtractor);
    i0.ɵɵtemplate(10, TDSUploadListComponent_div_0_ng_template_10_Template, 1, 1, "ng-template", null, 7, i0.ɵɵtemplateRefExtractor);
    i0.ɵɵtemplate(12, TDSUploadListComponent_div_0_ng_template_12_Template, 3, 3, "ng-template", null, 8, i0.ɵɵtemplateRefExtractor);
    i0.ɵɵelementStart(14, "div", 9)(15, "span", 10);
    i0.ɵɵtemplate(16, TDSUploadListComponent_div_0_ng_template_16_Template, 0, 0, "ng-template", 11);
    i0.ɵɵtemplate(17, TDSUploadListComponent_div_0_ng_template_17_Template, 0, 0, "ng-template", 11);
    i0.ɵɵelementEnd()();
    i0.ɵɵtemplate(18, TDSUploadListComponent_div_0_span_18_Template, 4, 3, "span", 12);
    i0.ɵɵtemplate(19, TDSUploadListComponent_div_0_div_19_Template, 2, 6, "div", 13);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const file_r1 = ctx.$implicit;
    const _r2 = i0.ɵɵreference(3);
    const _r12 = i0.ɵɵreference(13);
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵclassMapInterpolate1("tds-upload-list-", ctx_r0.listType, "-container mt-2.5");
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction2(19, _c7, ctx_r0.isPictureCard, file_r1.status == "uploading" && ctx_r0.isPictureCard));
    i0.ɵɵadvance(1);
    i0.ɵɵclassMapInterpolate3("tds-upload-list-item relative tds-upload-list-item-", file_r1.status, " text-", file_r1.status != "done" ? file_r1.status : "success", "-500 tds-upload-list-item-list-type-", ctx_r0.listType, "  ");
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction3(22, _c8, !ctx_r0.isPictureCard, ctx_r0.isPictureCard && file_r1.status !== "uploading", file_r1.status == "error" && ctx_r0.isPictureCard))("@itemState", undefined)("tooltipTitle", file_r1.status === "error" ? file_r1.message : null);
    i0.ɵɵattribute("data-key", file_r1.key);
    i0.ɵɵadvance(13);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction2(26, _c9, !ctx_r0.isPictureCard, ctx_r0.isPictureCard));
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(29, _c10, !ctx_r0.isPictureCard));
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngTemplateOutlet", _r2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngTemplateOutlet", _r12);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r0.listType === "picture-card" && !file_r1.isUploading);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", file_r1.isUploading);
} }
const isImageFileType = (type) => !!type && type.indexOf('image/') === 0;
const MEASURE_SIZE = 200;
class TDSUploadListComponent {
    // #endregion
    constructor(cdr, doc, ngZone, platform, elementRef) {
        this.cdr = cdr;
        this.doc = doc;
        this.ngZone = ngZone;
        this.platform = platform;
        this.elementRef = elementRef;
        this.list = [];
        this.locale = {};
        this.iconRender = null;
        this.dir = 'ltr';
        // TODO: move to host after View Engine deprecation
        this.elementRef.nativeElement.classList.add('tds-upload-list');
    }
    get showPic() {
        return this.listType === 'picture' || this.listType === 'picture-card';
    }
    set items(list) {
        this.list = list;
    }
    genErr(file) {
        if (file.response && typeof file.response === 'string') {
            return file.response;
        }
        return (file.error && file.error.statusText) || this.locale.uploadError;
    }
    extname(url) {
        const temp = url.split('/');
        const filename = temp[temp.length - 1];
        const filenameWithoutSuffix = filename.split(/#|\?/)[0];
        return (/\.[^./\\]*$/.exec(filenameWithoutSuffix) || [''])[0];
    }
    isImageUrl(file) {
        if (isImageFileType(file.type)) {
            return true;
        }
        const url = (file.thumbUrl || file.url || '');
        if (!url) {
            return false;
        }
        const extension = this.extname(url);
        if (/^data:image\//.test(url) || /(webp|svg|png|gif|jpg|jpeg|jfif|bmp|dpg)$/i.test(extension)) {
            return true;
        }
        else if (/^data:/.test(url)) {
            // other file types of base64
            return false;
        }
        else if (extension) {
            // other file types which have extension
            return false;
        }
        return true;
    }
    getIconType(file) {
        if (!this.showPic) {
            return '';
        }
        if (file.isUploading || (!file.thumbUrl && !file.url)) {
            return 'uploading';
        }
        else {
            return 'thumbnail';
        }
    }
    previewImage(file) {
        return new Promise(resolve => {
            if (!isImageFileType(file.type) || !this.platform.isBrowser) {
                resolve('');
                return;
            }
            this.ngZone.runOutsideAngular(() => {
                const canvas = this.doc.createElement('canvas');
                canvas.width = MEASURE_SIZE;
                canvas.height = MEASURE_SIZE;
                canvas.style.cssText = `position: fixed; left: 0; top: 0; width: ${MEASURE_SIZE}px; height: ${MEASURE_SIZE}px; z-index: 9999; display: none;`;
                this.doc.body.appendChild(canvas);
                const ctx = canvas.getContext('2d');
                const img = new Image();
                img.onload = () => {
                    const { width, height } = img;
                    let drawWidth = MEASURE_SIZE;
                    let drawHeight = MEASURE_SIZE;
                    let offsetX = 0;
                    let offsetY = 0;
                    if (width < height) {
                        drawHeight = height * (MEASURE_SIZE / width);
                        offsetY = -(drawHeight - drawWidth) / 2;
                    }
                    else {
                        drawWidth = width * (MEASURE_SIZE / height);
                        offsetX = -(drawWidth - drawHeight) / 2;
                    }
                    try {
                        ctx.drawImage(img, offsetX, offsetY, drawWidth, drawHeight);
                    }
                    catch { }
                    const dataURL = canvas.toDataURL();
                    this.doc.body.removeChild(canvas);
                    resolve(dataURL);
                };
                img.src = window.URL.createObjectURL(file);
            });
        });
    }
    genThumb() {
        if (!this.platform.isBrowser) {
            return;
        }
        const win = window;
        if (!this.showPic ||
            typeof document === 'undefined' ||
            typeof win === 'undefined' ||
            !win.FileReader ||
            !win.File) {
            return;
        }
        this.list
            .filter(file => file.originFileObj instanceof File && file.thumbUrl === undefined)
            .forEach(file => {
            file.thumbUrl = '';
            (this.previewFile ? this.previewFile(file).toPromise() : this.previewImage(file.originFileObj)).then(dataUrl => {
                file.thumbUrl = dataUrl;
                this.detectChanges();
            });
        });
    }
    showDownload(file) {
        return !!(this.icons.showDownloadIcon && file.status === 'done');
    }
    fixData() {
        this.list.forEach(file => {
            file.isUploading = file.status === 'uploading';
            file.message = this.genErr(file);
            file.linkProps = typeof file.linkProps === 'string' ? JSON.parse(file.linkProps) : file.linkProps;
            file.isImageUrl = this.previewIsImage ? this.previewIsImage(file) : this.isImageUrl(file);
            file.iconType = this.getIconType(file);
            file.showDownload = this.showDownload(file);
        });
    }
    handlePreview(file, e) {
        if (!this.onPreview) {
            return;
        }
        e.preventDefault();
        return this.onPreview(file);
    }
    handleRemove(file, e) {
        e.preventDefault();
        if (this.onRemove) {
            this.onRemove(file);
        }
        return;
    }
    handleDownload(file) {
        if (typeof this.onDownload === 'function') {
            this.onDownload(file);
        }
        else if (file.url) {
            window.open(file.url);
        }
    }
    get isPictureCard() {
        return this.listType === 'picture-card';
    }
    detectChanges() {
        this.fixData();
        this.cdr.detectChanges();
    }
    ngOnChanges() {
        this.fixData();
        this.genThumb();
    }
}
TDSUploadListComponent.ɵfac = function TDSUploadListComponent_Factory(t) { return new (t || TDSUploadListComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1$1.Platform), i0.ɵɵdirectiveInject(i0.ElementRef)); };
TDSUploadListComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSUploadListComponent, selectors: [["tds-upload-list"]], hostVars: 12, hostBindings: function TDSUploadListComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵclassProp("tds-upload-list-rtl", ctx.dir === "rtl")("tds-upload-list-text", ctx.listType === "text")("tds-upload-list-picture", ctx.listType === "picture")("tds-upload-list-picture-card", ctx.listType === "picture-card")("flex", ctx.listType === "picture-card")("flex-nowrap", ctx.listType === "picture-card");
    } }, inputs: { locale: "locale", listType: "listType", items: "items", icons: "icons", onPreview: "onPreview", onRemove: "onRemove", onDownload: "onDownload", previewFile: "previewFile", previewIsImage: "previewIsImage", iconRender: "iconRender", dir: "dir" }, exportAs: ["tdsUploadList"], features: [i0.ɵɵNgOnChangesFeature], decls: 1, vars: 1, consts: [[3, "class", "ngClass", 4, "ngFor", "ngForOf"], [3, "ngClass"], ["tds-tooltip", "", 3, "ngClass", "tooltipTitle"], ["icon", ""], ["iconNode", ""], ["removeIcon", ""], ["downloadIcon", ""], ["downloadOrDelete", ""], ["preview", ""], [1, "tds-upload-list-item-info", 3, "ngClass"], [1, "tds-upload-span", 3, "ngClass"], [3, "ngTemplateOutlet"], ["class", "tds-upload-list-item-actions hidden rounded  group-hover:flex absolute   justify-center inset-0 items-center bg-black bg-opacity-40", 4, "ngIf"], ["class", "tds-upload-list-item-progress", 3, "ngClass", 4, "ngIf"], [3, "ngSwitch"], ["class", "tds-upload-list-item-thumbnail", 3, "tds-upload-list-item-file", 4, "ngSwitchCase"], ["class", "tds-upload-list-item-thumbnail", "target", "_blank", "rel", "noopener noreferrer", 3, "ngClass", "tds-upload-list-item-file", "href", "click", 4, "ngSwitchCase"], ["class", "tds-upload-text-icon flex items-center", 4, "ngSwitchDefault"], ["noImageThumbTpl", ""], [1, "tds-upload-list-item-thumbnail"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], ["target", "_blank", "rel", "noopener noreferrer", 1, "tds-upload-list-item-thumbnail", 3, "ngClass", "href", "click"], ["class", "tds-upload-list-item-image rounded object-cover", 3, "src", "ngClass", 4, "ngIf", "ngIfElse"], [1, "tds-upload-list-item-image", "rounded", "object-cover", 3, "src", "ngClass"], [1, "tds-upload-text-icon", "flex", "items-center"], [4, "ngIf", "ngIfElse"], ["customIconRender", ""], ["iconNodeFileIcon", ""], [4, "ngSwitchCase"], [4, "ngSwitchDefault"], ["class", "tdsi-attached-file-fill  text-base leading-4 mr-2", 4, "ngIf"], ["class", "w-3 h-3  mr-2", 4, "ngIf"], [1, "tdsi-attached-file-fill", "text-base", "leading-4", "mr-2"], [1, "w-3", "h-3", "mr-2"], [1, "tdsi-warning-fill", "text-xl", "leading-5", "mb-6"], ["class", "tds-upload-list-item-card-actions-btn flex", 3, "click", 4, "ngIf"], [1, "tds-upload-list-item-card-actions-btn", "flex", 3, "click"], [1, "flex", "items-center"], [1, "tdsi-close-fill", "text-base", "leading-4", 3, "ngClass"], ["class", "tds-upload-list-item-card-actions-btn mr-2", 3, "click", 4, "ngIf"], [1, "tds-upload-list-item-card-actions-btn", "mr-2", 3, "click"], [1, "tdsi-download-fill", "text-base", "leading-4", 3, "ngClass"], [3, "class", 4, "ngIf"], ["target", "_blank", "rel", "noopener noreferrer", "class", "tds-upload-list-item-name flex-auto hidden", 3, "ngClass", "href", "click", 4, "ngIf"], ["class", "tds-upload-list-item-name text-body-2 font-regular flex-auto ", 3, "ngClass", "click", 4, "ngIf"], ["target", "_blank", "rel", "noopener noreferrer", 1, "tds-upload-list-item-name", "flex-auto", "hidden", 3, "ngClass", "href", "click"], [1, "tds-upload-list-item-name", "text-body-2", "font-regular", "flex-auto", 3, "ngClass", "click"], [1, "tds-upload-list-item-actions", "hidden", "rounded", "group-hover:flex", "absolute", "justify-center", "inset-0", "items-center", "bg-black", "bg-opacity-40"], ["class", "flex mr-2", "target", "_blank", "rel", "noopener noreferrer", 3, "href", "ngStyle", "click", 4, "ngIf"], [4, "ngIf"], ["target", "_blank", "rel", "noopener noreferrer", 1, "flex", "mr-2", 3, "href", "ngStyle", "click"], [1, "tdsi-eye-open-fill", "text-base", "leading-4", "text-white"], [1, "tds-upload-list-item-progress", 3, "ngClass"], ["type", "line", 3, "percent", "showInfo", "strokeWidth"]], template: function TDSUploadListComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtemplate(0, TDSUploadListComponent_div_0_Template, 20, 31, "div", 0);
    } if (rf & 2) {
        i0.ɵɵproperty("ngForOf", ctx.list);
    } }, directives: [i2.NgForOf, i2.NgClass, i3.TDSTooltipDirective, i2.NgSwitch, i2.NgSwitchCase, i2.NgTemplateOutlet, i2.NgIf, i2.NgSwitchDefault, i4.TDSProgressSpinnerComponent, i2.NgStyle, i5.TDSProgressComponent], encapsulation: 2, data: { animation: [
            trigger('itemState', [
                transition(':enter', [
                    style({ height: '0', width: '0', opacity: 0 }),
                    animate(150, style({ height: '*', width: '*', opacity: 1 }))
                ]),
                transition(':leave', [animate(150, style({ height: '0', width: '0', opacity: 0 }))])
            ])
        ] }, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSUploadListComponent, [{
        type: Component,
        args: [{ selector: 'tds-upload-list', exportAs: 'tdsUploadList', animations: [
                    trigger('itemState', [
                        transition(':enter', [
                            style({ height: '0', width: '0', opacity: 0 }),
                            animate(150, style({ height: '*', width: '*', opacity: 1 }))
                        ]),
                        transition(':leave', [animate(150, style({ height: '0', width: '0', opacity: 0 }))])
                    ])
                ], host: {
                    '[class.tds-upload-list-rtl]': `dir === 'rtl'`,
                    '[class.tds-upload-list-text]': `listType === 'text'`,
                    '[class.tds-upload-list-picture]': `listType === 'picture'`,
                    '[class.tds-upload-list-picture-card]': `listType === 'picture-card'`,
                    '[class.flex]': `listType === 'picture-card'`,
                    '[class.flex-nowrap]': `listType === 'picture-card'`
                }, preserveWhitespaces: false, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: "<div *ngFor=\"let file of list\" class=\"tds-upload-list-{{ listType }}-container mt-2.5\" \r\n[ngClass]=\"{'h-28 w-28  mr-2.5 flex justify-center items-center relative group ':isPictureCard,\r\n'border-dashed border-neutral-2-200 dark:border-d-neutral-2-200 border rounded': file.status == 'uploading' && isPictureCard\r\n}\">\r\n  <div class=\"tds-upload-list-item relative tds-upload-list-item-{{ file.status }} text-{{file.status != 'done' ?file.status:'success' }}-500 tds-upload-list-item-list-type-{{ listType }}  \"\r\n   [ngClass]=\"{'bg-neutral-3-50 rounded dark:bg-d-neutral-3-200':!isPictureCard,'w-full h-full flex justify-center items-center relative':isPictureCard && file.status !=='uploading',\r\n   'border-error-300 border rounded': file.status == 'error' && isPictureCard }\"\r\n    [attr.data-key]=\"file.key\" @itemState tds-tooltip [tooltipTitle]=\"file.status === 'error' ? file.message : null\">\r\n    <ng-template #icon>\r\n      <ng-container [ngSwitch]=\"file.iconType\">\r\n        <div *ngSwitchCase=\"'uploading'\" class=\"tds-upload-list-item-thumbnail\"\r\n          [class.tds-upload-list-item-file]=\"!file.isUploading\">\r\n          <ng-template [ngTemplateOutlet]=\"iconNode\" [ngTemplateOutletContext]=\"{ $implicit: file }\"></ng-template>\r\n        </div>\r\n        <a *ngSwitchCase=\"'thumbnail'\" class=\"tds-upload-list-item-thumbnail\" [ngClass]=\"{'w-12 h-12 mr-2':!isPictureCard , 'h-28 w-28':isPictureCard}\"\r\n          [class.tds-upload-list-item-file]=\"!file.isImageUrl\" target=\"_blank\" rel=\"noopener noreferrer\"\r\n          [href]=\"file.url || file.thumbUrl\" (click)=\"handlePreview(file, $event)\">\r\n          <img *ngIf=\"file.isImageUrl; else noImageThumbTpl\" class=\"tds-upload-list-item-image rounded object-cover\"\r\n            [src]=\"file.thumbUrl || file.url\" [attr.alt]=\"file.name\" [ngClass]=\"{'h-28 w-28':isPictureCard}\"/>\r\n        </a>\r\n        <div *ngSwitchDefault class=\"tds-upload-text-icon flex items-center\">\r\n          <ng-template [ngTemplateOutlet]=\"iconNode\" [ngTemplateOutletContext]=\"{ $implicit: file }\"></ng-template>\r\n        </div>\r\n      </ng-container>\r\n      <ng-template #noImageThumbTpl>\r\n        <ng-template [ngTemplateOutlet]=\"iconNode\" [ngTemplateOutletContext]=\"{ $implicit: file }\"></ng-template>\r\n      </ng-template>\r\n    </ng-template>\r\n    <ng-template #iconNode let-file>\r\n      <ng-container *ngIf=\"!iconRender; else customIconRender\">\r\n        <ng-container [ngSwitch]=\"listType\">\r\n          <ng-container *ngSwitchCase=\"'picture'\">\r\n            <ng-container *ngIf=\"file.isUploading; else iconNodeFileIcon\">\r\n              <!-- <i nz-icon type=\"loading\"></i> -->\r\n            </ng-container>\r\n          </ng-container>\r\n          <ng-container *ngSwitchCase=\"'picture-card'\">\r\n            <ng-container *ngIf=\"file.isUploading; else iconNodeFileIcon\">\r\n              {{ locale.uploading }}\r\n            </ng-container>\r\n          </ng-container>\r\n          <ng-container *ngSwitchDefault>\r\n            <i *ngIf=\"!file.isUploading\"  class=\"tdsi-attached-file-fill  text-base leading-4 mr-2\"></i>\r\n            <tds-spinner *ngIf=\"file.isUploading\"  class=\"w-3 h-3  mr-2\"></tds-spinner>\r\n          </ng-container>\r\n          \r\n        </ng-container>\r\n      </ng-container>\r\n      <ng-template #customIconRender [ngTemplateOutlet]=\"iconRender\" [ngTemplateOutletContext]=\"{ $implicit: file }\">\r\n      </ng-template>\r\n      <ng-template #iconNodeFileIcon>\r\n        <!-- <i  [type]=\"file.isImageUrl ? 'picture' : 'file'\" nzTheme=\"twotone\"></i> -->\r\n        <span class=\"tdsi-warning-fill text-xl leading-5 mb-6\"></span>\r\n      </ng-template>\r\n    </ng-template>\r\n    <ng-template #removeIcon>\r\n      <button (click)=\"handleRemove(file, $event)\" [attr.title]=\"locale.removeFile\"\r\n        class=\"tds-upload-list-item-card-actions-btn flex\" *ngIf=\"icons.showRemoveIcon\">\r\n        <span class=\"flex items-center\">\r\n          <i class=\"tdsi-close-fill text-base leading-4 \" [ngClass]=\"{'text-white':isPictureCard,'text-neutral-1-500 dark:text-d-neutral-1-500':!isPictureCard}\"></i>\r\n        </span>\r\n      </button>\r\n    </ng-template>\r\n    <ng-template #downloadIcon>\r\n      <button *ngIf=\"file.showDownload\" (click)=\"handleDownload(file)\" [attr.title]=\"locale.downloadFile\"\r\n        class=\"tds-upload-list-item-card-actions-btn mr-2\">\r\n        <span class=\"flex items-center\">\r\n          <i class=\"tdsi-download-fill text-base leading-4\" [ngClass]=\"{'text-white':isPictureCard,'text-neutral-1-500 dark:text-d-neutral-1-500':!isPictureCard}\"></i>\r\n        </span>\r\n      </button>\r\n    </ng-template>\r\n    <ng-template #downloadOrDelete>\r\n      <span *ngIf=\"listType !== 'picture-card'\"\r\n        class=\"tds-upload-list-item-card-actions {{ listType === 'picture' ? 'picture' : '' }} flex\">\r\n        <ng-template [ngTemplateOutlet]=\"downloadIcon\"></ng-template>\r\n        <ng-template [ngTemplateOutlet]=\"removeIcon\"></ng-template>\r\n      </span>\r\n    </ng-template>\r\n    <ng-template #preview>\r\n      <a *ngIf=\"file.url\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"tds-upload-list-item-name flex-auto hidden\" [ngClass]=\"{'hidden':isPictureCard && file.status !== 'error' }\"\r\n        [attr.title]=\"file.name\" [href]=\"file.url\" [attr.download]=\"file.linkProps && file.linkProps.download\"\r\n        (click)=\"handlePreview(file, $event)\">\r\n        {{ file.name }} \r\n      </a>     \r\n      <span *ngIf=\"!file.url\" class=\"tds-upload-list-item-name text-body-2 font-regular flex-auto \" [attr.title]=\"file.name\" [ngClass]=\"{'hidden':isPictureCard && (file.isUploading || file.iconType =='thumbnail') }\"\r\n        (click)=\"handlePreview(file, $event)\">\r\n        {{ file.name }} \r\n      </span>\r\n      <ng-template [ngTemplateOutlet]=\"downloadOrDelete\"></ng-template>\r\n    </ng-template>\r\n    <div class=\"tds-upload-list-item-info \" [ngClass]=\"{'h-full p-1':!isPictureCard,'text-center':isPictureCard}\">\r\n      <span class=\"tds-upload-span \" [ngClass]=\"{'flex items-center':!isPictureCard}\">\r\n        <ng-template [ngTemplateOutlet]=\"icon\"></ng-template>\r\n        <ng-template [ngTemplateOutlet]=\"preview\"></ng-template>\r\n      </span>\r\n    </div>\r\n    <span *ngIf=\"listType === 'picture-card' && !file.isUploading\" class=\"tds-upload-list-item-actions hidden rounded  group-hover:flex absolute   justify-center inset-0 items-center bg-black bg-opacity-40\"\r\n    >\r\n      <a class=\"flex mr-2\" *ngIf=\"icons.showPreviewIcon\" [href]=\"file.url || file.thumbUrl\" target=\"_blank\" rel=\"noopener noreferrer\"\r\n        [attr.title]=\"locale.previewFile\"\r\n        [ngStyle]=\"!(file.url || file.thumbUrl) ? { opacity: 0.5, 'pointer-events': 'none' } : null\"\r\n        (click)=\"handlePreview(file, $event)\">\r\n        <i class=\"tdsi-eye-open-fill text-base leading-4 text-white\"></i>\r\n      </a>\r\n      <ng-container *ngIf=\"file.status === 'done'\">\r\n        <ng-template [ngTemplateOutlet]=\"downloadIcon\"></ng-template>\r\n      </ng-container>\r\n      <ng-template [ngTemplateOutlet]=\"removeIcon\"></ng-template>\r\n    </span>\r\n    <div *ngIf=\"file.isUploading\" class=\"tds-upload-list-item-progress\" [ngClass]=\"{'mt-6':isPictureCard}\">\r\n      <tds-progress [percent]=\"file.percent!\" type=\"line\" [showInfo]=\"false\" [strokeWidth]=\"2\"></tds-progress>\r\n    </div>\r\n  </div>\r\n</div>" }]
    }], function () { return [{ type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }, { type: i0.NgZone }, { type: i1$1.Platform }, { type: i0.ElementRef }]; }, { locale: [{
            type: Input
        }], listType: [{
            type: Input
        }], items: [{
            type: Input
        }], icons: [{
            type: Input
        }], onPreview: [{
            type: Input
        }], onRemove: [{
            type: Input
        }], onDownload: [{
            type: Input
        }], previewFile: [{
            type: Input
        }], previewIsImage: [{
            type: Input
        }], iconRender: [{
            type: Input
        }], dir: [{
            type: Input
        }] }); })();

const _c0 = ["uploadComp"];
const _c1 = ["listComp"];
const _c2 = function () { return []; };
function TDSUploadComponent_ng_template_0_tds_upload_list_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "tds-upload-list", 8, 9);
} if (rf & 2) {
    const ctx_r11 = i0.ɵɵnextContext(2);
    i0.ɵɵstyleProp("display", ctx_r11.showUploadList ? "" : "none");
    i0.ɵɵproperty("locale", ctx_r11.locale)("listType", ctx_r11.listType)("items", ctx_r11.fileList || i0.ɵɵpureFunction0(13, _c2))("icons", ctx_r11.showUploadList)("iconRender", ctx_r11.iconRender)("previewFile", ctx_r11.previewFile)("previewIsImage", ctx_r11.previewIsImage)("onPreview", ctx_r11.preview)("onRemove", ctx_r11.onRemove)("onDownload", ctx_r11.download)("dir", ctx_r11.dir);
} }
function TDSUploadComponent_ng_template_0_ng_container_1_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
const _c3 = function (a0) { return { $implicit: a0 }; };
function TDSUploadComponent_ng_template_0_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtemplate(1, TDSUploadComponent_ng_template_0_ng_container_1_ng_container_1_Template, 1, 0, "ng-container", 10);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r12 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r12.fileListRender)("ngTemplateOutletContext", i0.ɵɵpureFunction1(2, _c3, ctx_r12.fileList));
} }
function TDSUploadComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, TDSUploadComponent_ng_template_0_tds_upload_list_0_Template, 2, 14, "tds-upload-list", 6);
    i0.ɵɵtemplate(1, TDSUploadComponent_ng_template_0_ng_container_1_Template, 2, 4, "ng-container", 7);
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵproperty("ngIf", ctx_r1.locale && !ctx_r1.fileListRender);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r1.fileListRender);
} }
function TDSUploadComponent_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵprojection(0);
} }
function TDSUploadComponent_ng_template_4_ng_template_3_Template(rf, ctx) { }
function TDSUploadComponent_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 11)(1, "div", 12, 13);
    i0.ɵɵtemplate(3, TDSUploadComponent_ng_template_4_ng_template_3_Template, 0, 0, "ng-template", 14);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r5 = i0.ɵɵnextContext();
    const _r2 = i0.ɵɵreference(3);
    i0.ɵɵstyleProp("display", ctx_r5.showButton ? "" : "none");
    i0.ɵɵproperty("ngClass", ctx_r5.classList);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("options", ctx_r5._btnOptions);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngTemplateOutlet", _r2);
} }
function TDSUploadComponent_ng_container_6_ng_template_5_Template(rf, ctx) { }
function TDSUploadComponent_ng_container_6_ng_template_6_Template(rf, ctx) { }
function TDSUploadComponent_ng_container_6_Template(rf, ctx) { if (rf & 1) {
    const _r21 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "div", 15);
    i0.ɵɵlistener("drop", function TDSUploadComponent_ng_container_6_Template_div_drop_1_listener($event) { i0.ɵɵrestoreView(_r21); const ctx_r20 = i0.ɵɵnextContext(); return ctx_r20.fileDrop($event); })("dragover", function TDSUploadComponent_ng_container_6_Template_div_dragover_1_listener($event) { i0.ɵɵrestoreView(_r21); const ctx_r22 = i0.ɵɵnextContext(); return ctx_r22.fileDrop($event); })("dragleave", function TDSUploadComponent_ng_container_6_Template_div_dragleave_1_listener($event) { i0.ɵɵrestoreView(_r21); const ctx_r23 = i0.ɵɵnextContext(); return ctx_r23.fileDrop($event); });
    i0.ɵɵelementStart(2, "div", 16, 13)(4, "div", 17);
    i0.ɵɵtemplate(5, TDSUploadComponent_ng_container_6_ng_template_5_Template, 0, 0, "ng-template", 14);
    i0.ɵɵelementEnd()()();
    i0.ɵɵtemplate(6, TDSUploadComponent_ng_container_6_ng_template_6_Template, 0, 0, "ng-template", 14);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r6 = i0.ɵɵnextContext();
    const _r2 = i0.ɵɵreference(3);
    const _r0 = i0.ɵɵreference(1);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngClass", ctx_r6.classList);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("options", ctx_r6._btnOptions);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngTemplateOutlet", _r2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngTemplateOutlet", _r0);
} }
function TDSUploadComponent_ng_template_7_ng_container_0_ng_template_1_Template(rf, ctx) { }
function TDSUploadComponent_ng_template_7_ng_container_0_ng_template_2_Template(rf, ctx) { }
function TDSUploadComponent_ng_template_7_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtemplate(1, TDSUploadComponent_ng_template_7_ng_container_0_ng_template_1_Template, 0, 0, "ng-template", 14);
    i0.ɵɵtemplate(2, TDSUploadComponent_ng_template_7_ng_container_0_ng_template_2_Template, 0, 0, "ng-template", 14);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    i0.ɵɵnextContext(2);
    const _r0 = i0.ɵɵreference(1);
    const _r4 = i0.ɵɵreference(5);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngTemplateOutlet", _r0);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngTemplateOutlet", _r4);
} }
function TDSUploadComponent_ng_template_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, TDSUploadComponent_ng_template_7_ng_container_0_Template, 3, 2, "ng-container", 3);
} if (rf & 2) {
    const ctx_r8 = i0.ɵɵnextContext();
    const _r9 = i0.ɵɵreference(10);
    i0.ɵɵproperty("ngIf", ctx_r8.listType === "picture-card")("ngIfElse", _r9);
} }
function TDSUploadComponent_ng_template_9_ng_template_0_Template(rf, ctx) { }
function TDSUploadComponent_ng_template_9_ng_template_1_Template(rf, ctx) { }
function TDSUploadComponent_ng_template_9_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, TDSUploadComponent_ng_template_9_ng_template_0_Template, 0, 0, "ng-template", 14);
    i0.ɵɵtemplate(1, TDSUploadComponent_ng_template_9_ng_template_1_Template, 0, 0, "ng-template", 14);
} if (rf & 2) {
    i0.ɵɵnextContext();
    const _r4 = i0.ɵɵreference(5);
    const _r0 = i0.ɵɵreference(1);
    i0.ɵɵproperty("ngTemplateOutlet", _r4);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngTemplateOutlet", _r0);
} }
const _c4 = ["*"];
class TDSUploadComponent {
    // #endregion
    constructor(cdr, i18n, directionality) {
        this.cdr = cdr;
        this.i18n = i18n;
        this.directionality = directionality;
        this.destroy$ = new Subject();
        this.dir = 'ltr';
        // #region fields
        this.type = 'select';
        this.limit = 0;
        this.size = 0;
        this.directory = false;
        this.isOpenFileDialogOnClick = true;
        this.filter = [];
        this.fileList = [];
        this.disabled = false;
        this.listType = 'text';
        this.multiple = false;
        this.name = 'file';
        this._showUploadList = true;
        this.showButton = true;
        this.withCredentials = false;
        this.iconRender = null;
        this.fileListRender = null;
        this.uploadChange = new EventEmitter();
        this.fileListChange = new EventEmitter();
        this.onStart = (file) => {
            if (!this.fileList) {
                this.fileList = [];
            }
            const targetItem = this.fileToObject(file);
            targetItem.status = 'uploading';
            this.fileList = this.fileList.concat(targetItem);
            this.fileListChange.emit(this.fileList);
            this.uploadChange.emit({ file: targetItem, fileList: this.fileList, type: 'start' });
            this.detectChangesList();
        };
        this.onProgress = (e, file) => {
            const fileList = this.fileList;
            const targetItem = this.getFileItem(file, fileList);
            targetItem.percent = e.percent;
            this.uploadChange.emit({
                event: e,
                file: { ...targetItem },
                fileList: this.fileList,
                type: 'progress'
            });
            this.detectChangesList();
        };
        this.onSuccess = (res, file) => {
            const fileList = this.fileList;
            const targetItem = this.getFileItem(file, fileList);
            targetItem.status = 'done';
            targetItem.response = res;
            this.uploadChange.emit({
                file: { ...targetItem },
                fileList,
                type: 'success'
            });
            this.detectChangesList();
        };
        this.onError = (err, file) => {
            const fileList = this.fileList;
            const targetItem = this.getFileItem(file, fileList);
            targetItem.error = err;
            targetItem.status = 'error';
            this.uploadChange.emit({
                file: { ...targetItem },
                fileList,
                type: 'error'
            });
            this.detectChangesList();
        };
        this.onRemove = (file) => {
            this.uploadComp.abort(file);
            file.status = 'removed';
            const fnRes = typeof this.remove === 'function' ? this.remove(file) : this.remove == null ? true : this.remove;
            (fnRes instanceof Observable ? fnRes : of(fnRes)).pipe(filter((res) => res)).subscribe(() => {
                this.fileList = this.removeFileItem(file, this.fileList);
                this.uploadChange.emit({
                    file,
                    fileList: this.fileList,
                    type: 'removed'
                });
                this.fileListChange.emit(this.fileList);
                this.cdr.detectChanges();
            });
        };
        // #endregion
        // #region styles
        this.prefixCls = 'tds-upload';
        this.classList = [];
    }
    set showUploadList(value) {
        this._showUploadList = typeof value === 'boolean' ? toBoolean(value) : value;
    }
    get showUploadList() {
        return this._showUploadList;
    }
    zipOptions() {
        if (typeof this.showUploadList === 'boolean' && this.showUploadList) {
            this.showUploadList = {
                showPreviewIcon: true,
                showRemoveIcon: true,
                showDownloadIcon: true
            };
        }
        // filters
        const filters = this.filter.slice();
        if (this.multiple && this.limit > 0 && filters.findIndex(w => w.name === 'limit') === -1) {
            filters.push({
                name: 'limit',
                fn: (fileList) => fileList.slice(-this.limit)
            });
        }
        if (this.size > 0 && filters.findIndex(w => w.name === 'size') === -1) {
            filters.push({
                name: 'size',
                fn: (fileList) => fileList.filter(w => w.size / 1024 <= this.size)
            });
        }
        if (this.fileType && this.fileType.length > 0 && filters.findIndex(w => w.name === 'type') === -1) {
            const types = this.fileType.split(',');
            filters.push({
                name: 'type',
                fn: (fileList) => fileList.filter(w => ~types.indexOf(w.type))
            });
        }
        this._btnOptions = {
            disabled: this.disabled,
            accept: this.accept,
            action: this.action,
            directory: this.directory,
            openFileDialogOnClick: this.isOpenFileDialogOnClick,
            onBeforeUpload: this.beforeUpload,
            customRequest: this.customRequest,
            data: this.data,
            headers: this.headers,
            name: this.name,
            multiple: this.multiple,
            withCredentials: this.withCredentials,
            filters,
            transformFile: this.transformFile,
            onStart: this.onStart,
            onProgress: this.onProgress,
            onSuccess: this.onSuccess,
            onError: this.onError
        };
        return this;
    }
    // #region upload
    fileToObject(file) {
        return {
            lastModified: file.lastModified,
            lastModifiedDate: file.lastModifiedDate,
            name: file.filename || file.name,
            size: file.size,
            type: file.type,
            uid: file.uid,
            response: file.response,
            error: file.error,
            percent: 0,
            originFileObj: file
        };
    }
    getFileItem(file, fileList) {
        return fileList.filter(item => item.uid === file.uid)[0];
    }
    removeFileItem(file, fileList) {
        return fileList.filter(item => item.uid !== file.uid);
    }
    // skip safari bug
    fileDrop(e) {
        if (e.type === this.dragState) {
            return;
        }
        this.dragState = e.type;
        this.setClassMap();
    }
    // #endregion
    // #region list
    detectChangesList() {
        this.cdr.detectChanges();
        this.listComp?.detectChanges();
    }
    setClassMap() {
        let subCls = [];
        if (this.type === 'drag') {
            if (this.fileList.some(file => file.status === 'uploading')) {
                subCls.push(`${this.prefixCls}-drag-uploading`);
            }
            if (this.dragState === 'dragover') {
                subCls.push(`${this.prefixCls}-drag-hover`);
            }
        }
        else {
            subCls = [`${this.prefixCls}-select-${this.listType}`];
            if (this.listType === "picture-card") {
                subCls.push('w-28 h-28 inline-flex border border-dashed border-neutral-2-200 dark:border-d-neutral-2-200 rounded  mt-2.5 items-center justify-center ');
            }
        }
        this.classList = [
            this.prefixCls,
            `${this.prefixCls}-${this.type} `,
            ...subCls,
            (this.disabled && `${this.prefixCls}-disabled`) || '',
            (this.dir === 'rtl' && `${this.prefixCls}-rtl`) || ''
        ].filter(item => !!item);
        this.cdr.detectChanges();
    }
    // #endregion
    ngOnInit() {
        this.dir = this.directionality.value;
        this.directionality.change?.pipe(takeUntil(this.destroy$)).subscribe((direction) => {
            this.dir = direction;
            this.setClassMap();
            this.cdr.detectChanges();
        });
        this.i18n.localeChange.pipe(takeUntil(this.destroy$)).subscribe(() => {
            this.locale = this.i18n.getLocaleData('Upload');
            this.detectChangesList();
        });
    }
    ngOnChanges() {
        this.zipOptions().setClassMap();
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
}
TDSUploadComponent.ɵfac = function TDSUploadComponent_Factory(t) { return new (t || TDSUploadComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1$2.TDSI18nService), i0.ɵɵdirectiveInject(i2$1.Directionality, 8)); };
TDSUploadComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TDSUploadComponent, selectors: [["tds-upload"]], viewQuery: function TDSUploadComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 5);
        i0.ɵɵviewQuery(_c1, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.uploadComp = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.listComp = _t.first);
    } }, hostAttrs: [1, "inline"], hostVars: 2, hostBindings: function TDSUploadComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵclassProp("tds-upload-picture-card-wrapper", ctx.listType === "picture-card");
    } }, inputs: { type: "type", limit: "limit", size: "size", fileType: "fileType", accept: "accept", action: "action", directory: "directory", isOpenFileDialogOnClick: "isOpenFileDialogOnClick", beforeUpload: "beforeUpload", customRequest: "customRequest", data: "data", filter: "filter", fileList: "fileList", disabled: "disabled", headers: "headers", listType: "listType", multiple: "multiple", name: "name", showUploadList: "showUploadList", showButton: "showButton", withCredentials: "withCredentials", remove: "remove", preview: "preview", previewFile: "previewFile", previewIsImage: "previewIsImage", transformFile: "transformFile", download: "download", iconRender: "iconRender", fileListRender: "fileListRender" }, outputs: { uploadChange: "uploadChange", fileListChange: "fileListChange" }, exportAs: ["tdsUpload"], features: [i0.ɵɵNgOnChangesFeature], ngContentSelectors: _c4, decls: 11, vars: 2, consts: [["list", ""], ["con", ""], ["btn", ""], [4, "ngIf", "ngIfElse"], ["select", ""], ["pic", ""], [3, "display", "locale", "listType", "items", "icons", "iconRender", "previewFile", "previewIsImage", "onPreview", "onRemove", "onDownload", "dir", 4, "ngIf"], [4, "ngIf"], [3, "locale", "listType", "items", "icons", "iconRender", "previewFile", "previewIsImage", "onPreview", "onRemove", "onDownload", "dir"], ["listComp", ""], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "block", 3, "ngClass"], ["tds-upload-btn", "", 1, "inline-block", 3, "options"], ["uploadComp", ""], [3, "ngTemplateOutlet"], [3, "ngClass", "drop", "dragover", "dragleave"], ["tds-upload-btn", "", 1, "tds-upload-btn", 3, "options"], [1, "tds-upload-drag-container"]], template: function TDSUploadComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵtemplate(0, TDSUploadComponent_ng_template_0_Template, 2, 2, "ng-template", null, 0, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtemplate(2, TDSUploadComponent_ng_template_2_Template, 1, 0, "ng-template", null, 1, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtemplate(4, TDSUploadComponent_ng_template_4_Template, 4, 5, "ng-template", null, 2, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtemplate(6, TDSUploadComponent_ng_container_6_Template, 7, 4, "ng-container", 3);
        i0.ɵɵtemplate(7, TDSUploadComponent_ng_template_7_Template, 1, 2, "ng-template", null, 4, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtemplate(9, TDSUploadComponent_ng_template_9_Template, 2, 2, "ng-template", null, 5, i0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r7 = i0.ɵɵreference(8);
        i0.ɵɵadvance(6);
        i0.ɵɵproperty("ngIf", ctx.type === "drag")("ngIfElse", _r7);
    } }, directives: [i2.NgIf, TDSUploadListComponent, i2$1.Dir, i2.NgTemplateOutlet, i2.NgClass, TDSUploadBtnComponent], encapsulation: 2, changeDetection: 0 });
__decorate([
    InputNumber()
], TDSUploadComponent.prototype, "limit", void 0);
__decorate([
    InputNumber()
], TDSUploadComponent.prototype, "size", void 0);
__decorate([
    InputBoolean()
], TDSUploadComponent.prototype, "directory", void 0);
__decorate([
    InputBoolean()
], TDSUploadComponent.prototype, "isOpenFileDialogOnClick", void 0);
__decorate([
    InputBoolean()
], TDSUploadComponent.prototype, "disabled", void 0);
__decorate([
    InputBoolean()
], TDSUploadComponent.prototype, "multiple", void 0);
__decorate([
    InputBoolean()
], TDSUploadComponent.prototype, "showButton", void 0);
__decorate([
    InputBoolean()
], TDSUploadComponent.prototype, "withCredentials", void 0);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSUploadComponent, [{
        type: Component,
        args: [{ selector: 'tds-upload', exportAs: 'tdsUpload', preserveWhitespaces: false, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {
                    'class': "inline",
                    '[class.tds-upload-picture-card-wrapper]': 'listType === "picture-card"'
                }, template: "<ng-template #list>\r\n  <tds-upload-list\r\n    *ngIf=\"locale && !fileListRender\"\r\n    #listComp\r\n    [style.display]=\"showUploadList ? '' : 'none'\"\r\n    [locale]=\"locale\"\r\n    [listType]=\"listType\"\r\n    [items]=\"fileList || []\"\r\n    [icons]=\"$any(showUploadList)\"\r\n    [iconRender]=\"iconRender\"\r\n    [previewFile]=\"previewFile\"\r\n    [previewIsImage]=\"previewIsImage\"\r\n    [onPreview]=\"preview\"\r\n    [onRemove]=\"onRemove\"\r\n    [onDownload]=\"download\"\r\n    [dir]=\"dir\"\r\n  ></tds-upload-list>\r\n  <ng-container *ngIf=\"fileListRender\">\r\n    <ng-container *ngTemplateOutlet=\"fileListRender; context: { $implicit: fileList }\"></ng-container>\r\n  </ng-container>\r\n</ng-template>\r\n<ng-template #con>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n<ng-template #btn>\r\n  <div class=\"block\" [ngClass]=\"classList\" [style.display]=\"showButton ? '' : 'none'\">\r\n    <div tds-upload-btn #uploadComp [options]=\"_btnOptions!\" class=\"inline-block\">\r\n      <ng-template [ngTemplateOutlet]=\"con\"></ng-template>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n<ng-container *ngIf=\"type === 'drag'; else select\">\r\n  <div [ngClass]=\"classList\" (drop)=\"fileDrop($event)\" (dragover)=\"fileDrop($event)\" (dragleave)=\"fileDrop($event)\">\r\n    <div tds-upload-btn #uploadComp [options]=\"_btnOptions!\" class=\"tds-upload-btn\">\r\n      <div class=\"tds-upload-drag-container\">\r\n        <ng-template [ngTemplateOutlet]=\"con\"></ng-template>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <ng-template [ngTemplateOutlet]=\"list\"></ng-template>\r\n</ng-container>\r\n<ng-template #select>\r\n  <ng-container *ngIf=\"listType === 'picture-card'; else pic\">\r\n    <ng-template [ngTemplateOutlet]=\"list\"></ng-template>\r\n    <ng-template [ngTemplateOutlet]=\"btn\"></ng-template>\r\n  </ng-container>\r\n</ng-template>\r\n<ng-template #pic>\r\n  <ng-template [ngTemplateOutlet]=\"btn\"></ng-template>\r\n  <ng-template [ngTemplateOutlet]=\"list\"></ng-template>\r\n</ng-template>\r\n" }]
    }], function () { return [{ type: i0.ChangeDetectorRef }, { type: i1$2.TDSI18nService }, { type: i2$1.Directionality, decorators: [{
                type: Optional
            }] }]; }, { uploadComp: [{
            type: ViewChild,
            args: ['uploadComp', { static: false }]
        }], listComp: [{
            type: ViewChild,
            args: ['listComp', { static: false }]
        }], type: [{
            type: Input
        }], limit: [{
            type: Input
        }], size: [{
            type: Input
        }], fileType: [{
            type: Input
        }], accept: [{
            type: Input
        }], action: [{
            type: Input
        }], directory: [{
            type: Input
        }], isOpenFileDialogOnClick: [{
            type: Input
        }], beforeUpload: [{
            type: Input
        }], customRequest: [{
            type: Input
        }], data: [{
            type: Input
        }], filter: [{
            type: Input
        }], fileList: [{
            type: Input
        }], disabled: [{
            type: Input
        }], headers: [{
            type: Input
        }], listType: [{
            type: Input
        }], multiple: [{
            type: Input
        }], name: [{
            type: Input
        }], showUploadList: [{
            type: Input
        }], showButton: [{
            type: Input
        }], withCredentials: [{
            type: Input
        }], remove: [{
            type: Input
        }], preview: [{
            type: Input
        }], previewFile: [{
            type: Input
        }], previewIsImage: [{
            type: Input
        }], transformFile: [{
            type: Input
        }], download: [{
            type: Input
        }], iconRender: [{
            type: Input
        }], fileListRender: [{
            type: Input
        }], uploadChange: [{
            type: Output
        }], fileListChange: [{
            type: Output
        }] }); })();

class TDSUploadModule {
}
TDSUploadModule.ɵfac = function TDSUploadModule_Factory(t) { return new (t || TDSUploadModule)(); };
TDSUploadModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: TDSUploadModule });
TDSUploadModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [[
            BidiModule,
            CommonModule,
            FormsModule,
            PlatformModule,
            TDSToolTipModule,
            TDSProgressModule,
            TDSI18nModule,
            TDSButtonModule,
            TDSSpinnerModule
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TDSUploadModule, [{
        type: NgModule,
        args: [{
                imports: [
                    BidiModule,
                    CommonModule,
                    FormsModule,
                    PlatformModule,
                    TDSToolTipModule,
                    TDSProgressModule,
                    TDSI18nModule,
                    TDSButtonModule,
                    TDSSpinnerModule
                ],
                declarations: [TDSUploadComponent, TDSUploadBtnComponent, TDSUploadListComponent],
                exports: [TDSUploadComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(TDSUploadModule, { declarations: [TDSUploadComponent, TDSUploadBtnComponent, TDSUploadListComponent], imports: [BidiModule,
        CommonModule,
        FormsModule,
        PlatformModule,
        TDSToolTipModule,
        TDSProgressModule,
        TDSI18nModule,
        TDSButtonModule,
        TDSSpinnerModule], exports: [TDSUploadComponent] }); })();

/**
 * Generated bundle index. Do not edit.
 */

export { TDSUploadBtnComponent, TDSUploadComponent, TDSUploadListComponent, TDSUploadModule };
//# sourceMappingURL=tds-ui-upload.mjs.map
