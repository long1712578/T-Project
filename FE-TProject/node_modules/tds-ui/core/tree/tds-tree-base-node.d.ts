import { TDSSafeAny } from 'tds-ui/shared/utility';
import { TDSTreeNodeBaseComponent } from './tds-tree-base.definitions';
import { TDSTreeBaseService } from './tds-tree-base.service';
export declare type TDSTreeNodeKey = string | number;
export interface FlattenNode {
    parent: FlattenNode | null;
    children: FlattenNode[];
    pos: string;
    data: TDSTreeNode;
    isStart: boolean[];
    isEnd: boolean[];
}
export interface TDSTreeNodeOptions {
    title: string;
    key: string;
    icon?: string;
    isLeaf?: boolean;
    checked?: boolean;
    selected?: boolean;
    selectable?: boolean;
    disabled?: boolean;
    disableCheckbox?: boolean;
    expanded?: boolean;
    children?: TDSTreeNodeOptions[];
    [key: string]: TDSSafeAny;
}
export declare class TDSTreeNode {
    private _title;
    key: string;
    level: number;
    origin: TDSTreeNodeOptions;
    parentNode: TDSTreeNode | null;
    private _icon;
    private _children;
    private _isLeaf;
    private _isChecked;
    private _isSelectable;
    private _isDisabled;
    private _isDisableCheckbox;
    private _isExpanded;
    private _isHalfChecked;
    private _isSelected;
    private _isLoading;
    canHide: boolean;
    isMatched: boolean;
    service: TDSTreeBaseService | null;
    component: TDSTreeNodeBaseComponent;
    /** New added in Tree for easy data access */
    isStart?: boolean[];
    isEnd?: boolean[];
    get treeService(): TDSTreeBaseService | null;
    /**
     * Init treeNode
     *
     * @param option: user's input
     * @param parent
     * @param service: base tdsTreeService
     */
    constructor(option: TDSTreeNodeOptions | TDSTreeNode, parent?: TDSTreeNode | null, service?: TDSTreeBaseService | null);
    /**
     * auto generate
     * get
     * set
     */
    get title(): string;
    set title(value: string);
    get icon(): string;
    set icon(value: string);
    get children(): TDSTreeNode[];
    set children(value: TDSTreeNode[]);
    get isLeaf(): boolean;
    set isLeaf(value: boolean);
    get isChecked(): boolean;
    set isChecked(value: boolean);
    get isHalfChecked(): boolean;
    set isHalfChecked(value: boolean);
    get isSelectable(): boolean;
    set isSelectable(value: boolean);
    get isDisabled(): boolean;
    set isDisabled(value: boolean);
    get isDisableCheckbox(): boolean;
    set isDisableCheckbox(value: boolean);
    get isExpanded(): boolean;
    set isExpanded(value: boolean);
    get isSelected(): boolean;
    set isSelected(value: boolean);
    get isLoading(): boolean;
    set isLoading(value: boolean);
    setSyncChecked(checked?: boolean, halfChecked?: boolean): void;
    setChecked(checked?: boolean, halfChecked?: boolean): void;
    setExpanded(value: boolean): void;
    getParentNode(): TDSTreeNode | null;
    getChildren(): TDSTreeNode[];
    /**
     * Support appending child nodes by position. Leaf node cannot be appended.
     */
    addChildren(children: TDSSafeAny[], childPos?: number): void;
    clearChildren(): void;
    remove(): void;
    afterValueChange(key: string): void;
    update(): void;
}
//# sourceMappingURL=tds-tree-base-node.d.ts.map