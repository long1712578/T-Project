import { InjectionToken } from "@angular/core";
import { Observable } from "rxjs";
import { TDSSafeAny } from "tds-ui/shared/utility";
import { TDSConfig, TDSConfigKey } from "./config";
import * as i0 from "@angular/core";
export declare class TDSConfigService {
    private configUpdated$;
    private readonly config;
    constructor(defaultConfig?: TDSConfig);
    getConfig(): TDSConfig;
    getConfigForComponent<T extends TDSConfigKey>(componentName: T): TDSConfig[T];
    getConfigChangeEventForComponent(componentName: TDSConfigKey): Observable<void>;
    set<T extends TDSConfigKey>(componentName: T, value: TDSConfig[T]): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<TDSConfigService, [{ optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<TDSConfigService>;
}
export declare function WithConfig<T>(): (target: TDSSafeAny, propName: TDSSafeAny, originalDescriptor?: TypedPropertyDescriptor<T> | undefined) => TDSSafeAny;
export declare const TDS_CONFIG: InjectionToken<TDSConfig>;
//# sourceMappingURL=config.service.d.ts.map