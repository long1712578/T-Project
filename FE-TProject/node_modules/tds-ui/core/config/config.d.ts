import { Direction } from "@angular/cdk/bidi";
import { TemplateRef, Type } from "@angular/core";
import { TDSSafeAny } from "tds-ui/shared/utility";
export declare type ButtonSize = "sm" | 'md' | 'lg' | 'xl' | undefined;
export declare type TDSDrawerSize = "sm" | "md" | "lg" | 'xl' | null;
export interface TDSPopConfirmConfig {
    TDSPopconfirmBackdrop?: boolean;
}
export interface TDSPopoverConfig {
    TDSPopoverBackdrop?: boolean;
}
export declare type TDSTSType = string | TemplateRef<void>;
export declare type NgClassType = string | string[] | Set<string> | NgClassInterface;
export interface NgClassInterface {
    [klass: string]: any;
}
export interface NgStyleInterface {
    [klass: string]: any;
}
export declare type TDSConfigKey = keyof TDSConfig;
export interface TDSConfig {
    pagination?: PaginationConfig;
    select?: SelectConfig;
    collapse?: CollapseConfig;
    collapsePanel?: CollapsePanelConfig;
    tree?: TreeConfig;
    image?: ImageConfig;
    typography?: TypographyConfig;
    modal?: ModalConfig;
    rate?: RateConfig;
    badge?: BadgeConfig;
    avatar?: AvatarConfig;
    table?: TableConfig;
    spin?: SpinConfig;
    empty?: EmptyConfig;
    message?: MessageConfig;
    notification?: NotificationConfig;
    anchor?: AnchorConfig;
    carousel?: CarouselConfig;
    cascader?: CascaderConfig;
}
export interface PaginationConfig {
    size?: 'default' | 'small';
    pageSizeOptions?: number[];
    showSizeChanger?: boolean;
}
export interface SelectConfig {
    tdsBorderless?: boolean;
    tdsSuffixIcon?: TemplateRef<TDSSafeAny> | string | null;
    ntdsBackdrop?: boolean;
}
export interface CollapseConfig {
    accordion?: boolean;
    bordered?: boolean;
    ghost?: boolean;
}
export interface CollapsePanelConfig {
    showArrow?: boolean;
}
export interface TreeConfig {
    blockNode?: boolean;
    showIcon?: boolean;
    hideUnMatched?: boolean;
}
export interface ImageExperimentalConfig {
    fallback?: string;
    placeholder?: string;
    disablePreview?: string;
    closeOnNavigation?: boolean;
    direction?: Direction;
    autoSrcset?: boolean;
    onSrcLoader?(params: {
        src: string;
        width: number;
    }): string;
}
export interface ImageConfig {
    fallback?: string;
    placeholder?: string;
    disablePreview?: string;
    closeOnNavigation?: boolean;
    direction?: Direction;
}
export interface TypographyConfig {
    ellipsisRows?: number;
    copyTooltips?: [TDSTSType, TDSTSType] | null;
    copyIcons: [TDSTSType, TDSTSType];
    editTooltip?: null | TDSTSType;
    editIcon: TDSTSType;
}
export interface ModalConfig {
    mask?: boolean;
    autoClose?: boolean;
    closeOnNavigation?: boolean;
    direction?: Direction;
}
export interface RateConfig {
    allowClear?: boolean;
    allowHalf?: boolean;
}
export interface BadgeConfig {
    color?: number;
    overflowCount?: number;
    showZero?: number;
}
export interface AvatarConfig {
    shape?: 'square' | 'circle';
    size?: 'md' | 'lg' | 'sm' | 'xl' | number;
    gap?: number;
}
export interface TableConfig {
    bordered?: boolean;
    size?: ButtonSize;
    showQuickJumper?: boolean;
    loadingIndicator?: TemplateRef<TDSSafeAny>;
    showSizeChanger?: boolean;
    simple?: boolean;
    hideOnSinglePage?: boolean;
}
export interface SpinConfig {
    indicator?: TemplateRef<TDSSafeAny>;
}
export interface EmptyConfig {
    TDSDefaultEmptyContent?: Type<TDSSafeAny> | TemplateRef<string> | string | undefined;
}
export interface NotificationConfig extends MessageConfig {
    top?: string | number;
    bottom?: string | number;
    placement?: 'topLeft' | 'topRight' | 'bottomLeft' | 'bottomRight';
}
export interface MessageConfig {
    animate?: boolean;
    duration?: number;
    maxStack?: number;
    pauseOnHover?: boolean;
    top?: number | string;
    direction?: Direction;
}
export interface AnchorConfig {
    tdsBounds?: number;
    tdsOffsetBottom?: number;
    tdsOffsetTop?: number;
    tdsShowInkInFixed?: boolean;
}
export interface CarouselConfig {
    tdsAutoPlay?: boolean;
    tdsAutoPlaySpeed?: boolean;
    tdsDots?: boolean;
    tdsEffect?: 'scrollx' | 'fade' | string;
    tdsEnableSwipe?: boolean;
    tdsVertical?: boolean;
}
export interface CascaderConfig {
    size?: string;
    backdrop?: boolean;
}
//# sourceMappingURL=config.d.ts.map