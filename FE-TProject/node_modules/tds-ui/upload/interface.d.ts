import { TemplateRef } from '@angular/core';
import { Observable, Subscription } from 'rxjs';
import { IndexableObject } from 'tds-ui/core/util';
import { TDSSafeAny } from 'tds-ui/shared/utility';
/** Status */
export declare type UploadFileStatus = 'error' | 'success' | 'done' | 'uploading' | 'removed';
export declare type TDSUploadType = 'select' | 'drag';
/** Built-in styles of the uploading list. */
export declare type TDSUploadListType = 'text' | 'picture' | 'picture-card';
export interface TDSUploadFile {
    uid: string;
    size?: number;
    name: string;
    filename?: string;
    lastModified?: string;
    lastModifiedDate?: Date;
    url?: string;
    status?: UploadFileStatus;
    originFileObj?: File;
    percent?: number;
    thumbUrl?: string;
    response?: TDSSafeAny;
    error?: TDSSafeAny;
    linkProps?: {
        download: string;
    };
    type?: string;
    [key: string]: TDSSafeAny;
}
export interface TDSUploadChangeParam {
    file: TDSUploadFile;
    fileList: TDSUploadFile[];
    event?: {
        percent: number;
    };
    /** Callback type. */
    type?: string;
}
export interface TDSShowUploadList {
    showRemoveIcon?: boolean;
    showPreviewIcon?: boolean;
    showDownloadIcon?: boolean;
}
export declare type TDSUploadTransformFileType = string | Blob | TDSUploadFile | Observable<string | Blob | File>;
export interface ZipButtonOptions {
    disabled?: boolean;
    accept?: string | string[];
    action?: string | ((file: TDSUploadFile) => string | Observable<string>);
    directory?: boolean;
    openFileDialogOnClick?: boolean;
    onBeforeUpload?(file: TDSUploadFile, fileList: TDSUploadFile[]): boolean | Observable<TDSSafeAny>;
    customRequest?(item: TDSSafeAny): Subscription;
    data?: {} | ((file: TDSUploadFile) => {} | Observable<{}>);
    headers?: {} | ((file: TDSUploadFile) => {} | Observable<{}>);
    name?: string;
    multiple?: boolean;
    withCredentials?: boolean;
    filters?: UploadFilter[];
    transformFile?(file: TDSUploadFile): TDSUploadTransformFileType;
    onStart?(file: TDSUploadFile): void;
    onProgress?(e: TDSSafeAny, file: TDSUploadFile): void;
    onSuccess?(ret: TDSSafeAny, file: TDSUploadFile, xhr: TDSSafeAny): void;
    onError?(err: TDSSafeAny, file: TDSUploadFile): void;
}
export interface UploadFilter {
    name: string;
    fn(fileList: TDSUploadFile[]): TDSUploadFile[] | Observable<TDSUploadFile[]>;
}
export interface TDSUploadXHRArgs {
    action?: string;
    name?: string;
    headers?: IndexableObject;
    file: TDSUploadFile;
    postFile: string | Blob | File | TDSUploadFile;
    data?: IndexableObject;
    withCredentials?: boolean;
    onProgress?(e: TDSSafeAny, file: TDSUploadFile): void;
    onSuccess?(ret: TDSSafeAny, file: TDSUploadFile, xhr: TDSSafeAny): void;
    onError?(err: TDSSafeAny, file: TDSUploadFile): void;
}
export declare type TDSIconRenderTemplate = TemplateRef<{
    $implicit: TDSUploadFile;
}>;
//# sourceMappingURL=interface.d.ts.map