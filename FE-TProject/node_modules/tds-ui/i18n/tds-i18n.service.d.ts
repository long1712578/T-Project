import { Observable } from 'rxjs';
import { DateLocale, TDSI18nInterface } from './tds-i18n.interface';
import * as i0 from "@angular/core";
export declare class TDSI18nService {
    private _locale;
    private _change;
    private dateLocale;
    get localeChange(): Observable<TDSI18nInterface>;
    constructor(locale: TDSI18nInterface, dateLocale: DateLocale);
    translate(path: string, data?: any): string;
    /**
     * Set/Change current locale globally throughout the WHOLE application
     * NOTE: If called at runtime, rendered interface may not change along with the locale change,
     * because this do not trigger another render schedule.
     *
     * @param locale The translating letters
     */
    setLocale(locale: TDSI18nInterface): void;
    getLocale(): TDSI18nInterface;
    getLocaleId(): string;
    setDateLocale(dateLocale: DateLocale): void;
    getDateLocale(): DateLocale;
    /**
     * Get locale data
     * @param path dot paths for finding exist value from locale data, eg. "a.b.c"
     * @param defaultValue default value if the result is not "truthy"
     */
    getLocaleData(path: string, defaultValue?: any): any;
    private _getObjectPath;
    static ɵfac: i0.ɵɵFactoryDeclaration<TDSI18nService, [{ optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<TDSI18nService>;
}
//# sourceMappingURL=tds-i18n.service.d.ts.map