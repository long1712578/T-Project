import { Direction, Directionality } from '@angular/cdk/bidi';
import { BooleanInput, NumberInput } from '@angular/cdk/coercion';
import { Platform } from '@angular/cdk/platform';
import { AfterViewInit, ChangeDetectorRef, ElementRef, EmbeddedViewRef, EventEmitter, OnChanges, OnDestroy, OnInit, Renderer2, SimpleChanges, TemplateRef, ViewContainerRef } from '@angular/core';
import { TDSConfigKey, TDSConfigService, TDSTSType } from 'tds-ui/core/config';
import { TDSResizeService } from 'tds-ui/core/services';
import { TDSI18nService, TDSTextI18nInterface } from 'tds-ui/i18n';
import { TDSSafeAny } from 'tds-ui/shared/utility';
import { TDSTextCopyComponent } from './text-copy.component';
import { TDSTextEditComponent } from './text-edit.component';
import * as i0 from "@angular/core";
export declare class TDSTypographyComponent implements OnInit, AfterViewInit, OnDestroy, OnChanges {
    tdsConfigService: TDSConfigService;
    private host;
    private cdr;
    private viewContainerRef;
    private renderer;
    private platform;
    private i18n;
    private resizeService;
    private directionality;
    readonly _tdsModuleName: TDSConfigKey;
    static ngAcceptInputType_copyable: BooleanInput;
    static ngAcceptInputType_editable: BooleanInput;
    static ngAcceptInputType_disabled: BooleanInput;
    static ngAcceptInputType_expandable: BooleanInput;
    static ngAcceptInputType_ellipsis: BooleanInput;
    static ngAcceptInputType_ellipsisRows: NumberInput;
    copyable: boolean;
    editable: boolean;
    disabled: boolean;
    expandable: boolean;
    ellipsis: boolean;
    copyTooltips?: [TDSTSType, TDSTSType] | null;
    copyIcons: [TDSTSType, TDSTSType];
    editTooltip?: null | TDSTSType;
    editIcon: TDSTSType;
    content?: string;
    ellipsisRows: number;
    color: 'secondary' | 'warning' | 'error' | 'success' | undefined;
    copyText: string | undefined;
    suffix: string | undefined;
    contentCollapse: string | TemplateRef<TDSSafeAny>;
    readonly contentChange: EventEmitter<string>;
    readonly copy: EventEmitter<string>;
    readonly expandChange: EventEmitter<void>;
    readonly ellipsisChange: EventEmitter<boolean>;
    textEditRef?: TDSTextEditComponent;
    textCopyRef?: TDSTextCopyComponent;
    ellipsisContainer?: ElementRef<HTMLSpanElement>;
    expandableBtn?: ElementRef<HTMLSpanElement>;
    contentTemplate?: TemplateRef<{
        content: string;
    }>;
    locale: TDSTextI18nInterface;
    document: Document;
    expandableBtnElementCache: HTMLElement | null;
    editing: boolean;
    ellipsisText: string | undefined;
    cssEllipsis: boolean;
    isEllipsis: boolean;
    expanded: boolean;
    ellipsisStr: string;
    dir: Direction;
    get hasEllipsisObservers(): boolean;
    get canCssEllipsis(): boolean;
    get hasOperationsWithEllipsis(): boolean;
    private viewInit;
    private rfaId;
    private destroy$;
    private windowResizeSubscription;
    get onCopyText(): string;
    constructor(tdsConfigService: TDSConfigService, host: ElementRef<HTMLElement>, cdr: ChangeDetectorRef, viewContainerRef: ViewContainerRef, renderer: Renderer2, platform: Platform, i18n: TDSI18nService, document: TDSSafeAny, resizeService: TDSResizeService, directionality: Directionality);
    onTextCopy(text: string): void;
    onStartEditing(): void;
    onEndEditing(text: string): void;
    onExpand(event: MouseEvent | null): void;
    canUseCSSEllipsis(): boolean;
    renderOnNextFrame(): void;
    getOriginContentViewRef(): {
        viewRef: EmbeddedViewRef<{
            content: string;
        }>;
        removeView(): void;
    };
    syncEllipsis(): void;
    private getExpandableBtnElement;
    private renderAndSubscribeWindowResize;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    onCollapse(event: MouseEvent | null): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<TDSTypographyComponent, [null, null, null, null, null, null, null, null, null, { optional: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TDSTypographyComponent, "  tds-typography,  [tds-typography],  p[tds-paragraph],  span[tds-text],  h1[tds-title], h2[tds-title], h3[tds-title], h4[tds-title]  ", ["tdsTypography"], { "copyable": "copyable"; "editable": "editable"; "disabled": "disabled"; "expandable": "expandable"; "ellipsis": "ellipsis"; "copyTooltips": "copyTooltips"; "copyIcons": "copyIcons"; "editTooltip": "editTooltip"; "editIcon": "editIcon"; "content": "content"; "ellipsisRows": "ellipsisRows"; "color": "color"; "copyText": "copyText"; "suffix": "suffix"; "contentCollapse": "contentCollapse"; }, { "contentChange": "contentChange"; "copy": "copy"; "expandChange": "expandChange"; "ellipsisChange": "ellipsisChange"; }, never, ["*"]>;
}
//# sourceMappingURL=typography.component.d.ts.map