import { FocusTrap, FocusTrapFactory } from '@angular/cdk/a11y';
import { Direction, Directionality } from '@angular/cdk/bidi';
import { BooleanInput } from '@angular/cdk/coercion';
import { Overlay, OverlayKeyboardDispatcher, OverlayRef } from '@angular/cdk/overlay';
import { CdkPortalOutlet, TemplatePortal } from '@angular/cdk/portal';
import { AfterContentInit, AfterViewInit, ChangeDetectorRef, EventEmitter, Injector, OnChanges, OnDestroy, OnInit, Renderer2, SimpleChanges, TemplateRef, Type, ViewContainerRef } from '@angular/core';
import { Observable, Subject } from 'rxjs';
import { NgStyleInterface, TDSDrawerSize } from 'tds-ui/core/config';
import { TDSSafeAny } from 'tds-ui/shared/utility';
import { TDSDrawerOptionsOfComponent, TDSDrawerPlacement } from './drawer-options';
import { TDSDrawerRef } from './drawer-ref';
import * as i0 from "@angular/core";
export declare const DRAWER_ANIMATE_DURATION = 300;
export declare class TDSDrawerComponent<T = TDSSafeAny, R = TDSSafeAny, D = TDSSafeAny> extends TDSDrawerRef<T, R> implements OnInit, OnDestroy, AfterViewInit, OnChanges, AfterContentInit, TDSDrawerOptionsOfComponent {
    private cdr;
    private document;
    private renderer;
    private overlay;
    private injector;
    private changeDetectorRef;
    private focusTrapFactory;
    private viewContainerRef;
    private overlayKeyboardDispatcher;
    private directionality;
    static ngAcceptInputType_closable: BooleanInput;
    static ngAcceptInputType_maskClosable: BooleanInput;
    static ngAcceptInputType_mask: BooleanInput;
    static ngAcceptInputType_noAnimation: BooleanInput;
    static ngAcceptInputType_keyboard: BooleanInput;
    static ngAcceptInputType_closeOnNavigation: BooleanInput;
    size: TDSDrawerSize;
    content: TemplateRef<{
        $implicit: D;
        drawerRef: TDSDrawerRef<R>;
    }> | Type<T>;
    closeIcon: string | TemplateRef<void>;
    closable: boolean;
    maskClosable: boolean;
    mask: boolean;
    closeOnNavigation: boolean;
    noAnimation: boolean;
    keyboard: boolean;
    title?: string | TemplateRef<{}>;
    footer?: string | TemplateRef<{}>;
    placement: TDSDrawerPlacement;
    maskStyle: NgStyleInterface;
    bodyStyle: NgStyleInterface;
    wrapClassName?: string;
    zIndex: number;
    offsetX: number;
    offsetY: number;
    private componentInstance;
    private _width;
    private _height;
    set width(val: number | string | null);
    set height(val: number | string | null);
    get width(): number | string | null;
    get height(): number | string | null;
    getWidthBySize(): number | string | null;
    getHeightBySize(): string | number | null;
    set visible(value: boolean);
    get visible(): boolean;
    readonly onViewInit: EventEmitter<void>;
    readonly onClose: EventEmitter<MouseEvent>;
    readonly visibleChange: EventEmitter<boolean>;
    drawerTemplate: TemplateRef<void>;
    bodyPortalOutlet?: CdkPortalOutlet;
    contentFromContentChild?: TemplateRef<any>;
    private destroy$;
    previouslyFocusedElement?: HTMLElement;
    placementChanging: boolean;
    placementChangeTimeoutId: any;
    contentParams?: D;
    overlayRef?: OverlayRef | null;
    portal?: TemplatePortal;
    focusTrap?: FocusTrap;
    isOpen: boolean;
    inAnimation: boolean;
    templateContext: {
        $implicit: D | undefined;
        drawerRef: TDSDrawerRef<T, R>;
    };
    get offsetTransform(): string | null;
    get transform(): string | null;
    get isLeftOrRight(): boolean;
    onAfterOpen: Subject<void>;
    onAfterClose: Subject<R>;
    get afterOpen(): Observable<void>;
    get afterClose(): Observable<R>;
    isTemplateRef(value: {}): boolean;
    direction?: Direction;
    dir: Direction;
    constructor(cdr: ChangeDetectorRef, document: any, renderer: Renderer2, overlay: Overlay, injector: Injector, changeDetectorRef: ChangeDetectorRef, focusTrapFactory: FocusTrapFactory, viewContainerRef: ViewContainerRef, overlayKeyboardDispatcher: OverlayKeyboardDispatcher, directionality: Directionality);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngAfterContentInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    private getAnimationDuration;
    private triggerPlacementChangeCycleOnce;
    close(result?: R): void;
    open(): void;
    getContentComponent(): T | null;
    closeClick(): void;
    maskClick(): void;
    private attachBodyContent;
    private attachOverlay;
    private disposeOverlay;
    private getOverlayConfig;
    private updateOverlayStyle;
    private updateBodyOverflow;
    savePreviouslyFocusedElement(): void;
    private trapFocus;
    private restoreFocus;
    static ɵfac: i0.ɵɵFactoryDeclaration<TDSDrawerComponent<any, any, any>, [null, { optional: true; }, null, null, null, null, null, null, null, { optional: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TDSDrawerComponent<any, any, any>, "tds-drawer", ["tdsDrawer"], { "size": "size"; "content": "content"; "closeIcon": "closeIcon"; "closable": "closable"; "maskClosable": "maskClosable"; "mask": "mask"; "closeOnNavigation": "closeOnNavigation"; "noAnimation": "noAnimation"; "keyboard": "keyboard"; "title": "title"; "footer": "footer"; "placement": "placement"; "maskStyle": "maskStyle"; "bodyStyle": "bodyStyle"; "wrapClassName": "wrapClassName"; "zIndex": "zIndex"; "offsetX": "offsetX"; "offsetY": "offsetY"; "width": "width"; "height": "height"; "visible": "visible"; }, { "onViewInit": "onViewInit"; "onClose": "onClose"; "visibleChange": "visibleChange"; }, ["contentFromContentChild"], ["*"]>;
}
//# sourceMappingURL=drawer.component.d.ts.map