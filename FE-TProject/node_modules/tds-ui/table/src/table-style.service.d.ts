import { TemplateRef } from '@angular/core';
import { ReplaySubject } from 'rxjs';
import { TDSSafeAny } from 'tds-ui/shared/utility';
import { TDSThMeasureDirective } from './cell/th-measure.directive';
import * as i0 from "@angular/core";
export declare class TDSTableStyleService {
    theadTemplate$: ReplaySubject<TemplateRef<any>>;
    hasFixLeft$: ReplaySubject<boolean>;
    hasFixRight$: ReplaySubject<boolean>;
    hostWidth$: ReplaySubject<number>;
    columnCount$: ReplaySubject<number>;
    showEmpty$: ReplaySubject<boolean>;
    noResult$: ReplaySubject<string | TemplateRef<any> | undefined>;
    private listOfThWidthConfigPx$;
    private tableWidthConfigPx$;
    manualWidthConfigPx$: import("rxjs").Observable<readonly (string | null)[]>;
    private listOfAutoWidthPx$;
    listOfListOfThWidthPx$: import("rxjs").Observable<readonly (string | null)[]>;
    listOfMeasureColumn$: ReplaySubject<readonly string[]>;
    listOfListOfThWidth$: import("rxjs").Observable<number[]>;
    enableAutoMeasure$: ReplaySubject<boolean>;
    setTheadTemplate(template: TemplateRef<TDSSafeAny>): void;
    setHasFixLeft(hasFixLeft: boolean): void;
    setHasFixRight(hasFixRight: boolean): void;
    setTableWidthConfig(widthConfig: ReadonlyArray<string | null>): void;
    setListOfTh(listOfTh: readonly TDSThMeasureDirective[]): void;
    setListOfMeasureColumn(listOfTh: readonly TDSThMeasureDirective[]): void;
    setListOfAutoWidth(listOfAutoWidth: number[]): void;
    setShowEmpty(showEmpty: boolean): void;
    setNoResult(noResult: string | TemplateRef<TDSSafeAny> | undefined): void;
    setScroll(scrollX: string | null, scrollY: string | null): void;
    constructor();
    static ɵfac: i0.ɵɵFactoryDeclaration<TDSTableStyleService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<TDSTableStyleService>;
}
//# sourceMappingURL=table-style.service.d.ts.map