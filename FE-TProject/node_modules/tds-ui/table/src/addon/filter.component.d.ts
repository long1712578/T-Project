import { ChangeDetectorRef, ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges, TemplateRef } from '@angular/core';
import { TDSI18nService, TDSTableI18nInterface } from 'tds-ui/i18n';
import { TDSSafeAny } from 'tds-ui/shared/utility';
import { TDSTableFilterList } from '../table.types';
import * as i0 from "@angular/core";
interface TDSThItemInterface {
    text: string;
    value: TDSSafeAny;
    checked: boolean;
}
export declare class TDSTableFilterComponent implements OnChanges, OnDestroy, OnInit {
    private cdr;
    private i18n;
    private elementRef;
    contentTemplate: TemplateRef<TDSSafeAny> | null;
    customFilter: boolean;
    extraTemplate: TemplateRef<TDSSafeAny> | null;
    filterMultiple: boolean;
    listOfFilter: TDSTableFilterList;
    readonly filterChange: EventEmitter<any>;
    private destroy$;
    locale: TDSTableI18nInterface;
    isChecked: boolean;
    isVisible: boolean;
    listOfParsedFilter: TDSThItemInterface[];
    listOfChecked: TDSSafeAny[];
    trackByValue(_: number, item: TDSThItemInterface): TDSSafeAny;
    check(filter: TDSThItemInterface): void;
    confirm(): void;
    reset(): void;
    onVisibleChange(value: boolean): void;
    emitFilterData(): void;
    parseListOfFilter(listOfFilter: TDSTableFilterList, reset?: boolean): TDSThItemInterface[];
    getCheckedStatus(listOfParsedFilter: TDSThItemInterface[]): boolean;
    constructor(cdr: ChangeDetectorRef, i18n: TDSI18nService, elementRef: ElementRef);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<TDSTableFilterComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TDSTableFilterComponent, "tds-table-filter", never, { "contentTemplate": "contentTemplate"; "customFilter": "customFilter"; "extraTemplate": "extraTemplate"; "filterMultiple": "filterMultiple"; "listOfFilter": "listOfFilter"; }, { "filterChange": "filterChange"; }, never, never>;
}
export {};
//# sourceMappingURL=filter.component.d.ts.map