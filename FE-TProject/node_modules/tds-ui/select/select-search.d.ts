import { FocusMonitor } from '@angular/cdk/a11y';
import { AfterViewInit, ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, Renderer2, SimpleChanges } from '@angular/core';
import * as i0 from "@angular/core";
export declare class TDSSelectSearchComponent implements AfterViewInit, OnChanges, OnInit, OnDestroy {
    private elementRef;
    private renderer;
    private focusMonitor;
    id: string | null;
    disabled: boolean;
    showInput: boolean;
    focusTrigger: boolean;
    value: string;
    autofocus: boolean;
    readonly valueChange: EventEmitter<string>;
    readonly isComposingChange: EventEmitter<boolean>;
    inputElement: ElementRef;
    private _destroy;
    setCompositionState(isComposing: boolean): void;
    onValueChange(value: string): void;
    clearInputValue(): void;
    focus(): void;
    blur(): void;
    constructor(elementRef: ElementRef, renderer: Renderer2, focusMonitor: FocusMonitor);
    ngOnChanges(changes: SimpleChanges): void;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<TDSSelectSearchComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TDSSelectSearchComponent, "tds-select-search", never, { "id": "id"; "disabled": "disabled"; "showInput": "showInput"; "focusTrigger": "focusTrigger"; "value": "value"; "autofocus": "autofocus"; }, { "valueChange": "valueChange"; "isComposingChange": "isComposingChange"; }, never, never>;
}
//# sourceMappingURL=select-search.d.ts.map