import { FocusMonitor } from "@angular/cdk/a11y";
import { BooleanInput } from "@angular/cdk/coercion";
import { CdkConnectedOverlay, CdkOverlayOrigin, ConnectedOverlayPositionChange } from "@angular/cdk/overlay";
import { Platform } from "@angular/cdk/platform";
import { CdkVirtualScrollViewport } from "@angular/cdk/scrolling";
import { AfterViewInit, ChangeDetectorRef, DoCheck, ElementRef, EventEmitter, NgZone, OnDestroy, OnInit, QueryList, SimpleChanges, TemplateRef } from "@angular/core";
import { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from "@angular/forms";
import { Subject } from "rxjs";
import { ButtonSize, NgClassType } from "tds-ui/core/config";
import { TDSOptgroup, TDSOption } from "tds-ui/core/option";
import { TDSFormField, TDSFormFieldControl } from "tds-ui/form-field";
import { TDSSafeAny } from "tds-ui/shared/utility";
import { TDSSelectSearchComponent } from "./select-search";
import { TDSFilterOptionType, TDSSelectItemInterface, TDSSelectModeType } from "./select.type";
import * as i0 from "@angular/core";
export declare const TDSDefaultFilterOption: TDSFilterOptionType;
export declare class TDSSelect implements ControlValueAccessor, TDSFormFieldControl<any>, OnDestroy, DoCheck, OnInit, AfterViewInit {
    private _focusMonitor;
    private _elementRef;
    private host;
    _formField: TDSFormField;
    ngControl: NgControl;
    private cdr;
    private platform;
    _parentForm: NgForm;
    _parentFormGroup: FormGroupDirective;
    private ngZone;
    private _destroy;
    stateChanges: Subject<void>;
    private listOfValue$;
    private listOfTemplateItem$;
    static nextId: number;
    focused: boolean;
    get empty(): boolean;
    listOfTopItem: TDSSelectItemInterface[];
    activatedValue: any | null;
    listOfValue: Array<any>;
    inputValue: string | null;
    triggerWidth: number | null;
    dropDownPosition: 'top' | 'center' | 'bottom';
    isReactiveDriven: boolean;
    private listOfTagAndTemplateItem;
    listOfContainerItem: TDSSelectItemInterface[];
    private scrolledIndex;
    open: boolean;
    autofocus: boolean;
    showSearch: boolean;
    allowClear: boolean;
    allowSearch: boolean;
    userAriaDescribedBy: string;
    id: string;
    backdrop: boolean;
    dropdownMatchSelectWidth: boolean;
    dropdownClassName: string | null;
    mode: TDSSelectModeType;
    compareWith: (o1: any, o2: any) => boolean;
    serverSearch: boolean;
    filterOption: TDSFilterOptionType;
    optionHeightPx: number;
    optionOverflowSize: number;
    maxMultipleCount: number;
    autoClearSearchValue: boolean;
    maxTagCount: number;
    tokenSeparators: string[];
    maxTagPlaceholder: TemplateRef<{
        $implicit: any[];
    }> | null;
    autoClose: boolean;
    get size(): ButtonSize;
    set size(value: ButtonSize);
    private _size;
    get placeholder(): string;
    set placeholder(value: string);
    private _placeholder;
    get required(): boolean;
    set required(value: boolean);
    private _required;
    get disabled(): boolean;
    set disabled(value: boolean);
    private _disabled;
    value: TDSSafeAny | Array<TDSSafeAny>;
    errorState: boolean;
    updateErrorState(): void;
    private _isErrorState;
    get textField(): string;
    set textField(val: string);
    private _textField;
    get valueField(): string;
    set valueField(val: string);
    private _valueField;
    get disabledField(): string;
    set disabledField(val: string);
    private _disabledField;
    get groupField(): string;
    set groupField(val: string);
    private _groupField;
    get data(): Array<TDSSafeAny>;
    set data(val: Array<TDSSafeAny> | TDSSafeAny);
    private _data;
    loading: boolean;
    hideSelected: boolean;
    tdsCssOption: NgClassType | null;
    isShowPlaceholder: boolean;
    isShowSingleLabel: boolean;
    isComposing: boolean;
    border: boolean;
    valuePrimitive: boolean;
    classIcon: string | null;
    parentIsFormField: boolean;
    readonly onSearch: EventEmitter<string>;
    readonly scrollToBottom: EventEmitter<void>;
    readonly openChange: EventEmitter<boolean>;
    readonly blurChange: EventEmitter<void>;
    readonly focusChange: EventEmitter<void>;
    readonly selectChangeEvent: EventEmitter<any>;
    cdkVirtualScrollViewport: CdkVirtualScrollViewport;
    cdkConnectedOverlay: CdkConnectedOverlay;
    _connectionSelectOverlay: ElementRef;
    tdsSelectSearch: TDSSelectSearchComponent;
    listOfOptionComponent: QueryList<TDSOption>;
    listOfOptionGroupComponent: QueryList<TDSOptgroup>;
    optionTemplate: TemplateRef<any>;
    optgroupTemplate: TemplateRef<any>;
    labelTemplate: TemplateRef<any>;
    multiLabelTemplate: TemplateRef<any>;
    headerTemplate: TemplateRef<any>;
    footerTemplate: TemplateRef<any>;
    notFoundTemplate: TemplateRef<any>;
    typeToSearchTemplate: TemplateRef<any>;
    loadingTextTemplate: TemplateRef<any>;
    tagTemplate: TemplateRef<any>;
    loadingSpinnerTemplate: TemplateRef<any>;
    timerRightIcon: TDSSafeAny;
    timerScrollActive: TDSSafeAny;
    paddingRightIcon: number;
    _rigthContainer: ElementRef;
    constructor(_focusMonitor: FocusMonitor, _elementRef: ElementRef, host: ElementRef<HTMLElement>, _formField: TDSFormField, ngControl: NgControl, cdr: ChangeDetectorRef, platform: Platform, _parentForm: NgForm, _parentFormGroup: FormGroupDirective, ngZone: NgZone);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterContentInit(): void;
    updateListOfValue(listOfValue: Array<any>): void;
    onClearSelection(e: MouseEvent): void;
    updateListOfContainerItem(): void;
    generateTagItem(value: string): TDSSelectItemInterface;
    generateDataItem(item: TDSSafeAny): TDSSelectItemInterface;
    onChange: (_: any) => void;
    onTouched: () => void;
    writeValue(modelValue: any | Array<any>): void;
    covertModelToList(model: Array<any> | any, mode: TDSSelectModeType): Array<any>;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    setDescribedByIds(ids: string[]): void;
    onContainerClick(e: MouseEvent): void;
    updateTemplateVariable(): void;
    isComposingChange(isComposing: boolean): void;
    onInputValueChange(value: string): void;
    onItemClick(value: any): void;
    onItemHover(value: TDSSafeAny): void;
    onItemDelete(e: MouseEvent, item: TDSSelectItemInterface): void;
    focus(): void;
    blur(): void;
    onOverlayKeyDown(e: KeyboardEvent): void;
    onClickOutside(event: MouseEvent): void;
    setOpenState(value: boolean): void;
    setFocused(value: boolean): void;
    onOpenChange(): void;
    clearInput(): void;
    onPositionChange(position: ConnectedOverlayPositionChange): void;
    showClear(): number | false;
    get overlayOrigin(): CdkOverlayOrigin;
    get originElement(): ElementRef<any>;
    get showPlaceholder(): boolean;
    get isSearchDefault(): boolean;
    updateCdkConnectedOverlayStatus(): void;
    updateCdkConnectedOverlayPositions(): void;
    trackValue(_index: number, option: TDSSelectItemInterface): any;
    onScrolledIndexChange(index: number): void;
    scrollToActivatedValue(): void;
    ngDoCheck(): void;
    tokenSeparate(inputValue: string, tokenSeparators: string[]): void;
    onTokenSeparate(listOfLabel: string[]): void;
    onKeyDown(e: KeyboardEvent): void;
    updatePaddingRightIcon(): void;
    private scrollActive;
    static ngAcceptInputType_open: BooleanInput;
    static ngAcceptInputType_allowClear: BooleanInput;
    static ngAcceptInputType_showSearch: BooleanInput;
    static ngAcceptInputType_loading: BooleanInput;
    static ngAcceptInputType_autoFocus: BooleanInput;
    static ngAcceptInputType_autoClearSearchValue: BooleanInput;
    static ɵfac: i0.ɵɵFactoryDeclaration<TDSSelect, [null, null, null, { optional: true; host: true; }, { optional: true; self: true; }, null, null, { optional: true; }, { optional: true; }, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TDSSelect, "tds-select", never, { "open": "open"; "autofocus": "autofocus"; "allowClear": "allowClear"; "allowSearch": "allowSearch"; "userAriaDescribedBy": "aria-describedby"; "id": "id"; "backdrop": "backdrop"; "dropdownMatchSelectWidth": "dropdownMatchSelectWidth"; "dropdownClassName": "dropdownClassName"; "mode": "mode"; "compareWith": "compareWith"; "serverSearch": "serverSearch"; "filterOption": "filterOption"; "optionOverflowSize": "optionOverflowSize"; "maxMultipleCount": "maxMultipleCount"; "autoClearSearchValue": "autoClearSearchValue"; "maxTagCount": "maxTagCount"; "tokenSeparators": "tokenSeparators"; "maxTagPlaceholder": "maxTagPlaceholder"; "autoClose": "autoClose"; "size": "size"; "placeholder": "placeholder"; "required": "required"; "disabled": "disabled"; "textField": "textField"; "valueField": "valueField"; "disabledField": "disabledField"; "groupField": "groupField"; "data": "data"; "loading": "loading"; "hideSelected": "hideSelected"; "tdsCssOption": "tdsCssOption"; "border": "border"; "valuePrimitive": "valuePrimitive"; "classIcon": "classIcon"; }, { "onSearch": "onSearch"; "scrollToBottom": "scrollToBottom"; "openChange": "openChange"; "blurChange": "blurChange"; "focusChange": "focusChange"; "selectChangeEvent": "selectChange"; }, ["optionTemplate", "optgroupTemplate", "labelTemplate", "multiLabelTemplate", "headerTemplate", "footerTemplate", "notFoundTemplate", "typeToSearchTemplate", "loadingTextTemplate", "tagTemplate", "loadingSpinnerTemplate", "listOfOptionComponent", "listOfOptionGroupComponent"], never>;
}
//# sourceMappingURL=select.d.ts.map