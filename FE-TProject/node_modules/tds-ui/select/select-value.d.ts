import { ElementRef, EventEmitter, OnChanges, SimpleChanges, TemplateRef } from '@angular/core';
import { TDSSelectSearchComponent } from './select-search';
import { TDSSelectItemInterface, TDSSelectModeType, TDSSelectTopControlItemType } from './select.type';
import * as i0 from "@angular/core";
export declare class TDSSelectValueControlComponent implements OnChanges {
    private elementRef;
    id: string | null;
    showSearch: boolean;
    placeHolder: string | TemplateRef<any> | null;
    open: boolean;
    maxTagCount: number;
    autofocus: boolean;
    disabled: boolean;
    mode: TDSSelectModeType;
    customTemplate: TemplateRef<{
        $implicit: TDSSelectItemInterface;
    }> | null;
    maxTagPlaceholder: TemplateRef<{
        $implicit: any[];
    }> | null;
    removeIcon: TemplateRef<any> | null;
    listOfTopItem: TDSSelectItemInterface[];
    tokenSeparators: string[];
    readonly tokenize: EventEmitter<string[]>;
    readonly inputValueChange: EventEmitter<string>;
    readonly deleteItem: EventEmitter<TDSSelectItemInterface>;
    tdsSelectSearchComponent: TDSSelectSearchComponent;
    listOfSlicedItem: TDSSelectTopControlItemType[];
    isShowPlaceholder: boolean;
    isShowSingleLabel: boolean;
    isComposing: boolean;
    inputValue: string | null;
    onHostKeydown(e: KeyboardEvent): void;
    updateTemplateVariable(): void;
    isComposingChange(isComposing: boolean): void;
    onInputValueChange(value: string): void;
    tokenSeparate(inputValue: string, tokenSeparators: string[]): void;
    clearInputValue(): void;
    focus(): void;
    blur(): void;
    trackValue(_index: number, option: TDSSelectTopControlItemType): any;
    onDeleteItem(item: TDSSelectItemInterface): void;
    constructor(elementRef: ElementRef);
    ngOnChanges(changes: SimpleChanges): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<TDSSelectValueControlComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TDSSelectValueControlComponent, "tds-select-value-control", ["tdsSelectValueControl"], { "id": "id"; "showSearch": "showSearch"; "placeHolder": "placeHolder"; "open": "open"; "maxTagCount": "maxTagCount"; "autofocus": "autofocus"; "disabled": "disabled"; "mode": "mode"; "customTemplate": "customTemplate"; "maxTagPlaceholder": "maxTagPlaceholder"; "removeIcon": "removeIcon"; "listOfTopItem": "listOfTopItem"; "tokenSeparators": "tokenSeparators"; }, { "tokenize": "tokenize"; "inputValueChange": "inputValueChange"; "deleteItem": "deleteItem"; }, never, never>;
}
//# sourceMappingURL=select-value.d.ts.map